!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=83)}([function(e,t,n){e.exports=n(72)()},function(e,t,n){"use strict";e.exports=n(82)},function(e,t,n){"use strict";e.exports=function(){}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o,i,a,u){if(!e){var l;if(void 0===t)l=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var s=[n,r,o,i,a,u],c=0;(l=new Error(t.replace(/%s/g,function(){return s[c++]}))).name="Invariant Violation"}throw l.framesToPop=1,l}}},function(e,t,n){"use strict";var r=n(25),o=n(57),i=Object.prototype.toString;function a(e){return"[object Array]"===i.call(e)}function u(e){return null!==e&&"object"==typeof e}function l(e){return"[object Function]"===i.call(e)}function s(e,t){if(null!==e&&void 0!==e)if("object"!=typeof e&&(e=[e]),a(e))for(var n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.call(null,e[o],o,e)}e.exports={isArray:a,isArrayBuffer:function(e){return"[object ArrayBuffer]"===i.call(e)},isBuffer:o,isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:u,isUndefined:function(e){return void 0===e},isDate:function(e){return"[object Date]"===i.call(e)},isFile:function(e){return"[object File]"===i.call(e)},isBlob:function(e){return"[object Blob]"===i.call(e)},isFunction:l,isStream:function(e){return u(e)&&l(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product)&&"undefined"!=typeof window&&"undefined"!=typeof document},forEach:s,merge:function e(){var t={};function n(n,r){"object"==typeof t[r]&&"object"==typeof n?t[r]=e(t[r],n):t[r]=n}for(var r=0,o=arguments.length;r<o;r++)s(arguments[r],n);return t},extend:function(e,t,n){return s(t,function(t,o){e[o]=n&&"function"==typeof t?r(t,n):t}),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();var o=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e)}return r(e,null,[{key:"generateRandomString",value:function(e){for(var t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",n="",r=0;r<e;r++)n+=t.charAt(Math.floor(Math.random()*t.length));return n}},{key:"merge",value:function(){var t=arguments,n={};if(!arguments||!arguments.length)return n;for(var r=function(r){var o=t[r];if(!o)return"continue";Object.keys(o).forEach(function(t){e.isObject(o[t])&&n[t]&&e.isObject(n[t])?n[t]=e.merge(n[t],o[t]):n[t]=o[t]})},o=0;o<arguments.length;o++)r(o);return n}},{key:"isObject",value:function(e){return!!e&&"[object Object]"===Object.prototype.toString.call(e)}},{key:"isNill",value:function(e){return null==e||void 0==e}},{key:"isEmpty",value:function(t){return null==t||void 0==t||(Array.isArray(t)||"string"==typeof t?!t.length:e.isObject(t)?!Object.keys(t).length:void 0)}}]),e}();t.default=o},function(e,t,n){"use strict";t.__esModule=!0;t.addLeadingSlash=function(e){return"/"===e.charAt(0)?e:"/"+e},t.stripLeadingSlash=function(e){return"/"===e.charAt(0)?e.substr(1):e};var r=t.hasBasename=function(e,t){return new RegExp("^"+t+"(\\/|\\?|#|$)","i").test(e)};t.stripBasename=function(e,t){return r(e,t)?e.substr(t.length):e},t.stripTrailingSlash=function(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e},t.parsePath=function(e){var t=e||"/",n="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var i=t.indexOf("?");return-1!==i&&(n=t.substr(i),t=t.substr(0,i)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}},t.createPath=function(e){var t=e.pathname,n=e.search,r=e.hash,o=t||"/";return n&&"?"!==n&&(o+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o}},function(e,t,n){(function(e){!function(n,r){"use strict";var o={};n.PubSub=o;var i=n.define;!function(e){var t={},n=-1;function r(e){var t;for(t in e)if(e.hasOwnProperty(t))return!0;return!1}function o(e,t,n){try{e(t,n)}catch(e){setTimeout(function(e){return function(){throw e}}(e),0)}}function i(e,t,n){e(t,n)}function a(e,n,r,a){var u,l=t[n],s=a?i:o;if(t.hasOwnProperty(n))for(u in l)l.hasOwnProperty(u)&&s(l[u],e,r)}function u(e,n,o,i){var u=function(e,t,n){return function(){var r=String(e),o=r.lastIndexOf(".");for(a(e,e,t,n);-1!==o;)r=r.substr(0,o),o=r.lastIndexOf("."),a(e,r,t,n)}}(e,n,i),l=function(e){var n=String(e),o=Boolean(t.hasOwnProperty(n)&&r(t[n])),i=n.lastIndexOf(".");for(;!o&&-1!==i;)n=n.substr(0,i),i=n.lastIndexOf("."),o=Boolean(t.hasOwnProperty(n)&&r(t[n]));return o}(e);return!!l&&(!0===o?u():setTimeout(u,0),!0)}e.publish=function(t,n){return u(t,n,!1,e.immediateExceptions)},e.publishSync=function(t,n){return u(t,n,!0,e.immediateExceptions)},e.subscribe=function(e,r){if("function"!=typeof r)return!1;t.hasOwnProperty(e)||(t[e]={});var o="uid_"+String(++n);return t[e][o]=r,o},e.subscribeOnce=function(t,n){var r=e.subscribe(t,function(){e.unsubscribe(r),n.apply(this,arguments)});return e},e.clearAllSubscriptions=function(){t={}},e.clearSubscriptions=function(e){var n;for(n in t)t.hasOwnProperty(n)&&0===n.indexOf(e)&&delete t[n]},e.unsubscribe=function(n){var r,o,i,a="string"==typeof n&&(t.hasOwnProperty(n)||function(e){var n;for(n in t)if(t.hasOwnProperty(n)&&0===n.indexOf(e))return!0;return!1}(n)),u=!a&&"string"==typeof n,l="function"==typeof n,s=!1;if(!a){for(r in t)if(t.hasOwnProperty(r)){if(o=t[r],u&&o[n]){delete o[n],s=n;break}if(l)for(i in o)o.hasOwnProperty(i)&&o[i]===n&&(delete o[i],s=!0)}return s}e.clearSubscriptions(n)}}(o),"function"==typeof i&&i.amd?i(function(){return o}):(void 0!==e&&e.exports&&(t=e.exports=o),t.PubSub=o,e.exports=t=o)}("object"==typeof window&&window||this)}).call(this,n(66)(e))},function(e,t,n){"use strict";n.r(t);var r=n(2),o=n.n(r),i=n(1),a=n.n(i),u=n(0),l=n.n(u),s=n(34),c=n.n(s),f=n(3),d=n.n(f),p=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function h(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var m=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=h(this,e.call.apply(e,[this].concat(i))),r.state={match:r.computeMatch(r.props.history.location.pathname)},h(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{router:p({},this.context.router,{history:this.props.history,route:{location:this.props.history.location,match:this.state.match}})}},t.prototype.computeMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}},t.prototype.componentWillMount=function(){var e=this,t=this.props,n=t.children,r=t.history;d()(null==n||1===a.a.Children.count(n),"A <Router> may have only one child element"),this.unlisten=r.listen(function(){e.setState({match:e.computeMatch(r.location.pathname)})})},t.prototype.componentWillReceiveProps=function(e){o()(this.props.history===e.history,"You cannot change <Router history>")},t.prototype.componentWillUnmount=function(){this.unlisten()},t.prototype.render=function(){var e=this.props.children;return e?a.a.Children.only(e):null},t}(a.a.Component);m.propTypes={history:l.a.object.isRequired,children:l.a.node},m.contextTypes={router:l.a.object},m.childContextTypes={router:l.a.object.isRequired};var g=m,y=g;function v(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var b=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=v(this,e.call.apply(e,[this].concat(i))),r.history=c()(r.props),v(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){o()(!this.props.history,"<BrowserRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { BrowserRouter as Router }`.")},t.prototype.render=function(){return a.a.createElement(y,{history:this.history,children:this.props.children})},t}(a.a.Component);b.propTypes={basename:l.a.string,forceRefresh:l.a.bool,getUserConfirmation:l.a.func,keyLength:l.a.number,children:l.a.node};var E=b,C=n(33),S=n.n(C);function w(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var _=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=w(this,e.call.apply(e,[this].concat(i))),r.history=S()(r.props),w(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){o()(!this.props.history,"<HashRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { HashRouter as Router }`.")},t.prototype.render=function(){return a.a.createElement(y,{history:this.history,children:this.props.children})},t}(a.a.Component);_.propTypes={basename:l.a.string,getUserConfirmation:l.a.func,hashType:l.a.oneOf(["hashbang","noslash","slash"]),children:l.a.node};var x=_,O=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function R(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var T=function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)},k=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=R(this,e.call.apply(e,[this].concat(i))),r.handleClick=function(e){if(r.props.onClick&&r.props.onClick(e),!e.defaultPrevented&&0===e.button&&!r.props.target&&!T(e)){e.preventDefault();var t=r.context.router.history,n=r.props,o=n.replace,i=n.to;o?t.replace(i):t.push(i)}},R(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.render=function(){var e=this.props,t=(e.replace,e.to),n=e.innerRef,r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["replace","to","innerRef"]);d()(this.context.router,"You should not use <Link> outside a <Router>");var o=this.context.router.history.createHref("string"==typeof t?{pathname:t}:t);return a.a.createElement("a",O({},r,{onClick:this.handleClick,href:o,ref:n}))},t}(a.a.Component);k.propTypes={onClick:l.a.func,target:l.a.string,replace:l.a.bool,to:l.a.oneOfType([l.a.string,l.a.object]).isRequired,innerRef:l.a.oneOfType([l.a.string,l.a.func])},k.defaultProps={replace:!1},k.contextTypes={router:l.a.shape({history:l.a.shape({push:l.a.func.isRequired,replace:l.a.func.isRequired,createHref:l.a.func.isRequired}).isRequired}).isRequired};var N=k,P=n(32),U=n.n(P);function D(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var A=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=D(this,e.call.apply(e,[this].concat(i))),r.history=U()(r.props),D(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){o()(!this.props.history,"<MemoryRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { MemoryRouter as Router }`.")},t.prototype.render=function(){return a.a.createElement(g,{history:this.history,children:this.props.children})},t}(a.a.Component);A.propTypes={initialEntries:l.a.array,initialIndex:l.a.number,getUserConfirmation:l.a.func,keyLength:l.a.number,children:l.a.node};var I=A,M=n(31),j=n.n(M),L={},F=0,H=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};"string"==typeof t&&(t={path:t});var n=t,r=n.path,o=void 0===r?"/":r,i=n.exact,a=void 0!==i&&i,u=n.strict,l=void 0!==u&&u,s=n.sensitive,c=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=L[n]||(L[n]={});if(r[e])return r[e];var o=[],i={re:j()(e,o,t),keys:o};return F<1e4&&(r[e]=i,F++),i}(o,{end:a,strict:l,sensitive:void 0!==s&&s}),f=c.re,d=c.keys,p=f.exec(e);if(!p)return null;var h=p[0],m=p.slice(1),g=e===h;return a&&!g?null:{path:o,url:"/"===o&&""===h?"/":h,isExact:g,params:d.reduce(function(e,t,n){return e[t.name]=m[n],e},{})}},K=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function B(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var q=function(e){return 0===a.a.Children.count(e)},Y=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=B(this,e.call.apply(e,[this].concat(i))),r.state={match:r.computeMatch(r.props,r.context.router)},B(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{router:K({},this.context.router,{route:{location:this.props.location||this.context.router.route.location,match:this.state.match}})}},t.prototype.computeMatch=function(e,t){var n=e.computedMatch,r=e.location,o=e.path,i=e.strict,a=e.exact,u=e.sensitive;if(n)return n;d()(t,"You should not use <Route> or withRouter() outside a <Router>");var l=t.route,s=(r||l.location).pathname;return o?H(s,{path:o,strict:i,exact:a,sensitive:u}):l.match},t.prototype.componentWillMount=function(){o()(!(this.props.component&&this.props.render),"You should not use <Route component> and <Route render> in the same route; <Route render> will be ignored"),o()(!(this.props.component&&this.props.children&&!q(this.props.children)),"You should not use <Route component> and <Route children> in the same route; <Route children> will be ignored"),o()(!(this.props.render&&this.props.children&&!q(this.props.children)),"You should not use <Route render> and <Route children> in the same route; <Route children> will be ignored")},t.prototype.componentWillReceiveProps=function(e,t){o()(!(e.location&&!this.props.location),'<Route> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.'),o()(!(!e.location&&this.props.location),'<Route> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.'),this.setState({match:this.computeMatch(e,t.router)})},t.prototype.render=function(){var e=this.state.match,t=this.props,n=t.children,r=t.component,o=t.render,i=this.context.router,u=i.history,l=i.route,s=i.staticContext,c={match:e,location:this.props.location||l.location,history:u,staticContext:s};return r?e?a.a.createElement(r,c):null:o?e?o(c):null:n?"function"==typeof n?n(c):q(n)?null:a.a.Children.only(n):null},t}(a.a.Component);Y.propTypes={computedMatch:l.a.object,path:l.a.string,exact:l.a.bool,strict:l.a.bool,sensitive:l.a.bool,component:l.a.func,render:l.a.func,children:l.a.oneOfType([l.a.func,l.a.node]),location:l.a.object},Y.contextTypes={router:l.a.shape({history:l.a.object.isRequired,route:l.a.object.isRequired,staticContext:l.a.object})},Y.childContextTypes={router:l.a.object.isRequired};var W=Y,z=W,V=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},$="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};var G=function(e){var t=e.to,n=e.exact,r=e.strict,o=e.location,i=e.activeClassName,u=e.className,l=e.activeStyle,s=e.style,c=e.isActive,f=e.ariaCurrent,d=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["to","exact","strict","location","activeClassName","className","activeStyle","style","isActive","ariaCurrent"]);return a.a.createElement(z,{path:"object"===(void 0===t?"undefined":$(t))?t.pathname:t,exact:n,strict:r,location:o,children:function(e){var n=e.location,r=e.match,o=!!(c?c(r,n):r);return a.a.createElement(N,V({to:t,className:o?[u,i].filter(function(e){return e}).join(" "):u,style:o?V({},s,l):s,"aria-current":o&&f},d))}})};G.propTypes={to:N.propTypes.to,exact:l.a.bool,strict:l.a.bool,location:l.a.object,activeClassName:l.a.string,className:l.a.string,activeStyle:l.a.object,style:l.a.object,isActive:l.a.func,ariaCurrent:l.a.oneOf(["page","step","location","true"])},G.defaultProps={activeClassName:"active",ariaCurrent:"true"};var Q=G;var X=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.enable=function(e){this.unblock&&this.unblock(),this.unblock=this.context.router.history.block(e)},t.prototype.disable=function(){this.unblock&&(this.unblock(),this.unblock=null)},t.prototype.componentWillMount=function(){d()(this.context.router,"You should not use <Prompt> outside a <Router>"),this.props.when&&this.enable(this.props.message)},t.prototype.componentWillReceiveProps=function(e){e.when?this.props.when&&this.props.message===e.message||this.enable(e.message):this.disable()},t.prototype.componentWillUnmount=function(){this.disable()},t.prototype.render=function(){return null},t}(a.a.Component);X.propTypes={when:l.a.bool,message:l.a.oneOfType([l.a.func,l.a.string]).isRequired},X.defaultProps={when:!0},X.contextTypes={router:l.a.shape({history:l.a.shape({block:l.a.func.isRequired}).isRequired}).isRequired};var J=X,Z=n(18),ee=n(17),te=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},ne=function(e,t,n,r){var o=void 0;"string"==typeof e?(o=function(e){var t=e||"/",n="",r="",o=t.indexOf("#");-1!==o&&(r=t.substr(o),t=t.substr(0,o));var i=t.indexOf("?");return-1!==i&&(n=t.substr(i),t=t.substr(0,i)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}(e)).state=t:(void 0===(o=te({},e)).pathname&&(o.pathname=""),o.search?"?"!==o.search.charAt(0)&&(o.search="?"+o.search):o.search="",o.hash?"#"!==o.hash.charAt(0)&&(o.hash="#"+o.hash):o.hash="",void 0!==t&&void 0===o.state&&(o.state=t));try{o.pathname=decodeURI(o.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+o.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(o.key=n),r?o.pathname?"/"!==o.pathname.charAt(0)&&(o.pathname=Object(Z.default)(o.pathname,r.pathname)):o.pathname=r.pathname:o.pathname||(o.pathname="/"),o},re=function(e,t){return e.pathname===t.pathname&&e.search===t.search&&e.hash===t.hash&&e.key===t.key&&Object(ee.default)(e.state,t.state)};"undefined"==typeof window||!window.document||window.document.createElement,"function"==typeof Symbol&&Symbol.iterator,Object.assign,Object.assign,"function"==typeof Symbol&&Symbol.iterator,Object.assign;var oe=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.isStatic=function(){return this.context.router&&this.context.router.staticContext},t.prototype.componentWillMount=function(){d()(this.context.router,"You should not use <Redirect> outside a <Router>"),this.isStatic()&&this.perform()},t.prototype.componentDidMount=function(){this.isStatic()||this.perform()},t.prototype.componentDidUpdate=function(e){var t=ne(e.to),n=ne(this.props.to);re(t,n)?o()(!1,"You tried to redirect to the same route you're currently on: \""+n.pathname+n.search+'"'):this.perform()},t.prototype.perform=function(){var e=this.context.router.history,t=this.props,n=t.push,r=t.to;n?e.push(r):e.replace(r)},t.prototype.render=function(){return null},t}(a.a.Component);oe.propTypes={push:l.a.bool,from:l.a.string,to:l.a.oneOfType([l.a.string,l.a.object]).isRequired},oe.defaultProps={push:!1},oe.contextTypes={router:l.a.shape({history:l.a.shape({push:l.a.func.isRequired,replace:l.a.func.isRequired}).isRequired,staticContext:l.a.object}).isRequired};var ie=oe,ae=n(6),ue=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};function le(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var se=function(e,t){return e?ue({},t,{pathname:Object(ae.addLeadingSlash)(e)+t.pathname}):t},ce=function(e){return"string"==typeof e?Object(ae.parsePath)(e):(n=(t=e).pathname,r=void 0===n?"/":n,o=t.search,i=void 0===o?"":o,a=t.hash,u=void 0===a?"":a,{pathname:r,search:"?"===i?"":i,hash:"#"===u?"":u});var t,n,r,o,i,a,u},fe=function(e){return"string"==typeof e?e:Object(ae.createPath)(e)},de=function(e){return function(){d()(!1,"You cannot %s with <StaticRouter>",e)}},pe=function(){},he=function(e){function t(){var n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);for(var o=arguments.length,i=Array(o),a=0;a<o;a++)i[a]=arguments[a];return n=r=le(this,e.call.apply(e,[this].concat(i))),r.createHref=function(e){return Object(ae.addLeadingSlash)(r.props.basename+fe(e))},r.handlePush=function(e){var t=r.props,n=t.basename,o=t.context;o.action="PUSH",o.location=se(n,ce(e)),o.url=fe(o.location)},r.handleReplace=function(e){var t=r.props,n=t.basename,o=t.context;o.action="REPLACE",o.location=se(n,ce(e)),o.url=fe(o.location)},r.handleListen=function(){return pe},r.handleBlock=function(){return pe},le(r,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.getChildContext=function(){return{router:{staticContext:this.props.context}}},t.prototype.componentWillMount=function(){o()(!this.props.history,"<StaticRouter> ignores the history prop. To use a custom history, use `import { Router }` instead of `import { StaticRouter as Router }`.")},t.prototype.render=function(){var e=this.props,t=e.basename,n=(e.context,e.location),r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["basename","context","location"]),o={createHref:this.createHref,action:"POP",location:function(e,t){if(!e)return t;var n=Object(ae.addLeadingSlash)(e);return 0!==t.pathname.indexOf(n)?t:ue({},t,{pathname:t.pathname.substr(n.length)})}(t,ce(n)),push:this.handlePush,replace:this.handleReplace,go:de("go"),goBack:de("goBack"),goForward:de("goForward"),listen:this.handleListen,block:this.handleBlock};return a.a.createElement(g,ue({},r,{history:o}))},t}(a.a.Component);he.propTypes={basename:l.a.string,context:l.a.object.isRequired,location:l.a.oneOfType([l.a.string,l.a.object])},he.defaultProps={basename:"",location:"/"},he.childContextTypes={router:l.a.object.isRequired};var me=he;var ge=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,e.apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t.prototype.componentWillMount=function(){d()(this.context.router,"You should not use <Switch> outside a <Router>")},t.prototype.componentWillReceiveProps=function(e){o()(!(e.location&&!this.props.location),'<Switch> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.'),o()(!(!e.location&&this.props.location),'<Switch> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.')},t.prototype.render=function(){var e=this.context.router.route,t=this.props.children,n=this.props.location||e.location,r=void 0,o=void 0;return a.a.Children.forEach(t,function(t){if(a.a.isValidElement(t)){var i=t.props,u=i.path,l=i.exact,s=i.strict,c=i.sensitive,f=i.from,d=u||f;null==r&&(o=t,r=d?H(n.pathname,{path:d,exact:l,strict:s,sensitive:c}):e.match)}}),r?a.a.cloneElement(o,{location:n,computedMatch:r}):null},t}(a.a.Component);ge.contextTypes={router:l.a.shape({route:l.a.object.isRequired}).isRequired},ge.propTypes={children:l.a.node,location:l.a.object};var ye=ge,ve=H,be=n(30),Ee=n.n(be),Ce=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};var Se=function(e){var t=function(t){var n=t.wrappedComponentRef,r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(t,["wrappedComponentRef"]);return a.a.createElement(W,{render:function(t){return a.a.createElement(e,Ce({},r,t,{ref:n}))}})};return t.displayName="withRouter("+(e.displayName||e.name)+")",t.WrappedComponent=e,t.propTypes={wrappedComponentRef:l.a.func},Ee()(t,e)};n.d(t,"BrowserRouter",function(){return E}),n.d(t,"HashRouter",function(){return x}),n.d(t,"Link",function(){return N}),n.d(t,"MemoryRouter",function(){return I}),n.d(t,"NavLink",function(){return Q}),n.d(t,"Prompt",function(){return J}),n.d(t,"Redirect",function(){return ie}),n.d(t,"Route",function(){return z}),n.d(t,"Router",function(){return y}),n.d(t,"StaticRouter",function(){return me}),n.d(t,"Switch",function(){return ye}),n.d(t,"matchPath",function(){return ve}),n.d(t,"withRouter",function(){return Se})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PAGE_SCROLL_WAIT_TIME=t.PAGE_SCROLLED_BOTTOM_EVENT=void 0;var r,o=n(5),i=(r=o)&&r.__esModule?r:{default:r};t.PAGE_SCROLLED_BOTTOM_EVENT="PAGE_SROLL_BOTTOM_"+i.default.generateRandomString(5),t.PAGE_SCROLL_WAIT_TIME=2e3},function(e,t,n){"use strict";(function(t){var r=n(4),o=n(54),i={"Content-Type":"application/x-www-form-urlencoded"};function a(e,t){!r.isUndefined(e)&&r.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var u,l={adapter:("undefined"!=typeof XMLHttpRequest?u=n(24):void 0!==t&&(u=n(24)),u),transformRequest:[function(e,t){return o(t,"Content-Type"),r.isFormData(e)||r.isArrayBuffer(e)||r.isBuffer(e)||r.isStream(e)||r.isFile(e)||r.isBlob(e)?e:r.isArrayBufferView(e)?e.buffer:r.isURLSearchParams(e)?(a(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):r.isObject(e)?(a(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300}};l.headers={common:{Accept:"application/json, text/plain, */*"}},r.forEach(["delete","get","head"],function(e){l.headers[e]={}}),r.forEach(["post","put","patch"],function(e){l.headers[e]=r.merge(i)}),e.exports=l}).call(this,n(55))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=l(n(59)),i=l(n(39)),a=n(20),u=l(n(5));function l(e){return e&&e.__esModule?e:{default:e}}function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}var c=function(){function e(){s(this,e),this.metadata=new f}return r(e,[{key:"fetchMockHeadlines",value:function(){return(0,o.default)("/mocks/mockNews.json").then(function(e){return e.data})}},{key:"searchNews",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{loadMoreData:!1};(e=e||{}).language=e.language||"en",n.loadMoreData?(e.page=e.page||this.metadata.getNewsOptions().page,++e.page):(e.page=e.page||1,this.metadata.flush()),this.metadata.setNewsOptions(e);var r={url:i.default.NEWS.SEARCH,params:this.metadata.getNewsOptions(),headers:{Authorization:"Bearer "+a.NEWS_API_KEY}};return(0,o.default)(r).then(function(n){return t.metadata.setNewsAdditionalData({totalResults:n&&n.articles?n.articles.length:0}),t.metadata.setMainData(e.page,n.data),Promise.resolve(t.metadata.getMainDataAll())})}},{key:"fetchTopHeadlines",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{loadMoreData:!1};(e=e||{}).language=e.language||"en",n.loadMoreData?(e.page=e.page||this.metadata.getNewsOptions().page,++e.page):(e.page=e.page||1,this.metadata.flush()),this.metadata.setNewsOptions(e);var r={url:i.default.NEWS.HEADLINES,params:this.metadata.getNewsOptions(),headers:{Authorization:"Bearer "+a.NEWS_API_KEY}};return(0,o.default)(r).then(function(n){return t.metadata.setNewsAdditionalData({totalResults:n&&n.articles?n.articles.length:0}),t.metadata.setMainData(e.page,n.data),Promise.resolve(t.metadata.getMainDataAll())})}},{key:"fetchNewsSources",value:function(e){if((e=e||{}).language=e.language||"en",f.SOURCES&&Object.keys(f.SOURCES).length>0)return Promise.resolve(f.SOURCES);var t={url:i.default.NEWS.SOURCES,params:e,headers:{Authorization:"Bearer "+a.NEWS_API_KEY}};return(0,o.default)(t).then(function(e){if(console.log("results",e),!e.data||!e.data.sources)return Promise.resolve({});var t={};return e.data.sources.forEach(function(e){t[e.id]={SOURCE_NAME:e.name,SOURCE_ID:e.id,KEY:"SOURCE_"+u.default.generateRandomString(5)}}),f.SOURCES=t,t})}}]),e}();t.default=c;var f=function(){function e(){s(this,e),this.DATA={newsOptions:{pageSize:20,page:1,language:"en"},mainData:{},additionalData:{totalResults:0}}}return r(e,[{key:"getNewsOptions",value:function(){return this.DATA.newsOptions}},{key:"setNewsOptions",value:function(e){this.DATA.newsOptions=u.default.merge(this.DATA.newsOptions,e)}},{key:"getNewsAdditionalData",value:function(){return this.DATA.additionalData}},{key:"setNewsAdditionalData",value:function(e){this.DATA.additionalData=u.default.merge(this.DATA.additionalData,e)}},{key:"setMainData",value:function(e,t){this.DATA.mainData["PAGE_"+e]=t}},{key:"getMainDataByPage",value:function(e){return this.DATA.mainData["PAGE_"+e]||{}}},{key:"getMainDataAll",value:function(){for(var e={status:"ok",articles:[]},t=1;void 0!==this.DATA.mainData["PAGE_"+t];)this.DATA.mainData["PAGE_"+t].articles&&this.DATA.mainData["PAGE_"+t].articles.length&&(e.articles=e.articles.concat(this.DATA.mainData["PAGE_"+t].articles),e.totalResults=this.DATA.mainData["PAGE_"+t].totalResults),t++;return e}},{key:"getNewsData",value:function(){return this.DATA}},{key:"setNewsData",value:function(e){this.DATA=u.default.merge(this.DATA,e)}},{key:"flush",value:function(){this.DATA={newsOptions:{pageSize:20,page:1,language:"en"},mainData:{},additionalData:{totalResults:0}}}}]),e}();f.DEFAULT_DATA={newsOptions:{pageSize:20,page:1,language:"en"},mainData:{},additionalData:{totalResults:0}},f.SOURCES=null},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=s(n(1)),i=(s(n(7)),s(n(5))),a=s(n(63)),u=s(n(62)),l=s(n(61));function s(e){return e&&e.__esModule?e:{default:e}}var c=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={newsCardsList:[],lazyLoadingBottom:!1},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),r(t,[{key:"render",value:function(){var e=this;return o.default.createElement("div",{className:"container-fluid animationload",ref:function(t){return e.headlinesElement=t}},this.props.isLoading?o.default.createElement(l.default,null):o.default.createElement("div",null,this.props.isLoading?null:this.state.newsCardsList,this.props.scrollSupport&&this.state.lazyLoadingBottom?o.default.createElement(l.default,null):null))}}],[{key:"getDerivedStateFromProps",value:function(e,n){return e.newsData&&e.newsData.articles||e.isScrolledDown?{newsCardsList:t.getNewsCards(e.newsData),lazyLoadingBottom:e.isScrolledDown||!1}:null}},{key:"makeNewsCard",value:function(e){return e.title&&0!=e.title.trim().length&&e.description&&0!=e.description.trim().length?o.default.createElement(a.default,{title:e.title,content:e.description,imageUrl:e.urlToImage,author:e.author,newsLink:e.url,key:e.key}):null}},{key:"getNewsCards",value:function(e){return e.articles&&0==e.articles.length?o.default.createElement(u.default,null):e.articles.map(function(e,n){return e.key=i.default.generateRandomString(5),t.makeNewsCard(e)})}}]),t}();t.default=c},function(e,t,n){"use strict";t.__esModule=!0;var r,o=n(2),i=(r=o)&&r.__esModule?r:{default:r};t.default=function(){var e=null,t=[];return{setPrompt:function(t){return(0,i.default)(null==e,"A history supports only one prompt at a time"),e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,o){if(null!=e){var a="function"==typeof e?e(t,n):e;"string"==typeof a?"function"==typeof r?r(a,o):((0,i.default)(!1,"A history needs a getUserConfirmation function in order to use a prompt message"),o(!0)):o(!1!==a)}else o(!0)},appendListener:function(e){var n=!0,r=function(){n&&e.apply(void 0,arguments)};return t.push(r),function(){n=!1,t=t.filter(function(e){return e!==r})}},notifyListeners:function(){for(var e=arguments.length,n=Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach(function(e){return e.apply(void 0,n)})}}}},function(e,t,n){"use strict";t.__esModule=!0,t.locationsAreEqual=t.createLocation=void 0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=u(n(18)),i=u(n(17)),a=n(6);function u(e){return e&&e.__esModule?e:{default:e}}t.createLocation=function(e,t,n,i){var u=void 0;"string"==typeof e?(u=(0,a.parsePath)(e)).state=t:(void 0===(u=r({},e)).pathname&&(u.pathname=""),u.search?"?"!==u.search.charAt(0)&&(u.search="?"+u.search):u.search="",u.hash?"#"!==u.hash.charAt(0)&&(u.hash="#"+u.hash):u.hash="",void 0!==t&&void 0===u.state&&(u.state=t));try{u.pathname=decodeURI(u.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+u.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(u.key=n),i?u.pathname?"/"!==u.pathname.charAt(0)&&(u.pathname=(0,o.default)(u.pathname,i.pathname)):u.pathname=i.pathname:u.pathname||(u.pathname="/"),u},t.locationsAreEqual=function(e,t){return e.pathname===t.pathname&&e.search===t.search&&e.hash===t.hash&&e.key===t.key&&(0,i.default)(e.state,t.state)}},function(e,t,n){"use strict";function r(e){return function(){return e}}var o=function(){};o.thatReturns=r,o.thatReturnsFalse=r(!1),o.thatReturnsTrue=r(!0),o.thatReturnsNull=r(null),o.thatReturnsThis=function(){return this},o.thatReturnsArgument=function(e){return e},e.exports=o},function(e,t,n){"use strict";var r=function(e){};e.exports=function(e,t,n,o,i,a,u,l){if(r(t),!e){var s;if(void 0===t)s=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[n,o,i,a,u,l],f=0;(s=new Error(t.replace(/%s/g,function(){return c[f++]}))).name="Invariant Violation"}throw s.framesToPop=1,s}}},function(e,t,n){"use strict";n.r(t);var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t.default=function e(t,n){if(t===n)return!0;if(null==t||null==n)return!1;if(Array.isArray(t))return Array.isArray(n)&&t.length===n.length&&t.every(function(t,r){return e(t,n[r])});var o=void 0===t?"undefined":r(t);if(o!==(void 0===n?"undefined":r(n)))return!1;if("object"===o){var i=t.valueOf(),a=n.valueOf();if(i!==t||a!==n)return e(i,a);var u=Object.keys(t),l=Object.keys(n);return u.length===l.length&&u.every(function(r){return e(t[r],n[r])})}return!1}},function(e,t,n){"use strict";function r(e){return"/"===e.charAt(0)}function o(e,t){for(var n=t,r=n+1,o=e.length;r<o;n+=1,r+=1)e[n]=e[r];e.pop()}n.r(t),t.default=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=e&&e.split("/")||[],i=t&&t.split("/")||[],a=e&&r(e),u=t&&r(t),l=a||u;if(e&&r(e)?i=n:n.length&&(i.pop(),i=i.concat(n)),!i.length)return"/";var s=void 0;if(i.length){var c=i[i.length-1];s="."===c||".."===c||""===c}else s=!1;for(var f=0,d=i.length;d>=0;d--){var p=i[d];"."===p?o(i,d):".."===p?(o(i,d),f++):f&&(o(i,d),f--)}if(!l)for(;f--;f)i.unshift("..");!l||""===i[0]||i[0]&&r(i[0])||i.unshift("");var h=i.join("/");return s&&"/"!==h.substr(-1)&&(h+="/"),h}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SOURCES_LIST=t.SOURCES_DROPDOWN_TITLE=t.SOURCE_LIST_ITEM_EVENT=void 0;var r,o=n(5),i=(r=o)&&r.__esModule?r:{default:r};t.SOURCE_LIST_ITEM_EVENT="SOURCE_LIST_ITEM_"+i.default.generateRandomString(5),t.SOURCES_DROPDOWN_TITLE="Select a News Source",t.SOURCES_LIST={"abc-news":{SOURCE_NAME:"ABC News",SOURCE_ID:"abc-news",KEY:"SOURCE_"+i.default.generateRandomString(5)},"abc-news-au":{SOURCE_NAME:"ABC News (AU)",SOURCE_ID:"abc-news-au",KEY:"SOURCE_"+i.default.generateRandomString(5)},aftenposten:{SOURCE_NAME:"Aftenposten",SOURCE_ID:"aftenposten",KEY:"SOURCE_"+i.default.generateRandomString(5)},"al-jazeera-english":{SOURCE_NAME:"Al Jazeera English",SOURCE_ID:"al-jazeera-english",KEY:"SOURCE_"+i.default.generateRandomString(5)},ansa:{SOURCE_NAME:"ANSA.it",SOURCE_ID:"ansa",KEY:"SOURCE_"+i.default.generateRandomString(5)},argaam:{SOURCE_NAME:"Argaam",SOURCE_ID:"argaam",KEY:"SOURCE_"+i.default.generateRandomString(5)},"ars-technica":{SOURCE_NAME:"Ars Technica",SOURCE_ID:"ars-technica",KEY:"SOURCE_"+i.default.generateRandomString(5)},"ary-news":{SOURCE_NAME:"Ary News",SOURCE_ID:"ary-news",KEY:"SOURCE_"+i.default.generateRandomString(5)},"associated-press":{SOURCE_NAME:"Associated Press",SOURCE_ID:"associated-press",KEY:"SOURCE_"+i.default.generateRandomString(5)},"australian-financial-review":{SOURCE_NAME:"Australian Financial Review",SOURCE_ID:"australian-financial-review",KEY:"SOURCE_"+i.default.generateRandomString(5)},axios:{SOURCE_NAME:"Axios",SOURCE_ID:"axios",KEY:"SOURCE_"+i.default.generateRandomString(5)},"bbc-news":{SOURCE_NAME:"BBC News",SOURCE_ID:"bbc-news",KEY:"SOURCE_"+i.default.generateRandomString(5)},"bbc-sport":{SOURCE_NAME:"BBC Sport",SOURCE_ID:"bbc-sport",KEY:"SOURCE_"+i.default.generateRandomString(5)},bild:{SOURCE_NAME:"Bild",SOURCE_ID:"bild",KEY:"SOURCE_"+i.default.generateRandomString(5)},"blasting-news-br":{SOURCE_NAME:"Blasting News (BR)",SOURCE_ID:"blasting-news-br",KEY:"SOURCE_"+i.default.generateRandomString(5)},"bleacher-report":{SOURCE_NAME:"Bleacher Report",SOURCE_ID:"bleacher-report",KEY:"SOURCE_"+i.default.generateRandomString(5)},bloomberg:{SOURCE_NAME:"Bloomberg",SOURCE_ID:"bloomberg",KEY:"SOURCE_"+i.default.generateRandomString(5)},"breitbart-news":{SOURCE_NAME:"Breitbart News",SOURCE_ID:"breitbart-news",KEY:"SOURCE_"+i.default.generateRandomString(5)},"business-insider":{SOURCE_NAME:"Business Insider",SOURCE_ID:"business-insider",KEY:"SOURCE_"+i.default.generateRandomString(5)},"business-insider-uk":{SOURCE_NAME:"Business Insider (UK)",SOURCE_ID:"business-insider-uk",KEY:"SOURCE_"+i.default.generateRandomString(5)},buzzfeed:{SOURCE_NAME:"Buzzfeed",SOURCE_ID:"buzzfeed",KEY:"SOURCE_"+i.default.generateRandomString(5)},"cbc-news":{SOURCE_NAME:"CBC News",SOURCE_ID:"cbc-news",KEY:"SOURCE_"+i.default.generateRandomString(5)},"cbs-news":{SOURCE_NAME:"CBS News",SOURCE_ID:"cbs-news",KEY:"SOURCE_"+i.default.generateRandomString(5)},cnbc:{SOURCE_NAME:"CNBC",SOURCE_ID:"cnbc",KEY:"SOURCE_"+i.default.generateRandomString(5)},cnn:{SOURCE_NAME:"CNN",SOURCE_ID:"cnn",KEY:"SOURCE_"+i.default.generateRandomString(5)},"cnn-es":{SOURCE_NAME:"CNN Spanish",SOURCE_ID:"cnn-es",KEY:"SOURCE_"+i.default.generateRandomString(5)},"crypto-coins-news":{SOURCE_NAME:"Crypto Coins News",SOURCE_ID:"crypto-coins-news",KEY:"SOURCE_"+i.default.generateRandomString(5)},"daily-mail":{SOURCE_NAME:"Daily Mail",SOURCE_ID:"daily-mail",KEY:"SOURCE_"+i.default.generateRandomString(5)},"der-tagesspiegel":{SOURCE_NAME:"Der Tagesspiegel",SOURCE_ID:"der-tagesspiegel",KEY:"SOURCE_"+i.default.generateRandomString(5)},"die-zeit":{SOURCE_NAME:"Die Zeit",SOURCE_ID:"die-zeit",KEY:"SOURCE_"+i.default.generateRandomString(5)},"el-mundo":{SOURCE_NAME:"El Mundo",SOURCE_ID:"el-mundo",KEY:"SOURCE_"+i.default.generateRandomString(5)},engadget:{SOURCE_NAME:"Engadget",SOURCE_ID:"engadget",KEY:"SOURCE_"+i.default.generateRandomString(5)},"entertainment-weekly":{SOURCE_NAME:"Entertainment Weekly",SOURCE_ID:"entertainment-weekly",KEY:"SOURCE_"+i.default.generateRandomString(5)},espn:{SOURCE_NAME:"ESPN",SOURCE_ID:"espn",KEY:"SOURCE_"+i.default.generateRandomString(5)},"espn-cric-info":{SOURCE_NAME:"ESPN Cric Info",SOURCE_ID:"espn-cric-info",KEY:"SOURCE_"+i.default.generateRandomString(5)},"financial-post":{SOURCE_NAME:"Financial Post",SOURCE_ID:"financial-post",KEY:"SOURCE_"+i.default.generateRandomString(5)},"financial-times":{SOURCE_NAME:"Financial Times",SOURCE_ID:"financial-times",KEY:"SOURCE_"+i.default.generateRandomString(5)},focus:{SOURCE_NAME:"Focus",SOURCE_ID:"focus",KEY:"SOURCE_"+i.default.generateRandomString(5)},"football-italia":{SOURCE_NAME:"Football Italia",SOURCE_ID:"football-italia",KEY:"SOURCE_"+i.default.generateRandomString(5)},fortune:{SOURCE_NAME:"Fortune",SOURCE_ID:"fortune",KEY:"SOURCE_"+i.default.generateRandomString(5)},"four-four-two":{SOURCE_NAME:"FourFourTwo",SOURCE_ID:"four-four-two",KEY:"SOURCE_"+i.default.generateRandomString(5)},"fox-news":{SOURCE_NAME:"Fox News",SOURCE_ID:"fox-news",KEY:"SOURCE_"+i.default.generateRandomString(5)},"fox-sports":{SOURCE_NAME:"Fox Sports",SOURCE_ID:"fox-sports",KEY:"SOURCE_"+i.default.generateRandomString(5)},globo:{SOURCE_NAME:"Globo",SOURCE_ID:"globo",KEY:"SOURCE_"+i.default.generateRandomString(5)},"google-news":{SOURCE_NAME:"Google News",SOURCE_ID:"google-news",KEY:"SOURCE_"+i.default.generateRandomString(5)},"google-news-ar":{SOURCE_NAME:"Google News (Argentina)",SOURCE_ID:"google-news-ar",KEY:"SOURCE_"+i.default.generateRandomString(5)},"google-news-au":{SOURCE_NAME:"Google News (Australia)",SOURCE_ID:"google-news-au",KEY:"SOURCE_"+i.default.generateRandomString(5)},"google-news-br":{SOURCE_NAME:"Google News (Brasil)",SOURCE_ID:"google-news-br",KEY:"SOURCE_"+i.default.generateRandomString(5)},"google-news-ca":{SOURCE_NAME:"Google News (Canada)",SOURCE_ID:"google-news-ca",KEY:"SOURCE_"+i.default.generateRandomString(5)},"google-news-fr":{SOURCE_NAME:"Google News (France)",SOURCE_ID:"google-news-fr",KEY:"SOURCE_"+i.default.generateRandomString(5)},"google-news-in":{SOURCE_NAME:"Google News (India)",SOURCE_ID:"google-news-in",KEY:"SOURCE_"+i.default.generateRandomString(5)},"google-news-is":{SOURCE_NAME:"Google News (Israel)",SOURCE_ID:"google-news-is",KEY:"SOURCE_"+i.default.generateRandomString(5)},"google-news-it":{SOURCE_NAME:"Google News (Italy)",SOURCE_ID:"google-news-it",KEY:"SOURCE_"+i.default.generateRandomString(5)},"google-news-ru":{SOURCE_NAME:"Google News (Russia)",SOURCE_ID:"google-news-ru",KEY:"SOURCE_"+i.default.generateRandomString(5)},"google-news-sa":{SOURCE_NAME:"Google News (Saudi Arabia)",SOURCE_ID:"google-news-sa",KEY:"SOURCE_"+i.default.generateRandomString(5)},"google-news-uk":{SOURCE_NAME:"Google News (UK)",SOURCE_ID:"google-news-uk",KEY:"SOURCE_"+i.default.generateRandomString(5)},"goteborgs-posten":{SOURCE_NAME:"Göteborgs-Posten",SOURCE_ID:"goteborgs-posten",KEY:"SOURCE_"+i.default.generateRandomString(5)},gruenderszene:{SOURCE_NAME:"Gruenderszene",SOURCE_ID:"gruenderszene",KEY:"SOURCE_"+i.default.generateRandomString(5)},"hacker-news":{SOURCE_NAME:"Hacker News",SOURCE_ID:"hacker-news",KEY:"SOURCE_"+i.default.generateRandomString(5)},handelsblatt:{SOURCE_NAME:"Handelsblatt",SOURCE_ID:"handelsblatt",KEY:"SOURCE_"+i.default.generateRandomString(5)},ign:{SOURCE_NAME:"IGN",SOURCE_ID:"ign",KEY:"SOURCE_"+i.default.generateRandomString(5)},"il-sole-24-ore":{SOURCE_NAME:"Il Sole 24 Ore",SOURCE_ID:"il-sole-24-ore",KEY:"SOURCE_"+i.default.generateRandomString(5)},independent:{SOURCE_NAME:"Independent",SOURCE_ID:"independent",KEY:"SOURCE_"+i.default.generateRandomString(5)},infobae:{SOURCE_NAME:"Infobae",SOURCE_ID:"infobae",KEY:"SOURCE_"+i.default.generateRandomString(5)},"info-money":{SOURCE_NAME:"InfoMoney",SOURCE_ID:"info-money",KEY:"SOURCE_"+i.default.generateRandomString(5)},"la-gaceta":{SOURCE_NAME:"La Gaceta",SOURCE_ID:"la-gaceta",KEY:"SOURCE_"+i.default.generateRandomString(5)},"la-nacion":{SOURCE_NAME:"La Nacion",SOURCE_ID:"la-nacion",KEY:"SOURCE_"+i.default.generateRandomString(5)},"la-repubblica":{SOURCE_NAME:"La Repubblica",SOURCE_ID:"la-repubblica",KEY:"SOURCE_"+i.default.generateRandomString(5)},"le-monde":{SOURCE_NAME:"Le Monde",SOURCE_ID:"le-monde",KEY:"SOURCE_"+i.default.generateRandomString(5)},lenta:{SOURCE_NAME:"Lenta",SOURCE_ID:"lenta",KEY:"SOURCE_"+i.default.generateRandomString(5)},lequipe:{SOURCE_NAME:"L'equipe",SOURCE_ID:"lequipe",KEY:"SOURCE_"+i.default.generateRandomString(5)},"les-echos":{SOURCE_NAME:"Les Echos",SOURCE_ID:"les-echos",KEY:"SOURCE_"+i.default.generateRandomString(5)},liberation:{SOURCE_NAME:"Libération",SOURCE_ID:"liberation",KEY:"SOURCE_"+i.default.generateRandomString(5)},marca:{SOURCE_NAME:"Marca",SOURCE_ID:"marca",KEY:"SOURCE_"+i.default.generateRandomString(5)},mashable:{SOURCE_NAME:"Mashable",SOURCE_ID:"mashable",KEY:"SOURCE_"+i.default.generateRandomString(5)},"medical-news-today":{SOURCE_NAME:"Medical News Today",SOURCE_ID:"medical-news-today",KEY:"SOURCE_"+i.default.generateRandomString(5)},metro:{SOURCE_NAME:"Metro",SOURCE_ID:"metro",KEY:"SOURCE_"+i.default.generateRandomString(5)},mirror:{SOURCE_NAME:"Mirror",SOURCE_ID:"mirror",KEY:"SOURCE_"+i.default.generateRandomString(5)},msnbc:{SOURCE_NAME:"MSNBC",SOURCE_ID:"msnbc",KEY:"SOURCE_"+i.default.generateRandomString(5)},"mtv-news":{SOURCE_NAME:"MTV News",SOURCE_ID:"mtv-news",KEY:"SOURCE_"+i.default.generateRandomString(5)},"mtv-news-uk":{SOURCE_NAME:"MTV News (UK)",SOURCE_ID:"mtv-news-uk",KEY:"SOURCE_"+i.default.generateRandomString(5)},"national-geographic":{SOURCE_NAME:"National Geographic",SOURCE_ID:"national-geographic",KEY:"SOURCE_"+i.default.generateRandomString(5)},"national-review":{SOURCE_NAME:"National Review",SOURCE_ID:"national-review",KEY:"SOURCE_"+i.default.generateRandomString(5)},"nbc-news":{SOURCE_NAME:"NBC News",SOURCE_ID:"nbc-news",KEY:"SOURCE_"+i.default.generateRandomString(5)},news24:{SOURCE_NAME:"News24",SOURCE_ID:"news24",KEY:"SOURCE_"+i.default.generateRandomString(5)},"new-scientist":{SOURCE_NAME:"New Scientist",SOURCE_ID:"new-scientist",KEY:"SOURCE_"+i.default.generateRandomString(5)},"news-com-au":{SOURCE_NAME:"News.com.au",SOURCE_ID:"news-com-au",KEY:"SOURCE_"+i.default.generateRandomString(5)},newsweek:{SOURCE_NAME:"Newsweek",SOURCE_ID:"newsweek",KEY:"SOURCE_"+i.default.generateRandomString(5)},"new-york-magazine":{SOURCE_NAME:"New York Magazine",SOURCE_ID:"new-york-magazine",KEY:"SOURCE_"+i.default.generateRandomString(5)},"next-big-future":{SOURCE_NAME:"Next Big Future",SOURCE_ID:"next-big-future",KEY:"SOURCE_"+i.default.generateRandomString(5)},"nfl-news":{SOURCE_NAME:"NFL News",SOURCE_ID:"nfl-news",KEY:"SOURCE_"+i.default.generateRandomString(5)},"nhl-news":{SOURCE_NAME:"NHL News",SOURCE_ID:"nhl-news",KEY:"SOURCE_"+i.default.generateRandomString(5)},nrk:{SOURCE_NAME:"NRK",SOURCE_ID:"nrk",KEY:"SOURCE_"+i.default.generateRandomString(5)},politico:{SOURCE_NAME:"Politico",SOURCE_ID:"politico",KEY:"SOURCE_"+i.default.generateRandomString(5)},polygon:{SOURCE_NAME:"Polygon",SOURCE_ID:"polygon",KEY:"SOURCE_"+i.default.generateRandomString(5)},rbc:{SOURCE_NAME:"RBC",SOURCE_ID:"rbc",KEY:"SOURCE_"+i.default.generateRandomString(5)},recode:{SOURCE_NAME:"Recode",SOURCE_ID:"recode",KEY:"SOURCE_"+i.default.generateRandomString(5)},"reddit-r-all":{SOURCE_NAME:"Reddit /r/all",SOURCE_ID:"reddit-r-all",KEY:"SOURCE_"+i.default.generateRandomString(5)},reuters:{SOURCE_NAME:"Reuters",SOURCE_ID:"reuters",KEY:"SOURCE_"+i.default.generateRandomString(5)},rt:{SOURCE_NAME:"RT",SOURCE_ID:"rt",KEY:"SOURCE_"+i.default.generateRandomString(5)},rte:{SOURCE_NAME:"RTE",SOURCE_ID:"rte",KEY:"SOURCE_"+i.default.generateRandomString(5)},"rtl-nieuws":{SOURCE_NAME:"RTL Nieuws",SOURCE_ID:"rtl-nieuws",KEY:"SOURCE_"+i.default.generateRandomString(5)},sabq:{SOURCE_NAME:"SABQ",SOURCE_ID:"sabq",KEY:"SOURCE_"+i.default.generateRandomString(5)},"spiegel-online":{SOURCE_NAME:"Spiegel Online",SOURCE_ID:"spiegel-online",KEY:"SOURCE_"+i.default.generateRandomString(5)},"svenska-dagbladet":{SOURCE_NAME:"Svenska Dagbladet",SOURCE_ID:"svenska-dagbladet",KEY:"SOURCE_"+i.default.generateRandomString(5)},t3n:{SOURCE_NAME:"T3n",SOURCE_ID:"t3n",KEY:"SOURCE_"+i.default.generateRandomString(5)},talksport:{SOURCE_NAME:"TalkSport",SOURCE_ID:"talksport",KEY:"SOURCE_"+i.default.generateRandomString(5)},techcrunch:{SOURCE_NAME:"TechCrunch",SOURCE_ID:"techcrunch",KEY:"SOURCE_"+i.default.generateRandomString(5)},"techcrunch-cn":{SOURCE_NAME:"TechCrunch (CN)",SOURCE_ID:"techcrunch-cn",KEY:"SOURCE_"+i.default.generateRandomString(5)},techradar:{SOURCE_NAME:"TechRadar",SOURCE_ID:"techradar",KEY:"SOURCE_"+i.default.generateRandomString(5)},"the-american-conservative":{SOURCE_NAME:"The American Conservative",SOURCE_ID:"the-american-conservative",KEY:"SOURCE_"+i.default.generateRandomString(5)},"the-economist":{SOURCE_NAME:"The Economist",SOURCE_ID:"the-economist",KEY:"SOURCE_"+i.default.generateRandomString(5)},"the-globe-and-mail":{SOURCE_NAME:"The Globe And Mail",SOURCE_ID:"the-globe-and-mail",KEY:"SOURCE_"+i.default.generateRandomString(5)},"the-guardian-au":{SOURCE_NAME:"The Guardian (AU)",SOURCE_ID:"the-guardian-au",KEY:"SOURCE_"+i.default.generateRandomString(5)},"the-guardian-uk":{SOURCE_NAME:"The Guardian (UK)",SOURCE_ID:"the-guardian-uk",KEY:"SOURCE_"+i.default.generateRandomString(5)},"the-hill":{SOURCE_NAME:"The Hill",SOURCE_ID:"the-hill",KEY:"SOURCE_"+i.default.generateRandomString(5)},"the-hindu":{SOURCE_NAME:"The Hindu",SOURCE_ID:"the-hindu",KEY:"SOURCE_"+i.default.generateRandomString(5)},"the-huffington-post":{SOURCE_NAME:"The Huffington Post",SOURCE_ID:"the-huffington-post",KEY:"SOURCE_"+i.default.generateRandomString(5)},"the-irish-times":{SOURCE_NAME:"The Irish Times",SOURCE_ID:"the-irish-times",KEY:"SOURCE_"+i.default.generateRandomString(5)},"the-lad-bible":{SOURCE_NAME:"The Lad Bible",SOURCE_ID:"the-lad-bible",KEY:"SOURCE_"+i.default.generateRandomString(5)},"the-new-york-times":{SOURCE_NAME:"The New York Times",SOURCE_ID:"the-new-york-times",KEY:"SOURCE_"+i.default.generateRandomString(5)},"the-next-web":{SOURCE_NAME:"The Next Web",SOURCE_ID:"the-next-web",KEY:"SOURCE_"+i.default.generateRandomString(5)},"the-sport-bible":{SOURCE_NAME:"The Sport Bible",SOURCE_ID:"the-sport-bible",KEY:"SOURCE_"+i.default.generateRandomString(5)},"the-telegraph":{SOURCE_NAME:"The Telegraph",SOURCE_ID:"the-telegraph",KEY:"SOURCE_"+i.default.generateRandomString(5)},"the-times-of-india":{SOURCE_NAME:"The Times of India",SOURCE_ID:"the-times-of-india",KEY:"SOURCE_"+i.default.generateRandomString(5)},"the-verge":{SOURCE_NAME:"The Verge",SOURCE_ID:"the-verge",KEY:"SOURCE_"+i.default.generateRandomString(5)},"the-wall-street-journal":{SOURCE_NAME:"The Wall Street Journal",SOURCE_ID:"the-wall-street-journal",KEY:"SOURCE_"+i.default.generateRandomString(5)},"the-washington-post":{SOURCE_NAME:"The Washington Post",SOURCE_ID:"the-washington-post",KEY:"SOURCE_"+i.default.generateRandomString(5)},"the-washington-times":{SOURCE_NAME:"The Washington Times",SOURCE_ID:"the-washington-times",KEY:"SOURCE_"+i.default.generateRandomString(5)},time:{SOURCE_NAME:"Time",SOURCE_ID:"time",KEY:"SOURCE_"+i.default.generateRandomString(5)},"usa-today":{SOURCE_NAME:"USA Today",SOURCE_ID:"usa-today",KEY:"SOURCE_"+i.default.generateRandomString(5)},"vice-news":{SOURCE_NAME:"Vice News",SOURCE_ID:"vice-news",KEY:"SOURCE_"+i.default.generateRandomString(5)},wired:{SOURCE_NAME:"Wired",SOURCE_ID:"wired",KEY:"SOURCE_"+i.default.generateRandomString(5)},"wired-de":{SOURCE_NAME:"Wired.de",SOURCE_ID:"wired-de",KEY:"SOURCE_"+i.default.generateRandomString(5)},"wirtschafts-woche":{SOURCE_NAME:"Wirtschafts Woche",SOURCE_ID:"wirtschafts-woche",KEY:"SOURCE_"+i.default.generateRandomString(5)},"xinhua-net":{SOURCE_NAME:"Xinhua Net",SOURCE_ID:"xinhua-net",KEY:"SOURCE_"+i.default.generateRandomString(5)},ynet:{SOURCE_NAME:"Ynet",SOURCE_ID:"ynet",KEY:"SOURCE_"+i.default.generateRandomString(5)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.NEWS_API_KEY="0fdf9414ad75446099dd038c590d37a8",t.EVENTS={KEYUP:{name:"keyup"}},t.KEYCODES={ENTER:13}},function(e,t,n){"use strict";function r(e){this.message=e}r.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},r.prototype.__CANCEL__=!0,e.exports=r},function(e,t,n){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,n){"use strict";var r=n(52);e.exports=function(e,t,n,o,i){var a=new Error(e);return r(a,t,n,o,i)}},function(e,t,n){"use strict";var r=n(4),o=n(53),i=n(51),a=n(50),u=n(49),l=n(23),s="undefined"!=typeof window&&window.btoa&&window.btoa.bind(window)||n(48);e.exports=function(e){return new Promise(function(t,c){var f=e.data,d=e.headers;r.isFormData(f)&&delete d["Content-Type"];var p=new XMLHttpRequest,h="onreadystatechange",m=!1;if("undefined"==typeof window||!window.XDomainRequest||"withCredentials"in p||u(e.url)||(p=new window.XDomainRequest,h="onload",m=!0,p.onprogress=function(){},p.ontimeout=function(){}),e.auth){var g=e.auth.username||"",y=e.auth.password||"";d.Authorization="Basic "+s(g+":"+y)}if(p.open(e.method.toUpperCase(),i(e.url,e.params,e.paramsSerializer),!0),p.timeout=e.timeout,p[h]=function(){if(p&&(4===p.readyState||m)&&(0!==p.status||p.responseURL&&0===p.responseURL.indexOf("file:"))){var n="getAllResponseHeaders"in p?a(p.getAllResponseHeaders()):null,r={data:e.responseType&&"text"!==e.responseType?p.response:p.responseText,status:1223===p.status?204:p.status,statusText:1223===p.status?"No Content":p.statusText,headers:n,config:e,request:p};o(t,c,r),p=null}},p.onerror=function(){c(l("Network Error",e,null,p)),p=null},p.ontimeout=function(){c(l("timeout of "+e.timeout+"ms exceeded",e,"ECONNABORTED",p)),p=null},r.isStandardBrowserEnv()){var v=n(47),b=(e.withCredentials||u(e.url))&&e.xsrfCookieName?v.read(e.xsrfCookieName):void 0;b&&(d[e.xsrfHeaderName]=b)}if("setRequestHeader"in p&&r.forEach(d,function(e,t){void 0===f&&"content-type"===t.toLowerCase()?delete d[t]:p.setRequestHeader(t,e)}),e.withCredentials&&(p.withCredentials=!0),e.responseType)try{p.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&p.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&p.upload&&p.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then(function(e){p&&(p.abort(),c(e),p=null)}),void 0===f&&(f=null),p.send(f)})}},function(e,t,n){"use strict";e.exports=function(e,t){return function(){for(var n=new Array(arguments.length),r=0;r<n.length;r++)n[r]=arguments[r];return e.apply(t,n)}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.LINK_EVENT_NAME=t.SIDEBAR_LINKS=void 0;var r,o=n(5),i=(r=o)&&r.__esModule?r:{default:r};t.SIDEBAR_LINKS={GROUPS:{COUNTRIES:{ELEMENTS:{INDIA:{code:"in",display:"National",dataKey:"SIDEBAR_"+i.default.generateRandomString(5)},WORLD:{code:null,display:"International",dataKey:"SIDEBAR_"+i.default.generateRandomString(5)},USA:{code:"us",display:"USA",dataKey:"SIDEBAR_"+i.default.generateRandomString(5)},CHINA:{code:"cn",display:"China",dataKey:"SIDEBAR_"+i.default.generateRandomString(5)},UK:{code:"gb",display:"UK",dataKey:"SIDEBAR_"+i.default.generateRandomString(5)}},API_FIELD:"country",display:"Countries",key:"countryEle",statePropertyName:"activeCountryLinkId"},CATEGORIES:{ELEMENTS:{BUSINESS:{code:"business",display:"Business",dataKey:"SIDEBAR_"+i.default.generateRandomString(5)},ENTERTAINMENT:{code:"entertainment",display:"Entertainment",dataKey:"SIDEBAR_"+i.default.generateRandomString(5)},TECHNOLOGY:{code:"technology",display:"Technology",dataKey:"SIDEBAR_"+i.default.generateRandomString(5)},SPORTS:{code:"sports",display:"Sports",dataKey:"SIDEBAR_"+i.default.generateRandomString(5)},SCIENCE:{code:"science",display:"Science",dataKey:"SIDEBAR_"+i.default.generateRandomString(5)},HEALTH:{code:"health",display:"Health",dataKey:"SIDEBAR_"+i.default.generateRandomString(5)}},API_FIELD:"category",display:"Categories",statePropertyName:"activeCategoryLinkId"}}},t.LINK_EVENT_NAME="SIDEBAR_"+i.default.generateRandomString(5)},function(e,t,n){"use strict";t.__esModule=!0;t.canUseDOM=!("undefined"==typeof window||!window.document||!window.document.createElement),t.addEventListener=function(e,t,n){return e.addEventListener?e.addEventListener(t,n,!1):e.attachEvent("on"+t,n)},t.removeEventListener=function(e,t,n){return e.removeEventListener?e.removeEventListener(t,n,!1):e.detachEvent("on"+t,n)},t.getConfirmation=function(e,t){return t(window.confirm(e))},t.supportsHistory=function(){var e=window.navigator.userAgent;return(-1===e.indexOf("Android 2.")&&-1===e.indexOf("Android 4.0")||-1===e.indexOf("Mobile Safari")||-1!==e.indexOf("Chrome")||-1!==e.indexOf("Windows Phone"))&&(window.history&&"pushState"in window.history)},t.supportsPopStateOnHashChange=function(){return-1===window.navigator.userAgent.indexOf("Trident")},t.supportsGoWithoutReloadUsingHash=function(){return-1===window.navigator.userAgent.indexOf("Firefox")},t.isExtraneousPopstateEvent=function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")}},function(e,t,n){"use strict";e.exports={}},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map(function(e){return t[e]}).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach(function(e){r[e]=e}),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,a,u=function(e){if(null===e||void 0===e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),l=1;l<arguments.length;l++){for(var s in n=Object(arguments[l]))o.call(n,s)&&(u[s]=n[s]);if(r){a=r(n);for(var c=0;c<a.length;c++)i.call(n,a[c])&&(u[a[c]]=n[a[c]])}}return u}},function(e,t,n){e.exports=function(){"use strict";var e={childContextTypes:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},t={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},n=Object.defineProperty,r=Object.getOwnPropertyNames,o=Object.getOwnPropertySymbols,i=Object.getOwnPropertyDescriptor,a=Object.getPrototypeOf,u=a&&a(Object);return function l(s,c,f){if("string"!=typeof c){if(u){var d=a(c);d&&d!==u&&l(s,d,f)}var p=r(c);o&&(p=p.concat(o(c)));for(var h=0;h<p.length;++h){var m=p[h];if(!(e[m]||t[m]||f&&f[m])){var g=i(c,m);try{n(s,m,g)}catch(e){}}}return s}return s}}()},function(e,t,n){var r=n(70);e.exports=p,e.exports.parse=i,e.exports.compile=function(e,t){return u(i(e,t))},e.exports.tokensToFunction=u,e.exports.tokensToRegExp=d;var o=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function i(e,t){for(var n,r=[],i=0,a=0,u="",c=t&&t.delimiter||"/";null!=(n=o.exec(e));){var f=n[0],d=n[1],p=n.index;if(u+=e.slice(a,p),a=p+f.length,d)u+=d[1];else{var h=e[a],m=n[2],g=n[3],y=n[4],v=n[5],b=n[6],E=n[7];u&&(r.push(u),u="");var C=null!=m&&null!=h&&h!==m,S="+"===b||"*"===b,w="?"===b||"*"===b,_=n[2]||c,x=y||v;r.push({name:g||i++,prefix:m||"",delimiter:_,optional:w,repeat:S,partial:C,asterisk:!!E,pattern:x?s(x):E?".*":"[^"+l(_)+"]+?"})}}return a<e.length&&(u+=e.substr(a)),u&&r.push(u),r}function a(e){return encodeURI(e).replace(/[\/?#]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})}function u(e){for(var t=new Array(e.length),n=0;n<e.length;n++)"object"==typeof e[n]&&(t[n]=new RegExp("^(?:"+e[n].pattern+")$"));return function(n,o){for(var i="",u=n||{},l=(o||{}).pretty?a:encodeURIComponent,s=0;s<e.length;s++){var c=e[s];if("string"!=typeof c){var f,d=u[c.name];if(null==d){if(c.optional){c.partial&&(i+=c.prefix);continue}throw new TypeError('Expected "'+c.name+'" to be defined')}if(r(d)){if(!c.repeat)throw new TypeError('Expected "'+c.name+'" to not repeat, but received `'+JSON.stringify(d)+"`");if(0===d.length){if(c.optional)continue;throw new TypeError('Expected "'+c.name+'" to not be empty')}for(var p=0;p<d.length;p++){if(f=l(d[p]),!t[s].test(f))throw new TypeError('Expected all "'+c.name+'" to match "'+c.pattern+'", but received `'+JSON.stringify(f)+"`");i+=(0===p?c.prefix:c.delimiter)+f}}else{if(f=c.asterisk?encodeURI(d).replace(/[?#]/g,function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}):l(d),!t[s].test(f))throw new TypeError('Expected "'+c.name+'" to match "'+c.pattern+'", but received "'+f+'"');i+=c.prefix+f}}else i+=c}return i}}function l(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function s(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function c(e,t){return e.keys=t,e}function f(e){return e.sensitive?"":"i"}function d(e,t,n){r(t)||(n=t||n,t=[]);for(var o=(n=n||{}).strict,i=!1!==n.end,a="",u=0;u<e.length;u++){var s=e[u];if("string"==typeof s)a+=l(s);else{var d=l(s.prefix),p="(?:"+s.pattern+")";t.push(s),s.repeat&&(p+="(?:"+d+p+")*"),a+=p=s.optional?s.partial?d+"("+p+")?":"(?:"+d+"("+p+"))?":d+"("+p+")"}}var h=l(n.delimiter||"/"),m=a.slice(-h.length)===h;return o||(a=(m?a.slice(0,-h.length):a)+"(?:"+h+"(?=$))?"),a+=i?"$":o&&m?"":"(?="+h+"|$)",c(new RegExp("^"+a,f(n)),t)}function p(e,t,n){return r(t)||(n=t||n,t=[]),n=n||{},e instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return c(e,t)}(e,t):r(e)?function(e,t,n){for(var r=[],o=0;o<e.length;o++)r.push(p(e[o],t,n).source);return c(new RegExp("(?:"+r.join("|")+")",f(n)),t)}(e,t,n):function(e,t,n){return d(i(e,n),t,n)}(e,t,n)}},function(e,t,n){"use strict";t.__esModule=!0;var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=s(n(2)),a=n(6),u=n(14),l=s(n(13));function s(e){return e&&e.__esModule?e:{default:e}}var c=function(e,t,n){return Math.min(Math.max(e,t),n)};t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.getUserConfirmation,n=e.initialEntries,s=void 0===n?["/"]:n,f=e.initialIndex,d=void 0===f?0:f,p=e.keyLength,h=void 0===p?6:p,m=(0,l.default)(),g=function(e){o(S,e),S.length=S.entries.length,m.notifyListeners(S.location,S.action)},y=function(){return Math.random().toString(36).substr(2,h)},v=c(d,0,s.length-1),b=s.map(function(e){return"string"==typeof e?(0,u.createLocation)(e,void 0,y()):(0,u.createLocation)(e,void 0,e.key||y())}),E=a.createPath,C=function(e){var n=c(S.index+e,0,S.entries.length-1),r=S.entries[n];m.confirmTransitionTo(r,"POP",t,function(e){e?g({action:"POP",location:r,index:n}):g()})},S={length:b.length,action:"POP",location:b[v],index:v,entries:b,createHref:E,push:function(e,n){(0,i.default)(!("object"===(void 0===e?"undefined":r(e))&&void 0!==e.state&&void 0!==n),"You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");var o=(0,u.createLocation)(e,n,y(),S.location);m.confirmTransitionTo(o,"PUSH",t,function(e){if(e){var t=S.index+1,n=S.entries.slice(0);n.length>t?n.splice(t,n.length-t,o):n.push(o),g({action:"PUSH",location:o,index:t,entries:n})}})},replace:function(e,n){(0,i.default)(!("object"===(void 0===e?"undefined":r(e))&&void 0!==e.state&&void 0!==n),"You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");var o=(0,u.createLocation)(e,n,y(),S.location);m.confirmTransitionTo(o,"REPLACE",t,function(e){e&&(S.entries[S.index]=o,g({action:"REPLACE",location:o}))})},go:C,goBack:function(){return C(-1)},goForward:function(){return C(1)},canGo:function(e){var t=S.index+e;return t>=0&&t<S.entries.length},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return m.setPrompt(e)},listen:function(e){return m.appendListener(e)}};return S}},function(e,t,n){"use strict";t.__esModule=!0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=c(n(2)),i=c(n(3)),a=n(14),u=n(6),l=c(n(13)),s=n(27);function c(e){return e&&e.__esModule?e:{default:e}}var f={hashbang:{encodePath:function(e){return"!"===e.charAt(0)?e:"!/"+(0,u.stripLeadingSlash)(e)},decodePath:function(e){return"!"===e.charAt(0)?e.substr(1):e}},noslash:{encodePath:u.stripLeadingSlash,decodePath:u.addLeadingSlash},slash:{encodePath:u.addLeadingSlash,decodePath:u.addLeadingSlash}},d=function(){var e=window.location.href,t=e.indexOf("#");return-1===t?"":e.substring(t+1)},p=function(e){var t=window.location.href.indexOf("#");window.location.replace(window.location.href.slice(0,t>=0?t:0)+"#"+e)};t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};(0,i.default)(s.canUseDOM,"Hash history needs a DOM");var t=window.history,n=(0,s.supportsGoWithoutReloadUsingHash)(),c=e.getUserConfirmation,h=void 0===c?s.getConfirmation:c,m=e.hashType,g=void 0===m?"slash":m,y=e.basename?(0,u.stripTrailingSlash)((0,u.addLeadingSlash)(e.basename)):"",v=f[g],b=v.encodePath,E=v.decodePath,C=function(){var e=E(d());return(0,o.default)(!y||(0,u.hasBasename)(e,y),'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "'+e+'" to begin with "'+y+'".'),y&&(e=(0,u.stripBasename)(e,y)),(0,a.createLocation)(e)},S=(0,l.default)(),w=function(e){r(j,e),j.length=t.length,S.notifyListeners(j.location,j.action)},_=!1,x=null,O=function(){var e=d(),t=b(e);if(e!==t)p(t);else{var n=C(),r=j.location;if(!_&&(0,a.locationsAreEqual)(r,n))return;if(x===(0,u.createPath)(n))return;x=null,R(n)}},R=function(e){_?(_=!1,w()):S.confirmTransitionTo(e,"POP",h,function(t){t?w({action:"POP",location:e}):T(e)})},T=function(e){var t=j.location,n=U.lastIndexOf((0,u.createPath)(t));-1===n&&(n=0);var r=U.lastIndexOf((0,u.createPath)(e));-1===r&&(r=0);var o=n-r;o&&(_=!0,D(o))},k=d(),N=b(k);k!==N&&p(N);var P=C(),U=[(0,u.createPath)(P)],D=function(e){(0,o.default)(n,"Hash history go(n) causes a full page reload in this browser"),t.go(e)},A=0,I=function(e){1===(A+=e)?(0,s.addEventListener)(window,"hashchange",O):0===A&&(0,s.removeEventListener)(window,"hashchange",O)},M=!1,j={length:t.length,action:"POP",location:P,createHref:function(e){return"#"+b(y+(0,u.createPath)(e))},push:function(e,t){(0,o.default)(void 0===t,"Hash history cannot push state; it is ignored");var n=(0,a.createLocation)(e,void 0,void 0,j.location);S.confirmTransitionTo(n,"PUSH",h,function(e){if(e){var t=(0,u.createPath)(n),r=b(y+t);if(d()!==r){x=t,function(e){window.location.hash=e}(r);var i=U.lastIndexOf((0,u.createPath)(j.location)),a=U.slice(0,-1===i?0:i+1);a.push(t),U=a,w({action:"PUSH",location:n})}else(0,o.default)(!1,"Hash history cannot PUSH the same path; a new entry will not be added to the history stack"),w()}})},replace:function(e,t){(0,o.default)(void 0===t,"Hash history cannot replace state; it is ignored");var n=(0,a.createLocation)(e,void 0,void 0,j.location);S.confirmTransitionTo(n,"REPLACE",h,function(e){if(e){var t=(0,u.createPath)(n),r=b(y+t);d()!==r&&(x=t,p(r));var o=U.indexOf((0,u.createPath)(j.location));-1!==o&&(U[o]=t),w({action:"REPLACE",location:n})}})},go:D,goBack:function(){return D(-1)},goForward:function(){return D(1)},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=S.setPrompt(e);return M||(I(1),M=!0),function(){return M&&(M=!1,I(-1)),t()}},listen:function(e){var t=S.appendListener(e);return I(1),function(){I(-1),t()}}};return j}},function(e,t,n){"use strict";t.__esModule=!0;var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=f(n(2)),a=f(n(3)),u=n(14),l=n(6),s=f(n(13)),c=n(27);function f(e){return e&&e.__esModule?e:{default:e}}var d=function(){try{return window.history.state||{}}catch(e){return{}}};t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};(0,a.default)(c.canUseDOM,"Browser history needs a DOM");var t=window.history,n=(0,c.supportsHistory)(),f=!(0,c.supportsPopStateOnHashChange)(),p=e.forceRefresh,h=void 0!==p&&p,m=e.getUserConfirmation,g=void 0===m?c.getConfirmation:m,y=e.keyLength,v=void 0===y?6:y,b=e.basename?(0,l.stripTrailingSlash)((0,l.addLeadingSlash)(e.basename)):"",E=function(e){var t=e||{},n=t.key,r=t.state,o=window.location,a=o.pathname+o.search+o.hash;return(0,i.default)(!b||(0,l.hasBasename)(a,b),'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "'+a+'" to begin with "'+b+'".'),b&&(a=(0,l.stripBasename)(a,b)),(0,u.createLocation)(a,r,n)},C=function(){return Math.random().toString(36).substr(2,v)},S=(0,s.default)(),w=function(e){o(M,e),M.length=t.length,S.notifyListeners(M.location,M.action)},_=function(e){(0,c.isExtraneousPopstateEvent)(e)||R(E(e.state))},x=function(){R(E(d()))},O=!1,R=function(e){O?(O=!1,w()):S.confirmTransitionTo(e,"POP",g,function(t){t?w({action:"POP",location:e}):T(e)})},T=function(e){var t=M.location,n=N.indexOf(t.key);-1===n&&(n=0);var r=N.indexOf(e.key);-1===r&&(r=0);var o=n-r;o&&(O=!0,U(o))},k=E(d()),N=[k.key],P=function(e){return b+(0,l.createPath)(e)},U=function(e){t.go(e)},D=0,A=function(e){1===(D+=e)?((0,c.addEventListener)(window,"popstate",_),f&&(0,c.addEventListener)(window,"hashchange",x)):0===D&&((0,c.removeEventListener)(window,"popstate",_),f&&(0,c.removeEventListener)(window,"hashchange",x))},I=!1,M={length:t.length,action:"POP",location:k,createHref:P,push:function(e,o){(0,i.default)(!("object"===(void 0===e?"undefined":r(e))&&void 0!==e.state&&void 0!==o),"You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");var a=(0,u.createLocation)(e,o,C(),M.location);S.confirmTransitionTo(a,"PUSH",g,function(e){if(e){var r=P(a),o=a.key,u=a.state;if(n)if(t.pushState({key:o,state:u},null,r),h)window.location.href=r;else{var l=N.indexOf(M.location.key),s=N.slice(0,-1===l?0:l+1);s.push(a.key),N=s,w({action:"PUSH",location:a})}else(0,i.default)(void 0===u,"Browser history cannot push state in browsers that do not support HTML5 history"),window.location.href=r}})},replace:function(e,o){(0,i.default)(!("object"===(void 0===e?"undefined":r(e))&&void 0!==e.state&&void 0!==o),"You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");var a=(0,u.createLocation)(e,o,C(),M.location);S.confirmTransitionTo(a,"REPLACE",g,function(e){if(e){var r=P(a),o=a.key,u=a.state;if(n)if(t.replaceState({key:o,state:u},null,r),h)window.location.replace(r);else{var l=N.indexOf(M.location.key);-1!==l&&(N[l]=a.key),w({action:"REPLACE",location:a})}else(0,i.default)(void 0===u,"Browser history cannot replace state in browsers that do not support HTML5 history"),window.location.replace(r)}})},go:U,goBack:function(){return U(-1)},goForward:function(){return U(1)},block:function(){var e=arguments.length>0&&void 0!==arguments[0]&&arguments[0],t=S.setPrompt(e);return I||(A(1),I=!0),function(){return I&&(I=!1,A(-1)),t()}},listen:function(e){var t=S.appendListener(e);return A(1),function(){A(-1),t()}}};return M}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=s(n(1)),i=s(n(7)),a=s(n(5)),u=s(n(84)),l=n(19);function s(e){return e&&e.__esModule?e:{default:e}}a.default.generateRandomString(5);var c=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={},n.sourceListItemClicked=n.sourceListItemClicked.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),r(t,[{key:"sourceListItemClicked",value:function(e,t){var n=t.dataKey;i.default.publish(l.SOURCE_LIST_ITEM_EVENT,{code:n})}},{key:"getNewsSourceElements",value:function(e){var t=this;return Object.keys(e).map(function(n){var r=e[n];return o.default.createElement("li",{onClick:function(e){return t.sourceListItemClicked(e,{dataKey:r.SOURCE_ID})}},o.default.createElement("a",{className:"dropdown-item",href:"#",key:r.KEY,"data-key":r.SOURCE_ID},r.SOURCE_NAME))})}},{key:"render",value:function(){return o.default.createElement("div",{className:"btn-group container-fluid"},o.default.createElement("button",{type:"button",className:"btn btn-default dropdown-toggle container-fluid","data-toggle":"dropdown"},this.props.title,o.default.createElement("span",{className:"caret"})),o.default.createElement("ul",{className:"dropdown-menu container-fluid "+u.default.scrollable_menu,role:"menu"},this.getNewsSourceElements(this.props.list)))}}]),t}();t.default=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=c(n(1)),i=c(n(7)),a=c(n(12)),u=n(19),l=c(n(35)),s=c(n(11));function c(e){return e&&e.__esModule?e:{default:e}}var f=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={newsData:[],showNewsPanel:!1,newsPanelLoading:!0,sourceList:u.SOURCES_LIST},n.sourceListSubscription=null,n.newsService=new s.default,n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),r(t,[{key:"componentDidMount",value:function(){var e=this;this.sourceListSubscription=i.default.subscribe(u.SOURCE_LIST_ITEM_EVENT,this.sourceListItemClicked.bind(this)),this.newsService.fetchNewsSources().then(function(t){console.log("**** sourceData",t),e.setState({sourceList:t})})}},{key:"componentWillUnmount",value:function(){this.sourceListSubscription&&i.default.unsubscribe(this.sourceListSubscription),this.newsService=null}},{key:"sourceListItemClicked",value:function(e,t){t.code&&this.fetchHeadlinesAndRender({sources:t.code})}},{key:"fetchHeadlinesAndRender",value:function(e){var t=this;this.setState({showNewsPanel:!0}),this.newsService.fetchTopHeadlines(e).then(function(e){t.setState({newsData:e,newsPanelLoading:!1})})}},{key:"render",value:function(){return o.default.createElement("div",{className:"container"},o.default.createElement(l.default,{list:this.state.sourceList,title:u.SOURCES_DROPDOWN_TITLE}),this.state.showNewsPanel?o.default.createElement(a.default,{newsData:this.state.newsData,isLoading:this.state.newsPanelLoading}):null)}}]),t}();t.default=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=u(n(1)),i=u(n(7)),a=(u(n(5)),n(20));function u(e){return e&&e.__esModule?e:{default:e}}var l=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={},n.searchKey=e.searchKey,n.SEARCH_TOPIC="SEARCH_BAR_CLICKED_"+(e.searchKey?e.searchKey:""),n.searchClicked=n.searchClicked.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),r(t,[{key:"searchClicked",value:function(e){if(e.type==a.EVENTS.KEYUP.name&&e.keyCode!=a.KEYCODES.ENTER)return!1;var t=document.getElementById("search_"+this.searchKey).value;t&&t.length>0&&i.default.publish(this.SEARCH_TOPIC,{text:t})}},{key:"render",value:function(){return o.default.createElement("div",{className:"input-group md-form form-sm form-2 pl-0"},o.default.createElement("input",{className:"form-control my-0 py-1 amber-border",id:"search_"+this.searchKey,type:"text",placeholder:"Search","aria-label":"Search",onKeyUp:this.searchClicked}),o.default.createElement("div",{className:"input-group-append"},o.default.createElement("span",{className:"input-group-text amber lighten-3",id:"basic-text1",onClick:this.searchClicked},o.default.createElement("i",{className:"fa fa-search text-grey","aria-hidden":"true"}))))}}]),t}();t.default=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=f(n(1)),i=f(n(7)),a=f(n(37)),u=f(n(12)),l=f(n(5)),s=f(n(11)),c=n(9);function f(e){return e&&e.__esModule?e:{default:e}}var d=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={searchResults:[],showNewsPanel:!1,newsPanelLoading:!0,newsPanelScrolledDown:!1},n.searchBarId=l.default.generateRandomString(5),n.SEARCH_TOPIC="SEARCH_BAR_CLICKED_"+n.searchBarId,n.searchPage=1,n.newsService=new s.default,n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),r(t,[{key:"componentDidMount",value:function(){this.searchBarSubscription=i.default.subscribe(this.SEARCH_TOPIC,this.searchBarClicked.bind(this)),this.scrolledDownSubscription=i.default.subscribe(c.PAGE_SCROLLED_BOTTOM_EVENT,this.pageScrolledDown.bind(this))}},{key:"componentWillUnmount",value:function(){this.scrolledDownSubscription&&i.default.unsubscribe(this.scrolledDownSubscription),this.searchBarSubscription&&i.default.unsubscribe(this.searchBarSubscription)}},{key:"pageScrolledDown",value:function(e,t){this.setState({newsPanelScrolledDown:!0}),this.fetchSearchData({},{loadMoreData:!0})}},{key:"searchBarClicked",value:function(e,t){this.setState({showNewsPanel:!0}),this.fetchSearchData({q:t.text})}},{key:"fetchSearchData",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.newsService.searchNews(t,{loadMoreData:n.loadMoreData||!1}).then(function(t){e.setState({searchResults:t,newsPanelLoading:!1,newsPanelScrolledDown:!1})})}},{key:"render",value:function(){return o.default.createElement("div",{className:"container"},o.default.createElement(a.default,{searchKey:this.searchBarId}),this.state.showNewsPanel?o.default.createElement(u.default,{scrollSupport:!0,newsData:this.state.searchResults,isLoading:this.state.newsPanelLoading,isScrolledDown:this.state.newsPanelScrolledDown}):null)}}]),t}();t.default=d},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o={HOSTS:{NEWS:"https://newsapi.org"},APIS:{NEWS:{HEADLINES:"/v2/top-headlines",SEARCH:"/v2/everything",SOURCES:"/v2/sources"}}},i=(r={},Object.keys(o.HOSTS).forEach(function(e){r[e]={},Object.keys(o.APIS[e]).forEach(function(t){var n=new URL(o.HOSTS[e]),i=new URL(o.APIS[e][t],n).href;r[e][t]=i})}),r);t.default=i},function(e,t,n){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},function(e,t,n){"use strict";var r=n(21);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise(function(e){t=e});var n=this;e(function(e){n.reason||(n.reason=new r(e),t(n.reason))})}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var e;return{token:new o(function(t){e=t}),cancel:e}},e.exports=o},function(e,t,n){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,n){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,n){"use strict";var r=n(4);e.exports=function(e,t,n){return r.forEach(n,function(n){e=n(e,t)}),e}},function(e,t,n){"use strict";var r=n(4),o=n(44),i=n(22),a=n(10),u=n(43),l=n(42);function s(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return s(e),e.baseURL&&!u(e.url)&&(e.url=l(e.baseURL,e.url)),e.headers=e.headers||{},e.data=o(e.data,e.headers,e.transformRequest),e.headers=r.merge(e.headers.common||{},e.headers[e.method]||{},e.headers||{}),r.forEach(["delete","get","head","post","put","patch","common"],function(t){delete e.headers[t]}),(e.adapter||a.adapter)(e).then(function(t){return s(e),t.data=o(t.data,t.headers,e.transformResponse),t},function(t){return i(t)||(s(e),t&&t.response&&(t.response.data=o(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)})}},function(e,t,n){"use strict";var r=n(4);function o(){this.handlers=[]}o.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){r.forEach(this.handlers,function(t){null!==t&&e(t)})},e.exports=o},function(e,t,n){"use strict";var r=n(4);e.exports=r.isStandardBrowserEnv()?{write:function(e,t,n,o,i,a){var u=[];u.push(e+"="+encodeURIComponent(t)),r.isNumber(n)&&u.push("expires="+new Date(n).toGMTString()),r.isString(o)&&u.push("path="+o),r.isString(i)&&u.push("domain="+i),!0===a&&u.push("secure"),document.cookie=u.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,n){"use strict";var r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";function o(){this.message="String contains an invalid character"}o.prototype=new Error,o.prototype.code=5,o.prototype.name="InvalidCharacterError",e.exports=function(e){for(var t,n,i=String(e),a="",u=0,l=r;i.charAt(0|u)||(l="=",u%1);a+=l.charAt(63&t>>8-u%1*8)){if((n=i.charCodeAt(u+=.75))>255)throw new o;t=t<<8|n}return a}},function(e,t,n){"use strict";var r=n(4);e.exports=r.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function o(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=o(window.location.href),function(t){var n=r.isString(t)?o(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0}},function(e,t,n){"use strict";var r=n(4),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,n,i,a={};return e?(r.forEach(e.split("\n"),function(e){if(i=e.indexOf(":"),t=r.trim(e.substr(0,i)).toLowerCase(),n=r.trim(e.substr(i+1)),t){if(a[t]&&o.indexOf(t)>=0)return;a[t]="set-cookie"===t?(a[t]?a[t]:[]).concat([n]):a[t]?a[t]+", "+n:n}}),a):a}},function(e,t,n){"use strict";var r=n(4);function o(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,n){if(!t)return e;var i;if(n)i=n(t);else if(r.isURLSearchParams(t))i=t.toString();else{var a=[];r.forEach(t,function(e,t){null!==e&&void 0!==e&&(r.isArray(e)?t+="[]":e=[e],r.forEach(e,function(e){r.isDate(e)?e=e.toISOString():r.isObject(e)&&(e=JSON.stringify(e)),a.push(o(t)+"="+o(e))}))}),i=a.join("&")}return i&&(e+=(-1===e.indexOf("?")?"?":"&")+i),e}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,o){return e.config=t,n&&(e.code=n),e.request=r,e.response=o,e}},function(e,t,n){"use strict";var r=n(23);e.exports=function(e,t,n){var o=n.config.validateStatus;n.status&&o&&!o(n.status)?t(r("Request failed with status code "+n.status,n.config,null,n.request,n)):e(n)}},function(e,t,n){"use strict";var r=n(4);e.exports=function(e,t){r.forEach(e,function(n,r){r!==t&&r.toUpperCase()===t.toUpperCase()&&(e[t]=n,delete e[r])})}},function(e,t){var n,r,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function u(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var l,s=[],c=!1,f=-1;function d(){c&&l&&(c=!1,l.length?s=l.concat(s):f=-1,s.length&&p())}function p(){if(!c){var e=u(d);c=!0;for(var t=s.length;t;){for(l=s,s=[];++f<t;)l&&l[f].run();f=-1,t=s.length}l=null,c=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function m(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];s.push(new h(e,t)),1!==s.length||c||u(p)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=m,o.addListener=m,o.once=m,o.off=m,o.removeListener=m,o.removeAllListeners=m,o.emit=m,o.prependListener=m,o.prependOnceListener=m,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,n){"use strict";var r=n(10),o=n(4),i=n(46),a=n(45);function u(e){this.defaults=e,this.interceptors={request:new i,response:new i}}u.prototype.request=function(e){"string"==typeof e&&(e=o.merge({url:arguments[0]},arguments[1])),(e=o.merge(r,{method:"get"},this.defaults,e)).method=e.method.toLowerCase();var t=[a,void 0],n=Promise.resolve(e);for(this.interceptors.request.forEach(function(e){t.unshift(e.fulfilled,e.rejected)}),this.interceptors.response.forEach(function(e){t.push(e.fulfilled,e.rejected)});t.length;)n=n.then(t.shift(),t.shift());return n},o.forEach(["delete","get","head","options"],function(e){u.prototype[e]=function(t,n){return this.request(o.merge(n||{},{method:e,url:t}))}}),o.forEach(["post","put","patch"],function(e){u.prototype[e]=function(t,n,r){return this.request(o.merge(r||{},{method:e,url:t,data:n}))}}),e.exports=u},function(e,t){function n(e){return!!e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}
/*!
 * Determine if an object is a Buffer
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
e.exports=function(e){return null!=e&&(n(e)||function(e){return"function"==typeof e.readFloatLE&&"function"==typeof e.slice&&n(e.slice(0,0))}(e)||!!e._isBuffer)}},function(e,t,n){"use strict";var r=n(4),o=n(25),i=n(56),a=n(10);function u(e){var t=new i(e),n=o(i.prototype.request,t);return r.extend(n,i.prototype,t),r.extend(n,t),n}var l=u(a);l.Axios=i,l.create=function(e){return u(r.merge(a,e))},l.Cancel=n(21),l.CancelToken=n(41),l.isCancel=n(22),l.all=function(e){return Promise.all(e)},l.spread=n(40),e.exports=l,e.exports.default=l},function(e,t,n){e.exports=n(58)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=l(n(1)),i=l(n(7)),a=(l(n(5)),l(n(85))),u=n(26);function l(e){return e&&e.__esModule?e:{default:e}}var s=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={activeLinks:{}},n.linkClicked=n.linkClicked.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),r(t,[{key:"linkClicked",value:function(e,t){var n=t.group,r=t.element,o=t.dataKey,a=u.SIDEBAR_LINKS.GROUPS,l={activeLinks:this.state.activeLinks};l.activeLinks[n]&&l.activeLinks[n].dataKey==o?l.activeLinks[n]=null:l.activeLinks[n]={dataKey:o,code:a[n].ELEMENTS[r].code};var s={};Object.keys(a).forEach(function(e){l.activeLinks[e]&&(s[a[e].API_FIELD]=l.activeLinks[e].code)}),i.default.publish(u.LINK_EVENT_NAME,s),this.setState(l)}},{key:"getSideBar",value:function(){var e=this,t=[];return Object.keys(u.SIDEBAR_LINKS.GROUPS).forEach(function(n){var r=u.SIDEBAR_LINKS.GROUPS[n],i=o.default.createElement("li",{className:"nav-header",key:"Group_"+r.key},r.display);t.push(i),Object.keys(r.ELEMENTS).forEach(function(i){var u=r.ELEMENTS[i],l=o.default.createElement("li",{className:"nav-item "+(e.state.activeLinks[n]&&e.state.activeLinks[n].dataKey==u.dataKey?a.default.active:""),onClick:function(t){return e.linkClicked(t,{group:n,element:i,dataKey:u.dataKey})},key:"SideEle_"+u.code},o.default.createElement("a",{className:"nav-link",href:"#"},u.display));t.push(l)})}),t}},{key:"render",value:function(){return o.default.createElement("div",{className:"container "+a.default.sidebar_component},o.default.createElement("ul",{className:"nav nav-list flex-column"},this.getSideBar()))}}]),t}();t.default=s},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=a(n(1)),i=a(n(86));function a(e){return e&&e.__esModule?e:{default:e}}var u=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),r(t,[{key:"render",value:function(){return o.default.createElement("div",{className:i.default.spinner},o.default.createElement("div",{className:i.default.rect1}),o.default.createElement("div",{className:i.default.rect2}),o.default.createElement("div",{className:i.default.rect3}),o.default.createElement("div",{className:i.default.rect4}),o.default.createElement("div",{className:i.default.rect5}))}}]),t}();t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(1),a=(r=i)&&r.__esModule?r:{default:r};var u=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Component),o(t,[{key:"render",value:function(){return a.default.createElement("div",{className:"container text-center"},a.default.createElement("img",{src:"/assets/No-results-found.jpg"}))}}]),t}();t.default=u},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=a(n(1)),i=a(n(88));function a(e){return e&&e.__esModule?e:{default:e}}var u=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={},n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),r(t,[{key:"render",value:function(){return o.default.createElement("div",{className:i.default.news_card},o.default.createElement("a",{href:this.props.newsLink},o.default.createElement("div",{className:"card"},o.default.createElement("div",{className:"card-body"},o.default.createElement("h5",{className:"card-title"},this.props.title),o.default.createElement("p",{className:"card-text"},this.props.content),o.default.createElement("p",{className:"card-text"},o.default.createElement("small",{className:"text-muted"},this.props.author))),this.props.imageUrl?o.default.createElement("img",{className:"card-img-bottom",src:this.props.imageUrl}):null)))}}]),t}();t.default=u},function(e,t,n){"undefined"!=typeof self&&self,e.exports=function(e){function t(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}var n={};return t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:r})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=2)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();t.Circle=function(){function e(t,n,r,o){var i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"white";(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")})(this,e),this._context=t,this._xCenter=n,this._yCenter=r,this._radius=o,this._fillStyle=i}return r(e,[{key:"render",value:function(){this._context.beginPath(),this._context.arc(this.xCenter,this.yCenter,this.radius,0,2*Math.PI),this._context.fillStyle=this._fillStyle,this._context.fill()}},{key:"xCenter",set:function(e){this._xCenter=e,this.render()},get:function(){return this._xCenter}},{key:"yCenter",set:function(e){this.yCenter=e,this.render()},get:function(){return this._yCenter}},{key:"radius",set:function(e){this._radius=e,this.render()},get:function(){return this._radius}}]),e}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DEFAULT_PROPERTIES={width:300,height:300,fillColor:"#FFFFFF",isBorderFilled:!0,watchFace:"FACE_1",displayTime:new Date,displayConstantTime:!1,hingeColor:"#333",handColor:"#333",frameGradientColorList:["#333","#FFFFFF","#333"]}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ClockApp=void 0;var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(3),a=(r=i)&&r.__esModule?r:{default:r},u=n(4),l=n(7),s=n(1);t.ClockApp=function(){function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")})(this,e),this._rootElement=t,this._setConfigurations(n),this._initClockStructure(),this._initClockUi(),this.render(),this._initTimer()}return o(e,[{key:"configure",value:function(e){this._resetCanvasDimensionsSafe(e),this._setConfigurations(e),this._initClockUi(),this.render()}},{key:"render",value:function(){this._simpleFace.render(),this._renderTime()}},{key:"_renderTime",value:function(){this._displayConstantTime||(this._displayTime=new Date);var e=this._getTimeHrMmSs(this._displayTime),t=e.hour,n=e.minute,r=e.second;this._simpleFace.hourHand.position=t,this._simpleFace.minuteHand.position=n,this._simpleFace.secondHand.position=r}},{key:"_initClockStructure",value:function(){this._clockContainerEle=this._getClockContainerEle(),this._clockCanvasEle=this._getCanvas(this._canvasWidth,this._canvasHeight),this._clockCanvas=this._clockCanvasEle[0],(0,a.default)(this._rootElement).append(this._clockContainerEle).append(this._clockCanvasEle)}},{key:"_initClockUi",value:function(){var e=this._clockCanvas.getContext("2d");e.resetTransform(),e.clearRect(0,0,this._canvasWidth,this._canvasHeight),e.translate(this._canvasWidth/2,this._canvasHeight/2),this._simpleFace=new u.SimpleFace(e,0,0,this._clockRadius,this._currentFaceConfig)}},{key:"_initTimer",value:function(){this._displayConstantTime||(this.intervalId&&clearInterval(this.intervalId),this.intervalId=setInterval(this.render.bind(this),1e3))}},{key:"_setConfigurations",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};this._canvasWidth=e.width||this._canvasWidth||s.DEFAULT_PROPERTIES.width,this._canvasHeight=e.height||this._canvasHeight||s.DEFAULT_PROPERTIES.height,this._clockRadius=e.radius||this._clockRadius||Math.min(this._canvasWidth,this._canvasHeight)/2-10,this._watchFace=e.watchFace||this._watchFace||s.DEFAULT_PROPERTIES.watchFace,this._currentFaceConfig=e.faceConfig||l.faceConfig[e.watchFace]||this._currentFaceConfig||l.faceConfig[this._watchFace]||{},this._displayTime=e.displayTime||this._displayTime||s.DEFAULT_PROPERTIES.displayTime,this._displayConstantTime=e.displayConstantTime||this._displayConstantTime||s.DEFAULT_PROPERTIES.displayConstantTime}},{key:"_resetCanvasDimensionsSafe",value:function(e){var t=e.width,n=e.height;if((t||n)&&(t!=this._canvasWidth||n!=this._canvasHeight)){var r=this._clockCanvas.getContext("2d");r.canvas.width=t,r.canvas.height=n}}},{key:"_getCanvas",value:function(e,t){return(0,a.default)('<canvas width="'+e+'" height="'+t+'"></canvas>')}},{key:"_getClockContainerEle",value:function(){return(0,a.default)('<div class="jq-clock"></div>')}},{key:"_getTimeHrMmSs",value:function(e){var t=e.getHours(),n=e.getMinutes(),r=e.getSeconds();return t=(t%=12)*Math.PI/6+n*Math.PI/360+r*Math.PI/21600,n=n*Math.PI/30+r*Math.PI/1800,r=r*Math.PI/30,{hour:t,minute:n,second:r}}}]),e}()},function(e,t,n){var r;
/*!
 * jQuery JavaScript Library v3.4.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2019-05-01T21:04Z
 */!function(t,n){"use strict";"object"==typeof e&&"object"==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:this,function(n,o){"use strict";function i(e,t,n){var r,o,i=(n=n||ne).createElement("script");if(i.text=e,t)for(r in ge)(o=t[r]||t.getAttribute&&t.getAttribute(r))&&i.setAttribute(r,o);n.head.appendChild(i).parentNode.removeChild(i)}function a(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?le[se.call(e)]||"object":typeof e}function u(e){var t=!!e&&"length"in e&&e.length,n=a(e);return!he(e)&&!me(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}function l(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}function s(e,t,n){return he(t)?ye.grep(e,function(e,r){return!!t.call(e,r,e)!==n}):t.nodeType?ye.grep(e,function(e){return e===t!==n}):"string"!=typeof t?ye.grep(e,function(e){return ue.call(t,e)>-1!==n}):ye.filter(t,e,n)}function c(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}function f(e){return e}function d(e){throw e}function p(e,t,n,r){var o;try{e&&he(o=e.promise)?o.call(e).done(t).fail(n):e&&he(o=e.then)?o.call(e,t,n):t.apply(void 0,[e].slice(r))}catch(e){n.apply(void 0,[e])}}function h(){ne.removeEventListener("DOMContentLoaded",h),n.removeEventListener("load",h),ye.ready()}function m(e,t){return t.toUpperCase()}function g(e){return e.replace(Ue,"ms-").replace(De,m)}function y(){this.expando=ye.expando+y.uid++}function v(e,t,n){var r;if(void 0===n&&1===e.nodeType)if(r="data-"+t.replace(Le,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(r))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:je.test(e)?JSON.parse(e):e)}(n)}catch(e){}Me.set(e,t,n)}else n=void 0;return n}function b(e,t,n,r){var o,i,a=20,u=r?function(){return r.cur()}:function(){return ye.css(e,t,"")},l=u(),s=n&&n[3]||(ye.cssNumber[t]?"":"px"),c=e.nodeType&&(ye.cssNumber[t]||"px"!==s&&+l)&&He.exec(ye.css(e,t));if(c&&c[3]!==s){for(l/=2,s=s||c[3],c=+l||1;a--;)ye.style(e,t,c+s),(1-i)*(1-(i=u()/l||.5))<=0&&(a=0),c/=i;c*=2,ye.style(e,t,c+s),n=n||[]}return n&&(c=+c||+l||0,o=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=s,r.start=c,r.end=o)),o}function E(e){var t,n=e.ownerDocument,r=e.nodeName,o=Ve[r];return o||(t=n.body.appendChild(n.createElement(r)),o=ye.css(t,"display"),t.parentNode.removeChild(t),"none"===o&&(o="block"),Ve[r]=o,o)}function C(e,t){for(var n,r,o=[],i=0,a=e.length;i<a;i++)(r=e[i]).style&&(n=r.style.display,t?("none"===n&&(o[i]=Ie.get(r,"display")||null,o[i]||(r.style.display="")),""===r.style.display&&We(r)&&(o[i]=E(r))):"none"!==n&&(o[i]="none",Ie.set(r,"display",n)));for(i=0;i<a;i++)null!=o[i]&&(e[i].style.display=o[i]);return e}function S(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&l(e,t)?ye.merge([e],n):n}function w(e,t){for(var n=0,r=e.length;n<r;n++)Ie.set(e[n],"globalEval",!t||Ie.get(t[n],"globalEval"))}function _(e,t,n,r,o){for(var i,u,l,s,c,f,d=t.createDocumentFragment(),p=[],h=0,m=e.length;h<m;h++)if((i=e[h])||0===i)if("object"===a(i))ye.merge(p,i.nodeType?[i]:i);else if(tt.test(i)){for(u=u||d.appendChild(t.createElement("div")),l=(Ge.exec(i)||["",""])[1].toLowerCase(),s=Xe[l]||Xe._default,u.innerHTML=s[1]+ye.htmlPrefilter(i)+s[2],f=s[0];f--;)u=u.lastChild;ye.merge(p,u.childNodes),(u=d.firstChild).textContent=""}else p.push(t.createTextNode(i));for(d.textContent="",h=0;i=p[h++];)if(r&&ye.inArray(i,r)>-1)o&&o.push(i);else if(c=qe(i),u=S(d.appendChild(i),"script"),c&&w(u),n)for(f=0;i=u[f++];)Qe.test(i.type||"")&&n.push(i);return d}function x(){return!0}function O(){return!1}function R(e,t){return e===function(){try{return ne.activeElement}catch(e){}}()==("focus"===t)}function T(e,t,n,r,o,i){var a,u;if("object"==typeof t){for(u in"string"!=typeof n&&(r=r||n,n=void 0),t)T(e,u,n,r,t[u],i);return e}if(null==r&&null==o?(o=n,r=n=void 0):null==o&&("string"==typeof n?(o=r,r=void 0):(o=r,r=n,n=void 0)),!1===o)o=O;else if(!o)return e;return 1===i&&(a=o,(o=function(e){return ye().off(e),a.apply(this,arguments)}).guid=a.guid||(a.guid=ye.guid++)),e.each(function(){ye.event.add(this,t,o,r,n)})}function k(e,t,n){n?(Ie.set(e,t,!1),ye.event.add(e,t,{namespace:!1,handler:function(e){var r,o,i=Ie.get(this,t);if(1&e.isTrigger&&this[t]){if(i.length)(ye.event.special[t]||{}).delegateType&&e.stopPropagation();else if(i=oe.call(arguments),Ie.set(this,t,i),r=n(this,t),this[t](),o=Ie.get(this,t),i!==o||r?Ie.set(this,t,!1):o={},i!==o)return e.stopImmediatePropagation(),e.preventDefault(),o.value}else i.length&&(Ie.set(this,t,{value:ye.event.trigger(ye.extend(i[0],ye.Event.prototype),i.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===Ie.get(e,t)&&ye.event.add(e,t,x)}function N(e,t){return l(e,"table")&&l(11!==t.nodeType?t:t.firstChild,"tr")&&ye(e).children("tbody")[0]||e}function P(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function U(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function D(e,t){var n,r,o,i,a,u,l,s;if(1===t.nodeType){if(Ie.hasData(e)&&(i=Ie.access(e),a=Ie.set(t,i),s=i.events))for(o in delete a.handle,a.events={},s)for(n=0,r=s[o].length;n<r;n++)ye.event.add(t,o,s[o][n]);Me.hasData(e)&&(u=Me.access(e),l=ye.extend({},u),Me.set(t,l))}}function A(e,t,n,r){t=ie.apply([],t);var o,a,u,l,s,c,f=0,d=e.length,p=d-1,h=t[0],m=he(h);if(m||d>1&&"string"==typeof h&&!pe.checkClone&&ut.test(h))return e.each(function(o){var i=e.eq(o);m&&(t[0]=h.call(this,o,i.html())),A(i,t,n,r)});if(d&&(o=_(t,e[0].ownerDocument,!1,e,r),a=o.firstChild,1===o.childNodes.length&&(o=a),a||r)){for(u=ye.map(S(o,"script"),P),l=u.length;f<d;f++)s=o,f!==p&&(s=ye.clone(s,!0,!0),l&&ye.merge(u,S(s,"script"))),n.call(e[f],s,f);if(l)for(c=u[u.length-1].ownerDocument,ye.map(u,U),f=0;f<l;f++)s=u[f],Qe.test(s.type||"")&&!Ie.access(s,"globalEval")&&ye.contains(c,s)&&(s.src&&"module"!==(s.type||"").toLowerCase()?ye._evalUrl&&!s.noModule&&ye._evalUrl(s.src,{nonce:s.nonce||s.getAttribute("nonce")}):i(s.textContent.replace(lt,""),s,c))}return e}function I(e,t,n){for(var r,o=t?ye.filter(t,e):e,i=0;null!=(r=o[i]);i++)n||1!==r.nodeType||ye.cleanData(S(r)),r.parentNode&&(n&&qe(r)&&w(S(r,"script")),r.parentNode.removeChild(r));return e}function M(e,t,n){var r,o,i,a,u=e.style;return(n=n||ct(e))&&(""!==(a=n.getPropertyValue(t)||n[t])||qe(e)||(a=ye.style(e,t)),!pe.pixelBoxStyles()&&st.test(a)&&ft.test(t)&&(r=u.width,o=u.minWidth,i=u.maxWidth,u.minWidth=u.maxWidth=u.width=a,a=n.width,u.width=r,u.minWidth=o,u.maxWidth=i)),void 0!==a?a+"":a}function j(e,t){return{get:function(){return e()?void delete this.get:(this.get=t).apply(this,arguments)}}}function L(e){var t=ye.cssProps[e]||ht[e];return t||(e in pt?e:ht[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=dt.length;n--;)if((e=dt[n]+t)in pt)return e}(e)||e)}function F(e,t,n){var r=He.exec(t);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):t}function H(e,t,n,r,o,i){var a="width"===t?1:0,u=0,l=0;if(n===(r?"border":"content"))return 0;for(;a<4;a+=2)"margin"===n&&(l+=ye.css(e,n+Ke[a],!0,o)),r?("content"===n&&(l-=ye.css(e,"padding"+Ke[a],!0,o)),"margin"!==n&&(l-=ye.css(e,"border"+Ke[a]+"Width",!0,o))):(l+=ye.css(e,"padding"+Ke[a],!0,o),"padding"!==n?l+=ye.css(e,"border"+Ke[a]+"Width",!0,o):u+=ye.css(e,"border"+Ke[a]+"Width",!0,o));return!r&&i>=0&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-i-l-u-.5))||0),l}function K(e,t,n){var r=ct(e),o=!pe.boxSizingReliable()||n,i=o&&"border-box"===ye.css(e,"boxSizing",!1,r),a=i,u=M(e,t,r),l="offset"+t[0].toUpperCase()+t.slice(1);if(st.test(u)){if(!n)return u;u="auto"}return(!pe.boxSizingReliable()&&i||"auto"===u||!parseFloat(u)&&"inline"===ye.css(e,"display",!1,r))&&e.getClientRects().length&&(i="border-box"===ye.css(e,"boxSizing",!1,r),(a=l in e)&&(u=e[l])),(u=parseFloat(u)||0)+H(e,t,n||(i?"border":"content"),a,r,u)+"px"}function B(e,t,n,r,o){return new B.prototype.init(e,t,n,r,o)}function q(){Et&&(!1===ne.hidden&&n.requestAnimationFrame?n.requestAnimationFrame(q):n.setTimeout(q,ye.fx.interval),ye.fx.tick())}function Y(){return n.setTimeout(function(){bt=void 0}),bt=Date.now()}function W(e,t){var n,r=0,o={height:e};for(t=t?1:0;r<4;r+=2-t)n=Ke[r],o["margin"+n]=o["padding"+n]=e;return t&&(o.opacity=o.width=e),o}function z(e,t,n){for(var r,o=(V.tweeners[t]||[]).concat(V.tweeners["*"]),i=0,a=o.length;i<a;i++)if(r=o[i].call(n,t,e))return r}function V(e,t,n){var r,o,i=0,a=V.prefilters.length,u=ye.Deferred().always(function(){delete l.elem}),l=function(){if(o)return!1;for(var t=bt||Y(),n=Math.max(0,s.startTime+s.duration-t),r=n/s.duration||0,i=1-r,a=0,l=s.tweens.length;a<l;a++)s.tweens[a].run(i);return u.notifyWith(e,[s,i,n]),i<1&&l?n:(l||u.notifyWith(e,[s,1,0]),u.resolveWith(e,[s]),!1)},s=u.promise({elem:e,props:ye.extend({},t),opts:ye.extend(!0,{specialEasing:{},easing:ye.easing._default},n),originalProperties:t,originalOptions:n,startTime:bt||Y(),duration:n.duration,tweens:[],createTween:function(t,n){var r=ye.Tween(e,s.opts,t,n,s.opts.specialEasing[t]||s.opts.easing);return s.tweens.push(r),r},stop:function(t){var n=0,r=t?s.tweens.length:0;if(o)return this;for(o=!0;n<r;n++)s.tweens[n].run(1);return t?(u.notifyWith(e,[s,1,0]),u.resolveWith(e,[s,t])):u.rejectWith(e,[s,t]),this}}),c=s.props;for(function(e,t){var n,r,o,i,a;for(n in e)if(r=g(n),o=t[r],i=e[n],Array.isArray(i)&&(o=i[1],i=e[n]=i[0]),n!==r&&(e[r]=i,delete e[n]),(a=ye.cssHooks[r])&&"expand"in a)for(n in i=a.expand(i),delete e[r],i)n in e||(e[n]=i[n],t[n]=o);else t[r]=o}(c,s.opts.specialEasing);i<a;i++)if(r=V.prefilters[i].call(s,e,c,s.opts))return he(r.stop)&&(ye._queueHooks(s.elem,s.opts.queue).stop=r.stop.bind(r)),r;return ye.map(c,z,s),he(s.opts.start)&&s.opts.start.call(e,s),s.progress(s.opts.progress).done(s.opts.done,s.opts.complete).fail(s.opts.fail).always(s.opts.always),ye.fx.timer(ye.extend(l,{elem:e,anim:s,queue:s.opts.queue})),s}function $(e){return(e.match(Te)||[]).join(" ")}function G(e){return e.getAttribute&&e.getAttribute("class")||""}function Q(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(Te)||[]}function X(e,t,n,r){var o;if(Array.isArray(t))ye.each(t,function(t,o){n||Dt.test(e)?r(e,o):X(e+"["+("object"==typeof o&&null!=o?t:"")+"]",o,n,r)});else if(n||"object"!==a(t))r(e,t);else for(o in t)X(e+"["+o+"]",t[o],n,r)}function J(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var r,o=0,i=t.toLowerCase().match(Te)||[];if(he(n))for(;r=i[o++];)"+"===r[0]?(r=r.slice(1)||"*",(e[r]=e[r]||[]).unshift(n)):(e[r]=e[r]||[]).push(n)}}function Z(e,t,n,r){function o(u){var l;return i[u]=!0,ye.each(e[u]||[],function(e,u){var s=u(t,n,r);return"string"!=typeof s||a||i[s]?a?!(l=s):void 0:(t.dataTypes.unshift(s),o(s),!1)}),l}var i={},a=e===Yt;return o(t.dataTypes[0])||!i["*"]&&o("*")}function ee(e,t){var n,r,o=ye.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((o[n]?e:r||(r={}))[n]=t[n]);return r&&ye.extend(!0,e,r),e}var te=[],ne=n.document,re=Object.getPrototypeOf,oe=te.slice,ie=te.concat,ae=te.push,ue=te.indexOf,le={},se=le.toString,ce=le.hasOwnProperty,fe=ce.toString,de=fe.call(Object),pe={},he=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},me=function(e){return null!=e&&e===e.window},ge={type:!0,src:!0,nonce:!0,noModule:!0},ye=function(e,t){return new ye.fn.init(e,t)},ve=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;ye.fn=ye.prototype={jquery:"3.4.1",constructor:ye,length:0,toArray:function(){return oe.call(this)},get:function(e){return null==e?oe.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=ye.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return ye.each(this,e)},map:function(e){return this.pushStack(ye.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(oe.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:ae,sort:te.sort,splice:te.splice},ye.extend=ye.fn.extend=function(){var e,t,n,r,o,i,a=arguments[0]||{},u=1,l=arguments.length,s=!1;for("boolean"==typeof a&&(s=a,a=arguments[u]||{},u++),"object"==typeof a||he(a)||(a={}),u===l&&(a=this,u--);u<l;u++)if(null!=(e=arguments[u]))for(t in e)r=e[t],"__proto__"!==t&&a!==r&&(s&&r&&(ye.isPlainObject(r)||(o=Array.isArray(r)))?(n=a[t],i=o&&!Array.isArray(n)?[]:o||ye.isPlainObject(n)?n:{},o=!1,a[t]=ye.extend(s,i,r)):void 0!==r&&(a[t]=r));return a},ye.extend({expando:"jQuery"+("3.4.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==se.call(e)||(t=re(e))&&("function"!=typeof(n=ce.call(t,"constructor")&&t.constructor)||fe.call(n)!==de))},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e,t){i(e,{nonce:t&&t.nonce})},each:function(e,t){var n,r=0;if(u(e))for(n=e.length;r<n&&!1!==t.call(e[r],r,e[r]);r++);else for(r in e)if(!1===t.call(e[r],r,e[r]))break;return e},trim:function(e){return null==e?"":(e+"").replace(ve,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(u(Object(e))?ye.merge(n,"string"==typeof e?[e]:e):ae.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:ue.call(t,e,n)},merge:function(e,t){for(var n=+t.length,r=0,o=e.length;r<n;r++)e[o++]=t[r];return e.length=o,e},grep:function(e,t,n){for(var r=[],o=0,i=e.length,a=!n;o<i;o++)!t(e[o],o)!==a&&r.push(e[o]);return r},map:function(e,t,n){var r,o,i=0,a=[];if(u(e))for(r=e.length;i<r;i++)null!=(o=t(e[i],i,n))&&a.push(o);else for(i in e)null!=(o=t(e[i],i,n))&&a.push(o);return ie.apply([],a)},guid:1,support:pe}),"function"==typeof Symbol&&(ye.fn[Symbol.iterator]=te[Symbol.iterator]),ye.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){le["[object "+t+"]"]=t.toLowerCase()});var be=
/*!
 * Sizzle CSS Selector Engine v2.3.4
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://js.foundation/
 *
 * Date: 2019-04-08
 */
function(e){function t(e,t,n,r){var o,i,a,u,l,c,d,p=t&&t.ownerDocument,h=t?t.nodeType:9;if(n=n||[],"string"!=typeof e||!e||1!==h&&9!==h&&11!==h)return n;if(!r&&((t?t.ownerDocument||t:j)!==k&&T(t),t=t||k,P)){if(11!==h&&(l=me.exec(e)))if(o=l[1]){if(9===h){if(!(a=t.getElementById(o)))return n;if(a.id===o)return n.push(a),n}else if(p&&(a=p.getElementById(o))&&I(t,a)&&a.id===o)return n.push(a),n}else{if(l[2])return G.apply(n,t.getElementsByTagName(e)),n;if((o=l[3])&&v.getElementsByClassName&&t.getElementsByClassName)return G.apply(n,t.getElementsByClassName(o)),n}if(v.qsa&&!q[e+" "]&&(!U||!U.test(e))&&(1!==h||"object"!==t.nodeName.toLowerCase())){if(d=e,p=t,1===h&&ue.test(e)){for((u=t.getAttribute("id"))?u=u.replace(be,Ee):t.setAttribute("id",u=M),c=S(e),i=c.length;i--;)c[i]="#"+u+" "+f(c[i]);d=c.join(","),p=ge.test(e)&&s(t.parentNode)||t}try{return G.apply(n,p.querySelectorAll(d)),n}catch(t){q(e,!0)}finally{u===M&&t.removeAttribute("id")}}}return _(e.replace(oe,"$1"),t,n,r)}function n(){var e=[];return function t(n,r){return e.push(n+" ")>b.cacheLength&&delete t[e.shift()],t[n+" "]=r}}function r(e){return e[M]=!0,e}function o(e){var t=k.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function i(e,t){for(var n=e.split("|"),r=n.length;r--;)b.attrHandle[n[r]]=t}function a(e,t){var n=t&&e,r=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function u(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&Se(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function l(e){return r(function(t){return t=+t,r(function(n,r){for(var o,i=e([],n.length,t),a=i.length;a--;)n[o=i[a]]&&(n[o]=!(r[o]=n[o]))})})}function s(e){return e&&void 0!==e.getElementsByTagName&&e}function c(){}function f(e){for(var t=0,n=e.length,r="";t<n;t++)r+=e[t].value;return r}function d(e,t,n){var r=t.dir,o=t.next,i=o||r,a=n&&"parentNode"===i,u=F++;return t.first?function(t,n,o){for(;t=t[r];)if(1===t.nodeType||a)return e(t,n,o);return!1}:function(t,n,l){var s,c,f,d=[L,u];if(l){for(;t=t[r];)if((1===t.nodeType||a)&&e(t,n,l))return!0}else for(;t=t[r];)if(1===t.nodeType||a)if(f=t[M]||(t[M]={}),c=f[t.uniqueID]||(f[t.uniqueID]={}),o&&o===t.nodeName.toLowerCase())t=t[r]||t;else{if((s=c[i])&&s[0]===L&&s[1]===u)return d[2]=s[2];if(c[i]=d,d[2]=e(t,n,l))return!0}return!1}}function p(e){return e.length>1?function(t,n,r){for(var o=e.length;o--;)if(!e[o](t,n,r))return!1;return!0}:e[0]}function h(e,t,n,r,o){for(var i,a=[],u=0,l=e.length,s=null!=t;u<l;u++)(i=e[u])&&(n&&!n(i,r,o)||(a.push(i),s&&t.push(u)));return a}function m(e,n,o,i,a,u){return i&&!i[M]&&(i=m(i)),a&&!a[M]&&(a=m(a,u)),r(function(r,u,l,s){var c,f,d,p=[],m=[],g=u.length,y=r||function(e,n,r){for(var o=0,i=n.length;o<i;o++)t(e,n[o],r);return r}(n||"*",l.nodeType?[l]:l,[]),v=!e||!r&&n?y:h(y,p,e,l,s),b=o?a||(r?e:g||i)?[]:u:v;if(o&&o(v,b,l,s),i)for(c=h(b,m),i(c,[],l,s),f=c.length;f--;)(d=c[f])&&(b[m[f]]=!(v[m[f]]=d));if(r){if(a||e){if(a){for(c=[],f=b.length;f--;)(d=b[f])&&c.push(v[f]=d);a(null,b=[],c,s)}for(f=b.length;f--;)(d=b[f])&&(c=a?X(r,d):p[f])>-1&&(r[c]=!(u[c]=d))}}else b=h(b===u?b.splice(g,b.length):b),a?a(null,u,b,s):G.apply(u,b)})}function g(e){for(var t,n,r,o=e.length,i=b.relative[e[0].type],a=i||b.relative[" "],u=i?1:0,l=d(function(e){return e===t},a,!0),s=d(function(e){return X(t,e)>-1},a,!0),c=[function(e,n,r){var o=!i&&(r||n!==x)||((t=n).nodeType?l(e,n,r):s(e,n,r));return t=null,o}];u<o;u++)if(n=b.relative[e[u].type])c=[d(p(c),n)];else{if((n=b.filter[e[u].type].apply(null,e[u].matches))[M]){for(r=++u;r<o&&!b.relative[e[r].type];r++);return m(u>1&&p(c),u>1&&f(e.slice(0,u-1).concat({value:" "===e[u-2].type?"*":""})).replace(oe,"$1"),n,u<r&&g(e.slice(u,r)),r<o&&g(e=e.slice(r)),r<o&&f(e))}c.push(n)}return p(c)}var y,v,b,E,C,S,w,_,x,O,R,T,k,N,P,U,D,A,I,M="sizzle"+1*new Date,j=e.document,L=0,F=0,H=n(),K=n(),B=n(),q=n(),Y=function(e,t){return e===t&&(R=!0),0},W={}.hasOwnProperty,z=[],V=z.pop,$=z.push,G=z.push,Q=z.slice,X=function(e,t){for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1},J="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",Z="[\\x20\\t\\r\\n\\f]",ee="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",te="\\["+Z+"*("+ee+")(?:"+Z+"*([*^$|!~]?=)"+Z+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+ee+"))|)"+Z+"*\\]",ne=":("+ee+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+te+")*)|.*)\\)|)",re=new RegExp(Z+"+","g"),oe=new RegExp("^"+Z+"+|((?:^|[^\\\\])(?:\\\\.)*)"+Z+"+$","g"),ie=new RegExp("^"+Z+"*,"+Z+"*"),ae=new RegExp("^"+Z+"*([>+~]|"+Z+")"+Z+"*"),ue=new RegExp(Z+"|>"),le=new RegExp(ne),se=new RegExp("^"+ee+"$"),ce={ID:new RegExp("^#("+ee+")"),CLASS:new RegExp("^\\.("+ee+")"),TAG:new RegExp("^("+ee+"|[*])"),ATTR:new RegExp("^"+te),PSEUDO:new RegExp("^"+ne),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+Z+"*(even|odd|(([+-]|)(\\d*)n|)"+Z+"*(?:([+-]|)"+Z+"*(\\d+)|))"+Z+"*\\)|)","i"),bool:new RegExp("^(?:"+J+")$","i"),needsContext:new RegExp("^"+Z+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+Z+"*((?:-\\d)?\\d*)"+Z+"*\\)|)(?=[^-]|$)","i")},fe=/HTML$/i,de=/^(?:input|select|textarea|button)$/i,pe=/^h\d$/i,he=/^[^{]+\{\s*\[native \w/,me=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ge=/[+~]/,ye=new RegExp("\\\\([\\da-f]{1,6}"+Z+"?|("+Z+")|.)","ig"),ve=function(e,t,n){var r="0x"+t-65536;return r!=r||n?t:r<0?String.fromCharCode(r+65536):String.fromCharCode(r>>10|55296,1023&r|56320)},be=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,Ee=function(e,t){return t?"\0"===e?"�":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},Ce=function(){T()},Se=d(function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()},{dir:"parentNode",next:"legend"});try{G.apply(z=Q.call(j.childNodes),j.childNodes),z[j.childNodes.length].nodeType}catch(e){G={apply:z.length?function(e,t){$.apply(e,Q.call(t))}:function(e,t){for(var n=e.length,r=0;e[n++]=t[r++];);e.length=n-1}}}for(y in v=t.support={},C=t.isXML=function(e){var t=e.namespaceURI,n=(e.ownerDocument||e).documentElement;return!fe.test(t||n&&n.nodeName||"HTML")},T=t.setDocument=function(e){var t,n,r=e?e.ownerDocument||e:j;return r!==k&&9===r.nodeType&&r.documentElement?(N=(k=r).documentElement,P=!C(k),j!==k&&(n=k.defaultView)&&n.top!==n&&(n.addEventListener?n.addEventListener("unload",Ce,!1):n.attachEvent&&n.attachEvent("onunload",Ce)),v.attributes=o(function(e){return e.className="i",!e.getAttribute("className")}),v.getElementsByTagName=o(function(e){return e.appendChild(k.createComment("")),!e.getElementsByTagName("*").length}),v.getElementsByClassName=he.test(k.getElementsByClassName),v.getById=o(function(e){return N.appendChild(e).id=M,!k.getElementsByName||!k.getElementsByName(M).length}),v.getById?(b.filter.ID=function(e){var t=e.replace(ye,ve);return function(e){return e.getAttribute("id")===t}},b.find.ID=function(e,t){if(void 0!==t.getElementById&&P){var n=t.getElementById(e);return n?[n]:[]}}):(b.filter.ID=function(e){var t=e.replace(ye,ve);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},b.find.ID=function(e,t){if(void 0!==t.getElementById&&P){var n,r,o,i=t.getElementById(e);if(i){if((n=i.getAttributeNode("id"))&&n.value===e)return[i];for(o=t.getElementsByName(e),r=0;i=o[r++];)if((n=i.getAttributeNode("id"))&&n.value===e)return[i]}return[]}}),b.find.TAG=v.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):v.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,r=[],o=0,i=t.getElementsByTagName(e);if("*"===e){for(;n=i[o++];)1===n.nodeType&&r.push(n);return r}return i},b.find.CLASS=v.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&P)return t.getElementsByClassName(e)},D=[],U=[],(v.qsa=he.test(k.querySelectorAll))&&(o(function(e){N.appendChild(e).innerHTML="<a id='"+M+"'></a><select id='"+M+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&U.push("[*^$]="+Z+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||U.push("\\["+Z+"*(?:value|"+J+")"),e.querySelectorAll("[id~="+M+"-]").length||U.push("~="),e.querySelectorAll(":checked").length||U.push(":checked"),e.querySelectorAll("a#"+M+"+*").length||U.push(".#.+[+~]")}),o(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=k.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&U.push("name"+Z+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&U.push(":enabled",":disabled"),N.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&U.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),U.push(",.*:")})),(v.matchesSelector=he.test(A=N.matches||N.webkitMatchesSelector||N.mozMatchesSelector||N.oMatchesSelector||N.msMatchesSelector))&&o(function(e){v.disconnectedMatch=A.call(e,"*"),A.call(e,"[s!='']:x"),D.push("!=",ne)}),U=U.length&&new RegExp(U.join("|")),D=D.length&&new RegExp(D.join("|")),t=he.test(N.compareDocumentPosition),I=t||he.test(N.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,r=t&&t.parentNode;return e===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):e.compareDocumentPosition&&16&e.compareDocumentPosition(r)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},Y=t?function(e,t){if(e===t)return R=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(1&(n=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!v.sortDetached&&t.compareDocumentPosition(e)===n?e===k||e.ownerDocument===j&&I(j,e)?-1:t===k||t.ownerDocument===j&&I(j,t)?1:O?X(O,e)-X(O,t):0:4&n?-1:1)}:function(e,t){if(e===t)return R=!0,0;var n,r=0,o=e.parentNode,i=t.parentNode,u=[e],l=[t];if(!o||!i)return e===k?-1:t===k?1:o?-1:i?1:O?X(O,e)-X(O,t):0;if(o===i)return a(e,t);for(n=e;n=n.parentNode;)u.unshift(n);for(n=t;n=n.parentNode;)l.unshift(n);for(;u[r]===l[r];)r++;return r?a(u[r],l[r]):u[r]===j?-1:l[r]===j?1:0},k):k},t.matches=function(e,n){return t(e,null,null,n)},t.matchesSelector=function(e,n){if((e.ownerDocument||e)!==k&&T(e),v.matchesSelector&&P&&!q[n+" "]&&(!D||!D.test(n))&&(!U||!U.test(n)))try{var r=A.call(e,n);if(r||v.disconnectedMatch||e.document&&11!==e.document.nodeType)return r}catch(e){q(n,!0)}return t(n,k,null,[e]).length>0},t.contains=function(e,t){return(e.ownerDocument||e)!==k&&T(e),I(e,t)},t.attr=function(e,t){(e.ownerDocument||e)!==k&&T(e);var n=b.attrHandle[t.toLowerCase()],r=n&&W.call(b.attrHandle,t.toLowerCase())?n(e,t,!P):void 0;return void 0!==r?r:v.attributes||!P?e.getAttribute(t):(r=e.getAttributeNode(t))&&r.specified?r.value:null},t.escape=function(e){return(e+"").replace(be,Ee)},t.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},t.uniqueSort=function(e){var t,n=[],r=0,o=0;if(R=!v.detectDuplicates,O=!v.sortStable&&e.slice(0),e.sort(Y),R){for(;t=e[o++];)t===e[o]&&(r=n.push(o));for(;r--;)e.splice(n[r],1)}return O=null,e},E=t.getText=function(e){var t,n="",r=0,o=e.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=E(e)}else if(3===o||4===o)return e.nodeValue}else for(;t=e[r++];)n+=E(t);return n},(b=t.selectors={cacheLength:50,createPseudo:r,match:ce,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(ye,ve),e[3]=(e[3]||e[4]||e[5]||"").replace(ye,ve),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||t.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&t.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return ce.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&le.test(n)&&(t=S(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(ye,ve).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=H[e+" "];return t||(t=new RegExp("(^|"+Z+")"+e+"("+Z+"|$)"))&&H(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,n,r){return function(o){var i=t.attr(o,e);return null==i?"!="===n:!n||(i+="","="===n?i===r:"!="===n?i!==r:"^="===n?r&&0===i.indexOf(r):"*="===n?r&&i.indexOf(r)>-1:"$="===n?r&&i.slice(-r.length)===r:"~="===n?(" "+i.replace(re," ")+" ").indexOf(r)>-1:"|="===n&&(i===r||i.slice(0,r.length+1)===r+"-"))}},CHILD:function(e,t,n,r,o){var i="nth"!==e.slice(0,3),a="last"!==e.slice(-4),u="of-type"===t;return 1===r&&0===o?function(e){return!!e.parentNode}:function(t,n,l){var s,c,f,d,p,h,m=i!==a?"nextSibling":"previousSibling",g=t.parentNode,y=u&&t.nodeName.toLowerCase(),v=!l&&!u,b=!1;if(g){if(i){for(;m;){for(d=t;d=d[m];)if(u?d.nodeName.toLowerCase()===y:1===d.nodeType)return!1;h=m="only"===e&&!h&&"nextSibling"}return!0}if(h=[a?g.firstChild:g.lastChild],a&&v){for(f=(d=g)[M]||(d[M]={}),c=f[d.uniqueID]||(f[d.uniqueID]={}),s=c[e]||[],p=s[0]===L&&s[1],b=p&&s[2],d=p&&g.childNodes[p];d=++p&&d&&d[m]||(b=p=0)||h.pop();)if(1===d.nodeType&&++b&&d===t){c[e]=[L,p,b];break}}else if(v&&(f=(d=t)[M]||(d[M]={}),c=f[d.uniqueID]||(f[d.uniqueID]={}),s=c[e]||[],p=s[0]===L&&s[1],b=p),!1===b)for(;(d=++p&&d&&d[m]||(b=p=0)||h.pop())&&((u?d.nodeName.toLowerCase()!==y:1!==d.nodeType)||!++b||(v&&(f=d[M]||(d[M]={}),(c=f[d.uniqueID]||(f[d.uniqueID]={}))[e]=[L,b]),d!==t)););return(b-=o)===r||b%r==0&&b/r>=0}}},PSEUDO:function(e,n){var o,i=b.pseudos[e]||b.setFilters[e.toLowerCase()]||t.error("unsupported pseudo: "+e);return i[M]?i(n):i.length>1?(o=[e,e,"",n],b.setFilters.hasOwnProperty(e.toLowerCase())?r(function(e,t){for(var r,o=i(e,n),a=o.length;a--;)r=X(e,o[a]),e[r]=!(t[r]=o[a])}):function(e){return i(e,0,o)}):i}},pseudos:{not:r(function(e){var t=[],n=[],o=w(e.replace(oe,"$1"));return o[M]?r(function(e,t,n,r){for(var i,a=o(e,null,r,[]),u=e.length;u--;)(i=a[u])&&(e[u]=!(t[u]=i))}):function(e,r,i){return t[0]=e,o(t,null,i,n),t[0]=null,!n.pop()}}),has:r(function(e){return function(n){return t(e,n).length>0}}),contains:r(function(e){return e=e.replace(ye,ve),function(t){return(t.textContent||E(t)).indexOf(e)>-1}}),lang:r(function(e){return se.test(e||"")||t.error("unsupported lang: "+e),e=e.replace(ye,ve).toLowerCase(),function(t){var n;do{if(n=P?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===N},focus:function(e){return e===k.activeElement&&(!k.hasFocus||k.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:u(!1),disabled:u(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!b.pseudos.empty(e)},header:function(e){return pe.test(e.nodeName)},input:function(e){return de.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:l(function(){return[0]}),last:l(function(e,t){return[t-1]}),eq:l(function(e,t,n){return[n<0?n+t:n]}),even:l(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:l(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:l(function(e,t,n){for(var r=n<0?n+t:n>t?t:n;--r>=0;)e.push(r);return e}),gt:l(function(e,t,n){for(var r=n<0?n+t:n;++r<t;)e.push(r);return e})}}).pseudos.nth=b.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})b.pseudos[y]=function(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}(y);for(y in{submit:!0,reset:!0})b.pseudos[y]=function(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}(y);return c.prototype=b.filters=b.pseudos,b.setFilters=new c,S=t.tokenize=function(e,n){var r,o,i,a,u,l,s,c=K[e+" "];if(c)return n?0:c.slice(0);for(u=e,l=[],s=b.preFilter;u;){for(a in r&&!(o=ie.exec(u))||(o&&(u=u.slice(o[0].length)||u),l.push(i=[])),r=!1,(o=ae.exec(u))&&(r=o.shift(),i.push({value:r,type:o[0].replace(oe," ")}),u=u.slice(r.length)),b.filter)!(o=ce[a].exec(u))||s[a]&&!(o=s[a](o))||(r=o.shift(),i.push({value:r,type:a,matches:o}),u=u.slice(r.length));if(!r)break}return n?u.length:u?t.error(e):K(e,l).slice(0)},w=t.compile=function(e,n){var o,i=[],a=[],u=B[e+" "];if(!u){for(n||(n=S(e)),o=n.length;o--;)(u=g(n[o]))[M]?i.push(u):a.push(u);(u=B(e,function(e,n){var o=n.length>0,i=e.length>0,a=function(r,a,u,l,s){var c,f,d,p=0,m="0",g=r&&[],y=[],v=x,E=r||i&&b.find.TAG("*",s),C=L+=null==v?1:Math.random()||.1,S=E.length;for(s&&(x=a===k||a||s);m!==S&&null!=(c=E[m]);m++){if(i&&c){for(f=0,a||c.ownerDocument===k||(T(c),u=!P);d=e[f++];)if(d(c,a||k,u)){l.push(c);break}s&&(L=C)}o&&((c=!d&&c)&&p--,r&&g.push(c))}if(p+=m,o&&m!==p){for(f=0;d=n[f++];)d(g,y,a,u);if(r){if(p>0)for(;m--;)g[m]||y[m]||(y[m]=V.call(l));y=h(y)}G.apply(l,y),s&&!r&&y.length>0&&p+n.length>1&&t.uniqueSort(l)}return s&&(L=C,x=v),g};return o?r(a):a}(a,i))).selector=e}return u},_=t.select=function(e,t,n,r){var o,i,a,u,l,c="function"==typeof e&&e,d=!r&&S(e=c.selector||e);if(n=n||[],1===d.length){if((i=d[0]=d[0].slice(0)).length>2&&"ID"===(a=i[0]).type&&9===t.nodeType&&P&&b.relative[i[1].type]){if(!(t=(b.find.ID(a.matches[0].replace(ye,ve),t)||[])[0]))return n;c&&(t=t.parentNode),e=e.slice(i.shift().value.length)}for(o=ce.needsContext.test(e)?0:i.length;o--&&(a=i[o],!b.relative[u=a.type]);)if((l=b.find[u])&&(r=l(a.matches[0].replace(ye,ve),ge.test(i[0].type)&&s(t.parentNode)||t))){if(i.splice(o,1),!(e=r.length&&f(i)))return G.apply(n,r),n;break}}return(c||w(e,d))(r,t,!P,n,!t||ge.test(e)&&s(t.parentNode)||t),n},v.sortStable=M.split("").sort(Y).join("")===M,v.detectDuplicates=!!R,T(),v.sortDetached=o(function(e){return 1&e.compareDocumentPosition(k.createElement("fieldset"))}),o(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||i("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),v.attributes&&o(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||i("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),o(function(e){return null==e.getAttribute("disabled")})||i(J,function(e,t,n){var r;if(!n)return!0===e[t]?t.toLowerCase():(r=e.getAttributeNode(t))&&r.specified?r.value:null}),t}(n);ye.find=be,ye.expr=be.selectors,ye.expr[":"]=ye.expr.pseudos,ye.uniqueSort=ye.unique=be.uniqueSort,ye.text=be.getText,ye.isXMLDoc=be.isXML,ye.contains=be.contains,ye.escapeSelector=be.escape;var Ee=function(e,t,n){for(var r=[],o=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(o&&ye(e).is(n))break;r.push(e)}return r},Ce=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},Se=ye.expr.match.needsContext,we=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;ye.filter=function(e,t,n){var r=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===r.nodeType?ye.find.matchesSelector(r,e)?[r]:[]:ye.find.matches(e,ye.grep(t,function(e){return 1===e.nodeType}))},ye.fn.extend({find:function(e){var t,n,r=this.length,o=this;if("string"!=typeof e)return this.pushStack(ye(e).filter(function(){for(t=0;t<r;t++)if(ye.contains(o[t],this))return!0}));for(n=this.pushStack([]),t=0;t<r;t++)ye.find(e,o[t],n);return r>1?ye.uniqueSort(n):n},filter:function(e){return this.pushStack(s(this,e||[],!1))},not:function(e){return this.pushStack(s(this,e||[],!0))},is:function(e){return!!s(this,"string"==typeof e&&Se.test(e)?ye(e):e||[],!1).length}});var _e,xe=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(ye.fn.init=function(e,t,n){var r,o;if(!e)return this;if(n=n||_e,"string"==typeof e){if(!(r="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:xe.exec(e))||!r[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(r[1]){if(t=t instanceof ye?t[0]:t,ye.merge(this,ye.parseHTML(r[1],t&&t.nodeType?t.ownerDocument||t:ne,!0)),we.test(r[1])&&ye.isPlainObject(t))for(r in t)he(this[r])?this[r](t[r]):this.attr(r,t[r]);return this}return(o=ne.getElementById(r[2]))&&(this[0]=o,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):he(e)?void 0!==n.ready?n.ready(e):e(ye):ye.makeArray(e,this)}).prototype=ye.fn,_e=ye(ne);var Oe=/^(?:parents|prev(?:Until|All))/,Re={children:!0,contents:!0,next:!0,prev:!0};ye.fn.extend({has:function(e){var t=ye(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(ye.contains(this,t[e]))return!0})},closest:function(e,t){var n,r=0,o=this.length,i=[],a="string"!=typeof e&&ye(e);if(!Se.test(e))for(;r<o;r++)for(n=this[r];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&ye.find.matchesSelector(n,e))){i.push(n);break}return this.pushStack(i.length>1?ye.uniqueSort(i):i)},index:function(e){return e?"string"==typeof e?ue.call(ye(e),this[0]):ue.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(ye.uniqueSort(ye.merge(this.get(),ye(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),ye.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return Ee(e,"parentNode")},parentsUntil:function(e,t,n){return Ee(e,"parentNode",n)},next:function(e){return c(e,"nextSibling")},prev:function(e){return c(e,"previousSibling")},nextAll:function(e){return Ee(e,"nextSibling")},prevAll:function(e){return Ee(e,"previousSibling")},nextUntil:function(e,t,n){return Ee(e,"nextSibling",n)},prevUntil:function(e,t,n){return Ee(e,"previousSibling",n)},siblings:function(e){return Ce((e.parentNode||{}).firstChild,e)},children:function(e){return Ce(e.firstChild)},contents:function(e){return void 0!==e.contentDocument?e.contentDocument:(l(e,"template")&&(e=e.content||e),ye.merge([],e.childNodes))}},function(e,t){ye.fn[e]=function(n,r){var o=ye.map(this,t,n);return"Until"!==e.slice(-5)&&(r=n),r&&"string"==typeof r&&(o=ye.filter(r,o)),this.length>1&&(Re[e]||ye.uniqueSort(o),Oe.test(e)&&o.reverse()),this.pushStack(o)}});var Te=/[^\x20\t\r\n\f]+/g;ye.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return ye.each(e.match(Te)||[],function(e,n){t[n]=!0}),t}(e):ye.extend({},e);var t,n,r,o,i=[],u=[],l=-1,s=function(){for(o=o||e.once,r=t=!0;u.length;l=-1)for(n=u.shift();++l<i.length;)!1===i[l].apply(n[0],n[1])&&e.stopOnFalse&&(l=i.length,n=!1);e.memory||(n=!1),t=!1,o&&(i=n?[]:"")},c={add:function(){return i&&(n&&!t&&(l=i.length-1,u.push(n)),function t(n){ye.each(n,function(n,r){he(r)?e.unique&&c.has(r)||i.push(r):r&&r.length&&"string"!==a(r)&&t(r)})}(arguments),n&&!t&&s()),this},remove:function(){return ye.each(arguments,function(e,t){for(var n;(n=ye.inArray(t,i,n))>-1;)i.splice(n,1),n<=l&&l--}),this},has:function(e){return e?ye.inArray(e,i)>-1:i.length>0},empty:function(){return i&&(i=[]),this},disable:function(){return o=u=[],i=n="",this},disabled:function(){return!i},lock:function(){return o=u=[],n||t||(i=n=""),this},locked:function(){return!!o},fireWith:function(e,n){return o||(n=[e,(n=n||[]).slice?n.slice():n],u.push(n),t||s()),this},fire:function(){return c.fireWith(this,arguments),this},fired:function(){return!!r}};return c},ye.extend({Deferred:function(e){var t=[["notify","progress",ye.Callbacks("memory"),ye.Callbacks("memory"),2],["resolve","done",ye.Callbacks("once memory"),ye.Callbacks("once memory"),0,"resolved"],["reject","fail",ye.Callbacks("once memory"),ye.Callbacks("once memory"),1,"rejected"]],r="pending",o={state:function(){return r},always:function(){return i.done(arguments).fail(arguments),this},catch:function(e){return o.then(null,e)},pipe:function(){var e=arguments;return ye.Deferred(function(n){ye.each(t,function(t,r){var o=he(e[r[4]])&&e[r[4]];i[r[1]](function(){var e=o&&o.apply(this,arguments);e&&he(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[r[0]+"With"](this,o?[e]:arguments)})}),e=null}).promise()},then:function(e,r,o){function i(e,t,r,o){return function(){var u=this,l=arguments,s=function(){var n,s;if(!(e<a)){if((n=r.apply(u,l))===t.promise())throw new TypeError("Thenable self-resolution");s=n&&("object"==typeof n||"function"==typeof n)&&n.then,he(s)?o?s.call(n,i(a,t,f,o),i(a,t,d,o)):(a++,s.call(n,i(a,t,f,o),i(a,t,d,o),i(a,t,f,t.notifyWith))):(r!==f&&(u=void 0,l=[n]),(o||t.resolveWith)(u,l))}},c=o?s:function(){try{s()}catch(n){ye.Deferred.exceptionHook&&ye.Deferred.exceptionHook(n,c.stackTrace),e+1>=a&&(r!==d&&(u=void 0,l=[n]),t.rejectWith(u,l))}};e?c():(ye.Deferred.getStackHook&&(c.stackTrace=ye.Deferred.getStackHook()),n.setTimeout(c))}}var a=0;return ye.Deferred(function(n){t[0][3].add(i(0,n,he(o)?o:f,n.notifyWith)),t[1][3].add(i(0,n,he(e)?e:f)),t[2][3].add(i(0,n,he(r)?r:d))}).promise()},promise:function(e){return null!=e?ye.extend(e,o):o}},i={};return ye.each(t,function(e,n){var a=n[2],u=n[5];o[n[1]]=a.add,u&&a.add(function(){r=u},t[3-e][2].disable,t[3-e][3].disable,t[0][2].lock,t[0][3].lock),a.add(n[3].fire),i[n[0]]=function(){return i[n[0]+"With"](this===i?void 0:this,arguments),this},i[n[0]+"With"]=a.fireWith}),o.promise(i),e&&e.call(i,i),i},when:function(e){var t=arguments.length,n=t,r=Array(n),o=oe.call(arguments),i=ye.Deferred(),a=function(e){return function(n){r[e]=this,o[e]=arguments.length>1?oe.call(arguments):n,--t||i.resolveWith(r,o)}};if(t<=1&&(p(e,i.done(a(n)).resolve,i.reject,!t),"pending"===i.state()||he(o[n]&&o[n].then)))return i.then();for(;n--;)p(o[n],a(n),i.reject);return i.promise()}});var ke=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;ye.Deferred.exceptionHook=function(e,t){n.console&&n.console.warn&&e&&ke.test(e.name)&&n.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},ye.readyException=function(e){n.setTimeout(function(){throw e})};var Ne=ye.Deferred();ye.fn.ready=function(e){return Ne.then(e).catch(function(e){ye.readyException(e)}),this},ye.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--ye.readyWait:ye.isReady)||(ye.isReady=!0,!0!==e&&--ye.readyWait>0||Ne.resolveWith(ne,[ye]))}}),ye.ready.then=Ne.then,"complete"===ne.readyState||"loading"!==ne.readyState&&!ne.documentElement.doScroll?n.setTimeout(ye.ready):(ne.addEventListener("DOMContentLoaded",h),n.addEventListener("load",h));var Pe=function(e,t,n,r,o,i,u){var l=0,s=e.length,c=null==n;if("object"===a(n))for(l in o=!0,n)Pe(e,t,l,n[l],!0,i,u);else if(void 0!==r&&(o=!0,he(r)||(u=!0),c&&(u?(t.call(e,r),t=null):(c=t,t=function(e,t,n){return c.call(ye(e),n)})),t))for(;l<s;l++)t(e[l],n,u?r:r.call(e[l],l,t(e[l],n)));return o?e:c?t.call(e):s?t(e[0],n):i},Ue=/^-ms-/,De=/-([a-z])/g,Ae=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};y.uid=1,y.prototype={cache:function(e){var t=e[this.expando];return t||(t={},Ae(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var r,o=this.cache(e);if("string"==typeof t)o[g(t)]=n;else for(r in t)o[g(r)]=t[r];return o},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][g(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,r=e[this.expando];if(void 0!==r){if(void 0!==t){t=Array.isArray(t)?t.map(g):(t=g(t))in r?[t]:t.match(Te)||[],n=t.length;for(;n--;)delete r[t[n]]}(void 0===t||ye.isEmptyObject(r))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!ye.isEmptyObject(t)}};var Ie=new y,Me=new y,je=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Le=/[A-Z]/g;ye.extend({hasData:function(e){return Me.hasData(e)||Ie.hasData(e)},data:function(e,t,n){return Me.access(e,t,n)},removeData:function(e,t){Me.remove(e,t)},_data:function(e,t,n){return Ie.access(e,t,n)},_removeData:function(e,t){Ie.remove(e,t)}}),ye.fn.extend({data:function(e,t){var n,r,o,i=this[0],a=i&&i.attributes;if(void 0===e){if(this.length&&(o=Me.get(i),1===i.nodeType&&!Ie.get(i,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&0===(r=a[n].name).indexOf("data-")&&(r=g(r.slice(5)),v(i,r,o[r]));Ie.set(i,"hasDataAttrs",!0)}return o}return"object"==typeof e?this.each(function(){Me.set(this,e)}):Pe(this,function(t){var n;if(i&&void 0===t){if(void 0!==(n=Me.get(i,e)))return n;if(void 0!==(n=v(i,e)))return n}else this.each(function(){Me.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){Me.remove(this,e)})}}),ye.extend({queue:function(e,t,n){var r;if(e)return t=(t||"fx")+"queue",r=Ie.get(e,t),n&&(!r||Array.isArray(n)?r=Ie.access(e,t,ye.makeArray(n)):r.push(n)),r||[]},dequeue:function(e,t){t=t||"fx";var n=ye.queue(e,t),r=n.length,o=n.shift(),i=ye._queueHooks(e,t);"inprogress"===o&&(o=n.shift(),r--),o&&("fx"===t&&n.unshift("inprogress"),delete i.stop,o.call(e,function(){ye.dequeue(e,t)},i)),!r&&i&&i.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return Ie.get(e,n)||Ie.access(e,n,{empty:ye.Callbacks("once memory").add(function(){Ie.remove(e,[t+"queue",n])})})}}),ye.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?ye.queue(this[0],e):void 0===t?this:this.each(function(){var n=ye.queue(this,e,t);ye._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&ye.dequeue(this,e)})},dequeue:function(e){return this.each(function(){ye.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,r=1,o=ye.Deferred(),i=this,a=this.length,u=function(){--r||o.resolveWith(i,[i])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";a--;)(n=Ie.get(i[a],e+"queueHooks"))&&n.empty&&(r++,n.empty.add(u));return u(),o.promise(t)}});var Fe=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,He=new RegExp("^(?:([+-])=|)("+Fe+")([a-z%]*)$","i"),Ke=["Top","Right","Bottom","Left"],Be=ne.documentElement,qe=function(e){return ye.contains(e.ownerDocument,e)},Ye={composed:!0};Be.getRootNode&&(qe=function(e){return ye.contains(e.ownerDocument,e)||e.getRootNode(Ye)===e.ownerDocument});var We=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&qe(e)&&"none"===ye.css(e,"display")},ze=function(e,t,n,r){var o,i,a={};for(i in t)a[i]=e.style[i],e.style[i]=t[i];for(i in o=n.apply(e,r||[]),t)e.style[i]=a[i];return o},Ve={};ye.fn.extend({show:function(){return C(this,!0)},hide:function(){return C(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){We(this)?ye(this).show():ye(this).hide()})}});var $e=/^(?:checkbox|radio)$/i,Ge=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,Qe=/^$|^module$|\/(?:java|ecma)script/i,Xe={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};Xe.optgroup=Xe.option,Xe.tbody=Xe.tfoot=Xe.colgroup=Xe.caption=Xe.thead,Xe.th=Xe.td;var Je,Ze,et,tt=/<|&#?\w+;/;Je=ne.createDocumentFragment(),Ze=Je.appendChild(ne.createElement("div")),(et=ne.createElement("input")).setAttribute("type","radio"),et.setAttribute("checked","checked"),et.setAttribute("name","t"),Ze.appendChild(et),pe.checkClone=Ze.cloneNode(!0).cloneNode(!0).lastChild.checked,Ze.innerHTML="<textarea>x</textarea>",pe.noCloneChecked=!!Ze.cloneNode(!0).lastChild.defaultValue;var nt=/^key/,rt=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,ot=/^([^.]*)(?:\.(.+)|)/;ye.event={global:{},add:function(e,t,n,r,o){var i,a,u,l,s,c,f,d,p,h,m,g=Ie.get(e);if(g)for(n.handler&&(n=(i=n).handler,o=i.selector),o&&ye.find.matchesSelector(Be,o),n.guid||(n.guid=ye.guid++),(l=g.events)||(l=g.events={}),(a=g.handle)||(a=g.handle=function(t){return void 0!==ye&&ye.event.triggered!==t.type?ye.event.dispatch.apply(e,arguments):void 0}),t=(t||"").match(Te)||[""],s=t.length;s--;)u=ot.exec(t[s])||[],p=m=u[1],h=(u[2]||"").split(".").sort(),p&&(f=ye.event.special[p]||{},p=(o?f.delegateType:f.bindType)||p,f=ye.event.special[p]||{},c=ye.extend({type:p,origType:m,data:r,handler:n,guid:n.guid,selector:o,needsContext:o&&ye.expr.match.needsContext.test(o),namespace:h.join(".")},i),(d=l[p])||((d=l[p]=[]).delegateCount=0,f.setup&&!1!==f.setup.call(e,r,h,a)||e.addEventListener&&e.addEventListener(p,a)),f.add&&(f.add.call(e,c),c.handler.guid||(c.handler.guid=n.guid)),o?d.splice(d.delegateCount++,0,c):d.push(c),ye.event.global[p]=!0)},remove:function(e,t,n,r,o){var i,a,u,l,s,c,f,d,p,h,m,g=Ie.hasData(e)&&Ie.get(e);if(g&&(l=g.events)){for(t=(t||"").match(Te)||[""],s=t.length;s--;)if(u=ot.exec(t[s])||[],p=m=u[1],h=(u[2]||"").split(".").sort(),p){for(f=ye.event.special[p]||{},p=(r?f.delegateType:f.bindType)||p,d=l[p]||[],u=u[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=i=d.length;i--;)c=d[i],!o&&m!==c.origType||n&&n.guid!==c.guid||u&&!u.test(c.namespace)||r&&r!==c.selector&&("**"!==r||!c.selector)||(d.splice(i,1),c.selector&&d.delegateCount--,f.remove&&f.remove.call(e,c));a&&!d.length&&(f.teardown&&!1!==f.teardown.call(e,h,g.handle)||ye.removeEvent(e,p,g.handle),delete l[p])}else for(p in l)ye.event.remove(e,p+t[s],n,r,!0);ye.isEmptyObject(l)&&Ie.remove(e,"handle events")}},dispatch:function(e){var t,n,r,o,i,a,u=ye.event.fix(e),l=new Array(arguments.length),s=(Ie.get(this,"events")||{})[u.type]||[],c=ye.event.special[u.type]||{};for(l[0]=u,t=1;t<arguments.length;t++)l[t]=arguments[t];if(u.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,u)){for(a=ye.event.handlers.call(this,u,s),t=0;(o=a[t++])&&!u.isPropagationStopped();)for(u.currentTarget=o.elem,n=0;(i=o.handlers[n++])&&!u.isImmediatePropagationStopped();)u.rnamespace&&!1!==i.namespace&&!u.rnamespace.test(i.namespace)||(u.handleObj=i,u.data=i.data,void 0!==(r=((ye.event.special[i.origType]||{}).handle||i.handler).apply(o.elem,l))&&!1===(u.result=r)&&(u.preventDefault(),u.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,u),u.result}},handlers:function(e,t){var n,r,o,i,a,u=[],l=t.delegateCount,s=e.target;if(l&&s.nodeType&&!("click"===e.type&&e.button>=1))for(;s!==this;s=s.parentNode||this)if(1===s.nodeType&&("click"!==e.type||!0!==s.disabled)){for(i=[],a={},n=0;n<l;n++)r=t[n],o=r.selector+" ",void 0===a[o]&&(a[o]=r.needsContext?ye(o,this).index(s)>-1:ye.find(o,this,null,[s]).length),a[o]&&i.push(r);i.length&&u.push({elem:s,handlers:i})}return s=this,l<t.length&&u.push({elem:s,handlers:t.slice(l)}),u},addProp:function(e,t){Object.defineProperty(ye.Event.prototype,e,{enumerable:!0,configurable:!0,get:he(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[ye.expando]?e:new ye.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){var t=this||e;return $e.test(t.type)&&t.click&&l(t,"input")&&k(t,"click",x),!1},trigger:function(e){var t=this||e;return $e.test(t.type)&&t.click&&l(t,"input")&&k(t,"click"),!0},_default:function(e){var t=e.target;return $e.test(t.type)&&t.click&&l(t,"input")&&Ie.get(t,"click")||l(t,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},ye.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},ye.Event=function(e,t){if(!(this instanceof ye.Event))return new ye.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?x:O,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&ye.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[ye.expando]=!0},ye.Event.prototype={constructor:ye.Event,isDefaultPrevented:O,isPropagationStopped:O,isImmediatePropagationStopped:O,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=x,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=x,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=x,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},ye.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&nt.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&rt.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},ye.event.addProp),ye.each({focus:"focusin",blur:"focusout"},function(e,t){ye.event.special[e]={setup:function(){return k(this,e,R),!1},trigger:function(){return k(this,e),!0},delegateType:t}}),ye.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){ye.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,r=e.relatedTarget,o=e.handleObj;return r&&(r===this||ye.contains(this,r))||(e.type=o.origType,n=o.handler.apply(this,arguments),e.type=t),n}}}),ye.fn.extend({on:function(e,t,n,r){return T(this,e,t,n,r)},one:function(e,t,n,r){return T(this,e,t,n,r,1)},off:function(e,t,n){var r,o;if(e&&e.preventDefault&&e.handleObj)return r=e.handleObj,ye(e.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof e){for(o in e)this.off(o,t,e[o]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=O),this.each(function(){ye.event.remove(this,e,n,t)})}});var it=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,at=/<script|<style|<link/i,ut=/checked\s*(?:[^=]|=\s*.checked.)/i,lt=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;ye.extend({htmlPrefilter:function(e){return e.replace(it,"<$1></$2>")},clone:function(e,t,n){var r,o,i,a,u,l,s,c=e.cloneNode(!0),f=qe(e);if(!(pe.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||ye.isXMLDoc(e)))for(a=S(c),i=S(e),r=0,o=i.length;r<o;r++)u=i[r],l=a[r],"input"===(s=l.nodeName.toLowerCase())&&$e.test(u.type)?l.checked=u.checked:"input"!==s&&"textarea"!==s||(l.defaultValue=u.defaultValue);if(t)if(n)for(i=i||S(e),a=a||S(c),r=0,o=i.length;r<o;r++)D(i[r],a[r]);else D(e,c);return(a=S(c,"script")).length>0&&w(a,!f&&S(e,"script")),c},cleanData:function(e){for(var t,n,r,o=ye.event.special,i=0;void 0!==(n=e[i]);i++)if(Ae(n)){if(t=n[Ie.expando]){if(t.events)for(r in t.events)o[r]?ye.event.remove(n,r):ye.removeEvent(n,r,t.handle);n[Ie.expando]=void 0}n[Me.expando]&&(n[Me.expando]=void 0)}}}),ye.fn.extend({detach:function(e){return I(this,e,!0)},remove:function(e){return I(this,e)},text:function(e){return Pe(this,function(e){return void 0===e?ye.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return A(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||N(this,e).appendChild(e)})},prepend:function(){return A(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=N(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return A(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return A(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(ye.cleanData(S(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return ye.clone(this,e,t)})},html:function(e){return Pe(this,function(e){var t=this[0]||{},n=0,r=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!at.test(e)&&!Xe[(Ge.exec(e)||["",""])[1].toLowerCase()]){e=ye.htmlPrefilter(e);try{for(;n<r;n++)1===(t=this[n]||{}).nodeType&&(ye.cleanData(S(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return A(this,arguments,function(t){var n=this.parentNode;ye.inArray(this,e)<0&&(ye.cleanData(S(this)),n&&n.replaceChild(t,this))},e)}}),ye.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){ye.fn[e]=function(e){for(var n,r=[],o=ye(e),i=o.length-1,a=0;a<=i;a++)n=a===i?this:this.clone(!0),ye(o[a])[t](n),ae.apply(r,n.get());return this.pushStack(r)}});var st=new RegExp("^("+Fe+")(?!px)[a-z%]+$","i"),ct=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=n),t.getComputedStyle(e)},ft=new RegExp(Ke.join("|"),"i");!function(){function e(){if(s){l.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",s.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",Be.appendChild(l).appendChild(s);var e=n.getComputedStyle(s);r="1%"!==e.top,u=12===t(e.marginLeft),s.style.right="60%",a=36===t(e.right),o=36===t(e.width),s.style.position="absolute",i=12===t(s.offsetWidth/3),Be.removeChild(l),s=null}}function t(e){return Math.round(parseFloat(e))}var r,o,i,a,u,l=ne.createElement("div"),s=ne.createElement("div");s.style&&(s.style.backgroundClip="content-box",s.cloneNode(!0).style.backgroundClip="",pe.clearCloneStyle="content-box"===s.style.backgroundClip,ye.extend(pe,{boxSizingReliable:function(){return e(),o},pixelBoxStyles:function(){return e(),a},pixelPosition:function(){return e(),r},reliableMarginLeft:function(){return e(),u},scrollboxSize:function(){return e(),i}}))}();var dt=["Webkit","Moz","ms"],pt=ne.createElement("div").style,ht={},mt=/^(none|table(?!-c[ea]).+)/,gt=/^--/,yt={position:"absolute",visibility:"hidden",display:"block"},vt={letterSpacing:"0",fontWeight:"400"};ye.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=M(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,r){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var o,i,a,u=g(t),l=gt.test(t),s=e.style;if(l||(t=L(u)),a=ye.cssHooks[t]||ye.cssHooks[u],void 0===n)return a&&"get"in a&&void 0!==(o=a.get(e,!1,r))?o:s[t];"string"==(i=typeof n)&&(o=He.exec(n))&&o[1]&&(n=b(e,t,o),i="number"),null!=n&&n==n&&("number"!==i||l||(n+=o&&o[3]||(ye.cssNumber[u]?"":"px")),pe.clearCloneStyle||""!==n||0!==t.indexOf("background")||(s[t]="inherit"),a&&"set"in a&&void 0===(n=a.set(e,n,r))||(l?s.setProperty(t,n):s[t]=n))}},css:function(e,t,n,r){var o,i,a,u=g(t);return gt.test(t)||(t=L(u)),(a=ye.cssHooks[t]||ye.cssHooks[u])&&"get"in a&&(o=a.get(e,!0,n)),void 0===o&&(o=M(e,t,r)),"normal"===o&&t in vt&&(o=vt[t]),""===n||n?(i=parseFloat(o),!0===n||isFinite(i)?i||0:o):o}}),ye.each(["height","width"],function(e,t){ye.cssHooks[t]={get:function(e,n,r){if(n)return!mt.test(ye.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?K(e,t,r):ze(e,yt,function(){return K(e,t,r)})},set:function(e,n,r){var o,i=ct(e),a=!pe.scrollboxSize()&&"absolute"===i.position,u=a||r,l=u&&"border-box"===ye.css(e,"boxSizing",!1,i),s=r?H(e,t,r,l,i):0;return l&&a&&(s-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(i[t])-H(e,t,"border",!1,i)-.5)),s&&(o=He.exec(n))&&"px"!==(o[3]||"px")&&(e.style[t]=n,n=ye.css(e,t)),F(0,n,s)}}}),ye.cssHooks.marginLeft=j(pe.reliableMarginLeft,function(e,t){if(t)return(parseFloat(M(e,"marginLeft"))||e.getBoundingClientRect().left-ze(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),ye.each({margin:"",padding:"",border:"Width"},function(e,t){ye.cssHooks[e+t]={expand:function(n){for(var r=0,o={},i="string"==typeof n?n.split(" "):[n];r<4;r++)o[e+Ke[r]+t]=i[r]||i[r-2]||i[0];return o}},"margin"!==e&&(ye.cssHooks[e+t].set=F)}),ye.fn.extend({css:function(e,t){return Pe(this,function(e,t,n){var r,o,i={},a=0;if(Array.isArray(t)){for(r=ct(e),o=t.length;a<o;a++)i[t[a]]=ye.css(e,t[a],!1,r);return i}return void 0!==n?ye.style(e,t,n):ye.css(e,t)},e,t,arguments.length>1)}}),ye.Tween=B,B.prototype={constructor:B,init:function(e,t,n,r,o,i){this.elem=e,this.prop=n,this.easing=o||ye.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=r,this.unit=i||(ye.cssNumber[n]?"":"px")},cur:function(){var e=B.propHooks[this.prop];return e&&e.get?e.get(this):B.propHooks._default.get(this)},run:function(e){var t,n=B.propHooks[this.prop];return this.options.duration?this.pos=t=ye.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):B.propHooks._default.set(this),this}},B.prototype.init.prototype=B.prototype,B.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=ye.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){ye.fx.step[e.prop]?ye.fx.step[e.prop](e):1!==e.elem.nodeType||!ye.cssHooks[e.prop]&&null==e.elem.style[L(e.prop)]?e.elem[e.prop]=e.now:ye.style(e.elem,e.prop,e.now+e.unit)}}},B.propHooks.scrollTop=B.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},ye.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},ye.fx=B.prototype.init,ye.fx.step={};var bt,Et,Ct=/^(?:toggle|show|hide)$/,St=/queueHooks$/;ye.Animation=ye.extend(V,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return b(n.elem,e,He.exec(t),n),n}]},tweener:function(e,t){he(e)?(t=e,e=["*"]):e=e.match(Te);for(var n,r=0,o=e.length;r<o;r++)n=e[r],V.tweeners[n]=V.tweeners[n]||[],V.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var r,o,i,a,u,l,s,c,f="width"in t||"height"in t,d=this,p={},h=e.style,m=e.nodeType&&We(e),g=Ie.get(e,"fxshow");for(r in n.queue||(null==(a=ye._queueHooks(e,"fx")).unqueued&&(a.unqueued=0,u=a.empty.fire,a.empty.fire=function(){a.unqueued||u()}),a.unqueued++,d.always(function(){d.always(function(){a.unqueued--,ye.queue(e,"fx").length||a.empty.fire()})})),t)if(o=t[r],Ct.test(o)){if(delete t[r],i=i||"toggle"===o,o===(m?"hide":"show")){if("show"!==o||!g||void 0===g[r])continue;m=!0}p[r]=g&&g[r]||ye.style(e,r)}if((l=!ye.isEmptyObject(t))||!ye.isEmptyObject(p))for(r in f&&1===e.nodeType&&(n.overflow=[h.overflow,h.overflowX,h.overflowY],null==(s=g&&g.display)&&(s=Ie.get(e,"display")),"none"===(c=ye.css(e,"display"))&&(s?c=s:(C([e],!0),s=e.style.display||s,c=ye.css(e,"display"),C([e]))),("inline"===c||"inline-block"===c&&null!=s)&&"none"===ye.css(e,"float")&&(l||(d.done(function(){h.display=s}),null==s&&(c=h.display,s="none"===c?"":c)),h.display="inline-block")),n.overflow&&(h.overflow="hidden",d.always(function(){h.overflow=n.overflow[0],h.overflowX=n.overflow[1],h.overflowY=n.overflow[2]})),l=!1,p)l||(g?"hidden"in g&&(m=g.hidden):g=Ie.access(e,"fxshow",{display:s}),i&&(g.hidden=!m),m&&C([e],!0),d.done(function(){for(r in m||C([e]),Ie.remove(e,"fxshow"),p)ye.style(e,r,p[r])})),l=z(m?g[r]:0,r,d),r in g||(g[r]=l.start,m&&(l.end=l.start,l.start=0))}],prefilter:function(e,t){t?V.prefilters.unshift(e):V.prefilters.push(e)}}),ye.speed=function(e,t,n){var r=e&&"object"==typeof e?ye.extend({},e):{complete:n||!n&&t||he(e)&&e,duration:e,easing:n&&t||t&&!he(t)&&t};return ye.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in ye.fx.speeds?r.duration=ye.fx.speeds[r.duration]:r.duration=ye.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){he(r.old)&&r.old.call(this),r.queue&&ye.dequeue(this,r.queue)},r},ye.fn.extend({fadeTo:function(e,t,n,r){return this.filter(We).css("opacity",0).show().end().animate({opacity:t},e,n,r)},animate:function(e,t,n,r){var o=ye.isEmptyObject(e),i=ye.speed(t,n,r),a=function(){var t=V(this,ye.extend({},e),i);(o||Ie.get(this,"finish"))&&t.stop(!0)};return a.finish=a,o||!1===i.queue?this.each(a):this.queue(i.queue,a)},stop:function(e,t,n){var r=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||"fx",[]),this.each(function(){var t=!0,o=null!=e&&e+"queueHooks",i=ye.timers,a=Ie.get(this);if(o)a[o]&&a[o].stop&&r(a[o]);else for(o in a)a[o]&&a[o].stop&&St.test(o)&&r(a[o]);for(o=i.length;o--;)i[o].elem!==this||null!=e&&i[o].queue!==e||(i[o].anim.stop(n),t=!1,i.splice(o,1));!t&&n||ye.dequeue(this,e)})},finish:function(e){return!1!==e&&(e=e||"fx"),this.each(function(){var t,n=Ie.get(this),r=n[e+"queue"],o=n[e+"queueHooks"],i=ye.timers,a=r?r.length:0;for(n.finish=!0,ye.queue(this,e,[]),o&&o.stop&&o.stop.call(this,!0),t=i.length;t--;)i[t].elem===this&&i[t].queue===e&&(i[t].anim.stop(!0),i.splice(t,1));for(t=0;t<a;t++)r[t]&&r[t].finish&&r[t].finish.call(this);delete n.finish})}}),ye.each(["toggle","show","hide"],function(e,t){var n=ye.fn[t];ye.fn[t]=function(e,r,o){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(W(t,!0),e,r,o)}}),ye.each({slideDown:W("show"),slideUp:W("hide"),slideToggle:W("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){ye.fn[e]=function(e,n,r){return this.animate(t,e,n,r)}}),ye.timers=[],ye.fx.tick=function(){var e,t=0,n=ye.timers;for(bt=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||ye.fx.stop(),bt=void 0},ye.fx.timer=function(e){ye.timers.push(e),ye.fx.start()},ye.fx.interval=13,ye.fx.start=function(){Et||(Et=!0,q())},ye.fx.stop=function(){Et=null},ye.fx.speeds={slow:600,fast:200,_default:400},ye.fn.delay=function(e,t){return e=ye.fx&&ye.fx.speeds[e]||e,t=t||"fx",this.queue(t,function(t,r){var o=n.setTimeout(t,e);r.stop=function(){n.clearTimeout(o)}})},function(){var e=ne.createElement("input"),t=ne.createElement("select"),n=t.appendChild(ne.createElement("option"));e.type="checkbox",pe.checkOn=""!==e.value,pe.optSelected=n.selected,(e=ne.createElement("input")).value="t",e.type="radio",pe.radioValue="t"===e.value}();var wt,_t=ye.expr.attrHandle;ye.fn.extend({attr:function(e,t){return Pe(this,ye.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){ye.removeAttr(this,e)})}}),ye.extend({attr:function(e,t,n){var r,o,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return void 0===e.getAttribute?ye.prop(e,t,n):(1===i&&ye.isXMLDoc(e)||(o=ye.attrHooks[t.toLowerCase()]||(ye.expr.match.bool.test(t)?wt:void 0)),void 0!==n?null===n?void ye.removeAttr(e,t):o&&"set"in o&&void 0!==(r=o.set(e,n,t))?r:(e.setAttribute(t,n+""),n):o&&"get"in o&&null!==(r=o.get(e,t))?r:null==(r=ye.find.attr(e,t))?void 0:r)},attrHooks:{type:{set:function(e,t){if(!pe.radioValue&&"radio"===t&&l(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,r=0,o=t&&t.match(Te);if(o&&1===e.nodeType)for(;n=o[r++];)e.removeAttribute(n)}}),wt={set:function(e,t,n){return!1===t?ye.removeAttr(e,n):e.setAttribute(n,n),n}},ye.each(ye.expr.match.bool.source.match(/\w+/g),function(e,t){var n=_t[t]||ye.find.attr;_t[t]=function(e,t,r){var o,i,a=t.toLowerCase();return r||(i=_t[a],_t[a]=o,o=null!=n(e,t,r)?a:null,_t[a]=i),o}});var xt=/^(?:input|select|textarea|button)$/i,Ot=/^(?:a|area)$/i;ye.fn.extend({prop:function(e,t){return Pe(this,ye.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[ye.propFix[e]||e]})}}),ye.extend({prop:function(e,t,n){var r,o,i=e.nodeType;if(3!==i&&8!==i&&2!==i)return 1===i&&ye.isXMLDoc(e)||(t=ye.propFix[t]||t,o=ye.propHooks[t]),void 0!==n?o&&"set"in o&&void 0!==(r=o.set(e,n,t))?r:e[t]=n:o&&"get"in o&&null!==(r=o.get(e,t))?r:e[t]},propHooks:{tabIndex:{get:function(e){var t=ye.find.attr(e,"tabindex");return t?parseInt(t,10):xt.test(e.nodeName)||Ot.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),pe.optSelected||(ye.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),ye.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){ye.propFix[this.toLowerCase()]=this}),ye.fn.extend({addClass:function(e){var t,n,r,o,i,a,u,l=0;if(he(e))return this.each(function(t){ye(this).addClass(e.call(this,t,G(this)))});if((t=Q(e)).length)for(;n=this[l++];)if(o=G(n),r=1===n.nodeType&&" "+$(o)+" "){for(a=0;i=t[a++];)r.indexOf(" "+i+" ")<0&&(r+=i+" ");u=$(r),o!==u&&n.setAttribute("class",u)}return this},removeClass:function(e){var t,n,r,o,i,a,u,l=0;if(he(e))return this.each(function(t){ye(this).removeClass(e.call(this,t,G(this)))});if(!arguments.length)return this.attr("class","");if((t=Q(e)).length)for(;n=this[l++];)if(o=G(n),r=1===n.nodeType&&" "+$(o)+" "){for(a=0;i=t[a++];)for(;r.indexOf(" "+i+" ")>-1;)r=r.replace(" "+i+" "," ");u=$(r),o!==u&&n.setAttribute("class",u)}return this},toggleClass:function(e,t){var n=typeof e,r="string"===n||Array.isArray(e);return"boolean"==typeof t&&r?t?this.addClass(e):this.removeClass(e):he(e)?this.each(function(n){ye(this).toggleClass(e.call(this,n,G(this),t),t)}):this.each(function(){var t,o,i,a;if(r)for(o=0,i=ye(this),a=Q(e);t=a[o++];)i.hasClass(t)?i.removeClass(t):i.addClass(t);else void 0!==e&&"boolean"!==n||((t=G(this))&&Ie.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":Ie.get(this,"__className__")||""))})},hasClass:function(e){var t,n,r=0;for(t=" "+e+" ";n=this[r++];)if(1===n.nodeType&&(" "+$(G(n))+" ").indexOf(t)>-1)return!0;return!1}});var Rt=/\r/g;ye.fn.extend({val:function(e){var t,n,r,o=this[0];return arguments.length?(r=he(e),this.each(function(n){var o;1===this.nodeType&&(null==(o=r?e.call(this,n,ye(this).val()):e)?o="":"number"==typeof o?o+="":Array.isArray(o)&&(o=ye.map(o,function(e){return null==e?"":e+""})),(t=ye.valHooks[this.type]||ye.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,o,"value")||(this.value=o))})):o?(t=ye.valHooks[o.type]||ye.valHooks[o.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(o,"value"))?n:"string"==typeof(n=o.value)?n.replace(Rt,""):null==n?"":n:void 0}}),ye.extend({valHooks:{option:{get:function(e){var t=ye.find.attr(e,"value");return null!=t?t:$(ye.text(e))}},select:{get:function(e){var t,n,r,o=e.options,i=e.selectedIndex,a="select-one"===e.type,u=a?null:[],s=a?i+1:o.length;for(r=i<0?s:a?i:0;r<s;r++)if(((n=o[r]).selected||r===i)&&!n.disabled&&(!n.parentNode.disabled||!l(n.parentNode,"optgroup"))){if(t=ye(n).val(),a)return t;u.push(t)}return u},set:function(e,t){for(var n,r,o=e.options,i=ye.makeArray(t),a=o.length;a--;)((r=o[a]).selected=ye.inArray(ye.valHooks.option.get(r),i)>-1)&&(n=!0);return n||(e.selectedIndex=-1),i}}}}),ye.each(["radio","checkbox"],function(){ye.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=ye.inArray(ye(e).val(),t)>-1}},pe.checkOn||(ye.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),pe.focusin="onfocusin"in n;var Tt=/^(?:focusinfocus|focusoutblur)$/,kt=function(e){e.stopPropagation()};ye.extend(ye.event,{trigger:function(e,t,r,o){var i,a,u,l,s,c,f,d,p=[r||ne],h=ce.call(e,"type")?e.type:e,m=ce.call(e,"namespace")?e.namespace.split("."):[];if(a=d=u=r=r||ne,3!==r.nodeType&&8!==r.nodeType&&!Tt.test(h+ye.event.triggered)&&(h.indexOf(".")>-1&&(m=h.split("."),h=m.shift(),m.sort()),s=h.indexOf(":")<0&&"on"+h,(e=e[ye.expando]?e:new ye.Event(h,"object"==typeof e&&e)).isTrigger=o?2:3,e.namespace=m.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+m.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=r),t=null==t?[e]:ye.makeArray(t,[e]),f=ye.event.special[h]||{},o||!f.trigger||!1!==f.trigger.apply(r,t))){if(!o&&!f.noBubble&&!me(r)){for(l=f.delegateType||h,Tt.test(l+h)||(a=a.parentNode);a;a=a.parentNode)p.push(a),u=a;u===(r.ownerDocument||ne)&&p.push(u.defaultView||u.parentWindow||n)}for(i=0;(a=p[i++])&&!e.isPropagationStopped();)d=a,e.type=i>1?l:f.bindType||h,(c=(Ie.get(a,"events")||{})[e.type]&&Ie.get(a,"handle"))&&c.apply(a,t),(c=s&&a[s])&&c.apply&&Ae(a)&&(e.result=c.apply(a,t),!1===e.result&&e.preventDefault());return e.type=h,o||e.isDefaultPrevented()||f._default&&!1!==f._default.apply(p.pop(),t)||!Ae(r)||s&&he(r[h])&&!me(r)&&((u=r[s])&&(r[s]=null),ye.event.triggered=h,e.isPropagationStopped()&&d.addEventListener(h,kt),r[h](),e.isPropagationStopped()&&d.removeEventListener(h,kt),ye.event.triggered=void 0,u&&(r[s]=u)),e.result}},simulate:function(e,t,n){var r=ye.extend(new ye.Event,n,{type:e,isSimulated:!0});ye.event.trigger(r,null,t)}}),ye.fn.extend({trigger:function(e,t){return this.each(function(){ye.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return ye.event.trigger(e,t,n,!0)}}),pe.focusin||ye.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){ye.event.simulate(t,e.target,ye.event.fix(e))};ye.event.special[t]={setup:function(){var r=this.ownerDocument||this,o=Ie.access(r,t);o||r.addEventListener(e,n,!0),Ie.access(r,t,(o||0)+1)},teardown:function(){var r=this.ownerDocument||this,o=Ie.access(r,t)-1;o?Ie.access(r,t,o):(r.removeEventListener(e,n,!0),Ie.remove(r,t))}}});var Nt=n.location,Pt=Date.now(),Ut=/\?/;ye.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new n.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||ye.error("Invalid XML: "+e),t};var Dt=/\[\]$/,At=/\r?\n/g,It=/^(?:submit|button|image|reset|file)$/i,Mt=/^(?:input|select|textarea|keygen)/i;ye.param=function(e,t){var n,r=[],o=function(e,t){var n=he(t)?t():t;r[r.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(null==e)return"";if(Array.isArray(e)||e.jquery&&!ye.isPlainObject(e))ye.each(e,function(){o(this.name,this.value)});else for(n in e)X(n,e[n],t,o);return r.join("&")},ye.fn.extend({serialize:function(){return ye.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=ye.prop(this,"elements");return e?ye.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!ye(this).is(":disabled")&&Mt.test(this.nodeName)&&!It.test(e)&&(this.checked||!$e.test(e))}).map(function(e,t){var n=ye(this).val();return null==n?null:Array.isArray(n)?ye.map(n,function(e){return{name:t.name,value:e.replace(At,"\r\n")}}):{name:t.name,value:n.replace(At,"\r\n")}}).get()}});var jt=/%20/g,Lt=/#.*$/,Ft=/([?&])_=[^&]*/,Ht=/^(.*?):[ \t]*([^\r\n]*)$/gm,Kt=/^(?:GET|HEAD)$/,Bt=/^\/\//,qt={},Yt={},Wt="*/".concat("*"),zt=ne.createElement("a");zt.href=Nt.href,ye.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Nt.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Nt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Wt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":ye.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?ee(ee(e,ye.ajaxSettings),t):ee(ye.ajaxSettings,e)},ajaxPrefilter:J(qt),ajaxTransport:J(Yt),ajax:function(e,t){function r(e,t,r,u){var s,d,p,E,C,S=t;c||(c=!0,l&&n.clearTimeout(l),o=void 0,a=u||"",w.readyState=e>0?4:0,s=e>=200&&e<300||304===e,r&&(E=function(e,t,n){for(var r,o,i,a,u=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===r&&(r=e.mimeType||t.getResponseHeader("Content-Type"));if(r)for(o in u)if(u[o]&&u[o].test(r)){l.unshift(o);break}if(l[0]in n)i=l[0];else{for(o in n){if(!l[0]||e.converters[o+" "+l[0]]){i=o;break}a||(a=o)}i=i||a}if(i)return i!==l[0]&&l.unshift(i),n[i]}(h,w,r)),E=function(e,t,n,r){var o,i,a,u,l,s={},c=e.dataTypes.slice();if(c[1])for(a in e.converters)s[a.toLowerCase()]=e.converters[a];for(i=c.shift();i;)if(e.responseFields[i]&&(n[e.responseFields[i]]=t),!l&&r&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=i,i=c.shift())if("*"===i)i=l;else if("*"!==l&&l!==i){if(!(a=s[l+" "+i]||s["* "+i]))for(o in s)if((u=o.split(" "))[1]===i&&(a=s[l+" "+u[0]]||s["* "+u[0]])){!0===a?a=s[o]:!0!==s[o]&&(i=u[0],c.unshift(u[1]));break}if(!0!==a)if(a&&e.throws)t=a(t);else try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+l+" to "+i}}}return{state:"success",data:t}}(h,E,w,s),s?(h.ifModified&&((C=w.getResponseHeader("Last-Modified"))&&(ye.lastModified[i]=C),(C=w.getResponseHeader("etag"))&&(ye.etag[i]=C)),204===e||"HEAD"===h.type?S="nocontent":304===e?S="notmodified":(S=E.state,d=E.data,p=E.error,s=!p)):(p=S,!e&&S||(S="error",e<0&&(e=0))),w.status=e,w.statusText=(t||S)+"",s?y.resolveWith(m,[d,S,w]):y.rejectWith(m,[w,S,p]),w.statusCode(b),b=void 0,f&&g.trigger(s?"ajaxSuccess":"ajaxError",[w,h,s?d:p]),v.fireWith(m,[w,S]),f&&(g.trigger("ajaxComplete",[w,h]),--ye.active||ye.event.trigger("ajaxStop")))}"object"==typeof e&&(t=e,e=void 0),t=t||{};var o,i,a,u,l,s,c,f,d,p,h=ye.ajaxSetup({},t),m=h.context||h,g=h.context&&(m.nodeType||m.jquery)?ye(m):ye.event,y=ye.Deferred(),v=ye.Callbacks("once memory"),b=h.statusCode||{},E={},C={},S="canceled",w={readyState:0,getResponseHeader:function(e){var t;if(c){if(!u)for(u={};t=Ht.exec(a);)u[t[1].toLowerCase()+" "]=(u[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=u[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return c?a:null},setRequestHeader:function(e,t){return null==c&&(e=C[e.toLowerCase()]=C[e.toLowerCase()]||e,E[e]=t),this},overrideMimeType:function(e){return null==c&&(h.mimeType=e),this},statusCode:function(e){var t;if(e)if(c)w.always(e[w.status]);else for(t in e)b[t]=[b[t],e[t]];return this},abort:function(e){var t=e||S;return o&&o.abort(t),r(0,t),this}};if(y.promise(w),h.url=((e||h.url||Nt.href)+"").replace(Bt,Nt.protocol+"//"),h.type=t.method||t.type||h.method||h.type,h.dataTypes=(h.dataType||"*").toLowerCase().match(Te)||[""],null==h.crossDomain){s=ne.createElement("a");try{s.href=h.url,s.href=s.href,h.crossDomain=zt.protocol+"//"+zt.host!=s.protocol+"//"+s.host}catch(e){h.crossDomain=!0}}if(h.data&&h.processData&&"string"!=typeof h.data&&(h.data=ye.param(h.data,h.traditional)),Z(qt,h,t,w),c)return w;for(d in(f=ye.event&&h.global)&&0==ye.active++&&ye.event.trigger("ajaxStart"),h.type=h.type.toUpperCase(),h.hasContent=!Kt.test(h.type),i=h.url.replace(Lt,""),h.hasContent?h.data&&h.processData&&0===(h.contentType||"").indexOf("application/x-www-form-urlencoded")&&(h.data=h.data.replace(jt,"+")):(p=h.url.slice(i.length),h.data&&(h.processData||"string"==typeof h.data)&&(i+=(Ut.test(i)?"&":"?")+h.data,delete h.data),!1===h.cache&&(i=i.replace(Ft,"$1"),p=(Ut.test(i)?"&":"?")+"_="+Pt+++p),h.url=i+p),h.ifModified&&(ye.lastModified[i]&&w.setRequestHeader("If-Modified-Since",ye.lastModified[i]),ye.etag[i]&&w.setRequestHeader("If-None-Match",ye.etag[i])),(h.data&&h.hasContent&&!1!==h.contentType||t.contentType)&&w.setRequestHeader("Content-Type",h.contentType),w.setRequestHeader("Accept",h.dataTypes[0]&&h.accepts[h.dataTypes[0]]?h.accepts[h.dataTypes[0]]+("*"!==h.dataTypes[0]?", "+Wt+"; q=0.01":""):h.accepts["*"]),h.headers)w.setRequestHeader(d,h.headers[d]);if(h.beforeSend&&(!1===h.beforeSend.call(m,w,h)||c))return w.abort();if(S="abort",v.add(h.complete),w.done(h.success),w.fail(h.error),o=Z(Yt,h,t,w)){if(w.readyState=1,f&&g.trigger("ajaxSend",[w,h]),c)return w;h.async&&h.timeout>0&&(l=n.setTimeout(function(){w.abort("timeout")},h.timeout));try{c=!1,o.send(E,r)}catch(e){if(c)throw e;r(-1,e)}}else r(-1,"No Transport");return w},getJSON:function(e,t,n){return ye.get(e,t,n,"json")},getScript:function(e,t){return ye.get(e,void 0,t,"script")}}),ye.each(["get","post"],function(e,t){ye[t]=function(e,n,r,o){return he(n)&&(o=o||r,r=n,n=void 0),ye.ajax(ye.extend({url:e,type:t,dataType:o,data:n,success:r},ye.isPlainObject(e)&&e))}}),ye._evalUrl=function(e,t){return ye.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){ye.globalEval(e,t)}})},ye.fn.extend({wrapAll:function(e){var t;return this[0]&&(he(e)&&(e=e.call(this[0])),t=ye(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(e){return he(e)?this.each(function(t){ye(this).wrapInner(e.call(this,t))}):this.each(function(){var t=ye(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=he(e);return this.each(function(n){ye(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(e){return this.parent(e).not("body").each(function(){ye(this).replaceWith(this.childNodes)}),this}}),ye.expr.pseudos.hidden=function(e){return!ye.expr.pseudos.visible(e)},ye.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},ye.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(e){}};var Vt={0:200,1223:204},$t=ye.ajaxSettings.xhr();pe.cors=!!$t&&"withCredentials"in $t,pe.ajax=$t=!!$t,ye.ajaxTransport(function(e){var t,r;if(pe.cors||$t&&!e.crossDomain)return{send:function(o,i){var a,u=e.xhr();if(u.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(a in e.xhrFields)u[a]=e.xhrFields[a];for(a in e.mimeType&&u.overrideMimeType&&u.overrideMimeType(e.mimeType),e.crossDomain||o["X-Requested-With"]||(o["X-Requested-With"]="XMLHttpRequest"),o)u.setRequestHeader(a,o[a]);t=function(e){return function(){t&&(t=r=u.onload=u.onerror=u.onabort=u.ontimeout=u.onreadystatechange=null,"abort"===e?u.abort():"error"===e?"number"!=typeof u.status?i(0,"error"):i(u.status,u.statusText):i(Vt[u.status]||u.status,u.statusText,"text"!==(u.responseType||"text")||"string"!=typeof u.responseText?{binary:u.response}:{text:u.responseText},u.getAllResponseHeaders()))}},u.onload=t(),r=u.onerror=u.ontimeout=t("error"),void 0!==u.onabort?u.onabort=r:u.onreadystatechange=function(){4===u.readyState&&n.setTimeout(function(){t&&r()})},t=t("abort");try{u.send(e.hasContent&&e.data||null)}catch(e){if(t)throw e}},abort:function(){t&&t()}}}),ye.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),ye.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return ye.globalEval(e),e}}}),ye.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),ye.ajaxTransport("script",function(e){var t,n;if(e.crossDomain||e.scriptAttrs)return{send:function(r,o){t=ye("<script>").attr(e.scriptAttrs||{}).prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&o("error"===e.type?404:200,e.type)}),ne.head.appendChild(t[0])},abort:function(){n&&n()}}});var Gt,Qt=[],Xt=/(=)\?(?=&|$)|\?\?/;ye.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Qt.pop()||ye.expando+"_"+Pt++;return this[e]=!0,e}}),ye.ajaxPrefilter("json jsonp",function(e,t,r){var o,i,a,u=!1!==e.jsonp&&(Xt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Xt.test(e.data)&&"data");if(u||"jsonp"===e.dataTypes[0])return o=e.jsonpCallback=he(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,u?e[u]=e[u].replace(Xt,"$1"+o):!1!==e.jsonp&&(e.url+=(Ut.test(e.url)?"&":"?")+e.jsonp+"="+o),e.converters["script json"]=function(){return a||ye.error(o+" was not called"),a[0]},e.dataTypes[0]="json",i=n[o],n[o]=function(){a=arguments},r.always(function(){void 0===i?ye(n).removeProp(o):n[o]=i,e[o]&&(e.jsonpCallback=t.jsonpCallback,Qt.push(o)),a&&he(i)&&i(a[0]),a=i=void 0}),"script"}),pe.createHTMLDocument=((Gt=ne.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Gt.childNodes.length),ye.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(pe.createHTMLDocument?(t=ne.implementation.createHTMLDocument(""),(r=t.createElement("base")).href=ne.location.href,t.head.appendChild(r)):t=ne),o=we.exec(e),i=!n&&[],o?[t.createElement(o[1])]:(o=_([e],t,i),i&&i.length&&ye(i).remove(),ye.merge([],o.childNodes)));var r,o,i},ye.fn.load=function(e,t,n){var r,o,i,a=this,u=e.indexOf(" ");return u>-1&&(r=$(e.slice(u)),e=e.slice(0,u)),he(t)?(n=t,t=void 0):t&&"object"==typeof t&&(o="POST"),a.length>0&&ye.ajax({url:e,type:o||"GET",dataType:"html",data:t}).done(function(e){i=arguments,a.html(r?ye("<div>").append(ye.parseHTML(e)).find(r):e)}).always(n&&function(e,t){a.each(function(){n.apply(this,i||[e.responseText,t,e])})}),this},ye.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){ye.fn[t]=function(e){return this.on(t,e)}}),ye.expr.pseudos.animated=function(e){return ye.grep(ye.timers,function(t){return e===t.elem}).length},ye.offset={setOffset:function(e,t,n){var r,o,i,a,u,l,s=ye.css(e,"position"),c=ye(e),f={};"static"===s&&(e.style.position="relative"),u=c.offset(),i=ye.css(e,"top"),l=ye.css(e,"left"),("absolute"===s||"fixed"===s)&&(i+l).indexOf("auto")>-1?(r=c.position(),a=r.top,o=r.left):(a=parseFloat(i)||0,o=parseFloat(l)||0),he(t)&&(t=t.call(e,n,ye.extend({},u))),null!=t.top&&(f.top=t.top-u.top+a),null!=t.left&&(f.left=t.left-u.left+o),"using"in t?t.using.call(e,f):c.css(f)}},ye.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){ye.offset.setOffset(this,e,t)});var t,n,r=this[0];return r?r.getClientRects().length?(t=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,r=this[0],o={top:0,left:0};if("fixed"===ye.css(r,"position"))t=r.getBoundingClientRect();else{for(t=this.offset(),n=r.ownerDocument,e=r.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===ye.css(e,"position");)e=e.parentNode;e&&e!==r&&1===e.nodeType&&((o=ye(e).offset()).top+=ye.css(e,"borderTopWidth",!0),o.left+=ye.css(e,"borderLeftWidth",!0))}return{top:t.top-o.top-ye.css(r,"marginTop",!0),left:t.left-o.left-ye.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===ye.css(e,"position");)e=e.offsetParent;return e||Be})}}),ye.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n="pageYOffset"===t;ye.fn[e]=function(r){return Pe(this,function(e,r,o){var i;if(me(e)?i=e:9===e.nodeType&&(i=e.defaultView),void 0===o)return i?i[t]:e[r];i?i.scrollTo(n?i.pageXOffset:o,n?o:i.pageYOffset):e[r]=o},e,r,arguments.length)}}),ye.each(["top","left"],function(e,t){ye.cssHooks[t]=j(pe.pixelPosition,function(e,n){if(n)return n=M(e,t),st.test(n)?ye(e).position()[t]+"px":n})}),ye.each({Height:"height",Width:"width"},function(e,t){ye.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,r){ye.fn[r]=function(o,i){var a=arguments.length&&(n||"boolean"!=typeof o),u=n||(!0===o||!0===i?"margin":"border");return Pe(this,function(t,n,o){var i;return me(t)?0===r.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(i=t.documentElement,Math.max(t.body["scroll"+e],i["scroll"+e],t.body["offset"+e],i["offset"+e],i["client"+e])):void 0===o?ye.css(t,n,u):ye.style(t,n,o,u)},t,a?o:void 0,a)}})}),ye.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,t){ye.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),ye.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),ye.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,r){return this.on(t,e,n,r)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),ye.proxy=function(e,t){var n,r,o;if("string"==typeof t&&(n=e[t],t=e,e=n),he(e))return r=oe.call(arguments,2),(o=function(){return e.apply(t||this,r.concat(oe.call(arguments)))}).guid=e.guid=e.guid||ye.guid++,o},ye.holdReady=function(e){e?ye.readyWait++:ye.ready(!0)},ye.isArray=Array.isArray,ye.parseJSON=JSON.parse,ye.nodeName=l,ye.isFunction=he,ye.isWindow=me,ye.camelCase=g,ye.type=a,ye.now=Date.now,ye.isNumeric=function(e){var t=ye.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},void 0!==(r=function(){return ye}.apply(t,[]))&&(e.exports=r);var Jt=n.jQuery,Zt=n.$;return ye.noConflict=function(e){return n.$===ye&&(n.$=Zt),e&&n.jQuery===ye&&(n.jQuery=Jt),ye},o||(n.jQuery=n.$=ye),ye})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SimpleFace=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(5),i=n(6),a=n(0),u=n(1);t.SimpleFace=function(){function e(t,n,r,o,l){(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")})(this,e),this._context=t,this._xCenter=n,this._yCenter=r,this._radius=o,this._faceConfig=l,this._isBorderFilled=l.isBorderFilled||u.DEFAULT_PROPERTIES.isBorderFilled;var s=l.handColor||u.DEFAULT_PROPERTIES.handColor;this._hourHand=new i.ClockHand(this._context,0,.5*o,.07*o,s),this._minuteHand=new i.ClockHand(this._context,0,.8*o,.07*o,s),this._secondHand=new i.ClockHand(this._context,0,.9*o,.02*o,s);var c=l.hingeColor||u.DEFAULT_PROPERTIES.hingeColor;this._centerHinge=new a.Circle(this._context,0,0,.1*o,c);var f=l.fillColor||u.DEFAULT_PROPERTIES.fillColor;this._outerCircle=new a.Circle(this._context,0,0,o,f)}return r(e,[{key:"render",value:function(){if(this._outerCircle.render(),this._isBorderFilled&&this._faceConfig.isFrameGradient){for(var e=this._faceConfig.frameGradientColorList||u.DEFAULT_PROPERTIES.frameGradientColorList,t=this._context.createRadialGradient(this._xCenter,this._yCenter,.95*this._radius,this._xCenter,this._yCenter,1.05*this._radius),n=0;n<e.length;n++){var r=n/(e.length-1);t.addColorStop(r,e[n])}this._context.strokeStyle=t,this._context.lineWidth=.1*this._radius,this._context.stroke()}else{var i=this._faceConfig.frameColor||u.DEFAULT_PROPERTIES.hingeColor;new o.Ring(this._context,this._xCenter,this._yCenter,1.05*this._radius,.95*this._radius,this._isBorderFilled,i).render()}this._centerHinge.render(),this.drawNumbers()}},{key:"drawNumbers",value:function(){var e=void 0,t=void 0,n=this._context;n.font=.15*this._radius+"px arial",n.textBaseline="middle",n.textAlign="center";var r=this._faceConfig||{},o=r.numberColors||{};for(t=1;t<13;t++)e=t*Math.PI/6,n.rotate(e),n.translate(0,.85*-this._radius),n.rotate(-e),n.fillStyle=o[t]?o[t]:r.hingeColor||"#333",n.fillText(t.toString(),0,0),n.rotate(e),n.translate(0,.85*this._radius),n.rotate(-e);n.fillStyle=r.hingeColor||"#333"}},{key:"hourHand",get:function(){return this._hourHand}},{key:"minuteHand",get:function(){return this._minuteHand}},{key:"secondHand",get:function(){return this._secondHand}}]),e}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Ring=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=n(0);t.Ring=function(){function e(t,n,r,o,i,a,u){(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")})(this,e),this._context=t,this._xCenter=n,this._yCenter=r,this._innerRadius=o,this._outerRadius=i,this._isRingFilled=a||!1,this._color=u}return r(e,[{key:"render",value:function(){if(this._isRingFilled){var e=(this._innerRadius+this._outerRadius)/2,t=this._outerRadius-this._innerRadius;this._context.beginPath(),this._context.strokeStyle=this._color,this._context.arc(this._xCenter,this._xCenter,e,0,2*Math.PI),this._context.lineWidth=t,this._context.stroke()}else{var n=new o.Circle(this._context,this._xCenter,this._yCenter,this._innerRadius,this._color),r=new o.Circle(this._context,this._xCenter,this._yCenter,this._outerRadius,this._color);n.render(),r.render()}}}]),e}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();t.ClockHand=function(){function e(t,n,r,o,i){(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")})(this,e),this._context=t,this._position=n,this._length=r,this._width=o,this._fillColor=i}return r(e,[{key:"render",value:function(){this._context.beginPath(),this._context.lineWidth=this._width,this._context.lineCap="round",this._context.moveTo(0,0),this._context.rotate(this._position),this._context.strokeStyle=this._fillColor,this._context.lineTo(0,-this._length),this._context.stroke(),this._context.rotate(-this._position)}},{key:"position",get:function(){return this._position},set:function(e){this._position=e,this.render()}}]),e}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.faceConfig={FACE_0:{isBorderFilled:!0,frameColor:"#660000",hingeColor:"#333",handColor:"#333"},FACE_1:{isFrameGradient:!0,frameGradientColorList:["#333","#FFFFFF","#333"],hingeColor:"#333",handColor:"#333"},FACE_2:{isFrameGradient:!0,frameGradientColorList:["#660000","#ff0000","#ffcccc"],hingeColor:"#660000"},FACE_3:{isFrameGradient:!0,frameGradientColorList:["#4d3d00","#ffcc00","#ffe680","#fffae6","#ffe680","#ffcc00","#4d3d00"],hingeColor:"#cca300",numberColors:{1:"#cca300",2:"#cca300",3:"#cca300",4:"#cca300",5:"#cca300",6:"#cca300",7:"#cca300",8:"#cca300",9:"#cca300",10:"#cca300",11:"#cca300",12:"#cca300"},fillColor:"#333333",handColor:"#cca300"},FACE_4:{isFrameGradient:!0,frameGradientColorList:["#ff0000","#00ff00","#0000ff"],hingeColor:"#660000",numberColors:{1:"#0059b3",2:"#00cc7a",3:"#4d94ff",4:"#ff33bb",5:"#ff9933",6:"#2d2d86",7:"#8600b3",8:"#800000",9:"#00e6e6",10:"#ffff00",11:"#0033cc",12:"#ff0000"},handColor:"#660000",frameColor:"#660000"}}}])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=d(n(1)),i=d(n(7)),a=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(64)),u=d(n(12)),l=d(n(60)),s=n(26),c=d(n(11)),f=n(9);function d(e){return e&&e.__esModule?e:{default:e}}d(n(5)).default.generateRandomString(5);var p=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={newsPanelScrolledDown:!1,newsData:{},newsPanelLoading:!0},console.log(a),n.newsService=new c.default,n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),r(t,[{key:"componentDidMount",value:function(){this.fetchHeadlinesAndRender(),this.sideBarSubsription=i.default.subscribe(s.LINK_EVENT_NAME,this.sideBarLinkClicked.bind(this)),this.isScrolledDownSubscription=i.default.subscribe(f.PAGE_SCROLLED_BOTTOM_EVENT,this.pageScrolledDown.bind(this))}},{key:"componentWillUnmount",value:function(){this.sideBarSubsription&&i.default.unsubscribe(this.sideBarSubsription),this.isScrolledDownSubscription&&i.default.unsubscribe(this.isScrolledDownSubscription),this.newsService=null}},{key:"sideBarLinkClicked",value:function(e,t){t&&(this.setState({newsPanelLoading:!0,newsData:[]}),this.fetchHeadlinesAndRender(t))}},{key:"pageScrolledDown",value:function(e,t){this.setState({newsPanelScrolledDown:!0}),this.newsPanelFetchMoreData()}},{key:"fetchHeadlinesAndRender",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.newsService.fetchTopHeadlines(t,{loadMoreData:n.loadMoreData||!1}).then(function(t){e.setState({newsData:t,newsPanelLoading:!1,newsPanelScrolledDown:!1})})}},{key:"newsPanelFetchMoreData",value:function(){this.fetchHeadlinesAndRender({},{loadMoreData:!0})}},{key:"isBottom",value:function(e){return e.getBoundingClientRect().bottom<=window.innerHeight}},{key:"render",value:function(){var e=this;return o.default.createElement("div",{className:"container-fluid",ref:function(t){return e.pageBodyElement=t}},o.default.createElement("div",{className:"row"},o.default.createElement("div",{className:"col-lg-10"},o.default.createElement(u.default,{scrollSupport:!0,newsData:this.state.newsData,isLoading:this.state.newsPanelLoading,isScrolledDown:this.state.newsPanelScrolledDown})),o.default.createElement("div",{className:"col-lg-2"},o.default.createElement(l.default,null))))}}]),t}();t.default=p},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=f(n(1)),i=n(8),a=f(n(7)),u=f(n(65)),l=f(n(38)),s=f(n(36)),c=n(9);function f(e){return e&&e.__esModule?e:{default:e}}var d=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={},n.pageScrolled=n.pageScrolled.bind(n),n.lastScrollTime=null,n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),r(t,[{key:"componentDidMount",value:function(){window.addEventListener("scroll",this.pageScrolled)}},{key:"componentWillUnmount",value:function(){this.lastScrollTime=null,window.removeEventListener("scroll",this.pageScrolled)}},{key:"pageScrolled",value:function(){window.innerHeight+window.scrollY>=document.body.offsetHeight&&(!this.lastScrollTime||Date.now()-this.lastScrollTime>=c.PAGE_SCROLL_WAIT_TIME)&&(this.lastScrollTime=Date.now(),a.default.publish(c.PAGE_SCROLLED_BOTTOM_EVENT,{}))}},{key:"render",value:function(){return o.default.createElement("div",{className:"container-fluid"},o.default.createElement(i.Route,{exact:!0,path:"/",component:u.default}),o.default.createElement(i.Route,{path:"/search",component:l.default}),o.default.createElement(i.Route,{path:"/sources",component:s.default}))}}]),t}();t.default=d},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SITE_TITLE=t.HEADER_LINKS=void 0;var r,o=n(5),i=(r=o)&&r.__esModule?r:{default:r};t.HEADER_LINKS=[{display:"Headlines",address:"/",uniqueKey:"Header_"+i.default.generateRandomString(5)},{display:"News Search",address:"/search",uniqueKey:"Header_"+i.default.generateRandomString(5)},{display:"Sources",address:"/sources",uniqueKey:"Header_"+i.default.generateRandomString(5)}],t.SITE_TITLE={display:"News Room",address:"/"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r,o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=n(1),a=(r=i)&&r.__esModule?r:{default:r},u=n(8),l=n(68);var s=function(e){function t(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t);var n=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).call(this,e));return n.state={activeLinkId:null},n.headerLinkClicked=n.headerLinkClicked.bind(n),n.getHeaderLinks=n.getHeaderLinks.bind(n),n}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.default.Component),o(t,[{key:"componentDidMount",value:function(){this.setState({activeLinkId:l.HEADER_LINKS[0].uniqueKey})}},{key:"headerLinkClicked",value:function(e){var t=e.currentTarget.getAttribute("data-key");this.setState({activeLinkId:t})}},{key:"getHeaderLinks",value:function(){var e=this;return l.HEADER_LINKS.map(function(t){return a.default.createElement("li",{className:"nav-item "+(t.uniqueKey==e.state.activeLinkId?"active":""),key:t.uniqueKey,"data-key":t.uniqueKey,onClick:e.headerLinkClicked},a.default.createElement(u.Link,{className:"nav-link",to:t.address},t.display))})}},{key:"render",value:function(){return a.default.createElement("div",{className:"container-fluid"},a.default.createElement("nav",{className:"navbar navbar-expand-lg navbar-dark bg-dark fixed-top"},a.default.createElement("div",{className:"container-fluid"},a.default.createElement("a",{className:"navbar-brand",href:l.SITE_TITLE.address},l.SITE_TITLE.display),a.default.createElement("button",{className:"navbar-toggler",type:"button","data-toggle":"collapse","data-target":"#navbarResponsive","aria-controls":"navbarResponsive","aria-expanded":"false","aria-label":"Toggle navigation"},a.default.createElement("span",{className:"navbar-toggler-icon"})),a.default.createElement("div",{className:"collapse navbar-collapse",id:"navbarResponsive"},a.default.createElement("ul",{className:"navbar-nav ml-auto"},this.getHeaderLinks())))))}}]),t}();t.default=s},function(e,t){e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";var r=n(15),o=n(16),i=n(71);e.exports=function(){function e(e,t,n,r,a,u){u!==i&&o(!1,"Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types")}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t};return n.checkPropTypes=r,n.PropTypes=n,n}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=l(n(1)),i=n(8),a=l(n(69)),u=l(n(67));function l(e){return e&&e.__esModule?e:{default:e}}var s=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,o.default.Component),r(t,[{key:"render",value:function(){return o.default.createElement(i.BrowserRouter,null,o.default.createElement("div",{className:"container-fluid"},o.default.createElement(a.default,null),o.default.createElement(u.default,null)))}}]),t}();t.default=s},function(e,t,n){"use strict";e.exports=function(e){var t=(e?e.ownerDocument||e:document).defaultView||window;return!(!e||!("function"==typeof t.Node?e instanceof t.Node:"object"==typeof e&&"number"==typeof e.nodeType&&"string"==typeof e.nodeName))}},function(e,t,n){"use strict";var r=n(74);e.exports=function(e){return r(e)&&3==e.nodeType}},function(e,t,n){"use strict";var r=n(75);e.exports=function e(t,n){return!(!t||!n)&&(t===n||!r(t)&&(r(n)?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}},function(e,t,n){"use strict";var r=Object.prototype.hasOwnProperty;function o(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}e.exports=function(e,t){if(o(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),i=Object.keys(t);if(n.length!==i.length)return!1;for(var a=0;a<n.length;a++)if(!r.call(t,n[a])||!o(e[n[a]],t[n[a]]))return!1;return!0}},function(e,t,n){"use strict";e.exports=function(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}},function(e,t,n){"use strict";var r=!("undefined"==typeof window||!window.document||!window.document.createElement),o={canUseDOM:r,canUseWorkers:"undefined"!=typeof Worker,canUseEventListeners:r&&!(!window.addEventListener&&!window.attachEvent),canUseViewport:r&&!!window.screen,isInWorker:!r};e.exports=o},function(e,t,n){"use strict";
/** @license React v16.3.2
 * react-dom.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(16),o=n(1),i=n(79),a=n(29),u=n(15),l=n(78),s=n(77),c=n(76),f=n(28);function d(e){for(var t=arguments.length-1,n="http://reactjs.org/docs/error-decoder.html?invariant="+e,o=0;o<t;o++)n+="&args[]="+encodeURIComponent(arguments[o+1]);r(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}o||d("227");var p={_caughtError:null,_hasCaughtError:!1,_rethrowError:null,_hasRethrowError:!1,invokeGuardedCallback:function(e,t,n,r,o,i,a,u,l){(function(e,t,n,r,o,i,a,u,l){this._hasCaughtError=!1,this._caughtError=null;var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this._caughtError=e,this._hasCaughtError=!0}}).apply(p,arguments)},invokeGuardedCallbackAndCatchFirstError:function(e,t,n,r,o,i,a,u,l){if(p.invokeGuardedCallback.apply(this,arguments),p.hasCaughtError()){var s=p.clearCaughtError();p._hasRethrowError||(p._hasRethrowError=!0,p._rethrowError=s)}},rethrowCaughtError:function(){return function(){if(p._hasRethrowError){var e=p._rethrowError;throw p._rethrowError=null,p._hasRethrowError=!1,e}}.apply(p,arguments)},hasCaughtError:function(){return p._hasCaughtError},clearCaughtError:function(){if(p._hasCaughtError){var e=p._caughtError;return p._caughtError=null,p._hasCaughtError=!1,e}d("198")}};var h=null,m={};function g(){if(h)for(var e in m){var t=m[e],n=h.indexOf(e);if(-1<n||d("96",e),!v[n])for(var r in t.extractEvents||d("97",e),v[n]=t,n=t.eventTypes){var o=void 0,i=n[r],a=t,u=r;b.hasOwnProperty(u)&&d("99",u),b[u]=i;var l=i.phasedRegistrationNames;if(l){for(o in l)l.hasOwnProperty(o)&&y(l[o],a,u);o=!0}else i.registrationName?(y(i.registrationName,a,u),o=!0):o=!1;o||d("98",r,e)}}}function y(e,t,n){E[e]&&d("100",e),E[e]=t,C[e]=t.eventTypes[n].dependencies}var v=[],b={},E={},C={};function S(e){h&&d("101"),h=Array.prototype.slice.call(e),g()}function w(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];m.hasOwnProperty(t)&&m[t]===r||(m[t]&&d("102",t),m[t]=r,n=!0)}n&&g()}var _=Object.freeze({plugins:v,eventNameDispatchConfigs:b,registrationNameModules:E,registrationNameDependencies:C,possibleRegistrationNames:null,injectEventPluginOrder:S,injectEventPluginsByName:w}),x=null,O=null,R=null;function T(e,t,n,r){t=e.type||"unknown-event",e.currentTarget=R(r),p.invokeGuardedCallbackAndCatchFirstError(t,n,void 0,e),e.currentTarget=null}function k(e,t){return null==t&&d("30"),null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function N(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var P=null;function U(e,t){if(e){var n=e._dispatchListeners,r=e._dispatchInstances;if(Array.isArray(n))for(var o=0;o<n.length&&!e.isPropagationStopped();o++)T(e,t,n[o],r[o]);else n&&T(e,t,n,r);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function D(e){return U(e,!0)}function A(e){return U(e,!1)}var I={injectEventPluginOrder:S,injectEventPluginsByName:w};function M(e,t){var n=e.stateNode;if(!n)return null;var r=x(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}return e?null:(n&&"function"!=typeof n&&d("231",t,typeof n),n)}function j(e,t){null!==e&&(P=k(P,e)),e=P,P=null,e&&(N(e,t?D:A),P&&d("95"),p.rethrowCaughtError())}function L(e,t,n,r){for(var o=null,i=0;i<v.length;i++){var a=v[i];a&&(a=a.extractEvents(e,t,n,r))&&(o=k(o,a))}j(o,!1)}var F=Object.freeze({injection:I,getListener:M,runEventsInBatch:j,runExtractedEventsInBatch:L}),H=Math.random().toString(36).slice(2),K="__reactInternalInstance$"+H,B="__reactEventHandlers$"+H;function q(e){if(e[K])return e[K];for(;!e[K];){if(!e.parentNode)return null;e=e.parentNode}return 5===(e=e[K]).tag||6===e.tag?e:null}function Y(e){if(5===e.tag||6===e.tag)return e.stateNode;d("33")}function W(e){return e[B]||null}var z=Object.freeze({precacheFiberNode:function(e,t){t[K]=e},getClosestInstanceFromNode:q,getInstanceFromNode:function(e){return!(e=e[K])||5!==e.tag&&6!==e.tag?null:e},getNodeFromInstance:Y,getFiberCurrentPropsFromNode:W,updateFiberProps:function(e,t){e[B]=t}});function V(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function $(e,t,n){for(var r=[];e;)r.push(e),e=V(e);for(e=r.length;0<e--;)t(r[e],"captured",n);for(e=0;e<r.length;e++)t(r[e],"bubbled",n)}function G(e,t,n){(t=M(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=k(n._dispatchListeners,t),n._dispatchInstances=k(n._dispatchInstances,e))}function Q(e){e&&e.dispatchConfig.phasedRegistrationNames&&$(e._targetInst,G,e)}function X(e){if(e&&e.dispatchConfig.phasedRegistrationNames){var t=e._targetInst;$(t=t?V(t):null,G,e)}}function J(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=M(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=k(n._dispatchListeners,t),n._dispatchInstances=k(n._dispatchInstances,e))}function Z(e){e&&e.dispatchConfig.registrationName&&J(e._targetInst,null,e)}function ee(e){N(e,Q)}function te(e,t,n,r){if(n&&r)e:{for(var o=n,i=r,a=0,u=o;u;u=V(u))a++;u=0;for(var l=i;l;l=V(l))u++;for(;0<a-u;)o=V(o),a--;for(;0<u-a;)i=V(i),u--;for(;a--;){if(o===i||o===i.alternate)break e;o=V(o),i=V(i)}o=null}else o=null;for(i=o,o=[];n&&n!==i&&(null===(a=n.alternate)||a!==i);)o.push(n),n=V(n);for(n=[];r&&r!==i&&(null===(a=r.alternate)||a!==i);)n.push(r),r=V(r);for(r=0;r<o.length;r++)J(o[r],"bubbled",e);for(e=n.length;0<e--;)J(n[e],"captured",t)}var ne=Object.freeze({accumulateTwoPhaseDispatches:ee,accumulateTwoPhaseDispatchesSkipTarget:function(e){N(e,X)},accumulateEnterLeaveDispatches:te,accumulateDirectDispatches:function(e){N(e,Z)}}),re=null;function oe(){return!re&&i.canUseDOM&&(re="textContent"in document.documentElement?"textContent":"innerText"),re}var ie={_root:null,_startText:null,_fallbackText:null};function ae(){if(ie._fallbackText)return ie._fallbackText;var e,t,n=ie._startText,r=n.length,o=ue(),i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return ie._fallbackText=o.slice(e,1<t?1-t:void 0),ie._fallbackText}function ue(){return"value"in ie._root?ie._root.value:ie._root[oe()]}var le="dispatchConfig _targetInst nativeEvent isDefaultPrevented isPropagationStopped _dispatchListeners _dispatchInstances".split(" "),se={type:null,target:null,currentTarget:u.thatReturnsNull,eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};function ce(e,t,n,r){for(var o in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(o)&&((t=e[o])?this[o]=t(n):"target"===o?this.target=r:this[o]=n[o]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?u.thatReturnsTrue:u.thatReturnsFalse,this.isPropagationStopped=u.thatReturnsFalse,this}function fe(e,t,n,r){if(this.eventPool.length){var o=this.eventPool.pop();return this.call(o,e,t,n,r),o}return new this(e,t,n,r)}function de(e){e instanceof this||d("223"),e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function pe(e){e.eventPool=[],e.getPooled=fe,e.release=de}a(ce.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=u.thatReturnsTrue)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=u.thatReturnsTrue)},persist:function(){this.isPersistent=u.thatReturnsTrue},isPersistent:u.thatReturnsFalse,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;for(t=0;t<le.length;t++)this[le[t]]=null}}),ce.Interface=se,ce.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var o=new t;return a(o,n.prototype),n.prototype=o,n.prototype.constructor=n,n.Interface=a({},r.Interface,e),n.extend=r.extend,pe(n),n},pe(ce);var he=ce.extend({data:null}),me=ce.extend({data:null}),ge=[9,13,27,32],ye=i.canUseDOM&&"CompositionEvent"in window,ve=null;i.canUseDOM&&"documentMode"in document&&(ve=document.documentMode);var be=i.canUseDOM&&"TextEvent"in window&&!ve,Ee=i.canUseDOM&&(!ye||ve&&8<ve&&11>=ve),Ce=String.fromCharCode(32),Se={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["topCompositionEnd","topKeyPress","topTextInput","topPaste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"topBlur topCompositionEnd topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"topBlur topCompositionStart topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"topBlur topCompositionUpdate topKeyDown topKeyPress topKeyUp topMouseDown".split(" ")}},we=!1;function _e(e,t){switch(e){case"topKeyUp":return-1!==ge.indexOf(t.keyCode);case"topKeyDown":return 229!==t.keyCode;case"topKeyPress":case"topMouseDown":case"topBlur":return!0;default:return!1}}function xe(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Oe=!1;var Re={eventTypes:Se,extractEvents:function(e,t,n,r){var o=void 0,i=void 0;if(ye)e:{switch(e){case"topCompositionStart":o=Se.compositionStart;break e;case"topCompositionEnd":o=Se.compositionEnd;break e;case"topCompositionUpdate":o=Se.compositionUpdate;break e}o=void 0}else Oe?_e(e,n)&&(o=Se.compositionEnd):"topKeyDown"===e&&229===n.keyCode&&(o=Se.compositionStart);return o?(Ee&&(Oe||o!==Se.compositionStart?o===Se.compositionEnd&&Oe&&(i=ae()):(ie._root=r,ie._startText=ue(),Oe=!0)),o=he.getPooled(o,t,n,r),i?o.data=i:null!==(i=xe(n))&&(o.data=i),ee(o),i=o):i=null,(e=be?function(e,t){switch(e){case"topCompositionEnd":return xe(t);case"topKeyPress":return 32!==t.which?null:(we=!0,Ce);case"topTextInput":return(e=t.data)===Ce&&we?null:e;default:return null}}(e,n):function(e,t){if(Oe)return"topCompositionEnd"===e||!ye&&_e(e,t)?(e=ae(),ie._root=null,ie._startText=null,ie._fallbackText=null,Oe=!1,e):null;switch(e){case"topPaste":return null;case"topKeyPress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"topCompositionEnd":return Ee?null:t.data;default:return null}}(e,n))?((t=me.getPooled(Se.beforeInput,t,n,r)).data=e,ee(t)):t=null,null===i?t:null===t?i:[i,t]}},Te=null,ke={injectFiberControlledHostComponent:function(e){Te=e}},Ne=null,Pe=null;function Ue(e){if(e=O(e)){Te&&"function"==typeof Te.restoreControlledState||d("194");var t=x(e.stateNode);Te.restoreControlledState(e.stateNode,e.type,t)}}function De(e){Ne?Pe?Pe.push(e):Pe=[e]:Ne=e}function Ae(){return null!==Ne||null!==Pe}function Ie(){if(Ne){var e=Ne,t=Pe;if(Pe=Ne=null,Ue(e),t)for(e=0;e<t.length;e++)Ue(t[e])}}var Me=Object.freeze({injection:ke,enqueueStateRestore:De,needsStateRestore:Ae,restoreStateIfNeeded:Ie});function je(e,t){return e(t)}function Le(e,t,n){return e(t,n)}function Fe(){}var He=!1;function Ke(e,t){if(He)return e(t);He=!0;try{return je(e,t)}finally{He=!1,Ae()&&(Fe(),Ie())}}var Be={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function qe(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Be[e.type]:"textarea"===t}function Ye(e){return(e=e.target||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function We(e,t){return!(!i.canUseDOM||t&&!("addEventListener"in document))&&((t=(e="on"+e)in document)||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t)}function ze(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Ve(e){e._valueTracker||(e._valueTracker=function(e){var t=ze(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&"function"==typeof n.get&&"function"==typeof n.set)return Object.defineProperty(e,t,{configurable:!0,get:function(){return n.get.call(this)},set:function(e){r=""+e,n.set.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}(e))}function $e(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=ze(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}var Ge=o.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,Qe="function"==typeof Symbol&&Symbol.for,Xe=Qe?Symbol.for("react.element"):60103,Je=Qe?Symbol.for("react.call"):60104,Ze=Qe?Symbol.for("react.return"):60105,et=Qe?Symbol.for("react.portal"):60106,tt=Qe?Symbol.for("react.fragment"):60107,nt=Qe?Symbol.for("react.strict_mode"):60108,rt=Qe?Symbol.for("react.provider"):60109,ot=Qe?Symbol.for("react.context"):60110,it=Qe?Symbol.for("react.async_mode"):60111,at=Qe?Symbol.for("react.forward_ref"):60112,ut="function"==typeof Symbol&&Symbol.iterator;function lt(e){return null===e||void 0===e?null:"function"==typeof(e=ut&&e[ut]||e["@@iterator"])?e:null}function st(e){if("function"==typeof(e=e.type))return e.displayName||e.name;if("string"==typeof e)return e;switch(e){case tt:return"ReactFragment";case et:return"ReactPortal";case Je:return"ReactCall";case Ze:return"ReactReturn"}if("object"==typeof e&&null!==e)switch(e.$$typeof){case at:return""!==(e=e.render.displayName||e.render.name||"")?"ForwardRef("+e+")":"ForwardRef"}return null}function ct(e){var t="";do{e:switch(e.tag){case 0:case 1:case 2:case 5:var n=e._debugOwner,r=e._debugSource,o=st(e),i=null;n&&(i=st(n)),n=r,o="\n    in "+(o||"Unknown")+(n?" (at "+n.fileName.replace(/^.*[\\\/]/,"")+":"+n.lineNumber+")":i?" (created by "+i+")":"");break e;default:o=""}t+=o,e=e.return}while(e);return t}var ft=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,dt={},pt={};function ht(e,t,n,r,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t}var mt={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(e){mt[e]=new ht(e,0,!1,e,null)}),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(e){var t=e[0];mt[t]=new ht(t,1,!1,e[1],null)}),["contentEditable","draggable","spellCheck","value"].forEach(function(e){mt[e]=new ht(e,2,!1,e.toLowerCase(),null)}),["autoReverse","externalResourcesRequired","preserveAlpha"].forEach(function(e){mt[e]=new ht(e,2,!1,e,null)}),"allowFullScreen async autoFocus autoPlay controls default defer disabled formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(e){mt[e]=new ht(e,3,!1,e.toLowerCase(),null)}),["checked","multiple","muted","selected"].forEach(function(e){mt[e]=new ht(e,3,!0,e.toLowerCase(),null)}),["capture","download"].forEach(function(e){mt[e]=new ht(e,4,!1,e.toLowerCase(),null)}),["cols","rows","size","span"].forEach(function(e){mt[e]=new ht(e,6,!1,e.toLowerCase(),null)}),["rowSpan","start"].forEach(function(e){mt[e]=new ht(e,5,!1,e.toLowerCase(),null)});var gt=/[\-:]([a-z])/g;function yt(e){return e[1].toUpperCase()}function vt(e,t,n,r){var o=mt.hasOwnProperty(t)?mt[t]:null;(null!==o?0===o.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null===t||void 0===t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!pt.hasOwnProperty(e)||!dt.hasOwnProperty(e)&&(ft.test(e)?pt[e]=!0:(dt[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function bt(e,t){var n=t.checked;return a({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function Et(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=xt(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function Ct(e,t){null!=(t=t.checked)&&vt(e,"checked",t,!1)}function St(e,t){Ct(e,t);var n=xt(t.value);null!=n&&("number"===t.type?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n)),t.hasOwnProperty("value")?_t(e,t.type,n):t.hasOwnProperty("defaultValue")&&_t(e,t.type,xt(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function wt(e,t){(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue"))&&(""===e.value&&(e.value=""+e._wrapperState.initialValue),e.defaultValue=""+e._wrapperState.initialValue),""!==(t=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!e.defaultChecked,""!==t&&(e.name=t)}function _t(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function xt(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(e){var t=e.replace(gt,yt);mt[t]=new ht(t,1,!1,e,null)}),"xlink:actuate xlink:arcrole xlink:href xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(e){var t=e.replace(gt,yt);mt[t]=new ht(t,1,!1,e,"http://www.w3.org/1999/xlink")}),["xml:base","xml:lang","xml:space"].forEach(function(e){var t=e.replace(gt,yt);mt[t]=new ht(t,1,!1,e,"http://www.w3.org/XML/1998/namespace")}),mt.tabIndex=new ht("tabIndex",1,!1,"tabindex",null);var Ot={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"topBlur topChange topClick topFocus topInput topKeyDown topKeyUp topSelectionChange".split(" ")}};function Rt(e,t,n){return(e=ce.getPooled(Ot.change,e,t,n)).type="change",De(n),ee(e),e}var Tt=null,kt=null;function Nt(e){j(e,!1)}function Pt(e){if($e(Y(e)))return e}function Ut(e,t){if("topChange"===e)return t}var Dt=!1;function At(){Tt&&(Tt.detachEvent("onpropertychange",It),kt=Tt=null)}function It(e){"value"===e.propertyName&&Pt(kt)&&Ke(Nt,e=Rt(kt,e,Ye(e)))}function Mt(e,t,n){"topFocus"===e?(At(),kt=n,(Tt=t).attachEvent("onpropertychange",It)):"topBlur"===e&&At()}function jt(e){if("topSelectionChange"===e||"topKeyUp"===e||"topKeyDown"===e)return Pt(kt)}function Lt(e,t){if("topClick"===e)return Pt(t)}function Ft(e,t){if("topInput"===e||"topChange"===e)return Pt(t)}i.canUseDOM&&(Dt=We("input")&&(!document.documentMode||9<document.documentMode));var Ht={eventTypes:Ot,_isInputEventSupported:Dt,extractEvents:function(e,t,n,r){var o=t?Y(t):window,i=void 0,a=void 0,u=o.nodeName&&o.nodeName.toLowerCase();if("select"===u||"input"===u&&"file"===o.type?i=Ut:qe(o)?Dt?i=Ft:(i=jt,a=Mt):(u=o.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(i=Lt),i&&(i=i(e,t)))return Rt(i,n,r);a&&a(e,o,t),"topBlur"===e&&null!=t&&(e=t._wrapperState||o._wrapperState)&&e.controlled&&"number"===o.type&&_t(o,"number",o.value)}},Kt=ce.extend({view:null,detail:null}),Bt={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function qt(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Bt[e])&&!!t[e]}function Yt(){return qt}var Wt=Kt.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Yt,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)}}),zt={mouseEnter:{registrationName:"onMouseEnter",dependencies:["topMouseOut","topMouseOver"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["topMouseOut","topMouseOver"]}},Vt={eventTypes:zt,extractEvents:function(e,t,n,r){if("topMouseOver"===e&&(n.relatedTarget||n.fromElement)||"topMouseOut"!==e&&"topMouseOver"!==e)return null;var o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window;if("topMouseOut"===e?(e=t,t=(t=n.relatedTarget||n.toElement)?q(t):null):e=null,e===t)return null;var i=null==e?o:Y(e);o=null==t?o:Y(t);var a=Wt.getPooled(zt.mouseLeave,e,n,r);return a.type="mouseleave",a.target=i,a.relatedTarget=o,(n=Wt.getPooled(zt.mouseEnter,t,n,r)).type="mouseenter",n.target=o,n.relatedTarget=i,te(a,n,e,t),[a,n]}};function $t(e){var t=e;if(e.alternate)for(;t.return;)t=t.return;else{if(0!=(2&t.effectTag))return 1;for(;t.return;)if(0!=(2&(t=t.return).effectTag))return 1}return 3===t.tag?2:3}function Gt(e){return!!(e=e._reactInternalFiber)&&2===$t(e)}function Qt(e){2!==$t(e)&&d("188")}function Xt(e){var t=e.alternate;if(!t)return 3===(t=$t(e))&&d("188"),1===t?null:e;for(var n=e,r=t;;){var o=n.return,i=o?o.alternate:null;if(!o||!i)break;if(o.child===i.child){for(var a=o.child;a;){if(a===n)return Qt(o),e;if(a===r)return Qt(o),t;a=a.sibling}d("188")}if(n.return!==r.return)n=o,r=i;else{a=!1;for(var u=o.child;u;){if(u===n){a=!0,n=o,r=i;break}if(u===r){a=!0,r=o,n=i;break}u=u.sibling}if(!a){for(u=i.child;u;){if(u===n){a=!0,n=i,r=o;break}if(u===r){a=!0,r=i,n=o;break}u=u.sibling}a||d("189")}}n.alternate!==r&&d("190")}return 3!==n.tag&&d("188"),n.stateNode.current===n?e:t}function Jt(e){if(!(e=Xt(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}var Zt=ce.extend({animationName:null,elapsedTime:null,pseudoElement:null}),en=ce.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),tn=Kt.extend({relatedTarget:null});function nn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var rn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},on={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},an=Kt.extend({key:function(e){if(e.key){var t=rn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=nn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?on[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Yt,charCode:function(e){return"keypress"===e.type?nn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?nn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),un=Wt.extend({dataTransfer:null}),ln=Kt.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Yt}),sn=ce.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),cn=Wt.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),fn={},dn={};function pn(e,t){var n=e[0].toUpperCase()+e.slice(1),r="on"+n;t={phasedRegistrationNames:{bubbled:r,captured:r+"Capture"},dependencies:[n="top"+n],isInteractive:t},fn[e]=t,dn[n]=t}"blur cancel click close contextMenu copy cut doubleClick dragEnd dragStart drop focus input invalid keyDown keyPress keyUp mouseDown mouseUp paste pause play rateChange reset seeked submit touchCancel touchEnd touchStart volumeChange".split(" ").forEach(function(e){pn(e,!0)}),"abort animationEnd animationIteration animationStart canPlay canPlayThrough drag dragEnter dragExit dragLeave dragOver durationChange emptied encrypted ended error load loadedData loadedMetadata loadStart mouseMove mouseOut mouseOver playing progress scroll seeking stalled suspend timeUpdate toggle touchMove transitionEnd waiting wheel".split(" ").forEach(function(e){pn(e,!1)});var hn={eventTypes:fn,isInteractiveTopLevelEventType:function(e){return void 0!==(e=dn[e])&&!0===e.isInteractive},extractEvents:function(e,t,n,r){var o=dn[e];if(!o)return null;switch(e){case"topKeyPress":if(0===nn(n))return null;case"topKeyDown":case"topKeyUp":e=an;break;case"topBlur":case"topFocus":e=tn;break;case"topClick":if(2===n.button)return null;case"topDoubleClick":case"topMouseDown":case"topMouseMove":case"topMouseUp":case"topMouseOut":case"topMouseOver":case"topContextMenu":e=Wt;break;case"topDrag":case"topDragEnd":case"topDragEnter":case"topDragExit":case"topDragLeave":case"topDragOver":case"topDragStart":case"topDrop":e=un;break;case"topTouchCancel":case"topTouchEnd":case"topTouchMove":case"topTouchStart":e=ln;break;case"topAnimationEnd":case"topAnimationIteration":case"topAnimationStart":e=Zt;break;case"topTransitionEnd":e=sn;break;case"topScroll":e=Kt;break;case"topWheel":e=cn;break;case"topCopy":case"topCut":case"topPaste":e=en;break;default:e=ce}return ee(t=e.getPooled(o,t,n,r)),t}},mn=hn.isInteractiveTopLevelEventType,gn=[];function yn(e){var t=e.targetInst;do{if(!t){e.ancestors.push(t);break}var n;for(n=t;n.return;)n=n.return;if(!(n=3!==n.tag?null:n.stateNode.containerInfo))break;e.ancestors.push(t),t=q(n)}while(t);for(n=0;n<e.ancestors.length;n++)t=e.ancestors[n],L(e.topLevelType,t,e.nativeEvent,Ye(e.nativeEvent))}var vn=!0;function bn(e){vn=!!e}function En(e,t,n){if(!n)return null;e=(mn(e)?Sn:wn).bind(null,e),n.addEventListener(t,e,!1)}function Cn(e,t,n){if(!n)return null;e=(mn(e)?Sn:wn).bind(null,e),n.addEventListener(t,e,!0)}function Sn(e,t){Le(wn,e,t)}function wn(e,t){if(vn){var n=Ye(t);if(null!==(n=q(n))&&"number"==typeof n.tag&&2!==$t(n)&&(n=null),gn.length){var r=gn.pop();r.topLevelType=e,r.nativeEvent=t,r.targetInst=n,e=r}else e={topLevelType:e,nativeEvent:t,targetInst:n,ancestors:[]};try{Ke(yn,e)}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>gn.length&&gn.push(e)}}}var _n=Object.freeze({get _enabled(){return vn},setEnabled:bn,isEnabled:function(){return vn},trapBubbledEvent:En,trapCapturedEvent:Cn,dispatchEvent:wn});function xn(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n["ms"+e]="MS"+t,n["O"+e]="o"+t.toLowerCase(),n}var On={animationend:xn("Animation","AnimationEnd"),animationiteration:xn("Animation","AnimationIteration"),animationstart:xn("Animation","AnimationStart"),transitionend:xn("Transition","TransitionEnd")},Rn={},Tn={};function kn(e){if(Rn[e])return Rn[e];if(!On[e])return e;var t,n=On[e];for(t in n)if(n.hasOwnProperty(t)&&t in Tn)return Rn[e]=n[t];return e}i.canUseDOM&&(Tn=document.createElement("div").style,"AnimationEvent"in window||(delete On.animationend.animation,delete On.animationiteration.animation,delete On.animationstart.animation),"TransitionEvent"in window||delete On.transitionend.transition);var Nn={topAnimationEnd:kn("animationend"),topAnimationIteration:kn("animationiteration"),topAnimationStart:kn("animationstart"),topBlur:"blur",topCancel:"cancel",topChange:"change",topClick:"click",topClose:"close",topCompositionEnd:"compositionend",topCompositionStart:"compositionstart",topCompositionUpdate:"compositionupdate",topContextMenu:"contextmenu",topCopy:"copy",topCut:"cut",topDoubleClick:"dblclick",topDrag:"drag",topDragEnd:"dragend",topDragEnter:"dragenter",topDragExit:"dragexit",topDragLeave:"dragleave",topDragOver:"dragover",topDragStart:"dragstart",topDrop:"drop",topFocus:"focus",topInput:"input",topKeyDown:"keydown",topKeyPress:"keypress",topKeyUp:"keyup",topLoad:"load",topLoadStart:"loadstart",topMouseDown:"mousedown",topMouseMove:"mousemove",topMouseOut:"mouseout",topMouseOver:"mouseover",topMouseUp:"mouseup",topPaste:"paste",topScroll:"scroll",topSelectionChange:"selectionchange",topTextInput:"textInput",topToggle:"toggle",topTouchCancel:"touchcancel",topTouchEnd:"touchend",topTouchMove:"touchmove",topTouchStart:"touchstart",topTransitionEnd:kn("transitionend"),topWheel:"wheel"},Pn={topAbort:"abort",topCanPlay:"canplay",topCanPlayThrough:"canplaythrough",topDurationChange:"durationchange",topEmptied:"emptied",topEncrypted:"encrypted",topEnded:"ended",topError:"error",topLoadedData:"loadeddata",topLoadedMetadata:"loadedmetadata",topLoadStart:"loadstart",topPause:"pause",topPlay:"play",topPlaying:"playing",topProgress:"progress",topRateChange:"ratechange",topSeeked:"seeked",topSeeking:"seeking",topStalled:"stalled",topSuspend:"suspend",topTimeUpdate:"timeupdate",topVolumeChange:"volumechange",topWaiting:"waiting"},Un={},Dn=0,An="_reactListenersID"+(""+Math.random()).slice(2);function In(e){return Object.prototype.hasOwnProperty.call(e,An)||(e[An]=Dn++,Un[e[An]]={}),Un[e[An]]}function Mn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function jn(e,t){var n,r=Mn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Mn(r)}}function Ln(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&"text"===e.type||"textarea"===t||"true"===e.contentEditable)}var Fn=i.canUseDOM&&"documentMode"in document&&11>=document.documentMode,Hn={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"topBlur topContextMenu topFocus topKeyDown topKeyUp topMouseDown topMouseUp topSelectionChange".split(" ")}},Kn=null,Bn=null,qn=null,Yn=!1;function Wn(e,t){if(Yn||null==Kn||Kn!==l())return null;var n=Kn;return"selectionStart"in n&&Ln(n)?n={start:n.selectionStart,end:n.selectionEnd}:window.getSelection?n={anchorNode:(n=window.getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset}:n=void 0,qn&&s(qn,n)?null:(qn=n,(e=ce.getPooled(Hn.select,Bn,e,t)).type="select",e.target=Kn,ee(e),e)}var zn={eventTypes:Hn,extractEvents:function(e,t,n,r){var o,i=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(o=!i)){e:{i=In(i),o=C.onSelect;for(var a=0;a<o.length;a++){var u=o[a];if(!i.hasOwnProperty(u)||!i[u]){i=!1;break e}}i=!0}o=!i}if(o)return null;switch(i=t?Y(t):window,e){case"topFocus":(qe(i)||"true"===i.contentEditable)&&(Kn=i,Bn=t,qn=null);break;case"topBlur":qn=Bn=Kn=null;break;case"topMouseDown":Yn=!0;break;case"topContextMenu":case"topMouseUp":return Yn=!1,Wn(n,r);case"topSelectionChange":if(Fn)break;case"topKeyDown":case"topKeyUp":return Wn(n,r)}return null}};function Vn(e,t,n,r){this.tag=e,this.key=n,this.stateNode=this.type=null,this.sibling=this.child=this.return=null,this.index=0,this.ref=null,this.pendingProps=t,this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.expirationTime=0,this.alternate=null}function $n(e,t,n){var r=e.alternate;return null===r?((r=new Vn(e.tag,t,e.key,e.mode)).type=e.type,r.stateNode=e.stateNode,r.alternate=e,e.alternate=r):(r.pendingProps=t,r.effectTag=0,r.nextEffect=null,r.firstEffect=null,r.lastEffect=null),r.expirationTime=n,r.child=e.child,r.memoizedProps=e.memoizedProps,r.memoizedState=e.memoizedState,r.updateQueue=e.updateQueue,r.sibling=e.sibling,r.index=e.index,r.ref=e.ref,r}function Gn(e,t,n){var r=e.type,o=e.key;e=e.props;var i=void 0;if("function"==typeof r)i=r.prototype&&r.prototype.isReactComponent?2:0;else if("string"==typeof r)i=5;else switch(r){case tt:return Qn(e.children,t,n,o);case it:i=11,t|=3;break;case nt:i=11,t|=2;break;case Je:i=7;break;case Ze:i=9;break;default:if("object"==typeof r&&null!==r)switch(r.$$typeof){case rt:i=13;break;case ot:i=12;break;case at:i=14;break;default:if("number"==typeof r.tag)return(t=r).pendingProps=e,t.expirationTime=n,t;d("130",null==r?r:typeof r,"")}else d("130",null==r?r:typeof r,"")}return(t=new Vn(i,e,o,t)).type=r,t.expirationTime=n,t}function Qn(e,t,n,r){return(e=new Vn(10,e,r,t)).expirationTime=n,e}function Xn(e,t,n){return(e=new Vn(6,e,null,t)).expirationTime=n,e}function Jn(e,t,n){return(t=new Vn(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}I.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin TapEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),x=z.getFiberCurrentPropsFromNode,O=z.getInstanceFromNode,R=z.getNodeFromInstance,I.injectEventPluginsByName({SimpleEventPlugin:hn,EnterLeaveEventPlugin:Vt,ChangeEventPlugin:Ht,SelectEventPlugin:zn,BeforeInputEventPlugin:Re});var Zn=null,er=null;function tr(e){return function(t){try{return e(t)}catch(e){}}}function nr(e){"function"==typeof Zn&&Zn(e)}function rr(e){"function"==typeof er&&er(e)}function or(e){return{baseState:e,expirationTime:0,first:null,last:null,callbackList:null,hasForceUpdate:!1,isInitialized:!1,capturedValues:null}}function ir(e,t){null===e.last?e.first=e.last=t:(e.last.next=t,e.last=t),(0===e.expirationTime||e.expirationTime>t.expirationTime)&&(e.expirationTime=t.expirationTime)}new Set;var ar=void 0,ur=void 0;function lr(e){ar=ur=null;var t=e.alternate,n=e.updateQueue;null===n&&(n=e.updateQueue=or(null)),null!==t?null===(e=t.updateQueue)&&(e=t.updateQueue=or(null)):e=null,ar=n,ur=e!==n?e:null}function sr(e,t){lr(e),e=ar;var n=ur;null===n?ir(e,t):null===e.last||null===n.last?(ir(e,t),ir(n,t)):(ir(e,t),n.last=t)}function cr(e,t,n,r){return"function"==typeof(e=e.partialState)?e.call(t,n,r):e}function fr(e,t,n,r,o,i){null!==e&&e.updateQueue===n&&(n=t.updateQueue={baseState:n.baseState,expirationTime:n.expirationTime,first:n.first,last:n.last,isInitialized:n.isInitialized,capturedValues:n.capturedValues,callbackList:null,hasForceUpdate:!1}),n.expirationTime=0,n.isInitialized?e=n.baseState:(e=n.baseState=t.memoizedState,n.isInitialized=!0);for(var u=!0,l=n.first,s=!1;null!==l;){var c=l.expirationTime;if(c>i){var f=n.expirationTime;(0===f||f>c)&&(n.expirationTime=c),s||(s=!0,n.baseState=e)}else s||(n.first=l.next,null===n.first&&(n.last=null)),l.isReplace?(e=cr(l,r,e,o),u=!0):(c=cr(l,r,e,o))&&(e=u?a({},e,c):a(e,c),u=!1),l.isForced&&(n.hasForceUpdate=!0),null!==l.callback&&(null===(c=n.callbackList)&&(c=n.callbackList=[]),c.push(l)),null!==l.capturedValue&&(null===(c=n.capturedValues)?n.capturedValues=[l.capturedValue]:c.push(l.capturedValue));l=l.next}return null!==n.callbackList?t.effectTag|=32:null!==n.first||n.hasForceUpdate||null!==n.capturedValues||(t.updateQueue=null),s||(n.baseState=e),e}function dr(e,t){var n=e.callbackList;if(null!==n)for(e.callbackList=null,e=0;e<n.length;e++){var r=n[e],o=r.callback;r.callback=null,"function"!=typeof o&&d("191",o),o.call(t)}}var pr=Array.isArray;function hr(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){var r=void 0;(n=n._owner)&&(2!==n.tag&&d("110"),r=n.stateNode),r||d("147",e);var o=""+e;return null!==t&&null!==t.ref&&t.ref._stringRef===o?t.ref:((t=function(e){var t=r.refs===f?r.refs={}:r.refs;null===e?delete t[o]:t[o]=e})._stringRef=o,t)}"string"!=typeof e&&d("148"),n._owner||d("254",e)}return e}function mr(e,t){"textarea"!==e.type&&d("31","[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,"")}function gr(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t,n){return(e=$n(e,t,n)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function a(t){return e&&null===t.alternate&&(t.effectTag=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Xn(n,e.mode,r)).return=e,t):((t=o(t,n,r)).return=e,t)}function l(e,t,n,r){return null!==t&&t.type===n.type?((r=o(t,n.props,r)).ref=hr(e,t,n),r.return=e,r):((r=Gn(n,e.mode,r)).ref=hr(e,t,n),r.return=e,r)}function s(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Jn(n,e.mode,r)).return=e,t):((t=o(t,n.children||[],r)).return=e,t)}function c(e,t,n,r,i){return null===t||10!==t.tag?((t=Qn(n,e.mode,r,i)).return=e,t):((t=o(t,n,r)).return=e,t)}function f(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Xn(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case Xe:return(n=Gn(t,e.mode,n)).ref=hr(e,null,t),n.return=e,n;case et:return(t=Jn(t,e.mode,n)).return=e,t}if(pr(t)||lt(t))return(t=Qn(t,e.mode,n,null)).return=e,t;mr(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case Xe:return n.key===o?n.type===tt?c(e,t,n.props.children,r,o):l(e,t,n,r):null;case et:return n.key===o?s(e,t,n,r):null}if(pr(n)||lt(n))return null!==o?null:c(e,t,n,r,null);mr(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case Xe:return e=e.get(null===r.key?n:r.key)||null,r.type===tt?c(t,e,r.props.children,o,r.key):l(t,e,r,o);case et:return s(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(pr(r)||lt(r))return c(t,e=e.get(n)||null,r,o,null);mr(t,r)}return null}function m(o,a,u,l){for(var s=null,c=null,d=a,m=a=0,g=null;null!==d&&m<u.length;m++){d.index>m?(g=d,d=null):g=d.sibling;var y=p(o,d,u[m],l);if(null===y){null===d&&(d=g);break}e&&d&&null===y.alternate&&t(o,d),a=i(y,a,m),null===c?s=y:c.sibling=y,c=y,d=g}if(m===u.length)return n(o,d),s;if(null===d){for(;m<u.length;m++)(d=f(o,u[m],l))&&(a=i(d,a,m),null===c?s=d:c.sibling=d,c=d);return s}for(d=r(o,d);m<u.length;m++)(g=h(d,o,m,u[m],l))&&(e&&null!==g.alternate&&d.delete(null===g.key?m:g.key),a=i(g,a,m),null===c?s=g:c.sibling=g,c=g);return e&&d.forEach(function(e){return t(o,e)}),s}function g(o,a,u,l){var s=lt(u);"function"!=typeof s&&d("150"),null==(u=s.call(u))&&d("151");for(var c=s=null,m=a,g=a=0,y=null,v=u.next();null!==m&&!v.done;g++,v=u.next()){m.index>g?(y=m,m=null):y=m.sibling;var b=p(o,m,v.value,l);if(null===b){m||(m=y);break}e&&m&&null===b.alternate&&t(o,m),a=i(b,a,g),null===c?s=b:c.sibling=b,c=b,m=y}if(v.done)return n(o,m),s;if(null===m){for(;!v.done;g++,v=u.next())null!==(v=f(o,v.value,l))&&(a=i(v,a,g),null===c?s=v:c.sibling=v,c=v);return s}for(m=r(o,m);!v.done;g++,v=u.next())null!==(v=h(m,o,g,v.value,l))&&(e&&null!==v.alternate&&m.delete(null===v.key?g:v.key),a=i(v,a,g),null===c?s=v:c.sibling=v,c=v);return e&&m.forEach(function(e){return t(o,e)}),s}return function(e,r,i,u){"object"==typeof i&&null!==i&&i.type===tt&&null===i.key&&(i=i.props.children);var l="object"==typeof i&&null!==i;if(l)switch(i.$$typeof){case Xe:e:{var s=i.key;for(l=r;null!==l;){if(l.key===s){if(10===l.tag?i.type===tt:l.type===i.type){n(e,l.sibling),(r=o(l,i.type===tt?i.props.children:i.props,u)).ref=hr(e,l,i),r.return=e,e=r;break e}n(e,l);break}t(e,l),l=l.sibling}i.type===tt?((r=Qn(i.props.children,e.mode,u,i.key)).return=e,e=r):((u=Gn(i,e.mode,u)).ref=hr(e,r,i),u.return=e,e=u)}return a(e);case et:e:{for(l=i.key;null!==r;){if(r.key===l){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=o(r,i.children||[],u)).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Jn(i,e.mode,u)).return=e,e=r}return a(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,i,u)).return=e,e=r):(n(e,r),(r=Xn(i,e.mode,u)).return=e,e=r),a(e);if(pr(i))return m(e,r,i,u);if(lt(i))return g(e,r,i,u);if(l&&mr(e,i),void 0===i)switch(e.tag){case 2:case 1:d("152",(u=e.type).displayName||u.name||"Component")}return n(e,r)}}var yr=gr(!0),vr=gr(!1);function br(e,t,n,r,o,i,u){function l(e,t,n){c(e,t,n,t.expirationTime)}function c(e,t,n,r){t.child=null===e?vr(t,null,n,r):yr(t,e.child,n,r)}function p(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function h(e,t,n,r,o,i){if(p(e,t),!n&&!o)return r&&T(t,!1),y(e,t);n=t.stateNode,Ge.current=t;var a=o?null:n.render();return t.effectTag|=1,o&&(c(e,t,null,i),t.child=null),c(e,t,a,i),t.memoizedState=n.state,t.memoizedProps=n.props,r&&T(t,!0),t.child}function m(e){var t=e.stateNode;t.pendingContext?R(e,t.pendingContext,t.pendingContext!==t.context):t.context&&R(e,t.context,!1),C(e,t.containerInfo)}function g(e,t,n,r){var o=e.child;for(null!==o&&(o.return=e);null!==o;){switch(o.tag){case 12:var i=0|o.stateNode;if(o.type===t&&0!=(i&n)){for(i=o;null!==i;){var a=i.alternate;if(0===i.expirationTime||i.expirationTime>r)i.expirationTime=r,null!==a&&(0===a.expirationTime||a.expirationTime>r)&&(a.expirationTime=r);else{if(null===a||!(0===a.expirationTime||a.expirationTime>r))break;a.expirationTime=r}i=i.return}i=null}else i=o.child;break;case 13:i=o.type===e.type?null:o.child;break;default:i=o.child}if(null!==i)i.return=o;else for(i=o;null!==i;){if(i===e){i=null;break}if(null!==(o=i.sibling)){i=o;break}i=i.return}o=i}}function y(e,t){if(null!==e&&t.child!==e.child&&d("153"),null!==t.child){var n=$n(e=t.child,e.pendingProps,e.expirationTime);for(t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=$n(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}var v=e.shouldSetTextContent,b=e.shouldDeprioritizeSubtree,E=t.pushHostContext,C=t.pushHostContainer,S=r.pushProvider,w=n.getMaskedContext,_=n.getUnmaskedContext,x=n.hasContextChanged,O=n.pushContextProvider,R=n.pushTopLevelContextObject,T=n.invalidateContextProvider,k=o.enterHydrationState,N=o.resetHydrationState,P=o.tryToClaimNextHydratableInstance,U=(e=function(e,t,n,r,o){function i(e,t,n,r,o,i){if(null===t||null!==e.updateQueue&&e.updateQueue.hasForceUpdate)return!0;var a=e.stateNode;return e=e.type,"function"==typeof a.shouldComponentUpdate?a.shouldComponentUpdate(n,o,i):!(e.prototype&&e.prototype.isPureReactComponent&&s(t,n)&&s(r,o))}function u(e,t){t.updater=y,e.stateNode=t,t._reactInternalFiber=e}function l(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&y.enqueueReplaceState(t,t.state,null)}function c(e,t,n,r){if("function"==typeof(e=e.type).getDerivedStateFromProps)return e.getDerivedStateFromProps.call(null,n,r)}var d=e.cacheContext,p=e.getMaskedContext,h=e.getUnmaskedContext,m=e.isContextConsumer,g=e.hasContextChanged,y={isMounted:Gt,enqueueSetState:function(e,r,o){e=e._reactInternalFiber,o=void 0===o?null:o;var i=n(e);sr(e,{expirationTime:i,partialState:r,callback:o,isReplace:!1,isForced:!1,capturedValue:null,next:null}),t(e,i)},enqueueReplaceState:function(e,r,o){e=e._reactInternalFiber,o=void 0===o?null:o;var i=n(e);sr(e,{expirationTime:i,partialState:r,callback:o,isReplace:!0,isForced:!1,capturedValue:null,next:null}),t(e,i)},enqueueForceUpdate:function(e,r){e=e._reactInternalFiber,r=void 0===r?null:r;var o=n(e);sr(e,{expirationTime:o,partialState:null,callback:r,isReplace:!1,isForced:!0,capturedValue:null,next:null}),t(e,o)}};return{adoptClassInstance:u,callGetDerivedStateFromProps:c,constructClassInstance:function(e,t){var n=e.type,r=h(e),o=m(e),i=o?p(e,r):f,l=null!==(n=new n(t,i)).state&&void 0!==n.state?n.state:null;return u(e,n),e.memoizedState=l,null!==(t=c(e,0,t,l))&&void 0!==t&&(e.memoizedState=a({},e.memoizedState,t)),o&&d(e,r,i),n},mountClassInstance:function(e,t){var n=e.type,r=e.alternate,o=e.stateNode,i=e.pendingProps,a=h(e);o.props=i,o.state=e.memoizedState,o.refs=f,o.context=p(e,a),"function"==typeof n.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(n=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),n!==o.state&&y.enqueueReplaceState(o,o.state,null),null!==(n=e.updateQueue)&&(o.state=fr(r,e,n,o,i,t))),"function"==typeof o.componentDidMount&&(e.effectTag|=4)},resumeMountClassInstance:function(e,t){var n=e.type,u=e.stateNode;u.props=e.memoizedProps,u.state=e.memoizedState;var s=e.memoizedProps,f=e.pendingProps,d=u.context,m=h(e);m=p(e,m),(n="function"==typeof n.getDerivedStateFromProps||"function"==typeof u.getSnapshotBeforeUpdate)||"function"!=typeof u.UNSAFE_componentWillReceiveProps&&"function"!=typeof u.componentWillReceiveProps||(s!==f||d!==m)&&l(e,u,f,m),d=e.memoizedState,t=null!==e.updateQueue?fr(null,e,e.updateQueue,u,f,t):d;var y=void 0;if(s!==f&&(y=c(e,0,f,t)),null!==y&&void 0!==y){t=null===t||void 0===t?y:a({},t,y);var v=e.updateQueue;null!==v&&(v.baseState=a({},v.baseState,y))}return s!==f||d!==t||g()||null!==e.updateQueue&&e.updateQueue.hasForceUpdate?((s=i(e,s,f,d,t,m))?(n||"function"!=typeof u.UNSAFE_componentWillMount&&"function"!=typeof u.componentWillMount||("function"==typeof u.componentWillMount&&u.componentWillMount(),"function"==typeof u.UNSAFE_componentWillMount&&u.UNSAFE_componentWillMount()),"function"==typeof u.componentDidMount&&(e.effectTag|=4)):("function"==typeof u.componentDidMount&&(e.effectTag|=4),r(e,f),o(e,t)),u.props=f,u.state=t,u.context=m,s):("function"==typeof u.componentDidMount&&(e.effectTag|=4),!1)},updateClassInstance:function(e,t,n){var u=t.type,s=t.stateNode;s.props=t.memoizedProps,s.state=t.memoizedState;var f=t.memoizedProps,d=t.pendingProps,m=s.context,y=h(t);y=p(t,y),(u="function"==typeof u.getDerivedStateFromProps||"function"==typeof s.getSnapshotBeforeUpdate)||"function"!=typeof s.UNSAFE_componentWillReceiveProps&&"function"!=typeof s.componentWillReceiveProps||(f!==d||m!==y)&&l(t,s,d,y),m=t.memoizedState,n=null!==t.updateQueue?fr(e,t,t.updateQueue,s,d,n):m;var v=void 0;if(f!==d&&(v=c(t,0,d,n)),null!==v&&void 0!==v){n=null===n||void 0===n?v:a({},n,v);var b=t.updateQueue;null!==b&&(b.baseState=a({},b.baseState,v))}return f!==d||m!==n||g()||null!==t.updateQueue&&t.updateQueue.hasForceUpdate?((v=i(t,f,d,m,n,y))?(u||"function"!=typeof s.UNSAFE_componentWillUpdate&&"function"!=typeof s.componentWillUpdate||("function"==typeof s.componentWillUpdate&&s.componentWillUpdate(d,n,y),"function"==typeof s.UNSAFE_componentWillUpdate&&s.UNSAFE_componentWillUpdate(d,n,y)),"function"==typeof s.componentDidUpdate&&(t.effectTag|=4),"function"==typeof s.getSnapshotBeforeUpdate&&(t.effectTag|=2048)):("function"!=typeof s.componentDidUpdate||f===e.memoizedProps&&m===e.memoizedState||(t.effectTag|=4),"function"!=typeof s.getSnapshotBeforeUpdate||f===e.memoizedProps&&m===e.memoizedState||(t.effectTag|=2048),r(t,d),o(t,n)),s.props=d,s.state=n,s.context=y,v):("function"!=typeof s.componentDidUpdate||f===e.memoizedProps&&m===e.memoizedState||(t.effectTag|=4),"function"!=typeof s.getSnapshotBeforeUpdate||f===e.memoizedProps&&m===e.memoizedState||(t.effectTag|=2048),!1)}}}(n,i,u,function(e,t){e.memoizedProps=t},function(e,t){e.memoizedState=t})).adoptClassInstance,D=e.callGetDerivedStateFromProps,A=e.constructClassInstance,I=e.mountClassInstance,M=e.resumeMountClassInstance,j=e.updateClassInstance;return{beginWork:function(e,t,n){if(0===t.expirationTime||t.expirationTime>n){switch(t.tag){case 3:m(t);break;case 2:O(t);break;case 4:C(t,t.stateNode.containerInfo);break;case 13:S(t)}return null}switch(t.tag){case 0:null!==e&&d("155");var r=t.type,o=t.pendingProps,i=_(t);return r=r(o,i=w(t,i)),t.effectTag|=1,"object"==typeof r&&null!==r&&"function"==typeof r.render&&void 0===r.$$typeof?(i=t.type,t.tag=2,t.memoizedState=null!==r.state&&void 0!==r.state?r.state:null,"function"==typeof i.getDerivedStateFromProps&&(null!==(o=D(t,r,o,t.memoizedState))&&void 0!==o&&(t.memoizedState=a({},t.memoizedState,o))),o=O(t),U(t,r),I(t,n),e=h(e,t,!0,o,!1,n)):(t.tag=1,l(e,t,r),t.memoizedProps=o,e=t.child),e;case 1:return o=t.type,n=t.pendingProps,x()||t.memoizedProps!==n?(r=_(t),o=o(n,r=w(t,r)),t.effectTag|=1,l(e,t,o),t.memoizedProps=n,e=t.child):e=y(e,t),e;case 2:o=O(t),null===e?null===t.stateNode?(A(t,t.pendingProps),I(t,n),r=!0):r=M(t,n):r=j(e,t,n),i=!1;var u=t.updateQueue;return null!==u&&null!==u.capturedValues&&(i=r=!0),h(e,t,r,o,i,n);case 3:e:if(m(t),r=t.updateQueue,null!==r){if(i=t.memoizedState,o=fr(e,t,r,null,null,n),t.memoizedState=o,null!==(r=t.updateQueue)&&null!==r.capturedValues)r=null;else{if(i===o){N(),e=y(e,t);break e}r=o.element}i=t.stateNode,(null===e||null===e.child)&&i.hydrate&&k(t)?(t.effectTag|=2,t.child=vr(t,null,r,n)):(N(),l(e,t,r)),t.memoizedState=o,e=t.child}else N(),e=y(e,t);return e;case 5:return E(t),null===e&&P(t),o=t.type,u=t.memoizedProps,r=t.pendingProps,i=null!==e?e.memoizedProps:null,x()||u!==r||((u=1&t.mode&&b(o,r))&&(t.expirationTime=1073741823),u&&1073741823===n)?(u=r.children,v(o,r)?u=null:i&&v(o,i)&&(t.effectTag|=16),p(e,t),1073741823!==n&&1&t.mode&&b(o,r)?(t.expirationTime=1073741823,t.memoizedProps=r,e=null):(l(e,t,u),t.memoizedProps=r,e=t.child)):e=y(e,t),e;case 6:return null===e&&P(t),t.memoizedProps=t.pendingProps,null;case 8:t.tag=7;case 7:return o=t.pendingProps,x()||t.memoizedProps!==o||(o=t.memoizedProps),r=o.children,t.stateNode=null===e?vr(t,t.stateNode,r,n):yr(t,e.stateNode,r,n),t.memoizedProps=o,t.stateNode;case 9:return null;case 4:return C(t,t.stateNode.containerInfo),o=t.pendingProps,x()||t.memoizedProps!==o?(null===e?t.child=yr(t,null,o,n):l(e,t,o),t.memoizedProps=o,e=t.child):e=y(e,t),e;case 14:return l(e,t,n=(n=t.type.render)(t.pendingProps,t.ref)),t.memoizedProps=n,t.child;case 10:return n=t.pendingProps,x()||t.memoizedProps!==n?(l(e,t,n),t.memoizedProps=n,e=t.child):e=y(e,t),e;case 11:return n=t.pendingProps.children,x()||null!==n&&t.memoizedProps!==n?(l(e,t,n),t.memoizedProps=n,e=t.child):e=y(e,t),e;case 13:return function(e,t,n){var r=t.type._context,o=t.pendingProps,i=t.memoizedProps;if(!x()&&i===o)return t.stateNode=0,S(t),y(e,t);var a=o.value;if(t.memoizedProps=o,null===i)a=1073741823;else if(i.value===o.value){if(i.children===o.children)return t.stateNode=0,S(t),y(e,t);a=0}else{var u=i.value;if(u===a&&(0!==u||1/u==1/a)||u!=u&&a!=a){if(i.children===o.children)return t.stateNode=0,S(t),y(e,t);a=0}else if(a="function"==typeof r._calculateChangedBits?r._calculateChangedBits(u,a):1073741823,0==(a|=0)){if(i.children===o.children)return t.stateNode=0,S(t),y(e,t)}else g(t,r,a,n)}return t.stateNode=a,S(t),l(e,t,o.children),t.child}(e,t,n);case 12:e:{r=t.type,i=t.pendingProps,u=t.memoizedProps,o=r._currentValue;var s=r._changedBits;if(x()||0!==s||u!==i){t.memoizedProps=i;var c=i.unstable_observedBits;if(void 0!==c&&null!==c||(c=1073741823),t.stateNode=c,0!=(s&c))g(t,r,s,n);else if(u===i){e=y(e,t);break e}l(e,t,n=(n=i.children)(o)),e=t.child}else e=y(e,t)}return e;default:d("156")}}}}function Er(e,t){var n=t.source;null===t.stack&&ct(n),null!==n&&st(n),t=t.value,null!==e&&2===e.tag&&st(e);try{t&&t.suppressReactErrorLogging||console.error(t)}catch(e){e&&e.suppressReactErrorLogging||console.error(e)}}var Cr={};function Sr(e){function t(){if(null!==ee)for(var e=ee.return;null!==e;)A(e),e=e.return;te=null,ne=0,ee=null,ie=!1}function n(e){return null!==ae&&ae.has(e)}function r(e){for(;;){var t=e.alternate,n=e.return,r=e.sibling;if(0==(512&e.effectTag)){t=P(t,e,ne);var o=e;if(1073741823===ne||1073741823!==o.expirationTime){e:switch(o.tag){case 3:case 2:var i=o.updateQueue;i=null===i?0:i.expirationTime;break e;default:i=0}for(var a=o.child;null!==a;)0!==a.expirationTime&&(0===i||i>a.expirationTime)&&(i=a.expirationTime),a=a.sibling;o.expirationTime=i}if(null!==t)return t;if(null!==n&&0==(512&n.effectTag)&&(null===n.firstEffect&&(n.firstEffect=e.firstEffect),null!==e.lastEffect&&(null!==n.lastEffect&&(n.lastEffect.nextEffect=e.firstEffect),n.lastEffect=e.lastEffect),1<e.effectTag&&(null!==n.lastEffect?n.lastEffect.nextEffect=e:n.firstEffect=e,n.lastEffect=e)),null!==r)return r;if(null===n){ie=!0;break}e=n}else{if(null!==(e=D(e)))return e.effectTag&=2559,e;if(null!==n&&(n.firstEffect=n.lastEffect=null,n.effectTag|=512),null!==r)return r;if(null===n)break;e=n}}return null}function o(e){var t=N(e.alternate,e,ne);return null===t&&(t=r(e)),Ge.current=null,t}function i(e,n,i){Z&&d("243"),Z=!0,n===ne&&e===te&&null!==ee||(t(),ne=n,ee=$n((te=e).current,null,ne),e.pendingCommitExpirationTime=0);for(var a=!1;;){try{if(i)for(;null!==ee&&!_();)ee=o(ee);else for(;null!==ee;)ee=o(ee)}catch(e){if(null===ee){a=!0,x(e);break}var u=(i=ee).return;if(null===u){a=!0,x(e);break}U(u,i,e),ee=r(i)}break}return Z=!1,a||null!==ee?null:ie?(e.pendingCommitExpirationTime=n,e.current.alternate):void d("262")}function u(e,t,n,r){sr(t,{expirationTime:r,partialState:null,callback:null,isReplace:!1,isForced:!1,capturedValue:e={value:n,source:e,stack:ct(e)},next:null}),c(t,r)}function l(e,t){e:{Z&&!oe&&d("263");for(var r=e.return;null!==r;){switch(r.tag){case 2:var o=r.stateNode;if("function"==typeof r.type.getDerivedStateFromCatch||"function"==typeof o.componentDidCatch&&!n(o)){u(e,r,t,1),e=void 0;break e}break;case 3:u(e,r,t,1),e=void 0;break e}r=r.return}3===e.tag&&u(e,e,t,1),e=void 0}return e}function s(e){return e=0!==J?J:Z?oe?1:ne:1&e.mode?Ce?10*(1+((p()+15)/10|0)):25*(1+((p()+500)/25|0)):1,Ce&&(0===he||e>he)&&(he=e),e}function c(e,n){e:{for(;null!==e;){if((0===e.expirationTime||e.expirationTime>n)&&(e.expirationTime=n),null!==e.alternate&&(0===e.alternate.expirationTime||e.alternate.expirationTime>n)&&(e.alternate.expirationTime=n),null===e.return){if(3!==e.tag){n=void 0;break e}var r=e.stateNode;!Z&&0!==ne&&n<ne&&t(),Z&&!oe&&te===r||g(r,n),_e>we&&d("185")}e=e.return}n=void 0}return n}function p(){return Q=Y()-G,2+(Q/10|0)}function h(e,t,n,r,o){var i=J;J=1;try{return e(t,n,r,o)}finally{J=i}}function m(e){if(0!==se){if(e>se)return;z(ce)}var t=Y()-G;se=e,ce=W(v,{timeout:10*(e-2)-t})}function g(e,t){if(null===e.nextScheduledRoot)e.remainingExpirationTime=t,null===le?(ue=le=e,e.nextScheduledRoot=e):(le=le.nextScheduledRoot=e).nextScheduledRoot=ue;else{var n=e.remainingExpirationTime;(0===n||t<n)&&(e.remainingExpirationTime=t)}fe||(be?Ee&&(de=e,pe=1,S(e,1,!1)):1===t?b():m(t))}function y(){var e=0,t=null;if(null!==le)for(var n=le,r=ue;null!==r;){var o=r.remainingExpirationTime;if(0===o){if((null===n||null===le)&&d("244"),r===r.nextScheduledRoot){ue=le=r.nextScheduledRoot=null;break}if(r===ue)ue=o=r.nextScheduledRoot,le.nextScheduledRoot=o,r.nextScheduledRoot=null;else{if(r===le){(le=n).nextScheduledRoot=ue,r.nextScheduledRoot=null;break}n.nextScheduledRoot=r.nextScheduledRoot,r.nextScheduledRoot=null}r=n.nextScheduledRoot}else{if((0===e||o<e)&&(e=o,t=r),r===le)break;n=r,r=r.nextScheduledRoot}}null!==(n=de)&&n===t&&1===e?_e++:_e=0,de=t,pe=e}function v(e){E(0,!0,e)}function b(){E(1,!1,null)}function E(e,t,n){if(ve=n,y(),t)for(;null!==de&&0!==pe&&(0===e||e>=pe)&&(!me||p()>=pe);)S(de,pe,!me),y();else for(;null!==de&&0!==pe&&(0===e||e>=pe);)S(de,pe,!1),y();null!==ve&&(se=0,ce=-1),0!==pe&&m(pe),ve=null,me=!1,C()}function C(){if(_e=0,null!==Se){var e=Se;Se=null;for(var t=0;t<e.length;t++){var n=e[t];try{n._onComplete()}catch(e){ge||(ge=!0,ye=e)}}}if(ge)throw e=ye,ye=null,ge=!1,e}function S(e,t,n){fe&&d("245"),fe=!0,n?null!==(n=e.finishedWork)?w(e,n,t):(e.finishedWork=null,null!==(n=i(e,t,!0))&&(_()?e.finishedWork=n:w(e,n,t))):null!==(n=e.finishedWork)?w(e,n,t):(e.finishedWork=null,null!==(n=i(e,t,!1))&&w(e,n,t)),fe=!1}function w(e,t,n){var r=e.firstBatch;if(null!==r&&r._expirationTime<=n&&(null===Se?Se=[r]:Se.push(r),r._defer))return e.finishedWork=t,void(e.remainingExpirationTime=0);e.finishedWork=null,oe=Z=!0,(n=t.stateNode).current===t&&d("177"),0===(r=n.pendingCommitExpirationTime)&&d("261"),n.pendingCommitExpirationTime=0;var o=p();if(Ge.current=null,1<t.effectTag)if(null!==t.lastEffect){t.lastEffect.nextEffect=t;var i=t.firstEffect}else i=t;else i=t.firstEffect;for(V(n.containerInfo),re=i;null!==re;){var a=!1,u=void 0;try{for(;null!==re;)2048&re.effectTag&&I(re.alternate,re),re=re.nextEffect}catch(e){a=!0,u=e}a&&(null===re&&d("178"),l(re,u),null!==re&&(re=re.nextEffect))}for(re=i;null!==re;){a=!1,u=void 0;try{for(;null!==re;){var s=re.effectTag;if(16&s&&M(re),128&s){var c=re.alternate;null!==c&&q(c)}switch(14&s){case 2:j(re),re.effectTag&=-3;break;case 6:j(re),re.effectTag&=-3,F(re.alternate,re);break;case 4:F(re.alternate,re);break;case 8:L(re)}re=re.nextEffect}}catch(e){a=!0,u=e}a&&(null===re&&d("178"),l(re,u),null!==re&&(re=re.nextEffect))}for($(n.containerInfo),n.current=t,re=i;null!==re;){s=!1,c=void 0;try{for(i=n,a=o,u=r;null!==re;){var f=re.effectTag;36&f&&H(i,re.alternate,re,a,u),256&f&&K(re,x),128&f&&B(re);var h=re.nextEffect;re.nextEffect=null,re=h}}catch(e){s=!0,c=e}s&&(null===re&&d("178"),l(re,c),null!==re&&(re=re.nextEffect))}Z=oe=!1,nr(t.stateNode),0===(t=n.current.expirationTime)&&(ae=null),e.remainingExpirationTime=t}function _(){return!(null===ve||ve.timeRemaining()>xe)&&(me=!0)}function x(e){null===de&&d("246"),de.remainingExpirationTime=0,ge||(ge=!0,ye=e)}var O=function(){var e=[],t=-1;return{createCursor:function(e){return{current:e}},isEmpty:function(){return-1===t},pop:function(n){0>t||(n.current=e[t],e[t]=null,t--)},push:function(n,r){e[++t]=n.current,n.current=r},checkThatStackIsEmpty:function(){},resetStackAfterFatalErrorInDev:function(){}}}(),R=function(e,t){function n(e){return e===Cr&&d("174"),e}var r=e.getChildHostContext,o=e.getRootHostContext;e=t.createCursor;var i=t.push,a=t.pop,u=e(Cr),l=e(Cr),s=e(Cr);return{getHostContext:function(){return n(u.current)},getRootHostContainer:function(){return n(s.current)},popHostContainer:function(e){a(u,e),a(l,e),a(s,e)},popHostContext:function(e){l.current===e&&(a(u,e),a(l,e))},pushHostContainer:function(e,t){i(s,t,e),i(l,e,e),i(u,Cr,e),t=o(t),a(u,e),i(u,t,e)},pushHostContext:function(e){var t=n(s.current),o=n(u.current);o!==(t=r(o,e.type,t))&&(i(l,e,e),i(u,t,e))}}}(e,O),T=function(e){function t(e,t,n){(e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=n}function n(e){return 2===e.tag&&null!=e.type.childContextTypes}function r(e,t){var n=e.stateNode,r=e.type.childContextTypes;if("function"!=typeof n.getChildContext)return t;for(var o in n=n.getChildContext())o in r||d("108",st(e)||"Unknown",o);return a({},t,n)}var o=e.createCursor,i=e.push,u=e.pop,l=o(f),s=o(!1),c=f;return{getUnmaskedContext:function(e){return n(e)?c:l.current},cacheContext:t,getMaskedContext:function(e,n){var r=e.type.contextTypes;if(!r)return f;var o=e.stateNode;if(o&&o.__reactInternalMemoizedUnmaskedChildContext===n)return o.__reactInternalMemoizedMaskedChildContext;var i,a={};for(i in r)a[i]=n[i];return o&&t(e,n,a),a},hasContextChanged:function(){return s.current},isContextConsumer:function(e){return 2===e.tag&&null!=e.type.contextTypes},isContextProvider:n,popContextProvider:function(e){n(e)&&(u(s,e),u(l,e))},popTopLevelContextObject:function(e){u(s,e),u(l,e)},pushTopLevelContextObject:function(e,t,n){null!=l.cursor&&d("168"),i(l,t,e),i(s,n,e)},processChildContext:r,pushContextProvider:function(e){if(!n(e))return!1;var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||f,c=l.current,i(l,t,e),i(s,s.current,e),!0},invalidateContextProvider:function(e,t){var n=e.stateNode;if(n||d("169"),t){var o=r(e,c);n.__reactInternalMemoizedMergedChildContext=o,u(s,e),u(l,e),i(l,o,e)}else u(s,e);i(s,t,e)},findCurrentUnmaskedContext:function(e){for((2!==$t(e)||2!==e.tag)&&d("170");3!==e.tag;){if(n(e))return e.stateNode.__reactInternalMemoizedMergedChildContext;(e=e.return)||d("171")}return e.stateNode.context}}}(O);O=function(e){var t=e.createCursor,n=e.push,r=e.pop,o=t(null),i=t(null),a=t(0);return{pushProvider:function(e){var t=e.type._context;n(a,t._changedBits,e),n(i,t._currentValue,e),n(o,e,e),t._currentValue=e.pendingProps.value,t._changedBits=e.stateNode},popProvider:function(e){var t=a.current,n=i.current;r(o,e),r(i,e),r(a,e),(e=e.type._context)._currentValue=n,e._changedBits=t}}}(O);var k=function(e){function t(e,t){var n=new Vn(5,null,null,0);n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function n(e,t){switch(e.tag){case 5:return null!==(t=i(t,e.type,e.pendingProps))&&(e.stateNode=t,!0);case 6:return null!==(t=a(t,e.pendingProps))&&(e.stateNode=t,!0);default:return!1}}function r(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag;)e=e.return;f=e}var o=e.shouldSetTextContent;if(!(e=e.hydration))return{enterHydrationState:function(){return!1},resetHydrationState:function(){},tryToClaimNextHydratableInstance:function(){},prepareToHydrateHostInstance:function(){d("175")},prepareToHydrateHostTextInstance:function(){d("176")},popHydrationState:function(){return!1}};var i=e.canHydrateInstance,a=e.canHydrateTextInstance,u=e.getNextHydratableSibling,l=e.getFirstHydratableChild,s=e.hydrateInstance,c=e.hydrateTextInstance,f=null,p=null,h=!1;return{enterHydrationState:function(e){return p=l(e.stateNode.containerInfo),f=e,h=!0},resetHydrationState:function(){p=f=null,h=!1},tryToClaimNextHydratableInstance:function(e){if(h){var r=p;if(r){if(!n(e,r)){if(!(r=u(r))||!n(e,r))return e.effectTag|=2,h=!1,void(f=e);t(f,p)}f=e,p=l(r)}else e.effectTag|=2,h=!1,f=e}},prepareToHydrateHostInstance:function(e,t,n){return t=s(e.stateNode,e.type,e.memoizedProps,t,n,e),e.updateQueue=t,null!==t},prepareToHydrateHostTextInstance:function(e){return c(e.stateNode,e.memoizedProps,e)},popHydrationState:function(e){if(e!==f)return!1;if(!h)return r(e),h=!0,!1;var n=e.type;if(5!==e.tag||"head"!==n&&"body"!==n&&!o(n,e.memoizedProps))for(n=p;n;)t(e,n),n=u(n);return r(e),p=f?u(e.stateNode):null,!0}}}(e),N=br(e,R,T,O,k,c,s).beginWork,P=function(e,t,n,r,o){function i(e){e.effectTag|=4}var a=e.createInstance,u=e.createTextInstance,l=e.appendInitialChild,s=e.finalizeInitialChildren,c=e.prepareUpdate,f=e.persistence,p=t.getRootHostContainer,h=t.popHostContext,m=t.getHostContext,g=t.popHostContainer,y=n.popContextProvider,v=n.popTopLevelContextObject,b=r.popProvider,E=o.prepareToHydrateHostInstance,C=o.prepareToHydrateHostTextInstance,S=o.popHydrationState,w=void 0,_=void 0,x=void 0;return e.mutation?(w=function(){},_=function(e,t,n){(t.updateQueue=n)&&i(t)},x=function(e,t,n,r){n!==r&&i(t)}):d(f?"235":"236"),{completeWork:function(e,t,n){var r=t.pendingProps;switch(t.tag){case 1:return null;case 2:return y(t),e=t.stateNode,null!==(r=t.updateQueue)&&null!==r.capturedValues&&(t.effectTag&=-65,"function"==typeof e.componentDidCatch?t.effectTag|=256:r.capturedValues=null),null;case 3:return g(t),v(t),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(S(t),t.effectTag&=-3),w(t),null!==(e=t.updateQueue)&&null!==e.capturedValues&&(t.effectTag|=256),null;case 5:h(t),n=p();var o=t.type;if(null!==e&&null!=t.stateNode){var f=e.memoizedProps,O=t.stateNode,R=m();O=c(O,o,f,r,n,R),_(e,t,O,o,f,r,n,R),e.ref!==t.ref&&(t.effectTag|=128)}else{if(!r)return null===t.stateNode&&d("166"),null;if(e=m(),S(t))E(t,n,e)&&i(t);else{f=a(o,r,n,e,t);e:for(R=t.child;null!==R;){if(5===R.tag||6===R.tag)l(f,R.stateNode);else if(4!==R.tag&&null!==R.child){R.child.return=R,R=R.child;continue}if(R===t)break;for(;null===R.sibling;){if(null===R.return||R.return===t)break e;R=R.return}R.sibling.return=R.return,R=R.sibling}s(f,o,r,n,e)&&i(t),t.stateNode=f}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)x(e,t,e.memoizedProps,r);else{if("string"!=typeof r)return null===t.stateNode&&d("166"),null;e=p(),n=m(),S(t)?C(t)&&i(t):t.stateNode=u(r,e,n,t)}return null;case 7:(r=t.memoizedProps)||d("165"),t.tag=8,o=[];e:for((f=t.stateNode)&&(f.return=t);null!==f;){if(5===f.tag||6===f.tag||4===f.tag)d("247");else if(9===f.tag)o.push(f.pendingProps.value);else if(null!==f.child){f.child.return=f,f=f.child;continue}for(;null===f.sibling;){if(null===f.return||f.return===t)break e;f=f.return}f.sibling.return=f.return,f=f.sibling}return r=(f=r.handler)(r.props,o),t.child=yr(t,null!==e?e.child:null,r,n),t.child;case 8:return t.tag=7,null;case 9:case 14:case 10:case 11:return null;case 4:return g(t),w(t),null;case 13:return b(t),null;case 12:return null;case 0:d("167");default:d("156")}}}}(e,R,T,O,k).completeWork,U=(R=function(e,t,n,r,o){var i=e.popHostContainer,a=e.popHostContext,u=t.popContextProvider,l=t.popTopLevelContextObject,s=n.popProvider;return{throwException:function(e,t,n){t.effectTag|=512,t.firstEffect=t.lastEffect=null,t={value:n,source:t,stack:ct(t)};do{switch(e.tag){case 3:return lr(e),e.updateQueue.capturedValues=[t],void(e.effectTag|=1024);case 2:if(n=e.stateNode,0==(64&e.effectTag)&&null!==n&&"function"==typeof n.componentDidCatch&&!o(n)){lr(e);var r=(n=e.updateQueue).capturedValues;return null===r?n.capturedValues=[t]:r.push(t),void(e.effectTag|=1024)}}e=e.return}while(null!==e)},unwindWork:function(e){switch(e.tag){case 2:u(e);var t=e.effectTag;return 1024&t?(e.effectTag=-1025&t|64,e):null;case 3:return i(e),l(e),1024&(t=e.effectTag)?(e.effectTag=-1025&t|64,e):null;case 5:return a(e),null;case 4:return i(e),null;case 13:return s(e),null;default:return null}},unwindInterruptedWork:function(e){switch(e.tag){case 2:u(e);break;case 3:i(e),l(e);break;case 5:a(e);break;case 4:i(e);break;case 13:s(e)}}}}(R,T,O,0,n)).throwException,D=R.unwindWork,A=R.unwindInterruptedWork,I=(R=function(e,t,n,r,o){function i(e){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){t(e,n)}else n.current=null}function a(e){switch(rr(e),e.tag){case 2:i(e);var n=e.stateNode;if("function"==typeof n.componentWillUnmount)try{n.props=e.memoizedProps,n.state=e.memoizedState,n.componentWillUnmount()}catch(n){t(e,n)}break;case 5:i(e);break;case 7:u(e.stateNode);break;case 4:f&&s(e)}}function u(e){for(var t=e;;)if(a(t),null===t.child||f&&4===t.tag){if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;t=t.return}t.sibling.return=t.return,t=t.sibling}else t.child.return=t,t=t.child}function l(e){return 5===e.tag||3===e.tag||4===e.tag}function s(e){for(var t=e,n=!1,r=void 0,o=void 0;;){if(!n){n=t.return;e:for(;;){switch(null===n&&d("160"),n.tag){case 5:r=n.stateNode,o=!1;break e;case 3:case 4:r=n.stateNode.containerInfo,o=!0;break e}n=n.return}n=!0}if(5===t.tag||6===t.tag)u(t),o?S(r,t.stateNode):C(r,t.stateNode);else if(4===t.tag?r=t.stateNode.containerInfo:a(t),null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return;4===(t=t.return).tag&&(n=!1)}t.sibling.return=t.return,t=t.sibling}}var c=e.getPublicInstance,f=e.mutation;e=e.persistence,f||d(e?"235":"236");var p=f.commitMount,h=f.commitUpdate,m=f.resetTextContent,g=f.commitTextUpdate,y=f.appendChild,v=f.appendChildToContainer,b=f.insertBefore,E=f.insertInContainerBefore,C=f.removeChild,S=f.removeChildFromContainer;return{commitBeforeMutationLifeCycles:function(e,t){switch(t.tag){case 2:if(2048&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;(e=t.stateNode).props=t.memoizedProps,e.state=t.memoizedState,t=e.getSnapshotBeforeUpdate(n,r),e.__reactInternalSnapshotBeforeUpdate=t}break;case 3:case 5:case 6:case 4:break;default:d("163")}},commitResetTextContent:function(e){m(e.stateNode)},commitPlacement:function(e){e:{for(var t=e.return;null!==t;){if(l(t)){var n=t;break e}t=t.return}d("160"),n=void 0}var r=t=void 0;switch(n.tag){case 5:t=n.stateNode,r=!1;break;case 3:case 4:t=n.stateNode.containerInfo,r=!0;break;default:d("161")}16&n.effectTag&&(m(t),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||l(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var o=e;;){if(5===o.tag||6===o.tag)n?r?E(t,o.stateNode,n):b(t,o.stateNode,n):r?v(t,o.stateNode):y(t,o.stateNode);else if(4!==o.tag&&null!==o.child){o.child.return=o,o=o.child;continue}if(o===e)break;for(;null===o.sibling;){if(null===o.return||o.return===e)return;o=o.return}o.sibling.return=o.return,o=o.sibling}},commitDeletion:function(e){s(e),e.return=null,e.child=null,e.alternate&&(e.alternate.child=null,e.alternate.return=null)},commitWork:function(e,t){switch(t.tag){case 2:break;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps;e=null!==e?e.memoizedProps:r;var o=t.type,i=t.updateQueue;t.updateQueue=null,null!==i&&h(n,i,o,e,r,t)}break;case 6:null===t.stateNode&&d("162"),n=t.memoizedProps,g(t.stateNode,null!==e?e.memoizedProps:n,n);break;case 3:break;default:d("163")}},commitLifeCycles:function(e,t,n){switch(n.tag){case 2:if(e=n.stateNode,4&n.effectTag)if(null===t)e.props=n.memoizedProps,e.state=n.memoizedState,e.componentDidMount();else{var r=t.memoizedProps;t=t.memoizedState,e.props=n.memoizedProps,e.state=n.memoizedState,e.componentDidUpdate(r,t,e.__reactInternalSnapshotBeforeUpdate)}null!==(n=n.updateQueue)&&dr(n,e);break;case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=c(n.child.stateNode);break;case 2:e=n.child.stateNode}dr(t,e)}break;case 5:e=n.stateNode,null===t&&4&n.effectTag&&p(e,n.type,n.memoizedProps,n);break;case 6:case 4:break;default:d("163")}},commitErrorLogging:function(e,t){switch(e.tag){case 2:var n=e.type;t=e.stateNode;var r=e.updateQueue;(null===r||null===r.capturedValues)&&d("264");var i=r.capturedValues;for(r.capturedValues=null,"function"!=typeof n.getDerivedStateFromCatch&&o(t),t.props=e.memoizedProps,t.state=e.memoizedState,n=0;n<i.length;n++){var a=(r=i[n]).value,u=r.stack;Er(e,r),t.componentDidCatch(a,{componentStack:null!==u?u:""})}break;case 3:for((null===(n=e.updateQueue)||null===n.capturedValues)&&d("264"),i=n.capturedValues,n.capturedValues=null,n=0;n<i.length;n++)Er(e,r=i[n]),t(r.value);break;default:d("265")}},commitAttachRef:function(e){var t=e.ref;if(null!==t){var n=e.stateNode;switch(e.tag){case 5:e=c(n);break;default:e=n}"function"==typeof t?t(e):t.current=e}},commitDetachRef:function(e){null!==(e=e.ref)&&("function"==typeof e?e(null):e.current=null)}}}(e,l,0,0,function(e){null===ae?ae=new Set([e]):ae.add(e)})).commitBeforeMutationLifeCycles,M=R.commitResetTextContent,j=R.commitPlacement,L=R.commitDeletion,F=R.commitWork,H=R.commitLifeCycles,K=R.commitErrorLogging,B=R.commitAttachRef,q=R.commitDetachRef,Y=e.now,W=e.scheduleDeferredCallback,z=e.cancelDeferredCallback,V=e.prepareForCommit,$=e.resetAfterCommit,G=Y(),Q=G,X=0,J=0,Z=!1,ee=null,te=null,ne=0,re=null,oe=!1,ie=!1,ae=null,ue=null,le=null,se=0,ce=-1,fe=!1,de=null,pe=0,he=0,me=!1,ge=!1,ye=null,ve=null,be=!1,Ee=!1,Ce=!1,Se=null,we=1e3,_e=0,xe=1;return{recalculateCurrentTime:p,computeExpirationForFiber:s,scheduleWork:c,requestWork:g,flushRoot:function(e,t){fe&&d("253"),de=e,pe=t,S(e,t,!1),b(),C()},batchedUpdates:function(e,t){var n=be;be=!0;try{return e(t)}finally{(be=n)||fe||b()}},unbatchedUpdates:function(e,t){if(be&&!Ee){Ee=!0;try{return e(t)}finally{Ee=!1}}return e(t)},flushSync:function(e,t){fe&&d("187");var n=be;be=!0;try{return h(e,t)}finally{be=n,b()}},flushControlled:function(e){var t=be;be=!0;try{h(e)}finally{(be=t)||fe||E(1,!1,null)}},deferredUpdates:function(e){var t=J;J=25*(1+((p()+500)/25|0));try{return e()}finally{J=t}},syncUpdates:h,interactiveUpdates:function(e,t,n){if(Ce)return e(t,n);be||fe||0===he||(E(he,!1,null),he=0);var r=Ce,o=be;be=Ce=!0;try{return e(t,n)}finally{Ce=r,(be=o)||fe||b()}},flushInteractiveUpdates:function(){fe||0===he||(E(he,!1,null),he=0)},computeUniqueAsyncExpiration:function(){var e=25*(1+((p()+500)/25|0));return e<=X&&(e=X+1),X=e},legacyContext:T}}function wr(e){function t(e,t,n,r,o,a){if(r=t.current,n){n=n._reactInternalFiber;var u=l(n);n=s(n)?c(n,u):u}else n=f;return null===t.context?t.context=n:t.pendingContext=n,sr(r,{expirationTime:o,partialState:{element:e},callback:void 0===(t=a)?null:t,isReplace:!1,isForced:!1,capturedValue:null,next:null}),i(r,o),o}var n=e.getPublicInstance,r=(e=Sr(e)).recalculateCurrentTime,o=e.computeExpirationForFiber,i=e.scheduleWork,u=e.legacyContext,l=u.findCurrentUnmaskedContext,s=u.isContextProvider,c=u.processChildContext;return{createContainer:function(e,t,n){return e={current:t=new Vn(3,null,null,t?3:0),containerInfo:e,pendingChildren:null,pendingCommitExpirationTime:0,finishedWork:null,context:null,pendingContext:null,hydrate:n,remainingExpirationTime:0,firstBatch:null,nextScheduledRoot:null},t.stateNode=e},updateContainer:function(e,n,i,a){var u=n.current;return t(e,n,i,r(),u=o(u),a)},updateContainerAtExpirationTime:function(e,n,o,i,a){return t(e,n,o,r(),i,a)},flushRoot:e.flushRoot,requestWork:e.requestWork,computeUniqueAsyncExpiration:e.computeUniqueAsyncExpiration,batchedUpdates:e.batchedUpdates,unbatchedUpdates:e.unbatchedUpdates,deferredUpdates:e.deferredUpdates,syncUpdates:e.syncUpdates,interactiveUpdates:e.interactiveUpdates,flushInteractiveUpdates:e.flushInteractiveUpdates,flushControlled:e.flushControlled,flushSync:e.flushSync,getPublicRootInstance:function(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:return n(e.child.stateNode);default:return e.child.stateNode}},findHostInstance:function(e){var t=e._reactInternalFiber;return void 0===t&&("function"==typeof e.render?d("188"):d("268",Object.keys(e))),null===(e=Jt(t))?null:e.stateNode},findHostInstanceWithNoPortals:function(e){return null===(e=function(e){if(!(e=Xt(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child&&4!==t.tag)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}(e))?null:e.stateNode},injectIntoDevTools:function(e){var t=e.findFiberByHostInstance;return function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);Zn=tr(function(e){return t.onCommitFiberRoot(n,e)}),er=tr(function(e){return t.onCommitFiberUnmount(n,e)})}catch(e){}return!0}(a({},e,{findHostInstanceByFiber:function(e){return null===(e=Jt(e))?null:e.stateNode},findFiberByHostInstance:function(e){return t?t(e):null}}))}}}var _r=Object.freeze({default:wr}),xr=_r&&wr||_r,Or=xr.default?xr.default:xr;var Rr="object"==typeof performance&&"function"==typeof performance.now,Tr=void 0;Tr=Rr?function(){return performance.now()}:function(){return Date.now()};var kr=void 0,Nr=void 0;if(i.canUseDOM)if("function"!=typeof requestIdleCallback||"function"!=typeof cancelIdleCallback){var Pr=null,Ur=!1,Dr=-1,Ar=!1,Ir=0,Mr=33,jr=33,Lr=void 0;Lr=Rr?{didTimeout:!1,timeRemaining:function(){var e=Ir-performance.now();return 0<e?e:0}}:{didTimeout:!1,timeRemaining:function(){var e=Ir-Date.now();return 0<e?e:0}};var Fr="__reactIdleCallback$"+Math.random().toString(36).slice(2);window.addEventListener("message",function(e){if(e.source===window&&e.data===Fr){if(Ur=!1,e=Tr(),0>=Ir-e){if(!(-1!==Dr&&Dr<=e))return void(Ar||(Ar=!0,requestAnimationFrame(Hr)));Lr.didTimeout=!0}else Lr.didTimeout=!1;Dr=-1,e=Pr,Pr=null,null!==e&&e(Lr)}},!1);var Hr=function(e){Ar=!1;var t=e-Ir+jr;t<jr&&Mr<jr?(8>t&&(t=8),jr=t<Mr?Mr:t):Mr=t,Ir=e+jr,Ur||(Ur=!0,window.postMessage(Fr,"*"))};kr=function(e,t){return Pr=e,null!=t&&"number"==typeof t.timeout&&(Dr=Tr()+t.timeout),Ar||(Ar=!0,requestAnimationFrame(Hr)),0},Nr=function(){Pr=null,Ur=!1,Dr=-1}}else kr=window.requestIdleCallback,Nr=window.cancelIdleCallback;else kr=function(e){return setTimeout(function(){e({timeRemaining:function(){return 1/0},didTimeout:!1})})},Nr=function(e){clearTimeout(e)};function Kr(e,t){return e=a({children:void 0},t),(t=function(e){var t="";return o.Children.forEach(e,function(e){null==e||"string"!=typeof e&&"number"!=typeof e||(t+=e)}),t}(t.children))&&(e.children=t),e}function Br(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+n,t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function qr(e,t){var n=t.value;e._wrapperState={initialValue:null!=n?n:t.defaultValue,wasMultiple:!!t.multiple}}function Yr(e,t){return null!=t.dangerouslySetInnerHTML&&d("91"),a({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Wr(e,t){var n=t.value;null==n&&(n=t.defaultValue,null!=(t=t.children)&&(null!=n&&d("92"),Array.isArray(t)&&(1>=t.length||d("93"),t=t[0]),n=""+t),null==n&&(n="")),e._wrapperState={initialValue:""+n}}function zr(e,t){var n=t.value;null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&(e.defaultValue=n)),null!=t.defaultValue&&(e.defaultValue=t.defaultValue)}function Vr(e){var t=e.textContent;t===e._wrapperState.initialValue&&(e.value=t)}var $r={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};function Gr(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Qr(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Gr(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var Xr,Jr=void 0,Zr=(Xr=function(e,t){if(e.namespaceURI!==$r.svg||"innerHTML"in e)e.innerHTML=t;else{for((Jr=Jr||document.createElement("div")).innerHTML="<svg>"+t+"</svg>",t=Jr.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction(function(){return Xr(e,t)})}:Xr);function eo(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var to={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},no=["Webkit","ms","Moz","O"];function ro(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=n,i=t[n];o=null==i||"boolean"==typeof i||""===i?"":r||"number"!=typeof i||0===i||to.hasOwnProperty(o)&&to[o]?(""+i).trim():i+"px","float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(to).forEach(function(e){no.forEach(function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),to[t]=to[e]})});var oo=a({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function io(e,t,n){t&&(oo[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML)&&d("137",e,n()),null!=t.dangerouslySetInnerHTML&&(null!=t.children&&d("60"),"object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML||d("61")),null!=t.style&&"object"!=typeof t.style&&d("62",n()))}function ao(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var uo=u.thatReturns("");function lo(e,t){var n=In(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=C[t];for(var r=0;r<t.length;r++){var o=t[r];n.hasOwnProperty(o)&&n[o]||("topScroll"===o?Cn("topScroll","scroll",e):"topFocus"===o||"topBlur"===o?(Cn("topFocus","focus",e),Cn("topBlur","blur",e),n.topBlur=!0,n.topFocus=!0):"topCancel"===o?(We("cancel",!0)&&Cn("topCancel","cancel",e),n.topCancel=!0):"topClose"===o?(We("close",!0)&&Cn("topClose","close",e),n.topClose=!0):Nn.hasOwnProperty(o)&&En(o,Nn[o],e),n[o]=!0)}}function so(e,t,n,r){return n=9===n.nodeType?n:n.ownerDocument,r===$r.html&&(r=Gr(e)),r===$r.html?"script"===e?((e=n.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):e="string"==typeof t.is?n.createElement(e,{is:t.is}):n.createElement(e):e=n.createElementNS(r,e),e}function co(e,t){return(9===t.nodeType?t:t.ownerDocument).createTextNode(e)}function fo(e,t,n,r){var o=ao(t,n);switch(t){case"iframe":case"object":En("topLoad","load",e);var i=n;break;case"video":case"audio":for(i in Pn)Pn.hasOwnProperty(i)&&En(i,Pn[i],e);i=n;break;case"source":En("topError","error",e),i=n;break;case"img":case"image":case"link":En("topError","error",e),En("topLoad","load",e),i=n;break;case"form":En("topReset","reset",e),En("topSubmit","submit",e),i=n;break;case"details":En("topToggle","toggle",e),i=n;break;case"input":Et(e,n),i=bt(e,n),En("topInvalid","invalid",e),lo(r,"onChange");break;case"option":i=Kr(e,n);break;case"select":qr(e,n),i=a({},n,{value:void 0}),En("topInvalid","invalid",e),lo(r,"onChange");break;case"textarea":Wr(e,n),i=Yr(e,n),En("topInvalid","invalid",e),lo(r,"onChange");break;default:i=n}io(t,i,uo);var l,s=i;for(l in s)if(s.hasOwnProperty(l)){var c=s[l];"style"===l?ro(e,c):"dangerouslySetInnerHTML"===l?null!=(c=c?c.__html:void 0)&&Zr(e,c):"children"===l?"string"==typeof c?("textarea"!==t||""!==c)&&eo(e,c):"number"==typeof c&&eo(e,""+c):"suppressContentEditableWarning"!==l&&"suppressHydrationWarning"!==l&&"autoFocus"!==l&&(E.hasOwnProperty(l)?null!=c&&lo(r,l):null!=c&&vt(e,l,c,o))}switch(t){case"input":Ve(e),wt(e,n);break;case"textarea":Ve(e),Vr(e);break;case"option":null!=n.value&&e.setAttribute("value",n.value);break;case"select":e.multiple=!!n.multiple,null!=(t=n.value)?Br(e,!!n.multiple,t,!1):null!=n.defaultValue&&Br(e,!!n.multiple,n.defaultValue,!0);break;default:"function"==typeof i.onClick&&(e.onclick=u)}}function po(e,t,n,r,o){var i=null;switch(t){case"input":n=bt(e,n),r=bt(e,r),i=[];break;case"option":n=Kr(e,n),r=Kr(e,r),i=[];break;case"select":n=a({},n,{value:void 0}),r=a({},r,{value:void 0}),i=[];break;case"textarea":n=Yr(e,n),r=Yr(e,r),i=[];break;default:"function"!=typeof n.onClick&&"function"==typeof r.onClick&&(e.onclick=u)}io(t,r,uo),t=e=void 0;var l=null;for(e in n)if(!r.hasOwnProperty(e)&&n.hasOwnProperty(e)&&null!=n[e])if("style"===e){var s=n[e];for(t in s)s.hasOwnProperty(t)&&(l||(l={}),l[t]="")}else"dangerouslySetInnerHTML"!==e&&"children"!==e&&"suppressContentEditableWarning"!==e&&"suppressHydrationWarning"!==e&&"autoFocus"!==e&&(E.hasOwnProperty(e)?i||(i=[]):(i=i||[]).push(e,null));for(e in r){var c=r[e];if(s=null!=n?n[e]:void 0,r.hasOwnProperty(e)&&c!==s&&(null!=c||null!=s))if("style"===e)if(s){for(t in s)!s.hasOwnProperty(t)||c&&c.hasOwnProperty(t)||(l||(l={}),l[t]="");for(t in c)c.hasOwnProperty(t)&&s[t]!==c[t]&&(l||(l={}),l[t]=c[t])}else l||(i||(i=[]),i.push(e,l)),l=c;else"dangerouslySetInnerHTML"===e?(c=c?c.__html:void 0,s=s?s.__html:void 0,null!=c&&s!==c&&(i=i||[]).push(e,""+c)):"children"===e?s===c||"string"!=typeof c&&"number"!=typeof c||(i=i||[]).push(e,""+c):"suppressContentEditableWarning"!==e&&"suppressHydrationWarning"!==e&&(E.hasOwnProperty(e)?(null!=c&&lo(o,e),i||s===c||(i=[])):(i=i||[]).push(e,c))}return l&&(i=i||[]).push("style",l),i}function ho(e,t,n,r,o){"input"===n&&"radio"===o.type&&null!=o.name&&Ct(e,o),ao(n,r),r=ao(n,o);for(var i=0;i<t.length;i+=2){var a=t[i],u=t[i+1];"style"===a?ro(e,u):"dangerouslySetInnerHTML"===a?Zr(e,u):"children"===a?eo(e,u):vt(e,a,u,r)}switch(n){case"input":St(e,o);break;case"textarea":zr(e,o);break;case"select":e._wrapperState.initialValue=void 0,t=e._wrapperState.wasMultiple,e._wrapperState.wasMultiple=!!o.multiple,null!=(n=o.value)?Br(e,!!o.multiple,n,!1):t!==!!o.multiple&&(null!=o.defaultValue?Br(e,!!o.multiple,o.defaultValue,!0):Br(e,!!o.multiple,o.multiple?[]:"",!1))}}function mo(e,t,n,r,o){switch(t){case"iframe":case"object":En("topLoad","load",e);break;case"video":case"audio":for(var i in Pn)Pn.hasOwnProperty(i)&&En(i,Pn[i],e);break;case"source":En("topError","error",e);break;case"img":case"image":case"link":En("topError","error",e),En("topLoad","load",e);break;case"form":En("topReset","reset",e),En("topSubmit","submit",e);break;case"details":En("topToggle","toggle",e);break;case"input":Et(e,n),En("topInvalid","invalid",e),lo(o,"onChange");break;case"select":qr(e,n),En("topInvalid","invalid",e),lo(o,"onChange");break;case"textarea":Wr(e,n),En("topInvalid","invalid",e),lo(o,"onChange")}for(var a in io(t,n,uo),r=null,n)n.hasOwnProperty(a)&&(i=n[a],"children"===a?"string"==typeof i?e.textContent!==i&&(r=["children",i]):"number"==typeof i&&e.textContent!==""+i&&(r=["children",""+i]):E.hasOwnProperty(a)&&null!=i&&lo(o,a));switch(t){case"input":Ve(e),wt(e,n);break;case"textarea":Ve(e),Vr(e);break;case"select":case"option":break;default:"function"==typeof n.onClick&&(e.onclick=u)}return r}function go(e,t){return e.nodeValue!==t}var yo=Object.freeze({createElement:so,createTextNode:co,setInitialProperties:fo,diffProperties:po,updateProperties:ho,diffHydratedProperties:mo,diffHydratedText:go,warnForUnmatchedText:function(){},warnForDeletedHydratableElement:function(){},warnForDeletedHydratableText:function(){},warnForInsertedHydratedElement:function(){},warnForInsertedHydratedText:function(){},restoreControlledState:function(e,t,n){switch(t){case"input":if(St(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=W(r);o||d("90"),$e(r),St(r,o)}}}break;case"textarea":zr(e,n);break;case"select":null!=(t=n.value)&&Br(e,!!n.multiple,t,!1)}}});ke.injectFiberControlledHostComponent(yo);var vo=null,bo=null;function Eo(e){this._expirationTime=xo.computeUniqueAsyncExpiration(),this._root=e,this._callbacks=this._next=null,this._hasChildren=this._didComplete=!1,this._children=null,this._defer=!0}function Co(){this._callbacks=null,this._didCommit=!1,this._onCommit=this._onCommit.bind(this)}function So(e,t,n){this._internalRoot=xo.createContainer(e,t,n)}function wo(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function _o(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}Eo.prototype.render=function(e){this._defer||d("250"),this._hasChildren=!0,this._children=e;var t=this._root._internalRoot,n=this._expirationTime,r=new Co;return xo.updateContainerAtExpirationTime(e,t,null,n,r._onCommit),r},Eo.prototype.then=function(e){if(this._didComplete)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},Eo.prototype.commit=function(){var e=this._root._internalRoot,t=e.firstBatch;if(this._defer&&null!==t||d("251"),this._hasChildren){var n=this._expirationTime;if(t!==this){this._hasChildren&&(n=this._expirationTime=t._expirationTime,this.render(this._children));for(var r=null,o=t;o!==this;)r=o,o=o._next;null===r&&d("251"),r._next=o._next,this._next=t,e.firstBatch=this}this._defer=!1,xo.flushRoot(e,n),t=this._next,this._next=null,null!==(t=e.firstBatch=t)&&t._hasChildren&&t.render(t._children)}else this._next=null,this._defer=!1},Eo.prototype._onComplete=function(){if(!this._didComplete){this._didComplete=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++)(0,e[t])()}},Co.prototype.then=function(e){if(this._didCommit)e();else{var t=this._callbacks;null===t&&(t=this._callbacks=[]),t.push(e)}},Co.prototype._onCommit=function(){if(!this._didCommit){this._didCommit=!0;var e=this._callbacks;if(null!==e)for(var t=0;t<e.length;t++){var n=e[t];"function"!=typeof n&&d("191",n),n()}}},So.prototype.render=function(e,t){var n=this._internalRoot,r=new Co;return null!==(t=void 0===t?null:t)&&r.then(t),xo.updateContainer(e,n,null,r._onCommit),r},So.prototype.unmount=function(e){var t=this._internalRoot,n=new Co;return null!==(e=void 0===e?null:e)&&n.then(e),xo.updateContainer(null,t,null,n._onCommit),n},So.prototype.legacy_renderSubtreeIntoContainer=function(e,t,n){var r=this._internalRoot,o=new Co;return null!==(n=void 0===n?null:n)&&o.then(n),xo.updateContainer(t,r,e,o._onCommit),o},So.prototype.createBatch=function(){var e=new Eo(this),t=e._expirationTime,n=this._internalRoot,r=n.firstBatch;if(null===r)n.firstBatch=e,e._next=null;else{for(n=null;null!==r&&r._expirationTime<=t;)n=r,r=r._next;e._next=r,null!==n&&(n._next=e)}return e};var xo=Or({getRootHostContext:function(e){var t=e.nodeType;switch(t){case 9:case 11:e=(e=e.documentElement)?e.namespaceURI:Qr(null,"");break;default:e=Qr(e=(t=8===t?e.parentNode:e).namespaceURI||null,t=t.tagName)}return e},getChildHostContext:function(e,t){return Qr(e,t)},getPublicInstance:function(e){return e},prepareForCommit:function(){vo=vn;var e=l();if(Ln(e)){if("selectionStart"in e)var t={start:e.selectionStart,end:e.selectionEnd};else e:{var n=window.getSelection&&window.getSelection();if(n&&0!==n.rangeCount){t=n.anchorNode;var r=n.anchorOffset,o=n.focusNode;n=n.focusOffset;try{t.nodeType,o.nodeType}catch(e){t=null;break e}var i=0,a=-1,u=-1,s=0,c=0,f=e,d=null;t:for(;;){for(var p;f!==t||0!==r&&3!==f.nodeType||(a=i+r),f!==o||0!==n&&3!==f.nodeType||(u=i+n),3===f.nodeType&&(i+=f.nodeValue.length),null!==(p=f.firstChild);)d=f,f=p;for(;;){if(f===e)break t;if(d===t&&++s===r&&(a=i),d===o&&++c===n&&(u=i),null!==(p=f.nextSibling))break;d=(f=d).parentNode}f=p}t=-1===a||-1===u?null:{start:a,end:u}}else t=null}t=t||{start:0,end:0}}else t=null;bo={focusedElem:e,selectionRange:t},bn(!1)},resetAfterCommit:function(){var e=bo,t=l(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&c(document.documentElement,n)){if(Ln(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if(window.getSelection){t=window.getSelection();var o=n[oe()].length;e=Math.min(r.start,o),r=void 0===r.end?e:Math.min(r.end,o),!t.extend&&e>r&&(o=r,r=e,e=o),o=jn(n,e);var i=jn(n,r);if(o&&i&&(1!==t.rangeCount||t.anchorNode!==o.node||t.anchorOffset!==o.offset||t.focusNode!==i.node||t.focusOffset!==i.offset)){var a=document.createRange();a.setStart(o.node,o.offset),t.removeAllRanges(),e>r?(t.addRange(a),t.extend(i.node,i.offset)):(a.setEnd(i.node,i.offset),t.addRange(a))}}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for(n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}bo=null,bn(vo),vo=null},createInstance:function(e,t,n,r,o){return(e=so(e,t,n,r))[K]=o,e[B]=t,e},appendInitialChild:function(e,t){e.appendChild(t)},finalizeInitialChildren:function(e,t,n,r){return fo(e,t,n,r),_o(t,n)},prepareUpdate:function(e,t,n,r,o){return po(e,t,n,r,o)},shouldSetTextContent:function(e,t){return"textarea"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&"string"==typeof t.dangerouslySetInnerHTML.__html},shouldDeprioritizeSubtree:function(e,t){return!!t.hidden},createTextInstance:function(e,t,n,r){return(e=co(e,t))[K]=r,e},now:Tr,mutation:{commitMount:function(e,t,n){_o(t,n)&&e.focus()},commitUpdate:function(e,t,n,r,o){e[B]=o,ho(e,t,n,r,o)},resetTextContent:function(e){eo(e,"")},commitTextUpdate:function(e,t,n){e.nodeValue=n},appendChild:function(e,t){e.appendChild(t)},appendChildToContainer:function(e,t){8===e.nodeType?e.parentNode.insertBefore(t,e):e.appendChild(t)},insertBefore:function(e,t,n){e.insertBefore(t,n)},insertInContainerBefore:function(e,t,n){8===e.nodeType?e.parentNode.insertBefore(t,n):e.insertBefore(t,n)},removeChild:function(e,t){e.removeChild(t)},removeChildFromContainer:function(e,t){8===e.nodeType?e.parentNode.removeChild(t):e.removeChild(t)}},hydration:{canHydrateInstance:function(e,t){return 1!==e.nodeType||t.toLowerCase()!==e.nodeName.toLowerCase()?null:e},canHydrateTextInstance:function(e,t){return""===t||3!==e.nodeType?null:e},getNextHydratableSibling:function(e){for(e=e.nextSibling;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e},getFirstHydratableChild:function(e){for(e=e.firstChild;e&&1!==e.nodeType&&3!==e.nodeType;)e=e.nextSibling;return e},hydrateInstance:function(e,t,n,r,o,i){return e[K]=i,e[B]=n,mo(e,t,n,o,r)},hydrateTextInstance:function(e,t,n){return e[K]=n,go(e,t)},didNotMatchHydratedContainerTextInstance:function(){},didNotMatchHydratedTextInstance:function(){},didNotHydrateContainerInstance:function(){},didNotHydrateInstance:function(){},didNotFindHydratableContainerInstance:function(){},didNotFindHydratableContainerTextInstance:function(){},didNotFindHydratableInstance:function(){},didNotFindHydratableTextInstance:function(){}},scheduleDeferredCallback:kr,cancelDeferredCallback:Nr}),Oo=xo;function Ro(e,t,n,r,o){wo(n)||d("200");var i=n._reactRootContainer;if(i){if("function"==typeof o){var a=o;o=function(){var e=xo.getPublicRootInstance(i._internalRoot);a.call(e)}}null!=e?i.legacy_renderSubtreeIntoContainer(e,t,o):i.render(t,o)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new So(e,!1,t)}(n,r),"function"==typeof o){var u=o;o=function(){var e=xo.getPublicRootInstance(i._internalRoot);u.call(e)}}xo.unbatchedUpdates(function(){null!=e?i.legacy_renderSubtreeIntoContainer(e,t,o):i.render(t,o)})}return xo.getPublicRootInstance(i._internalRoot)}function To(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;return wo(t)||d("200"),function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:et,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}je=Oo.batchedUpdates,Le=Oo.interactiveUpdates,Fe=Oo.flushInteractiveUpdates;var ko={createPortal:To,findDOMNode:function(e){return null==e?null:1===e.nodeType?e:xo.findHostInstance(e)},hydrate:function(e,t,n){return Ro(null,e,t,!0,n)},render:function(e,t,n){return Ro(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){return(null==e||void 0===e._reactInternalFiber)&&d("38"),Ro(e,t,n,!1,r)},unmountComponentAtNode:function(e){return wo(e)||d("40"),!!e._reactRootContainer&&(xo.unbatchedUpdates(function(){Ro(null,null,e,!1,function(){e._reactRootContainer=null})}),!0)},unstable_createPortal:function(){return To.apply(void 0,arguments)},unstable_batchedUpdates:xo.batchedUpdates,unstable_deferredUpdates:xo.deferredUpdates,flushSync:xo.flushSync,unstable_flushControlled:xo.flushControlled,__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{EventPluginHub:F,EventPluginRegistry:_,EventPropagators:ne,ReactControlledComponent:Me,ReactDOMComponentTree:z,ReactDOMEventListener:_n},unstable_createRoot:function(e,t){return new So(e,!0,null!=t&&!0===t.hydrate)}};xo.injectIntoDevTools({findFiberByHostInstance:q,bundleType:0,version:"16.3.2",rendererPackageName:"react-dom"});var No=Object.freeze({default:ko}),Po=No&&ko||No;e.exports=Po.default?Po.default:Po},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(80)},function(e,t,n){"use strict";
/** @license React v16.3.2
 * react.production.min.js
 *
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(29),o=n(16),i=n(28),a=n(15),u="function"==typeof Symbol&&Symbol.for,l=u?Symbol.for("react.element"):60103,s=u?Symbol.for("react.portal"):60106,c=u?Symbol.for("react.fragment"):60107,f=u?Symbol.for("react.strict_mode"):60108,d=u?Symbol.for("react.provider"):60109,p=u?Symbol.for("react.context"):60110,h=u?Symbol.for("react.async_mode"):60111,m=u?Symbol.for("react.forward_ref"):60112,g="function"==typeof Symbol&&Symbol.iterator;function y(e){for(var t=arguments.length-1,n="http://reactjs.org/docs/error-decoder.html?invariant="+e,r=0;r<t;r++)n+="&args[]="+encodeURIComponent(arguments[r+1]);o(!1,"Minified React error #"+e+"; visit %s for the full message or use the non-minified dev environment for full errors and additional helpful warnings. ",n)}var v={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}};function b(e,t,n){this.props=e,this.context=t,this.refs=i,this.updater=n||v}function E(){}function C(e,t,n){this.props=e,this.context=t,this.refs=i,this.updater=n||v}b.prototype.isReactComponent={},b.prototype.setState=function(e,t){"object"!=typeof e&&"function"!=typeof e&&null!=e&&y("85"),this.updater.enqueueSetState(this,e,t,"setState")},b.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},E.prototype=b.prototype;var S=C.prototype=new E;S.constructor=C,r(S,b.prototype),S.isPureReactComponent=!0;var w={current:null},_=Object.prototype.hasOwnProperty,x={key:!0,ref:!0,__self:!0,__source:!0};function O(e,t,n){var r=void 0,o={},i=null,a=null;if(null!=t)for(r in void 0!==t.ref&&(a=t.ref),void 0!==t.key&&(i=""+t.key),t)_.call(t,r)&&!x.hasOwnProperty(r)&&(o[r]=t[r]);var u=arguments.length-2;if(1===u)o.children=n;else if(1<u){for(var s=Array(u),c=0;c<u;c++)s[c]=arguments[c+2];o.children=s}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===o[r]&&(o[r]=u[r]);return{$$typeof:l,type:e,key:i,ref:a,props:o,_owner:w.current}}function R(e){return"object"==typeof e&&null!==e&&e.$$typeof===l}var T=/\/+/g,k=[];function N(e,t,n,r){if(k.length){var o=k.pop();return o.result=e,o.keyPrefix=t,o.func=n,o.context=r,o.count=0,o}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function P(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>k.length&&k.push(e)}function U(e,t,n,r){var o=typeof e;"undefined"!==o&&"boolean"!==o||(e=null);var i=!1;if(null===e)i=!0;else switch(o){case"string":case"number":i=!0;break;case"object":switch(e.$$typeof){case l:case s:i=!0}}if(i)return n(r,e,""===t?"."+D(e,0):t),1;if(i=0,t=""===t?".":t+":",Array.isArray(e))for(var a=0;a<e.length;a++){var u=t+D(o=e[a],a);i+=U(o,u,n,r)}else if(null===e||void 0===e?u=null:u="function"==typeof(u=g&&e[g]||e["@@iterator"])?u:null,"function"==typeof u)for(e=u.call(e),a=0;!(o=e.next()).done;)i+=U(o=o.value,u=t+D(o,a++),n,r);else"object"===o&&y("31","[object Object]"===(n=""+e)?"object with keys {"+Object.keys(e).join(", ")+"}":n,"");return i}function D(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,function(e){return t[e]})}(e.key):t.toString(36)}function A(e,t){e.func.call(e.context,t,e.count++)}function I(e,t,n){var r=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?M(e,r,n,a.thatReturnsArgument):null!=e&&(R(e)&&(t=o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(T,"$&/")+"/")+n,e={$$typeof:l,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}),r.push(e))}function M(e,t,n,r,o){var i="";null!=n&&(i=(""+n).replace(T,"$&/")+"/"),t=N(t,i,r,o),null==e||U(e,"",I,t),P(t)}var j={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return M(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;t=N(null,null,t,n),null==e||U(e,"",A,t),P(t)},count:function(e){return null==e?0:U(e,"",a.thatReturnsNull,null)},toArray:function(e){var t=[];return M(e,t,null,a.thatReturnsArgument),t},only:function(e){return R(e)||y("143"),e}},createRef:function(){return{current:null}},Component:b,PureComponent:C,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:p,_calculateChangedBits:t,_defaultValue:e,_currentValue:e,_changedBits:0,Provider:null,Consumer:null}).Provider={$$typeof:d,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:m,render:e}},Fragment:c,StrictMode:f,unstable_AsyncMode:h,createElement:O,cloneElement:function(e,t,n){(null===e||void 0===e)&&y("267",e);var o=void 0,i=r({},e.props),a=e.key,u=e.ref,s=e._owner;if(null!=t){void 0!==t.ref&&(u=t.ref,s=w.current),void 0!==t.key&&(a=""+t.key);var c=void 0;for(o in e.type&&e.type.defaultProps&&(c=e.type.defaultProps),t)_.call(t,o)&&!x.hasOwnProperty(o)&&(i[o]=void 0===t[o]&&void 0!==c?c[o]:t[o])}if(1===(o=arguments.length-2))i.children=n;else if(1<o){c=Array(o);for(var f=0;f<o;f++)c[f]=arguments[f+2];i.children=c}return{$$typeof:l,type:e.type,key:a,ref:u,props:i,_owner:s}},createFactory:function(e){var t=O.bind(null,e);return t.type=e,t},isValidElement:R,version:"16.3.2",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentOwner:w,assign:r}},L=Object.freeze({default:j}),F=L&&j||L;e.exports=F.default?F.default:F},function(e,t,n){"use strict";var r=a(n(1)),o=a(n(81)),i=a(n(73));function a(e){return e&&e.__esModule?e:{default:e}}var u=document.getElementById("app");o.default.render(r.default.createElement(i.default,null),u)},function(e,t){e.exports={scrollable_menu:"sourceList__scrollable_menu___cS4ol"}},function(e,t){e.exports={sidebar_component:"sidebar__sidebar_component___3y845",active:"sidebar__active___WqS-B"}},function(e,t){e.exports={spinner:"loader__spinner___1BT8P","sk-stretchdelay":"loader__sk-stretchdelay___3Pwsb",rect2:"loader__rect2___1NENB",rect3:"loader__rect3___20id4",rect4:"loader__rect4___1d8HF",rect5:"loader__rect5___3UOad"}},,function(e,t){e.exports={news_card:"newsCard__news_card___3ZKY6","card-title":"newsCard__card-title___1dh7q"}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvcmVhY3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy93YXJuaW5nL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9pbnZhcmlhbnQvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi91dGlscy5qcyIsIndlYnBhY2s6Ly8vLi9zZXJ2aWNlcy91dGlsLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9QYXRoVXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9wdWJzdWItanMvc3JjL3B1YnN1Yi5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy9Sb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL1JvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvQnJvd3NlclJvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvSGFzaFJvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvTGluay5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy9NZW1vcnlSb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL01lbW9yeVJvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9lcy9tYXRjaFBhdGguanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXMvUm91dGUuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL1JvdXRlLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9OYXZMaW5rLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL1Byb21wdC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvUHJvbXB0LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lcy9Mb2NhdGlvblV0aWxzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lcy9QYXRoVXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9oaXN0b3J5L2VzL0RPTVV0aWxzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lcy9jcmVhdGVCcm93c2VySGlzdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvZXMvY3JlYXRlSGFzaEhpc3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9oaXN0b3J5L2VzL2NyZWF0ZU1lbW9yeUhpc3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXMvUmVkaXJlY3QuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXItZG9tL2VzL1JlZGlyZWN0LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL1N0YXRpY1JvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvU3RhdGljUm91dGVyLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyL2VzL1N3aXRjaC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvU3dpdGNoLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvcmVhY3Qtcm91dGVyLWRvbS9lcy9tYXRjaFBhdGguanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvZXMvd2l0aFJvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci1kb20vZXMvd2l0aFJvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL3BhZ2UtYm9keS9wYWdlQm9keS5wcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9kZWZhdWx0cy5qcyIsIndlYnBhY2s6Ly8vLi9zZXJ2aWNlcy9uZXdzLmpzIiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvbmV3cy1wYW5lbC9uZXdzUGFuZWwuY29tcG9uZW50LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlci5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvTG9jYXRpb25VdGlscy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2VtcHR5RnVuY3Rpb24uanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9pbnZhcmlhbnQuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy92YWx1ZS1lcXVhbC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3Jlc29sdmUtcGF0aG5hbWUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9zb3VyY2UtcGFnZS9zb3VyY2VzLnByb3BzLmpzIiwid2VicGFjazovLy8uL2NvbmZpZy9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY2FuY2VsL0NhbmNlbC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvaXNDYW5jZWwuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9jcmVhdGVFcnJvci5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9hZGFwdGVycy94aHIuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9iaW5kLmpzIiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvc2lkZWJhci9zaWRlYmFyLnByb3BzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9ET01VdGlscy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2VtcHR5T2JqZWN0LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvb2JqZWN0LWFzc2lnbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL2luZGV4LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvcGF0aC10by1yZWdleHAvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9oaXN0b3J5L2NyZWF0ZU1lbW9yeUhpc3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9oaXN0b3J5L2NyZWF0ZUhhc2hIaXN0b3J5LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9jcmVhdGVCcm93c2VySGlzdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL3NvdXJjZS1wYWdlL3NvdXJjZUxpc3QuY29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvc291cmNlLXBhZ2Uvc291cmNlUGFnZS5jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9uZXdzLXNlYXJjaC9zZWFyY2hiYXIuY29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvbmV3cy1zZWFyY2gvbmV3c1NlYXJjaC5jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vY29uZmlnL3NlcnZpY2VzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvc3ByZWFkLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWxUb2tlbi5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2NvbWJpbmVVUkxzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3RyYW5zZm9ybURhdGEuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9kaXNwYXRjaFJlcXVlc3QuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9JbnRlcmNlcHRvck1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9jb29raWVzLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYnRvYS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2lzVVJMU2FtZU9yaWdpbi5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlSGVhZGVycy5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2J1aWxkVVJMLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvZW5oYW5jZUVycm9yLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NvcmUvc2V0dGxlLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvbm9ybWFsaXplSGVhZGVyTmFtZS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3Byb2Nlc3MvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0F4aW9zLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvaXMtYnVmZmVyL2luZGV4LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2F4aW9zLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvYXhpb3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9zaWRlYmFyL3NpZGViYXIuY29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvbmV3cy1wYW5lbC9sb2FkZXIuY29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvbmV3cy1zZWFyY2gvbm9SZXN1bHQuY29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvbmV3cy1jYXJkL25ld3NDYXJkLmNvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2pzLWVhc3ktY2xvY2svZGlzdC9idW5kbGUubWluLmpzIiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvbWFpbi1wYWdlL21haW5QYWdlLmNvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3dlYnBhY2svYnVpbGRpbi9tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9wYWdlLWJvZHkvcGFnZUJvZHkuY29tcG9uZW50LmpzIiwid2VicGFjazovLy8uL2NvbXBvbmVudHMvaGVhZGVyL2hlYWRlci5wcm9wcy5qcyIsIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL2hlYWRlci9oZWFkZXIuY29tcG9uZW50LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvaXNhcnJheS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvbGliL1JlYWN0UHJvcFR5cGVzU2VjcmV0LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMuanMiLCJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9sYXlvdXQvbGF5b3V0LmNvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2lzTm9kZS5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL2ZianMvbGliL2lzVGV4dE5vZGUuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9jb250YWluc05vZGUuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9zaGFsbG93RXF1YWwuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9mYmpzL2xpYi9nZXRBY3RpdmVFbGVtZW50LmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvZmJqcy9saWIvRXhlY3V0aW9uRW52aXJvbm1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9hcHAuanMiLCJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9zb3VyY2UtcGFnZS9zb3VyY2VMaXN0LmNzcyIsIndlYnBhY2s6Ly8vLi9jb21wb25lbnRzL3NpZGViYXIvc2lkZWJhci5jc3MiLCJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9uZXdzLXBhbmVsL2xvYWRlci5jc3MiLCJ3ZWJwYWNrOi8vLy4vY29tcG9uZW50cy9uZXdzLWNhcmQvbmV3c0NhcmQuY3NzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsInZhbHVlIiwibiIsIl9fZXNNb2R1bGUiLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJjb25kaXRpb24iLCJmb3JtYXQiLCJhIiwiYiIsImUiLCJmIiwiZXJyb3IiLCJ1bmRlZmluZWQiLCJFcnJvciIsImFyZ3MiLCJhcmdJbmRleCIsInJlcGxhY2UiLCJmcmFtZXNUb1BvcCIsImJpbmQiLCJpc0J1ZmZlciIsInRvU3RyaW5nIiwiaXNBcnJheSIsInZhbCIsImlzT2JqZWN0IiwiaXNGdW5jdGlvbiIsImZvckVhY2giLCJvYmoiLCJmbiIsImxlbmd0aCIsImtleSIsImlzQXJyYXlCdWZmZXIiLCJpc0Zvcm1EYXRhIiwiRm9ybURhdGEiLCJpc0FycmF5QnVmZmVyVmlldyIsIkFycmF5QnVmZmVyIiwiaXNWaWV3IiwiYnVmZmVyIiwiaXNTdHJpbmciLCJpc051bWJlciIsImlzVW5kZWZpbmVkIiwiaXNEYXRlIiwiaXNGaWxlIiwiaXNCbG9iIiwiaXNTdHJlYW0iLCJwaXBlIiwiaXNVUkxTZWFyY2hQYXJhbXMiLCJVUkxTZWFyY2hQYXJhbXMiLCJpc1N0YW5kYXJkQnJvd3NlckVudiIsIm5hdmlnYXRvciIsInByb2R1Y3QiLCJ3aW5kb3ciLCJkb2N1bWVudCIsIm1lcmdlIiwicmVzdWx0IiwiYXNzaWduVmFsdWUiLCJhcmd1bWVudHMiLCJleHRlbmQiLCJ0aGlzQXJnIiwidHJpbSIsInN0ciIsIlV0aWxpdHkiLCJzdHJpbmdMZW5ndGgiLCJhbGxvd2VkQ2hhcnMiLCJ0ZXh0IiwiY2hhckF0IiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwiX2FyZ3VtZW50cyIsIl9sb29wIiwiY3VycmVudEFyZyIsImtleXMiLCJkYXRhIiwiQXJyYXkiLCJhZGRMZWFkaW5nU2xhc2giLCJwYXRoIiwic3RyaXBMZWFkaW5nU2xhc2giLCJzdWJzdHIiLCJoYXNCYXNlbmFtZSIsInByZWZpeCIsIlJlZ0V4cCIsInRlc3QiLCJzdHJpcEJhc2VuYW1lIiwic3RyaXBUcmFpbGluZ1NsYXNoIiwic2xpY2UiLCJwYXJzZVBhdGgiLCJwYXRobmFtZSIsInNlYXJjaCIsImhhc2giLCJoYXNoSW5kZXgiLCJpbmRleE9mIiwic2VhcmNoSW5kZXgiLCJjcmVhdGVQYXRoIiwibG9jYXRpb24iLCJyb290IiwiZmFjdG9yeSIsIlB1YlN1YiIsImRlZmluZSIsIm1lc3NhZ2VzIiwibGFzdFVpZCIsImhhc0tleXMiLCJjYWxsU3Vic2NyaWJlcldpdGhEZWxheWVkRXhjZXB0aW9ucyIsInN1YnNjcmliZXIiLCJtZXNzYWdlIiwiZXgiLCJzZXRUaW1lb3V0IiwidGhyb3dFeGNlcHRpb24iLCJjYWxsU3Vic2NyaWJlcldpdGhJbW1lZGlhdGVFeGNlcHRpb25zIiwiZGVsaXZlck1lc3NhZ2UiLCJvcmlnaW5hbE1lc3NhZ2UiLCJtYXRjaGVkTWVzc2FnZSIsImltbWVkaWF0ZUV4Y2VwdGlvbnMiLCJzdWJzY3JpYmVycyIsImNhbGxTdWJzY3JpYmVyIiwicHVibGlzaCIsInN5bmMiLCJkZWxpdmVyIiwidG9waWMiLCJTdHJpbmciLCJwb3NpdGlvbiIsImxhc3RJbmRleE9mIiwiY3JlYXRlRGVsaXZlcnlGdW5jdGlvbiIsImhhc1N1YnNjcmliZXJzIiwiZm91bmQiLCJCb29sZWFuIiwibWVzc2FnZUhhc1N1YnNjcmliZXJzIiwicHVibGlzaFN5bmMiLCJzdWJzY3JpYmUiLCJmdW5jIiwidG9rZW4iLCJzdWJzY3JpYmVPbmNlIiwidW5zdWJzY3JpYmUiLCJhcHBseSIsInRoaXMiLCJjbGVhckFsbFN1YnNjcmlwdGlvbnMiLCJjbGVhclN1YnNjcmlwdGlvbnMiLCJ0IiwiaXNUb3BpYyIsImRlc2NlbmRhbnRUb3BpY0V4aXN0cyIsImlzVG9rZW4iLCJhbWQiLCJfZXh0ZW5kcyIsImFzc2lnbiIsInRhcmdldCIsInNvdXJjZSIsIl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwic2VsZiIsIlJlZmVyZW5jZUVycm9yIiwiUm91dGVyX1JvdXRlciIsIl9SZWFjdCRDb21wb25lbnQiLCJSb3V0ZXIiLCJfdGVtcCIsIl90aGlzIiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIlR5cGVFcnJvciIsIl9jbGFzc0NhbGxDaGVjayIsIl9sZW4iLCJfa2V5IiwiY29uY2F0Iiwic3RhdGUiLCJtYXRjaCIsImNvbXB1dGVNYXRjaCIsInByb3BzIiwiaGlzdG9yeSIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsImNyZWF0ZSIsImNvbnN0cnVjdG9yIiwid3JpdGFibGUiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsIl9pbmhlcml0cyIsImdldENoaWxkQ29udGV4dCIsInJvdXRlciIsImNvbnRleHQiLCJyb3V0ZSIsInVybCIsInBhcmFtcyIsImlzRXhhY3QiLCJjb21wb25lbnRXaWxsTW91bnQiLCJfdGhpczIiLCJfcHJvcHMiLCJjaGlsZHJlbiIsImludmFyaWFudF9icm93c2VyX2RlZmF1bHQiLCJyZWFjdF9kZWZhdWx0IiwiQ2hpbGRyZW4iLCJjb3VudCIsInVubGlzdGVuIiwibGlzdGVuIiwic2V0U3RhdGUiLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwibmV4dFByb3BzIiwiYnJvd3Nlcl9kZWZhdWx0IiwiY29tcG9uZW50V2lsbFVubW91bnQiLCJyZW5kZXIiLCJvbmx5IiwiQ29tcG9uZW50IiwicHJvcFR5cGVzIiwicHJvcF90eXBlc19kZWZhdWx0IiwiaXNSZXF1aXJlZCIsIm5vZGUiLCJjb250ZXh0VHlwZXMiLCJjaGlsZENvbnRleHRUeXBlcyIsImVzX1JvdXRlciIsInJlYWN0X3JvdXRlcl9kb21fZXNfUm91dGVyIiwiQnJvd3NlclJvdXRlcl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiQnJvd3NlclJvdXRlcl9Ccm93c2VyUm91dGVyIiwiQnJvd3NlclJvdXRlciIsIkJyb3dzZXJSb3V0ZXJfY2xhc3NDYWxsQ2hlY2siLCJjcmVhdGVCcm93c2VySGlzdG9yeV9kZWZhdWx0IiwiQnJvd3NlclJvdXRlcl9pbmhlcml0cyIsImNyZWF0ZUVsZW1lbnQiLCJiYXNlbmFtZSIsInN0cmluZyIsImZvcmNlUmVmcmVzaCIsImJvb2wiLCJnZXRVc2VyQ29uZmlybWF0aW9uIiwia2V5TGVuZ3RoIiwibnVtYmVyIiwiZXNfQnJvd3NlclJvdXRlciIsIkhhc2hSb3V0ZXJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsIkhhc2hSb3V0ZXJfSGFzaFJvdXRlciIsIkhhc2hSb3V0ZXIiLCJIYXNoUm91dGVyX2NsYXNzQ2FsbENoZWNrIiwiY3JlYXRlSGFzaEhpc3RvcnlfZGVmYXVsdCIsIkhhc2hSb3V0ZXJfaW5oZXJpdHMiLCJoYXNoVHlwZSIsIm9uZU9mIiwiZXNfSGFzaFJvdXRlciIsIkxpbmtfZXh0ZW5kcyIsIkxpbmtfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsImlzTW9kaWZpZWRFdmVudCIsImV2ZW50IiwibWV0YUtleSIsImFsdEtleSIsImN0cmxLZXkiLCJzaGlmdEtleSIsIkxpbmtfTGluayIsIkxpbmsiLCJMaW5rX2NsYXNzQ2FsbENoZWNrIiwiaGFuZGxlQ2xpY2siLCJvbkNsaWNrIiwiZGVmYXVsdFByZXZlbnRlZCIsImJ1dHRvbiIsInByZXZlbnREZWZhdWx0IiwiX3RoaXMkcHJvcHMiLCJ0byIsInB1c2giLCJMaW5rX2luaGVyaXRzIiwiaW5uZXJSZWYiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJocmVmIiwiY3JlYXRlSHJlZiIsInJlZiIsIm9uZU9mVHlwZSIsImRlZmF1bHRQcm9wcyIsInNoYXBlIiwiZXNfTGluayIsIk1lbW9yeVJvdXRlcl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiTWVtb3J5Um91dGVyX01lbW9yeVJvdXRlciIsIk1lbW9yeVJvdXRlciIsIk1lbW9yeVJvdXRlcl9jbGFzc0NhbGxDaGVjayIsImNyZWF0ZU1lbW9yeUhpc3RvcnlfZGVmYXVsdCIsIk1lbW9yeVJvdXRlcl9pbmhlcml0cyIsImluaXRpYWxFbnRyaWVzIiwiYXJyYXkiLCJpbml0aWFsSW5kZXgiLCJyZWFjdF9yb3V0ZXJfZG9tX2VzX01lbW9yeVJvdXRlciIsInBhdHRlcm5DYWNoZSIsImNhY2hlQ291bnQiLCJlc19tYXRjaFBhdGgiLCJvcHRpb25zIiwiX29wdGlvbnMiLCJfb3B0aW9ucyRwYXRoIiwiX29wdGlvbnMkZXhhY3QiLCJleGFjdCIsIl9vcHRpb25zJHN0cmljdCIsInN0cmljdCIsIl9vcHRpb25zJHNlbnNpdGl2ZSIsInNlbnNpdGl2ZSIsIl9jb21waWxlUGF0aCIsInBhdHRlcm4iLCJjYWNoZUtleSIsImVuZCIsImNhY2hlIiwiY29tcGlsZWRQYXR0ZXJuIiwicmUiLCJwYXRoX3RvX3JlZ2V4cF9kZWZhdWx0IiwibWF0Y2hQYXRoX2NvbXBpbGVQYXRoIiwiZXhlYyIsInZhbHVlcyIsInJlZHVjZSIsIm1lbW8iLCJpbmRleCIsIlJvdXRlX2V4dGVuZHMiLCJSb3V0ZV9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiUm91dGVfaXNFbXB0eUNoaWxkcmVuIiwiUm91dGVfUm91dGUiLCJSb3V0ZSIsIlJvdXRlX2NsYXNzQ2FsbENoZWNrIiwiUm91dGVfaW5oZXJpdHMiLCJfcmVmIiwiY29tcHV0ZWRNYXRjaCIsImNvbXBvbmVudCIsIm5leHRDb250ZXh0IiwiX2NvbnRleHQkcm91dGVyIiwic3RhdGljQ29udGV4dCIsImVzX1JvdXRlIiwicmVhY3Rfcm91dGVyX2RvbV9lc19Sb3V0ZSIsIk5hdkxpbmtfZXh0ZW5kcyIsIl90eXBlb2YiLCJTeW1ib2wiLCJpdGVyYXRvciIsIk5hdkxpbmtfTmF2TGluayIsImFjdGl2ZUNsYXNzTmFtZSIsImNsYXNzTmFtZSIsImFjdGl2ZVN0eWxlIiwic3R5bGUiLCJnZXRJc0FjdGl2ZSIsImlzQWN0aXZlIiwiYXJpYUN1cnJlbnQiLCJyZXN0IiwiTmF2TGlua19vYmplY3RXaXRob3V0UHJvcGVydGllcyIsIl9yZWYyIiwiZmlsdGVyIiwiam9pbiIsImFyaWEtY3VycmVudCIsImVzX05hdkxpbmsiLCJQcm9tcHRfUHJvbXB0IiwiUHJvbXB0IiwiUHJvbXB0X2NsYXNzQ2FsbENoZWNrIiwiUHJvbXB0X3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJQcm9tcHRfaW5oZXJpdHMiLCJlbmFibGUiLCJ1bmJsb2NrIiwiYmxvY2siLCJkaXNhYmxlIiwid2hlbiIsInJlYWN0X3JvdXRlcl9kb21fZXNfUHJvbXB0IiwiTG9jYXRpb25VdGlsc19leHRlbmRzIiwiTG9jYXRpb25VdGlsc19jcmVhdGVMb2NhdGlvbiIsImN1cnJlbnRMb2NhdGlvbiIsImRlY29kZVVSSSIsIlVSSUVycm9yIiwicmVzb2x2ZV9wYXRobmFtZSIsIkxvY2F0aW9uVXRpbHNfbG9jYXRpb25zQXJlRXF1YWwiLCJ2YWx1ZV9lcXVhbCIsIlJlZGlyZWN0X1JlZGlyZWN0IiwiUmVkaXJlY3QiLCJSZWRpcmVjdF9jbGFzc0NhbGxDaGVjayIsIlJlZGlyZWN0X3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJSZWRpcmVjdF9pbmhlcml0cyIsImlzU3RhdGljIiwicGVyZm9ybSIsImNvbXBvbmVudERpZE1vdW50IiwiY29tcG9uZW50RGlkVXBkYXRlIiwicHJldlByb3BzIiwicHJldlRvIiwibmV4dFRvIiwiZnJvbSIsInJlYWN0X3JvdXRlcl9kb21fZXNfUmVkaXJlY3QiLCJTdGF0aWNSb3V0ZXJfZXh0ZW5kcyIsIlN0YXRpY1JvdXRlcl9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuIiwiU3RhdGljUm91dGVyX2FkZEJhc2VuYW1lIiwiUGF0aFV0aWxzIiwiU3RhdGljUm91dGVyX2NyZWF0ZUxvY2F0aW9uIiwiX29iamVjdCRwYXRobmFtZSIsIl9vYmplY3Qkc2VhcmNoIiwiX29iamVjdCRoYXNoIiwiU3RhdGljUm91dGVyX2NyZWF0ZVVSTCIsIlN0YXRpY1JvdXRlcl9zdGF0aWNIYW5kbGVyIiwibWV0aG9kTmFtZSIsIm5vb3AiLCJTdGF0aWNSb3V0ZXJfU3RhdGljUm91dGVyIiwiU3RhdGljUm91dGVyIiwiU3RhdGljUm91dGVyX2NsYXNzQ2FsbENoZWNrIiwiaGFuZGxlUHVzaCIsImFjdGlvbiIsImhhbmRsZVJlcGxhY2UiLCJfdGhpcyRwcm9wczIiLCJoYW5kbGVMaXN0ZW4iLCJoYW5kbGVCbG9jayIsIlN0YXRpY1JvdXRlcl9pbmhlcml0cyIsIlN0YXRpY1JvdXRlcl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsImJhc2UiLCJTdGF0aWNSb3V0ZXJfc3RyaXBCYXNlbmFtZSIsImdvIiwiZ29CYWNrIiwiZ29Gb3J3YXJkIiwicmVhY3Rfcm91dGVyX2RvbV9lc19TdGF0aWNSb3V0ZXIiLCJTd2l0Y2hfU3dpdGNoIiwiU3dpdGNoIiwiU3dpdGNoX2NsYXNzQ2FsbENoZWNrIiwiU3dpdGNoX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJTd2l0Y2hfaW5oZXJpdHMiLCJjaGlsZCIsImVsZW1lbnQiLCJpc1ZhbGlkRWxlbWVudCIsIl9lbGVtZW50JHByb3BzIiwicGF0aFByb3AiLCJjbG9uZUVsZW1lbnQiLCJyZWFjdF9yb3V0ZXJfZG9tX2VzX1N3aXRjaCIsInJlYWN0X3JvdXRlcl9kb21fZXNfbWF0Y2hQYXRoIiwid2l0aFJvdXRlcl9leHRlbmRzIiwicmVhY3Rfcm91dGVyX2RvbV9lc193aXRoUm91dGVyIiwiQyIsIndyYXBwZWRDb21wb25lbnRSZWYiLCJyZW1haW5pbmdQcm9wcyIsIndpdGhSb3V0ZXJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJyb3V0ZUNvbXBvbmVudFByb3BzIiwiZGlzcGxheU5hbWUiLCJXcmFwcGVkQ29tcG9uZW50IiwiaG9pc3Rfbm9uX3JlYWN0X3N0YXRpY3NfZGVmYXVsdCIsIl91dGlsIiwiUEFHRV9TQ1JPTExFRF9CT1RUT01fRVZFTlQiLCJVdGlscyIsImdlbmVyYXRlUmFuZG9tU3RyaW5nIiwiUEFHRV9TQ1JPTExfV0FJVF9USU1FIiwidXRpbHMiLCJub3JtYWxpemVIZWFkZXJOYW1lIiwiREVGQVVMVF9DT05URU5UX1RZUEUiLCJDb250ZW50LVR5cGUiLCJzZXRDb250ZW50VHlwZUlmVW5zZXQiLCJoZWFkZXJzIiwiYWRhcHRlciIsImRlZmF1bHRzIiwiWE1MSHR0cFJlcXVlc3QiLCJwcm9jZXNzIiwidHJhbnNmb3JtUmVxdWVzdCIsIkpTT04iLCJzdHJpbmdpZnkiLCJ0cmFuc2Zvcm1SZXNwb25zZSIsInBhcnNlIiwidGltZW91dCIsInhzcmZDb29raWVOYW1lIiwieHNyZkhlYWRlck5hbWUiLCJtYXhDb250ZW50TGVuZ3RoIiwidmFsaWRhdGVTdGF0dXMiLCJzdGF0dXMiLCJjb21tb24iLCJBY2NlcHQiLCJtZXRob2QiLCJfY29uc3RhbnRzIiwiTmV3c1NlcnZpY2UiLCJtZXRhZGF0YSIsIk5ld3NEYXRhIiwiX2F4aW9zMiIsImRlZmF1bHQiLCJ0aGVuIiwiYWRkaXRpb25hbE9wdGlvbnMiLCJsb2FkTW9yZURhdGEiLCJsYW5ndWFnZSIsInBhZ2UiLCJnZXROZXdzT3B0aW9ucyIsImZsdXNoIiwic2V0TmV3c09wdGlvbnMiLCJyZXF1ZXN0T3B0cyIsIlNFUlZJQ0VTIiwiTkVXUyIsIlNFQVJDSCIsIkF1dGhvcml6YXRpb24iLCJORVdTX0FQSV9LRVkiLCJyZXN1bHRzIiwic2V0TmV3c0FkZGl0aW9uYWxEYXRhIiwidG90YWxSZXN1bHRzIiwiYXJ0aWNsZXMiLCJzZXRNYWluRGF0YSIsIlByb21pc2UiLCJyZXNvbHZlIiwiZ2V0TWFpbkRhdGFBbGwiLCJIRUFETElORVMiLCJTT1VSQ0VTIiwiY29uc29sZSIsImxvZyIsInNvdXJjZXMiLCJpZCIsIlNPVVJDRV9OQU1FIiwiU09VUkNFX0lEIiwiS0VZIiwiREFUQSIsIm5ld3NPcHRpb25zIiwicGFnZVNpemUiLCJtYWluRGF0YSIsImFkZGl0aW9uYWxEYXRhIiwiYWxsTmV3c0RhdGEiLCJwYWdlTm8iLCJERUZBVUxUX0RBVEEiLCJOZXdzUGFuZWwiLCJnZXRQcm90b3R5cGVPZiIsIm5ld3NDYXJkc0xpc3QiLCJsYXp5TG9hZGluZ0JvdHRvbSIsIlJlYWN0IiwiX3JlYWN0MiIsImVsIiwiaGVhZGxpbmVzRWxlbWVudCIsImlzTG9hZGluZyIsIl9sb2FkZXIyIiwic2Nyb2xsU3VwcG9ydCIsInByZXZTdGF0ZSIsIm5ld3NEYXRhIiwiaXNTY3JvbGxlZERvd24iLCJnZXROZXdzQ2FyZHMiLCJwcm9wZXJ0aWVzIiwidGl0bGUiLCJkZXNjcmlwdGlvbiIsIl9uZXdzQ2FyZDIiLCJjb250ZW50IiwiaW1hZ2VVcmwiLCJ1cmxUb0ltYWdlIiwiYXV0aG9yIiwibmV3c0xpbmsiLCJuZXdzT2JqIiwiX25vUmVzdWx0MiIsIm1hcCIsImFydGljbGUiLCJtYWtlTmV3c0NhcmQiLCJfd2FybmluZyIsIl93YXJuaW5nMiIsInByb21wdCIsImxpc3RlbmVycyIsInNldFByb21wdCIsIm5leHRQcm9tcHQiLCJjb25maXJtVHJhbnNpdGlvblRvIiwiY2FsbGJhY2siLCJhcHBlbmRMaXN0ZW5lciIsImxpc3RlbmVyIiwiaXRlbSIsIm5vdGlmeUxpc3RlbmVycyIsImxvY2F0aW9uc0FyZUVxdWFsIiwiY3JlYXRlTG9jYXRpb24iLCJfcmVzb2x2ZVBhdGhuYW1lMiIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfdmFsdWVFcXVhbDIiLCJfUGF0aFV0aWxzIiwibWFrZUVtcHR5RnVuY3Rpb24iLCJhcmciLCJlbXB0eUZ1bmN0aW9uIiwidGhhdFJldHVybnMiLCJ0aGF0UmV0dXJuc0ZhbHNlIiwidGhhdFJldHVybnNUcnVlIiwidGhhdFJldHVybnNOdWxsIiwidGhhdFJldHVybnNUaGlzIiwidGhhdFJldHVybnNBcmd1bWVudCIsInZhbGlkYXRlRm9ybWF0IiwiX193ZWJwYWNrX2V4cG9ydHNfXyIsInZhbHVlRXF1YWwiLCJldmVyeSIsImFUeXBlIiwiYVZhbHVlIiwidmFsdWVPZiIsImJWYWx1ZSIsImFLZXlzIiwiYktleXMiLCJpc0Fic29sdXRlIiwic3BsaWNlT25lIiwibGlzdCIsImsiLCJwb3AiLCJ0b1BhcnRzIiwic3BsaXQiLCJmcm9tUGFydHMiLCJpc1RvQWJzIiwiaXNGcm9tQWJzIiwibXVzdEVuZEFicyIsImhhc1RyYWlsaW5nU2xhc2giLCJsYXN0IiwidXAiLCJwYXJ0IiwidW5zaGlmdCIsIlNPVVJDRV9MSVNUX0lURU1fRVZFTlQiLCJTT1VSQ0VTX0RST1BET1dOX1RJVExFIiwiU09VUkNFU19MSVNUIiwiYWJjLW5ld3MiLCJhYmMtbmV3cy1hdSIsImFmdGVucG9zdGVuIiwiYWwtamF6ZWVyYS1lbmdsaXNoIiwiYW5zYSIsImFyZ2FhbSIsImFycy10ZWNobmljYSIsImFyeS1uZXdzIiwiYXNzb2NpYXRlZC1wcmVzcyIsImF1c3RyYWxpYW4tZmluYW5jaWFsLXJldmlldyIsImF4aW9zIiwiYmJjLW5ld3MiLCJiYmMtc3BvcnQiLCJiaWxkIiwiYmxhc3RpbmctbmV3cy1iciIsImJsZWFjaGVyLXJlcG9ydCIsImJsb29tYmVyZyIsImJyZWl0YmFydC1uZXdzIiwiYnVzaW5lc3MtaW5zaWRlciIsImJ1c2luZXNzLWluc2lkZXItdWsiLCJidXp6ZmVlZCIsImNiYy1uZXdzIiwiY2JzLW5ld3MiLCJjbmJjIiwiY25uIiwiY25uLWVzIiwiY3J5cHRvLWNvaW5zLW5ld3MiLCJkYWlseS1tYWlsIiwiZGVyLXRhZ2Vzc3BpZWdlbCIsImRpZS16ZWl0IiwiZWwtbXVuZG8iLCJlbmdhZGdldCIsImVudGVydGFpbm1lbnQtd2Vla2x5IiwiZXNwbiIsImVzcG4tY3JpYy1pbmZvIiwiZmluYW5jaWFsLXBvc3QiLCJmaW5hbmNpYWwtdGltZXMiLCJmb2N1cyIsImZvb3RiYWxsLWl0YWxpYSIsImZvcnR1bmUiLCJmb3VyLWZvdXItdHdvIiwiZm94LW5ld3MiLCJmb3gtc3BvcnRzIiwiZ2xvYm8iLCJnb29nbGUtbmV3cyIsImdvb2dsZS1uZXdzLWFyIiwiZ29vZ2xlLW5ld3MtYXUiLCJnb29nbGUtbmV3cy1iciIsImdvb2dsZS1uZXdzLWNhIiwiZ29vZ2xlLW5ld3MtZnIiLCJnb29nbGUtbmV3cy1pbiIsImdvb2dsZS1uZXdzLWlzIiwiZ29vZ2xlLW5ld3MtaXQiLCJnb29nbGUtbmV3cy1ydSIsImdvb2dsZS1uZXdzLXNhIiwiZ29vZ2xlLW5ld3MtdWsiLCJnb3RlYm9yZ3MtcG9zdGVuIiwiZ3J1ZW5kZXJzemVuZSIsImhhY2tlci1uZXdzIiwiaGFuZGVsc2JsYXR0IiwiaWduIiwiaWwtc29sZS0yNC1vcmUiLCJpbmRlcGVuZGVudCIsImluZm9iYWUiLCJpbmZvLW1vbmV5IiwibGEtZ2FjZXRhIiwibGEtbmFjaW9uIiwibGEtcmVwdWJibGljYSIsImxlLW1vbmRlIiwibGVudGEiLCJsZXF1aXBlIiwibGVzLWVjaG9zIiwibGliZXJhdGlvbiIsIm1hcmNhIiwibWFzaGFibGUiLCJtZWRpY2FsLW5ld3MtdG9kYXkiLCJtZXRybyIsIm1pcnJvciIsIm1zbmJjIiwibXR2LW5ld3MiLCJtdHYtbmV3cy11ayIsIm5hdGlvbmFsLWdlb2dyYXBoaWMiLCJuYXRpb25hbC1yZXZpZXciLCJuYmMtbmV3cyIsIm5ld3MyNCIsIm5ldy1zY2llbnRpc3QiLCJuZXdzLWNvbS1hdSIsIm5ld3N3ZWVrIiwibmV3LXlvcmstbWFnYXppbmUiLCJuZXh0LWJpZy1mdXR1cmUiLCJuZmwtbmV3cyIsIm5obC1uZXdzIiwibnJrIiwicG9saXRpY28iLCJwb2x5Z29uIiwicmJjIiwicmVjb2RlIiwicmVkZGl0LXItYWxsIiwicmV1dGVycyIsInJ0IiwicnRlIiwicnRsLW5pZXV3cyIsInNhYnEiLCJzcGllZ2VsLW9ubGluZSIsInN2ZW5za2EtZGFnYmxhZGV0IiwidDNuIiwidGFsa3Nwb3J0IiwidGVjaGNydW5jaCIsInRlY2hjcnVuY2gtY24iLCJ0ZWNocmFkYXIiLCJ0aGUtYW1lcmljYW4tY29uc2VydmF0aXZlIiwidGhlLWVjb25vbWlzdCIsInRoZS1nbG9iZS1hbmQtbWFpbCIsInRoZS1ndWFyZGlhbi1hdSIsInRoZS1ndWFyZGlhbi11ayIsInRoZS1oaWxsIiwidGhlLWhpbmR1IiwidGhlLWh1ZmZpbmd0b24tcG9zdCIsInRoZS1pcmlzaC10aW1lcyIsInRoZS1sYWQtYmlibGUiLCJ0aGUtbmV3LXlvcmstdGltZXMiLCJ0aGUtbmV4dC13ZWIiLCJ0aGUtc3BvcnQtYmlibGUiLCJ0aGUtdGVsZWdyYXBoIiwidGhlLXRpbWVzLW9mLWluZGlhIiwidGhlLXZlcmdlIiwidGhlLXdhbGwtc3RyZWV0LWpvdXJuYWwiLCJ0aGUtd2FzaGluZ3Rvbi1wb3N0IiwidGhlLXdhc2hpbmd0b24tdGltZXMiLCJ0aW1lIiwidXNhLXRvZGF5IiwidmljZS1uZXdzIiwid2lyZWQiLCJ3aXJlZC1kZSIsIndpcnRzY2hhZnRzLXdvY2hlIiwieGluaHVhLW5ldCIsInluZXQiLCJFVkVOVFMiLCJLRVlVUCIsIktFWUNPREVTIiwiRU5URVIiLCJDYW5jZWwiLCJfX0NBTkNFTF9fIiwiZW5oYW5jZUVycm9yIiwiY29uZmlnIiwiY29kZSIsInJlcXVlc3QiLCJyZXNwb25zZSIsInNldHRsZSIsImJ1aWxkVVJMIiwicGFyc2VIZWFkZXJzIiwiaXNVUkxTYW1lT3JpZ2luIiwiY3JlYXRlRXJyb3IiLCJidG9hIiwicmVqZWN0IiwicmVxdWVzdERhdGEiLCJyZXF1ZXN0SGVhZGVycyIsImxvYWRFdmVudCIsInhEb21haW4iLCJYRG9tYWluUmVxdWVzdCIsIm9ucHJvZ3Jlc3MiLCJvbnRpbWVvdXQiLCJhdXRoIiwidXNlcm5hbWUiLCJwYXNzd29yZCIsIm9wZW4iLCJ0b1VwcGVyQ2FzZSIsInBhcmFtc1NlcmlhbGl6ZXIiLCJyZWFkeVN0YXRlIiwicmVzcG9uc2VVUkwiLCJyZXNwb25zZUhlYWRlcnMiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJyZXNwb25zZVR5cGUiLCJyZXNwb25zZVRleHQiLCJzdGF0dXNUZXh0Iiwib25lcnJvciIsImNvb2tpZXMiLCJ4c3JmVmFsdWUiLCJ3aXRoQ3JlZGVudGlhbHMiLCJyZWFkIiwidG9Mb3dlckNhc2UiLCJzZXRSZXF1ZXN0SGVhZGVyIiwib25Eb3dubG9hZFByb2dyZXNzIiwiYWRkRXZlbnRMaXN0ZW5lciIsIm9uVXBsb2FkUHJvZ3Jlc3MiLCJ1cGxvYWQiLCJjYW5jZWxUb2tlbiIsInByb21pc2UiLCJjYW5jZWwiLCJhYm9ydCIsInNlbmQiLCJTSURFQkFSX0xJTktTIiwiR1JPVVBTIiwiQ09VTlRSSUVTIiwiRUxFTUVOVFMiLCJJTkRJQSIsImRpc3BsYXkiLCJkYXRhS2V5IiwiV09STEQiLCJVU0EiLCJDSElOQSIsIlVLIiwiQVBJX0ZJRUxEIiwic3RhdGVQcm9wZXJ0eU5hbWUiLCJDQVRFR09SSUVTIiwiQlVTSU5FU1MiLCJFTlRFUlRBSU5NRU5UIiwiVEVDSE5PTE9HWSIsIlNQT1JUUyIsIlNDSUVOQ0UiLCJIRUFMVEgiLCJMSU5LX0VWRU5UX05BTUUiLCJjYW5Vc2VET00iLCJhdHRhY2hFdmVudCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJkZXRhY2hFdmVudCIsImdldENvbmZpcm1hdGlvbiIsImNvbmZpcm0iLCJzdXBwb3J0c0hpc3RvcnkiLCJ1YSIsInVzZXJBZ2VudCIsInN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UiLCJzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCIsImlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJwcm9wSXNFbnVtZXJhYmxlIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJ0ZXN0MSIsImdldE93blByb3BlcnR5TmFtZXMiLCJ0ZXN0MiIsImZyb21DaGFyQ29kZSIsInRlc3QzIiwibGV0dGVyIiwiZXJyIiwic2hvdWxkVXNlTmF0aXZlIiwic3ltYm9scyIsInRvT2JqZWN0IiwiUkVBQ1RfU1RBVElDUyIsImdldERlZmF1bHRQcm9wcyIsImdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyIsIm1peGlucyIsInR5cGUiLCJLTk9XTl9TVEFUSUNTIiwiY2FsbGVyIiwiY2FsbGVlIiwiYXJpdHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJvYmplY3RQcm90b3R5cGUiLCJob2lzdE5vblJlYWN0U3RhdGljcyIsInRhcmdldENvbXBvbmVudCIsInNvdXJjZUNvbXBvbmVudCIsImJsYWNrbGlzdCIsImluaGVyaXRlZENvbXBvbmVudCIsImRlc2NyaXB0b3IiLCJpc2FycmF5IiwicGF0aFRvUmVnZXhwIiwiY29tcGlsZSIsInRva2Vuc1RvRnVuY3Rpb24iLCJ0b2tlbnNUb1JlZ0V4cCIsIlBBVEhfUkVHRVhQIiwicmVzIiwidG9rZW5zIiwiZGVmYXVsdERlbGltaXRlciIsImRlbGltaXRlciIsImVzY2FwZWQiLCJvZmZzZXQiLCJuZXh0IiwiY2FwdHVyZSIsImdyb3VwIiwibW9kaWZpZXIiLCJhc3RlcmlzayIsInBhcnRpYWwiLCJyZXBlYXQiLCJvcHRpb25hbCIsImVzY2FwZUdyb3VwIiwiZXNjYXBlU3RyaW5nIiwiZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IiwiZW5jb2RlVVJJIiwiY2hhckNvZGVBdCIsIm1hdGNoZXMiLCJvcHRzIiwiZW5jb2RlIiwicHJldHR5IiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwic2VnbWVudCIsImoiLCJhdHRhY2hLZXlzIiwiZmxhZ3MiLCJlbmRzV2l0aERlbGltaXRlciIsImdyb3VwcyIsInJlZ2V4cFRvUmVnZXhwIiwicGFydHMiLCJhcnJheVRvUmVnZXhwIiwic3RyaW5nVG9SZWdleHAiLCJfTG9jYXRpb25VdGlscyIsIl9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcjIiLCJjbGFtcCIsImxvd2VyQm91bmQiLCJ1cHBlckJvdW5kIiwibWluIiwibWF4IiwiX3Byb3BzJGluaXRpYWxFbnRyaWVzIiwiX3Byb3BzJGluaXRpYWxJbmRleCIsIl9wcm9wcyRrZXlMZW5ndGgiLCJ0cmFuc2l0aW9uTWFuYWdlciIsIm5leHRTdGF0ZSIsImVudHJpZXMiLCJjcmVhdGVLZXkiLCJlbnRyeSIsIm5leHRJbmRleCIsIm9rIiwibmV4dEVudHJpZXMiLCJzcGxpY2UiLCJjYW5HbyIsIl9pbnZhcmlhbnQyIiwiX0RPTVV0aWxzIiwiSGFzaFBhdGhDb2RlcnMiLCJoYXNoYmFuZyIsImVuY29kZVBhdGgiLCJkZWNvZGVQYXRoIiwibm9zbGFzaCIsInNsYXNoIiwiZ2V0SGFzaFBhdGgiLCJzdWJzdHJpbmciLCJyZXBsYWNlSGFzaFBhdGgiLCJnbG9iYWxIaXN0b3J5IiwiY2FuR29XaXRob3V0UmVsb2FkIiwiX3Byb3BzJGdldFVzZXJDb25maXJtIiwiX3Byb3BzJGhhc2hUeXBlIiwiX0hhc2hQYXRoQ29kZXJzJGhhc2hUIiwiZ2V0RE9NTG9jYXRpb24iLCJmb3JjZU5leHRQb3AiLCJpZ25vcmVQYXRoIiwiaGFuZGxlSGFzaENoYW5nZSIsImVuY29kZWRQYXRoIiwicHJldkxvY2F0aW9uIiwiaGFuZGxlUG9wIiwicmV2ZXJ0UG9wIiwiZnJvbUxvY2F0aW9uIiwidG9Mb2NhdGlvbiIsInRvSW5kZXgiLCJhbGxQYXRocyIsImZyb21JbmRleCIsImRlbHRhIiwiaW5pdGlhbExvY2F0aW9uIiwibGlzdGVuZXJDb3VudCIsImNoZWNrRE9NTGlzdGVuZXJzIiwiaXNCbG9ja2VkIiwicHVzaEhhc2hQYXRoIiwicHJldkluZGV4IiwibmV4dFBhdGhzIiwiZ2V0SGlzdG9yeVN0YXRlIiwiY2FuVXNlSGlzdG9yeSIsIm5lZWRzSGFzaENoYW5nZUxpc3RlbmVyIiwiX3Byb3BzJGZvcmNlUmVmcmVzaCIsImhpc3RvcnlTdGF0ZSIsIl93aW5kb3ckbG9jYXRpb24iLCJoYW5kbGVQb3BTdGF0ZSIsImFsbEtleXMiLCJwdXNoU3RhdGUiLCJuZXh0S2V5cyIsInJlcGxhY2VTdGF0ZSIsIl9zb3VyY2VzIiwiU291cmNlTGlzdCIsInNvdXJjZUxpc3RJdGVtQ2xpY2tlZCIsIlNPVVJDRV9MSVNUIiwic291cmNlTmFtZSIsInNvdXJjZU9iaiIsImRhdGEta2V5IiwiZGF0YS10b2dnbGUiLCJzdHlsZXMiLCJzY3JvbGxhYmxlX21lbnUiLCJyb2xlIiwiZ2V0TmV3c1NvdXJjZUVsZW1lbnRzIiwiU291cmNlUGFnZSIsInNob3dOZXdzUGFuZWwiLCJuZXdzUGFuZWxMb2FkaW5nIiwic291cmNlTGlzdCIsInNvdXJjZUxpc3RTdWJzY3JpcHRpb24iLCJuZXdzU2VydmljZSIsImZldGNoTmV3c1NvdXJjZXMiLCJzb3VyY2VEYXRhIiwibXNnIiwiZmV0Y2hIZWFkbGluZXNBbmRSZW5kZXIiLCJfdGhpczMiLCJmZXRjaFRvcEhlYWRsaW5lcyIsIm5ld3MiLCJfc291cmNlTGlzdDIiLCJfbmV3c1BhbmVsMiIsIlNlYXJjaEJhciIsInNlYXJjaEtleSIsIlNFQVJDSF9UT1BJQyIsInNlYXJjaENsaWNrZWQiLCJrZXlDb2RlIiwic2VhcmNoVGV4dCIsImdldEVsZW1lbnRCeUlkIiwicGxhY2Vob2xkZXIiLCJhcmlhLWxhYmVsIiwib25LZXlVcCIsImFyaWEtaGlkZGVuIiwiX3BhZ2VCb2R5IiwiTmV3c1NlYXJjaCIsInNlYXJjaFJlc3VsdHMiLCJuZXdzUGFuZWxTY3JvbGxlZERvd24iLCJzZWFyY2hCYXJJZCIsInNlYXJjaFBhZ2UiLCJzZWFyY2hCYXJTdWJzY3JpcHRpb24iLCJzZWFyY2hCYXJDbGlja2VkIiwic2Nyb2xsZWREb3duU3Vic2NyaXB0aW9uIiwicGFnZVNjcm9sbGVkRG93biIsImZldGNoU2VhcmNoRGF0YSIsInEiLCJzZWFyY2hOZXdzIiwiX3NlYXJjaGJhcjIiLCJBUElTIiwiSE9TVFMiLCJMT0FERURfQVBJUyIsImhvc3QiLCJhcGkiLCJIT1NUX1VSTCIsIlVSTCIsIkFQSV9VUkwiLCJhcnIiLCJDYW5jZWxUb2tlbiIsImV4ZWN1dG9yIiwicmVzb2x2ZVByb21pc2UiLCJyZWFzb24iLCJ0aHJvd0lmUmVxdWVzdGVkIiwiYmFzZVVSTCIsInJlbGF0aXZlVVJMIiwiZm5zIiwidHJhbnNmb3JtRGF0YSIsImlzQ2FuY2VsIiwiaXNBYnNvbHV0ZVVSTCIsImNvbWJpbmVVUkxzIiwidGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZCIsIkludGVyY2VwdG9yTWFuYWdlciIsImhhbmRsZXJzIiwidXNlIiwiZnVsZmlsbGVkIiwicmVqZWN0ZWQiLCJlamVjdCIsImgiLCJ3cml0ZSIsImV4cGlyZXMiLCJkb21haW4iLCJzZWN1cmUiLCJjb29raWUiLCJEYXRlIiwidG9HTVRTdHJpbmciLCJkZWNvZGVVUklDb21wb25lbnQiLCJyZW1vdmUiLCJub3ciLCJjaGFycyIsIkUiLCJpbnB1dCIsImNoYXJDb2RlIiwib3V0cHV0IiwiaWR4Iiwib3JpZ2luVVJMIiwibXNpZSIsInVybFBhcnNpbmdOb2RlIiwicmVzb2x2ZVVSTCIsInNldEF0dHJpYnV0ZSIsInByb3RvY29sIiwiaG9zdG5hbWUiLCJwb3J0IiwicmVxdWVzdFVSTCIsInBhcnNlZCIsImlnbm9yZUR1cGxpY2F0ZU9mIiwibGluZSIsInNlcmlhbGl6ZWRQYXJhbXMiLCJ2IiwidG9JU09TdHJpbmciLCJub3JtYWxpemVkTmFtZSIsImNhY2hlZFNldFRpbWVvdXQiLCJjYWNoZWRDbGVhclRpbWVvdXQiLCJkZWZhdWx0U2V0VGltb3V0IiwiZGVmYXVsdENsZWFyVGltZW91dCIsInJ1blRpbWVvdXQiLCJmdW4iLCJjbGVhclRpbWVvdXQiLCJjdXJyZW50UXVldWUiLCJxdWV1ZSIsImRyYWluaW5nIiwicXVldWVJbmRleCIsImNsZWFuVXBOZXh0VGljayIsImRyYWluUXVldWUiLCJsZW4iLCJydW4iLCJtYXJrZXIiLCJydW5DbGVhclRpbWVvdXQiLCJJdGVtIiwibmV4dFRpY2siLCJicm93c2VyIiwiZW52IiwiYXJndiIsInZlcnNpb24iLCJ2ZXJzaW9ucyIsIm9uIiwiYWRkTGlzdGVuZXIiLCJvbmNlIiwib2ZmIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJlbWl0IiwicHJlcGVuZExpc3RlbmVyIiwicHJlcGVuZE9uY2VMaXN0ZW5lciIsImJpbmRpbmciLCJjd2QiLCJjaGRpciIsImRpciIsInVtYXNrIiwiZGlzcGF0Y2hSZXF1ZXN0IiwiQXhpb3MiLCJpbnN0YW5jZUNvbmZpZyIsImludGVyY2VwdG9ycyIsImNoYWluIiwiaW50ZXJjZXB0b3IiLCJzaGlmdCIsInJlYWRGbG9hdExFIiwiaXNTbG93QnVmZmVyIiwiX2lzQnVmZmVyIiwiY3JlYXRlSW5zdGFuY2UiLCJkZWZhdWx0Q29uZmlnIiwiYWxsIiwicHJvbWlzZXMiLCJzcHJlYWQiLCJfc2lkZWJhcjMiLCJTaWRlYmFyIiwiYWN0aXZlTGlua3MiLCJsaW5rQ2xpY2tlZCIsImdyb3VwTmFtZSIsImVsZW1lbnROYW1lIiwidW5pcXVlS2V5IiwiZ3JvdXBzT2JqIiwic3RhdGVPYmoiLCJzaWRlQmFyZEVsZW1lbnRzIiwiZ3JvdXBPYmoiLCJncm91cEVsZW1lbnQiLCJlbGVtZW50T2JqIiwibGlua0VsZW1lbnQiLCJhY3RpdmUiLCJzaWRlYmFyX2NvbXBvbmVudCIsImdldFNpZGVCYXIiLCJMb2FkZXIiLCJzcGlubmVyIiwicmVjdDEiLCJyZWN0MiIsInJlY3QzIiwicmVjdDQiLCJyZWN0NSIsIl9yZWFjdCIsIk5vUmVzdWx0Rm91bmQiLCJzcmMiLCJOZXdzQ2FyZCIsIm5ld3NfY2FyZCIsIl9jcmVhdGVDbGFzcyIsImRlZmluZVByb3BlcnRpZXMiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJDaXJjbGUiLCJ4Q2VudGVyIiwieUNlbnRlciIsInJhZGl1cyIsImZpbGxDb2xvciIsIl9jb250ZXh0IiwiX3hDZW50ZXIiLCJfeUNlbnRlciIsIl9yYWRpdXMiLCJfZmlsbFN0eWxlIiwiYmVnaW5QYXRoIiwiYXJjIiwiUEkiLCJmaWxsU3R5bGUiLCJmaWxsIiwic2V0IiwiREVGQVVMVF9QUk9QRVJUSUVTIiwid2lkdGgiLCJoZWlnaHQiLCJpc0JvcmRlckZpbGxlZCIsIndhdGNoRmFjZSIsImRpc3BsYXlUaW1lIiwiZGlzcGxheUNvbnN0YW50VGltZSIsImhpbmdlQ29sb3IiLCJoYW5kQ29sb3IiLCJmcmFtZUdyYWRpZW50Q29sb3JMaXN0IiwiQ2xvY2tBcHAiLCJfanF1ZXJ5IiwiX2pxdWVyeTIiLCJfc2ltcGxlRmFjZSIsIl9jb25maWciLCJfZGVmYXVsdFByb3BlcnRpZXMiLCJyb290RWxlbWVudCIsIl9yb290RWxlbWVudCIsIl9zZXRDb25maWd1cmF0aW9ucyIsIl9pbml0Q2xvY2tTdHJ1Y3R1cmUiLCJfaW5pdENsb2NrVWkiLCJfaW5pdFRpbWVyIiwiX3Jlc2V0Q2FudmFzRGltZW5zaW9uc1NhZmUiLCJfcmVuZGVyVGltZSIsIl9kaXNwbGF5Q29uc3RhbnRUaW1lIiwiX2Rpc3BsYXlUaW1lIiwiX2dldFRpbWVIck1tU3MyIiwiX2dldFRpbWVIck1tU3MiLCJob3VyIiwibWludXRlIiwic2Vjb25kIiwiaG91ckhhbmQiLCJtaW51dGVIYW5kIiwic2Vjb25kSGFuZCIsIl9jbG9ja0NvbnRhaW5lckVsZSIsIl9nZXRDbG9ja0NvbnRhaW5lckVsZSIsIl9jbG9ja0NhbnZhc0VsZSIsIl9nZXRDYW52YXMiLCJfY2FudmFzV2lkdGgiLCJfY2FudmFzSGVpZ2h0IiwiX2Nsb2NrQ2FudmFzIiwiYXBwZW5kIiwiY3R4IiwiZ2V0Q29udGV4dCIsInJlc2V0VHJhbnNmb3JtIiwiY2xlYXJSZWN0IiwidHJhbnNsYXRlIiwiU2ltcGxlRmFjZSIsIl9jbG9ja1JhZGl1cyIsIl9jdXJyZW50RmFjZUNvbmZpZyIsImludGVydmFsSWQiLCJjbGVhckludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJfd2F0Y2hGYWNlIiwiZmFjZUNvbmZpZyIsImNhbnZhcyIsImNhbnZhc1dpZHRoIiwiY2FudmFzSGVpZ2h0IiwiZGF0ZSIsImdldEhvdXJzIiwiZ2V0TWludXRlcyIsImdldFNlY29uZHMiLCJfX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyIsImdsb2JhbCIsInciLCJub0dsb2JhbCIsIkRPTUV2YWwiLCJkb2MiLCJzY3JpcHQiLCJwcmVzZXJ2ZWRTY3JpcHRBdHRyaWJ1dGVzIiwiZ2V0QXR0cmlidXRlIiwiaGVhZCIsImFwcGVuZENoaWxkIiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwidG9UeXBlIiwiY2xhc3MydHlwZSIsImlzQXJyYXlMaWtlIiwiaXNXaW5kb3ciLCJub2RlTmFtZSIsImVsZW0iLCJ3aW5ub3ciLCJlbGVtZW50cyIsInF1YWxpZmllciIsIm5vdCIsImpRdWVyeSIsImdyZXAiLCJub2RlVHlwZSIsInNpYmxpbmciLCJjdXIiLCJJZGVudGl0eSIsIlRocm93ZXIiLCJhZG9wdFZhbHVlIiwibm9WYWx1ZSIsImRvbmUiLCJmYWlsIiwiY29tcGxldGVkIiwicmVhZHkiLCJmY2FtZWxDYXNlIiwiY2FtZWxDYXNlIiwicm1zUHJlZml4IiwicmRhc2hBbHBoYSIsIkRhdGEiLCJleHBhbmRvIiwidWlkIiwiZGF0YUF0dHIiLCJybXVsdGlEYXNoIiwicmJyYWNlIiwiZ2V0RGF0YSIsImRhdGFVc2VyIiwiYWRqdXN0Q1NTIiwicHJvcCIsInZhbHVlUGFydHMiLCJ0d2VlbiIsImFkanVzdGVkIiwic2NhbGUiLCJtYXhJdGVyYXRpb25zIiwiY3VycmVudFZhbHVlIiwiY3NzIiwiaW5pdGlhbCIsInVuaXQiLCJjc3NOdW1iZXIiLCJpbml0aWFsSW5Vbml0IiwicmNzc051bSIsInN0YXJ0IiwiZ2V0RGVmYXVsdERpc3BsYXkiLCJ0ZW1wIiwib3duZXJEb2N1bWVudCIsImRlZmF1bHREaXNwbGF5TWFwIiwiYm9keSIsInNob3dIaWRlIiwic2hvdyIsImRhdGFQcml2IiwiaXNIaWRkZW5XaXRoaW5UcmVlIiwiZ2V0QWxsIiwidGFnIiwicmV0IiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJxdWVyeVNlbGVjdG9yQWxsIiwic2V0R2xvYmFsRXZhbCIsImVsZW1zIiwicmVmRWxlbWVudHMiLCJidWlsZEZyYWdtZW50Iiwic2NyaXB0cyIsInNlbGVjdGlvbiIsImlnbm9yZWQiLCJ0bXAiLCJ3cmFwIiwiYXR0YWNoZWQiLCJmcmFnbWVudCIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJub2RlcyIsInJodG1sIiwicnRhZ05hbWUiLCJ3cmFwTWFwIiwiX2RlZmF1bHQiLCJpbm5lckhUTUwiLCJodG1sUHJlZmlsdGVyIiwibGFzdENoaWxkIiwiY2hpbGROb2RlcyIsImZpcnN0Q2hpbGQiLCJ0ZXh0Q29udGVudCIsImNyZWF0ZVRleHROb2RlIiwiaW5BcnJheSIsImlzQXR0YWNoZWQiLCJyc2NyaXB0VHlwZSIsInJldHVyblRydWUiLCJyZXR1cm5GYWxzZSIsImV4cGVjdFN5bmMiLCJhY3RpdmVFbGVtZW50Iiwic2FmZUFjdGl2ZUVsZW1lbnQiLCJ0eXBlcyIsInNlbGVjdG9yIiwib25lIiwib3JpZ0ZuIiwiZ3VpZCIsImVhY2giLCJhZGQiLCJsZXZlcmFnZU5hdGl2ZSIsIm5hbWVzcGFjZSIsImhhbmRsZXIiLCJub3RBc3luYyIsInNhdmVkIiwiaXNUcmlnZ2VyIiwic3BlY2lhbCIsImRlbGVnYXRlVHlwZSIsInN0b3BQcm9wYWdhdGlvbiIsInN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbiIsInRyaWdnZXIiLCJFdmVudCIsIm1hbmlwdWxhdGlvblRhcmdldCIsImRpc2FibGVTY3JpcHQiLCJyZXN0b3JlU2NyaXB0IiwicmVtb3ZlQXR0cmlidXRlIiwiY2xvbmVDb3B5RXZlbnQiLCJkZXN0IiwicGRhdGFPbGQiLCJwZGF0YUN1ciIsInVkYXRhT2xkIiwidWRhdGFDdXIiLCJldmVudHMiLCJoYXNEYXRhIiwiYWNjZXNzIiwiaGFuZGxlIiwiZG9tTWFuaXAiLCJjb2xsZWN0aW9uIiwiZmlyc3QiLCJoYXNTY3JpcHRzIiwiaU5vQ2xvbmUiLCJ2YWx1ZUlzRnVuY3Rpb24iLCJzdXBwb3J0IiwiY2hlY2tDbG9uZSIsInJjaGVja2VkIiwiZXEiLCJodG1sIiwiY2xvbmUiLCJjb250YWlucyIsIl9ldmFsVXJsIiwibm9Nb2R1bGUiLCJub25jZSIsInJjbGVhblNjcmlwdCIsImtlZXBEYXRhIiwiY2xlYW5EYXRhIiwiY3VyQ1NTIiwiY29tcHV0ZWQiLCJtaW5XaWR0aCIsIm1heFdpZHRoIiwiZ2V0U3R5bGVzIiwiZ2V0UHJvcGVydHlWYWx1ZSIsInBpeGVsQm94U3R5bGVzIiwicm51bW5vbnB4IiwicmJveFN0eWxlIiwiYWRkR2V0SG9va0lmIiwiY29uZGl0aW9uRm4iLCJob29rRm4iLCJmaW5hbFByb3BOYW1lIiwiZmluYWwiLCJjc3NQcm9wcyIsInZlbmRvclByb3BzIiwiZW1wdHlTdHlsZSIsImNhcE5hbWUiLCJjc3NQcmVmaXhlcyIsInZlbmRvclByb3BOYW1lIiwic2V0UG9zaXRpdmVOdW1iZXIiLCJzdWJ0cmFjdCIsImJveE1vZGVsQWRqdXN0bWVudCIsImRpbWVuc2lvbiIsImJveCIsImlzQm9yZGVyQm94IiwiY29tcHV0ZWRWYWwiLCJleHRyYSIsImNzc0V4cGFuZCIsImNlaWwiLCJnZXRXaWR0aE9ySGVpZ2h0IiwiYm94U2l6aW5nTmVlZGVkIiwiYm94U2l6aW5nUmVsaWFibGUiLCJ2YWx1ZUlzQm9yZGVyQm94Iiwib2Zmc2V0UHJvcCIsInBhcnNlRmxvYXQiLCJnZXRDbGllbnRSZWN0cyIsIlR3ZWVuIiwiZWFzaW5nIiwiaW5pdCIsInNjaGVkdWxlIiwiaW5Qcm9ncmVzcyIsImhpZGRlbiIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImZ4IiwiaW50ZXJ2YWwiLCJ0aWNrIiwiY3JlYXRlRnhOb3ciLCJmeE5vdyIsImdlbkZ4IiwiaW5jbHVkZVdpZHRoIiwid2hpY2giLCJhdHRycyIsIm9wYWNpdHkiLCJjcmVhdGVUd2VlbiIsImFuaW1hdGlvbiIsIkFuaW1hdGlvbiIsInR3ZWVuZXJzIiwic3RvcHBlZCIsInByZWZpbHRlcnMiLCJkZWZlcnJlZCIsIkRlZmVycmVkIiwiYWx3YXlzIiwiY3VycmVudFRpbWUiLCJyZW1haW5pbmciLCJzdGFydFRpbWUiLCJkdXJhdGlvbiIsInBlcmNlbnQiLCJ0d2VlbnMiLCJub3RpZnlXaXRoIiwicmVzb2x2ZVdpdGgiLCJzcGVjaWFsRWFzaW5nIiwib3JpZ2luYWxQcm9wZXJ0aWVzIiwib3JpZ2luYWxPcHRpb25zIiwic3RvcCIsImdvdG9FbmQiLCJyZWplY3RXaXRoIiwiaG9va3MiLCJjc3NIb29rcyIsImV4cGFuZCIsInByb3BGaWx0ZXIiLCJfcXVldWVIb29rcyIsInByb2dyZXNzIiwiY29tcGxldGUiLCJ0aW1lciIsImFuaW0iLCJzdHJpcEFuZENvbGxhcHNlIiwicm5vdGh0bWx3aGl0ZSIsImdldENsYXNzIiwiY2xhc3Nlc1RvQXJyYXkiLCJidWlsZFBhcmFtcyIsInRyYWRpdGlvbmFsIiwicmJyYWNrZXQiLCJhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMiLCJzdHJ1Y3R1cmUiLCJkYXRhVHlwZUV4cHJlc3Npb24iLCJkYXRhVHlwZSIsImRhdGFUeXBlcyIsImluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzIiwianFYSFIiLCJpbnNwZWN0Iiwic2VsZWN0ZWQiLCJpbnNwZWN0ZWQiLCJfIiwicHJlZmlsdGVyT3JGYWN0b3J5IiwiZGF0YVR5cGVPclRyYW5zcG9ydCIsInNlZWtpbmdUcmFuc3BvcnQiLCJ0cmFuc3BvcnRzIiwiYWpheEV4dGVuZCIsImRlZXAiLCJmbGF0T3B0aW9ucyIsImFqYXhTZXR0aW5ncyIsImdldFByb3RvIiwiaGFzT3duIiwiZm5Ub1N0cmluZyIsIk9iamVjdEZ1bmN0aW9uU3RyaW5nIiwicnRyaW0iLCJqcXVlcnkiLCJ0b0FycmF5IiwibnVtIiwicHVzaFN0YWNrIiwicHJldk9iamVjdCIsInNvcnQiLCJjb3B5IiwiY29weUlzQXJyYXkiLCJpc1BsYWluT2JqZWN0IiwiaXNSZWFkeSIsInByb3RvIiwiQ3RvciIsImlzRW1wdHlPYmplY3QiLCJnbG9iYWxFdmFsIiwibWFrZUFycmF5IiwiaW52ZXJ0IiwiY2FsbGJhY2tFeHBlY3QiLCJTaXp6bGUiLCJzZWVkIiwibmlkIiwibmV3U2VsZWN0b3IiLCJuZXdDb250ZXh0IiwicHJlZmVycmVkRG9jIiwic2V0RG9jdW1lbnQiLCJkb2N1bWVudElzSFRNTCIsInJxdWlja0V4cHIiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwicXNhIiwibm9ubmF0aXZlU2VsZWN0b3JDYWNoZSIsInJidWdneVFTQSIsInJkZXNjZW5kIiwicmNzc2VzY2FwZSIsImZjc3Nlc2NhcGUiLCJ0b2tlbml6ZSIsInRvU2VsZWN0b3IiLCJyc2libGluZyIsInRlc3RDb250ZXh0IiwicXNhRXJyb3IiLCJzZWxlY3QiLCJjcmVhdGVDYWNoZSIsIkV4cHIiLCJjYWNoZUxlbmd0aCIsIm1hcmtGdW5jdGlvbiIsImFzc2VydCIsImFkZEhhbmRsZSIsImF0dHJIYW5kbGUiLCJzaWJsaW5nQ2hlY2siLCJkaWZmIiwic291cmNlSW5kZXgiLCJuZXh0U2libGluZyIsImNyZWF0ZURpc2FibGVkUHNldWRvIiwiZGlzYWJsZWQiLCJpc0Rpc2FibGVkIiwiaW5EaXNhYmxlZEZpZWxkc2V0IiwiY3JlYXRlUG9zaXRpb25hbFBzZXVkbyIsImFyZ3VtZW50IiwibWF0Y2hJbmRleGVzIiwic2V0RmlsdGVycyIsImFkZENvbWJpbmF0b3IiLCJtYXRjaGVyIiwiY29tYmluYXRvciIsInNraXAiLCJjaGVja05vbkVsZW1lbnRzIiwiZG9uZU5hbWUiLCJ4bWwiLCJvbGRDYWNoZSIsInVuaXF1ZUNhY2hlIiwib3V0ZXJDYWNoZSIsIm5ld0NhY2hlIiwiZGlycnVucyIsInVuaXF1ZUlEIiwiZWxlbWVudE1hdGNoZXIiLCJtYXRjaGVycyIsImNvbmRlbnNlIiwidW5tYXRjaGVkIiwibmV3VW5tYXRjaGVkIiwibWFwcGVkIiwic2V0TWF0Y2hlciIsInByZUZpbHRlciIsInBvc3RGaWx0ZXIiLCJwb3N0RmluZGVyIiwicG9zdFNlbGVjdG9yIiwicHJlTWFwIiwicG9zdE1hcCIsInByZWV4aXN0aW5nIiwiY29udGV4dHMiLCJtdWx0aXBsZUNvbnRleHRzIiwibWF0Y2hlckluIiwibWF0Y2hlck91dCIsIm1hdGNoZXJGcm9tVG9rZW5zIiwiY2hlY2tDb250ZXh0IiwibGVhZGluZ1JlbGF0aXZlIiwicmVsYXRpdmUiLCJpbXBsaWNpdFJlbGF0aXZlIiwibWF0Y2hDb250ZXh0IiwibWF0Y2hBbnlDb250ZXh0Iiwib3V0ZXJtb3N0Q29udGV4dCIsImdldFRleHQiLCJpc1hNTCIsInNvcnRJbnB1dCIsImhhc0R1cGxpY2F0ZSIsImRvY0VsZW0iLCJyYnVnZ3lNYXRjaGVzIiwiY2xhc3NDYWNoZSIsInRva2VuQ2FjaGUiLCJjb21waWxlckNhY2hlIiwic29ydE9yZGVyIiwicHVzaF9uYXRpdmUiLCJib29sZWFucyIsIndoaXRlc3BhY2UiLCJpZGVudGlmaWVyIiwiYXR0cmlidXRlcyIsInBzZXVkb3MiLCJyd2hpdGVzcGFjZSIsInJjb21tYSIsInJjb21iaW5hdG9ycyIsInJwc2V1ZG8iLCJyaWRlbnRpZmllciIsIm1hdGNoRXhwciIsIklEIiwiQ0xBU1MiLCJUQUciLCJBVFRSIiwiUFNFVURPIiwiQ0hJTEQiLCJuZWVkc0NvbnRleHQiLCJyaW5wdXRzIiwicmhlYWRlciIsInJuYXRpdmUiLCJydW5lc2NhcGUiLCJmdW5lc2NhcGUiLCJlc2NhcGVkV2hpdGVzcGFjZSIsImhpZ2giLCJjaCIsImFzQ29kZVBvaW50IiwidW5sb2FkSGFuZGxlciIsImVscyIsIm5hbWVzcGFjZVVSSSIsImRvY3VtZW50RWxlbWVudCIsImhhc0NvbXBhcmUiLCJzdWJXaW5kb3ciLCJkZWZhdWx0VmlldyIsInRvcCIsImNyZWF0ZUNvbW1lbnQiLCJnZXRCeUlkIiwiZ2V0RWxlbWVudHNCeU5hbWUiLCJhdHRySWQiLCJmaW5kIiwiZ2V0QXR0cmlidXRlTm9kZSIsIm1hdGNoZXNTZWxlY3RvciIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsIm1vek1hdGNoZXNTZWxlY3RvciIsIm9NYXRjaGVzU2VsZWN0b3IiLCJtc01hdGNoZXNTZWxlY3RvciIsImRpc2Nvbm5lY3RlZE1hdGNoIiwiY29tcGFyZURvY3VtZW50UG9zaXRpb24iLCJhZG93biIsImJ1cCIsImNvbXBhcmUiLCJzb3J0RGV0YWNoZWQiLCJhdXAiLCJhcCIsImJwIiwiZXhwciIsImF0dHIiLCJzcGVjaWZpZWQiLCJlc2NhcGUiLCJzZWwiLCJ1bmlxdWVTb3J0IiwiZHVwbGljYXRlcyIsImRldGVjdER1cGxpY2F0ZXMiLCJzb3J0U3RhYmxlIiwibm9kZVZhbHVlIiwic2VsZWN0b3JzIiwiY3JlYXRlUHNldWRvIiwiPiIsIiAiLCIrIiwifiIsImV4Y2VzcyIsInVucXVvdGVkIiwibm9kZU5hbWVTZWxlY3RvciIsIm9wZXJhdG9yIiwiY2hlY2siLCJ3aGF0Iiwic2ltcGxlIiwiZm9yd2FyZCIsIm9mVHlwZSIsIm5vZGVJbmRleCIsInBhcmVudCIsInVzZUNhY2hlIiwicHNldWRvIiwibWF0Y2hlZCIsImhhcyIsImxhbmciLCJlbGVtTGFuZyIsImhhc0ZvY3VzIiwidGFiSW5kZXgiLCJlbmFibGVkIiwiY2hlY2tlZCIsInNlbGVjdGVkSW5kZXgiLCJlbXB0eSIsImhlYWRlciIsImV2ZW4iLCJvZGQiLCJsdCIsImd0IiwibnRoIiwicmFkaW8iLCJjaGVja2JveCIsImZpbGUiLCJpbWFnZSIsInN1Ym1pdCIsInJlc2V0IiwiZmlsdGVycyIsInBhcnNlT25seSIsInNvRmFyIiwicHJlRmlsdGVycyIsImNhY2hlZCIsInNldE1hdGNoZXJzIiwiZWxlbWVudE1hdGNoZXJzIiwiYnlTZXQiLCJieUVsZW1lbnQiLCJzdXBlck1hdGNoZXIiLCJvdXRlcm1vc3QiLCJtYXRjaGVkQ291bnQiLCJzZXRNYXRjaGVkIiwiY29udGV4dEJhY2t1cCIsImRpcnJ1bnNVbmlxdWUiLCJtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMiLCJjb21waWxlZCIsImRlZmF1bHRWYWx1ZSIsInVuaXF1ZSIsImlzWE1MRG9jIiwiZXNjYXBlU2VsZWN0b3IiLCJ1bnRpbCIsInRydW5jYXRlIiwiaXMiLCJzaWJsaW5ncyIsInJuZWVkc0NvbnRleHQiLCJyc2luZ2xlVGFnIiwicm9vdGpRdWVyeSIsInBhcnNlSFRNTCIsInJwYXJlbnRzcHJldiIsImd1YXJhbnRlZWRVbmlxdWUiLCJjb250ZW50cyIsInByZXYiLCJ0YXJnZXRzIiwiY2xvc2VzdCIsInByZXZBbGwiLCJhZGRCYWNrIiwicGFyZW50cyIsInBhcmVudHNVbnRpbCIsIm5leHRBbGwiLCJuZXh0VW50aWwiLCJwcmV2VW50aWwiLCJjb250ZW50RG9jdW1lbnQiLCJyZXZlcnNlIiwiQ2FsbGJhY2tzIiwiZmxhZyIsImNyZWF0ZU9wdGlvbnMiLCJmaXJpbmciLCJtZW1vcnkiLCJmaXJlZCIsImxvY2tlZCIsImZpcmluZ0luZGV4IiwiZmlyZSIsInN0b3BPbkZhbHNlIiwibG9jayIsImZpcmVXaXRoIiwidHVwbGVzIiwiY2F0Y2giLCJuZXdEZWZlciIsInR1cGxlIiwicmV0dXJuZWQiLCJub3RpZnkiLCJvbkZ1bGZpbGxlZCIsIm9uUmVqZWN0ZWQiLCJvblByb2dyZXNzIiwiZGVwdGgiLCJ0aGF0IiwibWlnaHRUaHJvdyIsIm1heERlcHRoIiwiZXhjZXB0aW9uSG9vayIsInN0YWNrVHJhY2UiLCJnZXRTdGFja0hvb2siLCJzdGF0ZVN0cmluZyIsInNpbmdsZVZhbHVlIiwicmVzb2x2ZUNvbnRleHRzIiwicmVzb2x2ZVZhbHVlcyIsIm1hc3RlciIsInVwZGF0ZUZ1bmMiLCJyZXJyb3JOYW1lcyIsInN0YWNrIiwid2FybiIsInJlYWR5RXhjZXB0aW9uIiwicmVhZHlMaXN0IiwicmVhZHlXYWl0Iiwid2FpdCIsImRvU2Nyb2xsIiwiY2hhaW5hYmxlIiwiZW1wdHlHZXQiLCJyYXciLCJidWxrIiwiYWNjZXB0RGF0YSIsIm93bmVyIiwicmVtb3ZlRGF0YSIsIl9kYXRhIiwiX3JlbW92ZURhdGEiLCJkZXF1ZXVlIiwic3RhcnRMZW5ndGgiLCJzZXR0ZXIiLCJjbGVhclF1ZXVlIiwiZGVmZXIiLCJwbnVtIiwiY29tcG9zZWQiLCJnZXRSb290Tm9kZSIsInN3YXAiLCJvbGQiLCJoaWRlIiwidG9nZ2xlIiwicmNoZWNrYWJsZVR5cGUiLCJvcHRpb24iLCJ0aGVhZCIsImNvbCIsInRyIiwidGQiLCJvcHRncm91cCIsInRib2R5IiwidGZvb3QiLCJjb2xncm91cCIsImNhcHRpb24iLCJ0aCIsImRpdiIsImNsb25lTm9kZSIsIm5vQ2xvbmVDaGVja2VkIiwicmtleUV2ZW50Iiwicm1vdXNlRXZlbnQiLCJydHlwZW5hbWVzcGFjZSIsImhhbmRsZU9iakluIiwiZXZlbnRIYW5kbGUiLCJoYW5kbGVPYmoiLCJuYW1lc3BhY2VzIiwib3JpZ1R5cGUiLCJlbGVtRGF0YSIsInRyaWdnZXJlZCIsImRpc3BhdGNoIiwiYmluZFR5cGUiLCJkZWxlZ2F0ZUNvdW50Iiwic2V0dXAiLCJtYXBwZWRUeXBlcyIsIm9yaWdDb3VudCIsInRlYXJkb3duIiwicmVtb3ZlRXZlbnQiLCJuYXRpdmVFdmVudCIsImhhbmRsZXJRdWV1ZSIsImZpeCIsImRlbGVnYXRlVGFyZ2V0IiwicHJlRGlzcGF0Y2giLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsImN1cnJlbnRUYXJnZXQiLCJpc0ltbWVkaWF0ZVByb3BhZ2F0aW9uU3RvcHBlZCIsInJuYW1lc3BhY2UiLCJwb3N0RGlzcGF0Y2giLCJtYXRjaGVkSGFuZGxlcnMiLCJtYXRjaGVkU2VsZWN0b3JzIiwiYWRkUHJvcCIsImhvb2siLCJvcmlnaW5hbEV2ZW50IiwibG9hZCIsIm5vQnViYmxlIiwiY2xpY2siLCJiZWZvcmV1bmxvYWQiLCJyZXR1cm5WYWx1ZSIsImlzRGVmYXVsdFByZXZlbnRlZCIsInJlbGF0ZWRUYXJnZXQiLCJ0aW1lU3RhbXAiLCJpc1NpbXVsYXRlZCIsImJ1YmJsZXMiLCJjYW5jZWxhYmxlIiwiY2hhbmdlZFRvdWNoZXMiLCJkZXRhaWwiLCJldmVudFBoYXNlIiwicGFnZVgiLCJwYWdlWSIsInZpZXciLCJjaGFyIiwiYnV0dG9ucyIsImNsaWVudFgiLCJjbGllbnRZIiwib2Zmc2V0WCIsIm9mZnNldFkiLCJwb2ludGVySWQiLCJwb2ludGVyVHlwZSIsInNjcmVlblgiLCJzY3JlZW5ZIiwidGFyZ2V0VG91Y2hlcyIsInRvRWxlbWVudCIsInRvdWNoZXMiLCJibHVyIiwibW91c2VlbnRlciIsIm1vdXNlbGVhdmUiLCJwb2ludGVyZW50ZXIiLCJwb2ludGVybGVhdmUiLCJvcmlnIiwicmVsYXRlZCIsInJ4aHRtbFRhZyIsInJub0lubmVyaHRtbCIsImRhdGFBbmRFdmVudHMiLCJkZWVwRGF0YUFuZEV2ZW50cyIsInNyY0VsZW1lbnRzIiwiZGVzdEVsZW1lbnRzIiwiaW5QYWdlIiwiZGV0YWNoIiwicHJlcGVuZCIsImluc2VydEJlZm9yZSIsImJlZm9yZSIsImFmdGVyIiwicmVwbGFjZVdpdGgiLCJyZXBsYWNlQ2hpbGQiLCJhcHBlbmRUbyIsInByZXBlbmRUbyIsImluc2VydEFmdGVyIiwicmVwbGFjZUFsbCIsIm9yaWdpbmFsIiwiaW5zZXJ0Iiwib3BlbmVyIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsImNvbXB1dGVTdHlsZVRlc3RzIiwiY29udGFpbmVyIiwiY3NzVGV4dCIsImRpdlN0eWxlIiwicGl4ZWxQb3NpdGlvblZhbCIsInJlbGlhYmxlTWFyZ2luTGVmdFZhbCIsInJvdW5kUGl4ZWxNZWFzdXJlcyIsIm1hcmdpbkxlZnQiLCJyaWdodCIsInBpeGVsQm94U3R5bGVzVmFsIiwiYm94U2l6aW5nUmVsaWFibGVWYWwiLCJzY3JvbGxib3hTaXplVmFsIiwib2Zmc2V0V2lkdGgiLCJtZWFzdXJlIiwicm91bmQiLCJiYWNrZ3JvdW5kQ2xpcCIsImNsZWFyQ2xvbmVTdHlsZSIsInBpeGVsUG9zaXRpb24iLCJyZWxpYWJsZU1hcmdpbkxlZnQiLCJzY3JvbGxib3hTaXplIiwicmRpc3BsYXlzd2FwIiwicmN1c3RvbVByb3AiLCJjc3NTaG93IiwidmlzaWJpbGl0eSIsImNzc05vcm1hbFRyYW5zZm9ybSIsImxldHRlclNwYWNpbmciLCJmb250V2VpZ2h0IiwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQiLCJjb2x1bW5Db3VudCIsImZpbGxPcGFjaXR5IiwiZmxleEdyb3ciLCJmbGV4U2hyaW5rIiwiZ3JpZEFyZWEiLCJncmlkQ29sdW1uIiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5TdGFydCIsImdyaWRSb3ciLCJncmlkUm93RW5kIiwiZ3JpZFJvd1N0YXJ0IiwibGluZUhlaWdodCIsIm9yZGVyIiwib3JwaGFucyIsIndpZG93cyIsInpJbmRleCIsInpvb20iLCJvcmlnTmFtZSIsImlzQ3VzdG9tUHJvcCIsInNldFByb3BlcnR5IiwiaXNGaW5pdGUiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJzY3JvbGxib3hTaXplQnVnZ3kiLCJsZWZ0IiwibWFyZ2luIiwicGFkZGluZyIsImJvcmRlciIsInN1ZmZpeCIsImV4cGFuZGVkIiwicHJvcEhvb2tzIiwiZWFzZWQiLCJwb3MiLCJzdGVwIiwic2Nyb2xsVG9wIiwic2Nyb2xsTGVmdCIsImxpbmVhciIsInN3aW5nIiwiY29zIiwicmZ4dHlwZXMiLCJycnVuIiwiKiIsInR3ZWVuZXIiLCJvbGRmaXJlIiwicHJvcFR3ZWVuIiwicmVzdG9yZURpc3BsYXkiLCJpc0JveCIsImRhdGFTaG93IiwidW5xdWV1ZWQiLCJvdmVyZmxvdyIsIm92ZXJmbG93WCIsIm92ZXJmbG93WSIsInByZWZpbHRlciIsInNwZWVkIiwib3B0Iiwic3BlZWRzIiwiZmFkZVRvIiwiYW5pbWF0ZSIsIm9wdGFsbCIsImRvQW5pbWF0aW9uIiwiZmluaXNoIiwic3RvcFF1ZXVlIiwidGltZXJzIiwiY3NzRm4iLCJzbGlkZURvd24iLCJzbGlkZVVwIiwic2xpZGVUb2dnbGUiLCJmYWRlSW4iLCJmYWRlT3V0IiwiZmFkZVRvZ2dsZSIsInNsb3ciLCJmYXN0IiwiZGVsYXkiLCJjaGVja09uIiwib3B0U2VsZWN0ZWQiLCJyYWRpb1ZhbHVlIiwiYm9vbEhvb2siLCJyZW1vdmVBdHRyIiwiblR5cGUiLCJhdHRySG9va3MiLCJhdHRyTmFtZXMiLCJsb3dlcmNhc2VOYW1lIiwicmZvY3VzYWJsZSIsInJjbGlja2FibGUiLCJyZW1vdmVQcm9wIiwicHJvcEZpeCIsInRhYmluZGV4IiwicGFyc2VJbnQiLCJmb3IiLCJjbGFzcyIsImFkZENsYXNzIiwiY2xhc3NlcyIsImN1clZhbHVlIiwiY2xhenoiLCJmaW5hbFZhbHVlIiwicmVtb3ZlQ2xhc3MiLCJ0b2dnbGVDbGFzcyIsInN0YXRlVmFsIiwiaXNWYWxpZFZhbHVlIiwiY2xhc3NOYW1lcyIsImhhc0NsYXNzIiwicnJldHVybiIsInZhbEhvb2tzIiwib3B0aW9uU2V0IiwiZm9jdXNpbiIsInJmb2N1c01vcnBoIiwic3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2siLCJvbmx5SGFuZGxlcnMiLCJidWJibGVUeXBlIiwib250eXBlIiwibGFzdEVsZW1lbnQiLCJldmVudFBhdGgiLCJwYXJlbnRXaW5kb3ciLCJzaW11bGF0ZSIsInRyaWdnZXJIYW5kbGVyIiwiYXR0YWNoZXMiLCJycXVlcnkiLCJwYXJzZVhNTCIsIkRPTVBhcnNlciIsInBhcnNlRnJvbVN0cmluZyIsInJDUkxGIiwicnN1Ym1pdHRlclR5cGVzIiwicnN1Ym1pdHRhYmxlIiwicGFyYW0iLCJ2YWx1ZU9yRnVuY3Rpb24iLCJzZXJpYWxpemUiLCJzZXJpYWxpemVBcnJheSIsInIyMCIsInJoYXNoIiwicmFudGlDYWNoZSIsInJoZWFkZXJzIiwicm5vQ29udGVudCIsInJwcm90b2NvbCIsImFsbFR5cGVzIiwib3JpZ2luQW5jaG9yIiwibGFzdE1vZGlmaWVkIiwiZXRhZyIsImlzTG9jYWwiLCJwcm9jZXNzRGF0YSIsImFzeW5jIiwiY29udGVudFR5cGUiLCJhY2NlcHRzIiwianNvbiIsInJlc3BvbnNlRmllbGRzIiwiY29udmVydGVycyIsIiogdGV4dCIsInRleHQgaHRtbCIsInRleHQganNvbiIsInRleHQgeG1sIiwiYWpheFNldHVwIiwic2V0dGluZ3MiLCJhamF4UHJlZmlsdGVyIiwiYWpheFRyYW5zcG9ydCIsImFqYXgiLCJuYXRpdmVTdGF0dXNUZXh0IiwicmVzcG9uc2VzIiwiaXNTdWNjZXNzIiwic3VjY2VzcyIsIm1vZGlmaWVkIiwidGltZW91dFRpbWVyIiwidHJhbnNwb3J0IiwicmVzcG9uc2VIZWFkZXJzU3RyaW5nIiwiY3QiLCJmaW5hbERhdGFUeXBlIiwiZmlyc3REYXRhVHlwZSIsIm1pbWVUeXBlIiwiZ2V0UmVzcG9uc2VIZWFkZXIiLCJhamF4SGFuZGxlUmVzcG9uc2VzIiwiY29udjIiLCJjdXJyZW50IiwiY29udiIsImRhdGFGaWx0ZXIiLCJ0aHJvd3MiLCJhamF4Q29udmVydCIsImlmTW9kaWZpZWQiLCJjYWNoZVVSTCIsImNhbGxiYWNrQ29udGV4dCIsInN0YXR1c0NvZGUiLCJmaXJlR2xvYmFscyIsImdsb2JhbEV2ZW50Q29udGV4dCIsImNvbXBsZXRlRGVmZXJyZWQiLCJ1cmxBbmNob3IiLCJ1bmNhY2hlZCIsInJlcXVlc3RIZWFkZXJzTmFtZXMiLCJzdHJBYm9ydCIsIm92ZXJyaWRlTWltZVR5cGUiLCJmaW5hbFRleHQiLCJjcm9zc0RvbWFpbiIsImhhc0NvbnRlbnQiLCJiZWZvcmVTZW5kIiwiZ2V0SlNPTiIsImdldFNjcmlwdCIsInRleHQgc2NyaXB0Iiwid3JhcEFsbCIsImZpcnN0RWxlbWVudENoaWxkIiwid3JhcElubmVyIiwiaHRtbElzRnVuY3Rpb24iLCJ1bndyYXAiLCJ2aXNpYmxlIiwib2Zmc2V0SGVpZ2h0IiwieGhyIiwieGhyU3VjY2Vzc1N0YXR1cyIsIjAiLCIxMjIzIiwieGhyU3VwcG9ydGVkIiwiY29ycyIsImVycm9yQ2FsbGJhY2siLCJ4aHJGaWVsZHMiLCJvbmxvYWQiLCJvbmFib3J0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwiYmluYXJ5Iiwic2NyaXB0QXR0cnMiLCJjaGFyc2V0Iiwic2NyaXB0Q2hhcnNldCIsImV2dCIsIm9sZENhbGxiYWNrcyIsInJqc29ucCIsImpzb25wIiwianNvbnBDYWxsYmFjayIsIm9yaWdpbmFsU2V0dGluZ3MiLCJjYWxsYmFja05hbWUiLCJvdmVyd3JpdHRlbiIsInJlc3BvbnNlQ29udGFpbmVyIiwianNvblByb3AiLCJjcmVhdGVIVE1MRG9jdW1lbnQiLCJpbXBsZW1lbnRhdGlvbiIsImtlZXBTY3JpcHRzIiwiYW5pbWF0ZWQiLCJzZXRPZmZzZXQiLCJjdXJQb3NpdGlvbiIsImN1ckxlZnQiLCJjdXJDU1NUb3AiLCJjdXJUb3AiLCJjdXJPZmZzZXQiLCJjdXJDU1NMZWZ0IiwiY3VyRWxlbSIsInVzaW5nIiwicmVjdCIsIndpbiIsInBhZ2VZT2Zmc2V0IiwicGFnZVhPZmZzZXQiLCJvZmZzZXRQYXJlbnQiLCJwYXJlbnRPZmZzZXQiLCJzY3JvbGxUbyIsIkhlaWdodCIsIldpZHRoIiwiIiwiZGVmYXVsdEV4dHJhIiwiZnVuY05hbWUiLCJob3ZlciIsImZuT3ZlciIsImZuT3V0IiwidW5iaW5kIiwiZGVsZWdhdGUiLCJ1bmRlbGVnYXRlIiwicHJveHkiLCJob2xkUmVhZHkiLCJob2xkIiwicGFyc2VKU09OIiwiaXNOdW1lcmljIiwiaXNOYU4iLCJfalF1ZXJ5IiwiXyQiLCIkIiwibm9Db25mbGljdCIsIl9yaW5nIiwiX2Nsb2NrSGFuZCIsIl9jaXJjbGUiLCJfZmFjZUNvbmZpZyIsIl9pc0JvcmRlckZpbGxlZCIsIl9ob3VySGFuZCIsIkNsb2NrSGFuZCIsIl9taW51dGVIYW5kIiwiX3NlY29uZEhhbmQiLCJfY2VudGVySGluZ2UiLCJfb3V0ZXJDaXJjbGUiLCJpc0ZyYW1lR3JhZGllbnQiLCJjb2xvckdyYWRpZW50U3RvcFBvaW50cyIsImdyYWQiLCJjcmVhdGVSYWRpYWxHcmFkaWVudCIsInJhdGlvIiwiYWRkQ29sb3JTdG9wIiwic3Ryb2tlU3R5bGUiLCJsaW5lV2lkdGgiLCJzdHJva2UiLCJjb2xvciIsImZyYW1lQ29sb3IiLCJSaW5nIiwiZHJhd051bWJlcnMiLCJhbmciLCJmb250IiwidGV4dEJhc2VsaW5lIiwidGV4dEFsaWduIiwibnVtYmVyQ29sb3JzIiwicm90YXRlIiwiZmlsbFRleHQiLCJpbm5lclJhZGl1cyIsIm91dGVyUmFkaXVzIiwiaXNSaW5nRmlsbGVkIiwiX2lubmVyUmFkaXVzIiwiX291dGVyUmFkaXVzIiwiX2lzUmluZ0ZpbGxlZCIsIl9jb2xvciIsImF2Z1JhZGl1cyIsImlubmVyQ2lyY2xlIiwib3V0ZXJDaXJjbGUiLCJfcG9zaXRpb24iLCJfbGVuZ3RoIiwiX3dpZHRoIiwiX2ZpbGxDb2xvciIsImxpbmVDYXAiLCJtb3ZlVG8iLCJsaW5lVG8iLCJGQUNFXzAiLCJGQUNFXzEiLCJGQUNFXzIiLCJGQUNFXzMiLCIxIiwiMiIsIjMiLCI0IiwiNSIsIjYiLCI3IiwiOCIsIjkiLCIxMCIsIjExIiwiMTIiLCJGQUNFXzQiLCJKc0Nsb2NrIiwiTWFpblBhZ2UiLCJzaWRlQmFyU3Vic3JpcHRpb24iLCJzaWRlQmFyTGlua0NsaWNrZWQiLCJpc1Njcm9sbGVkRG93blN1YnNjcmlwdGlvbiIsIm5ld3NQYW5lbEZldGNoTW9yZURhdGEiLCJib3R0b20iLCJpbm5lckhlaWdodCIsInBhZ2VCb2R5RWxlbWVudCIsIl9zaWRlYmFyMiIsIndlYnBhY2tQb2x5ZmlsbCIsImRlcHJlY2F0ZSIsInBhdGhzIiwiX3JlYWN0Um91dGVyRG9tIiwiUGFnZUJvZHkiLCJwYWdlU2Nyb2xsZWQiLCJsYXN0U2Nyb2xsVGltZSIsInNjcm9sbFkiLCJIRUFERVJfTElOS1MiLCJhZGRyZXNzIiwiU0lURV9USVRMRSIsIl9oZWFkZXIiLCJIZWFkZXIiLCJhY3RpdmVMaW5rSWQiLCJoZWFkZXJMaW5rQ2xpY2tlZCIsImdldEhlYWRlckxpbmtzIiwibGlua1VuaXF1ZUtleSIsImxpbmtPYmoiLCJkYXRhLXRhcmdldCIsImFyaWEtY29udHJvbHMiLCJhcmlhLWV4cGFuZGVkIiwiaW52YXJpYW50IiwiUmVhY3RQcm9wVHlwZXNTZWNyZXQiLCJzaGltIiwicHJvcE5hbWUiLCJjb21wb25lbnROYW1lIiwicHJvcEZ1bGxOYW1lIiwic2VjcmV0IiwiZ2V0U2hpbSIsIlJlYWN0UHJvcFR5cGVzIiwic3ltYm9sIiwiYW55IiwiYXJyYXlPZiIsImluc3RhbmNlT2YiLCJvYmplY3RPZiIsImNoZWNrUHJvcFR5cGVzIiwiUHJvcFR5cGVzIiwiTGF5b3V0IiwiX2hlYWRlcjIiLCJfcGFnZUJvZHkyIiwiTm9kZSIsImlzTm9kZSIsImlzVGV4dE5vZGUiLCJjb250YWluc05vZGUiLCJvdXRlck5vZGUiLCJpbm5lck5vZGUiLCJ4IiwieSIsIm9iakEiLCJvYmpCIiwia2V5c0EiLCJrZXlzQiIsIkV4ZWN1dGlvbkVudmlyb25tZW50IiwiY2FuVXNlV29ya2VycyIsIldvcmtlciIsImNhblVzZUV2ZW50TGlzdGVuZXJzIiwiY2FuVXNlVmlld3BvcnQiLCJzY3JlZW4iLCJpc0luV29ya2VyIiwiYmEiLCJlYSIsIkEiLCJmYSIsImhhIiwiamEiLCJrYSIsIkQiLCJfY2F1Z2h0RXJyb3IiLCJfaGFzQ2F1Z2h0RXJyb3IiLCJfcmV0aHJvd0Vycm9yIiwiX2hhc1JldGhyb3dFcnJvciIsImludm9rZUd1YXJkZWRDYWxsYmFjayIsImciLCJpbnZva2VHdWFyZGVkQ2FsbGJhY2tBbmRDYXRjaEZpcnN0RXJyb3IiLCJoYXNDYXVnaHRFcnJvciIsImNsZWFyQ2F1Z2h0RXJyb3IiLCJyZXRocm93Q2F1Z2h0RXJyb3IiLCJvYSIsInBhIiwicWEiLCJyYSIsImV4dHJhY3RFdmVudHMiLCJldmVudFR5cGVzIiwic2EiLCJwaGFzZWRSZWdpc3RyYXRpb25OYW1lcyIsInRhIiwicmVnaXN0cmF0aW9uTmFtZSIsInZhIiwiZGVwZW5kZW5jaWVzIiwid2EiLCJ4YSIsIkNhIiwiZnJlZXplIiwicGx1Z2lucyIsImV2ZW50TmFtZURpc3BhdGNoQ29uZmlncyIsInJlZ2lzdHJhdGlvbk5hbWVNb2R1bGVzIiwicmVnaXN0cmF0aW9uTmFtZURlcGVuZGVuY2llcyIsInBvc3NpYmxlUmVnaXN0cmF0aW9uTmFtZXMiLCJpbmplY3RFdmVudFBsdWdpbk9yZGVyIiwiaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lIiwiRGEiLCJFYSIsIkZhIiwiR2EiLCJIYSIsIklhIiwiSmEiLCJLYSIsIl9kaXNwYXRjaExpc3RlbmVycyIsIl9kaXNwYXRjaEluc3RhbmNlcyIsImlzUGVyc2lzdGVudCIsInJlbGVhc2UiLCJMYSIsIk1hIiwiTmEiLCJPYSIsInN0YXRlTm9kZSIsIlBhIiwiUWEiLCJSYSIsImluamVjdGlvbiIsImdldExpc3RlbmVyIiwicnVuRXZlbnRzSW5CYXRjaCIsInJ1bkV4dHJhY3RlZEV2ZW50c0luQmF0Y2giLCJTYSIsIkYiLCJUYSIsIlVhIiwiVmEiLCJYYSIsImJiIiwicHJlY2FjaGVGaWJlck5vZGUiLCJnZXRDbG9zZXN0SW5zdGFuY2VGcm9tTm9kZSIsImdldEluc3RhbmNlRnJvbU5vZGUiLCJnZXROb2RlRnJvbUluc3RhbmNlIiwiZ2V0RmliZXJDdXJyZW50UHJvcHNGcm9tTm9kZSIsInVwZGF0ZUZpYmVyUHJvcHMiLCJMIiwiY2IiLCJkYiIsImRpc3BhdGNoQ29uZmlnIiwiZWIiLCJfdGFyZ2V0SW5zdCIsImZiIiwiZ2IiLCJoYiIsImliIiwiamIiLCJhbHRlcm5hdGUiLCJrYiIsImFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXMiLCJhY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzU2tpcFRhcmdldCIsImFjY3VtdWxhdGVFbnRlckxlYXZlRGlzcGF0Y2hlcyIsImFjY3VtdWxhdGVEaXJlY3REaXNwYXRjaGVzIiwibGIiLCJtYiIsIk0iLCJfcm9vdCIsIl9zdGFydFRleHQiLCJfZmFsbGJhY2tUZXh0IiwibmIiLCJvYiIsInBiIiwicWIiLCJpc1RydXN0ZWQiLCJOIiwiSW50ZXJmYWNlIiwic2IiLCJldmVudFBvb2wiLCJ0YiIsImRlc3RydWN0b3IiLCJyYiIsImdldFBvb2xlZCIsImNhbmNlbEJ1YmJsZSIsInBlcnNpc3QiLCJ1YiIsInZiIiwid2IiLCJ4YiIsInliIiwiZG9jdW1lbnRNb2RlIiwiemIiLCJBYiIsIkJiIiwiS2IiLCJiZWZvcmVJbnB1dCIsImJ1YmJsZWQiLCJjYXB0dXJlZCIsImNvbXBvc2l0aW9uRW5kIiwiY29tcG9zaXRpb25TdGFydCIsImNvbXBvc2l0aW9uVXBkYXRlIiwiTGIiLCJNYiIsIk5iIiwiT2IiLCJSYiIsIlBiIiwiUWIiLCJTYiIsIlRiIiwiaW5qZWN0RmliZXJDb250cm9sbGVkSG9zdENvbXBvbmVudCIsIlViIiwiVmIiLCJXYiIsInJlc3RvcmVDb250cm9sbGVkU3RhdGUiLCJYYiIsIlliIiwiWmIiLCIkYiIsImVucXVldWVTdGF0ZVJlc3RvcmUiLCJuZWVkc1N0YXRlUmVzdG9yZSIsInJlc3RvcmVTdGF0ZUlmTmVlZGVkIiwiYWMiLCJiYyIsImNjIiwiZGMiLCJlYyIsImZjIiwiZGF0ZXRpbWUiLCJkYXRldGltZS1sb2NhbCIsImVtYWlsIiwibW9udGgiLCJyYW5nZSIsInRlbCIsIndlZWsiLCJnYyIsImhjIiwiY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQiLCJpYyIsImpjIiwibGMiLCJfdmFsdWVUcmFja2VyIiwiZ2V0VmFsdWUiLCJzZXRWYWx1ZSIsInN0b3BUcmFja2luZyIsImtjIiwibWMiLCJuYyIsIl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEIiwiUmVhY3RDdXJyZW50T3duZXIiLCJPIiwib2MiLCJwYyIsInFjIiwicmMiLCJzYyIsInRjIiwidWMiLCJ2YyIsIndjIiwieGMiLCJ5YyIsInpjIiwiQWMiLCIkJHR5cGVvZiIsIkJjIiwiX2RlYnVnT3duZXIiLCJfZGVidWdTb3VyY2UiLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJDYyIsIkRjIiwiRWMiLCJVIiwiYWNjZXB0c0Jvb2xlYW5zIiwiYXR0cmlidXRlTmFtZSIsImF0dHJpYnV0ZU5hbWVzcGFjZSIsIm11c3RVc2VQcm9wZXJ0eSIsInByb3BlcnR5TmFtZSIsIlYiLCJTYyIsIlRjIiwiVWMiLCJHYyIsIkhjIiwiRmMiLCJzZXRBdHRyaWJ1dGVOUyIsIlZjIiwiZGVmYXVsdENoZWNrZWQiLCJfd3JhcHBlclN0YXRlIiwiaW5pdGlhbENoZWNrZWQiLCJXYyIsIlhjIiwiaW5pdGlhbFZhbHVlIiwiY29udHJvbGxlZCIsIlljIiwiWmMiLCIkYyIsImFkIiwiYmQiLCJjaGFuZ2UiLCJjZCIsImRkIiwiZWQiLCJmZCIsImdkIiwiaGQiLCJqZCIsImtkIiwibGQiLCJtZCIsIm5kIiwib2QiLCJwZCIsIl9pc0lucHV0RXZlbnRTdXBwb3J0ZWQiLCJxZCIsInJkIiwiQWx0IiwiQ29udHJvbCIsIk1ldGEiLCJTaGlmdCIsInNkIiwiZ2V0TW9kaWZpZXJTdGF0ZSIsInVkIiwiZnJvbUVsZW1lbnQiLCJzcmNFbGVtZW50IiwidmQiLCJtb3VzZUVudGVyIiwibW91c2VMZWF2ZSIsIndkIiwieGQiLCJlZmZlY3RUYWciLCJ5ZCIsIl9yZWFjdEludGVybmFsRmliZXIiLCJ6ZCIsIkFkIiwiQmQiLCJEZCIsImFuaW1hdGlvbk5hbWUiLCJlbGFwc2VkVGltZSIsInBzZXVkb0VsZW1lbnQiLCJFZCIsImNsaXBib2FyZERhdGEiLCJGZCIsIkdkIiwiSGQiLCJFc2MiLCJTcGFjZWJhciIsIkxlZnQiLCJVcCIsIlJpZ2h0IiwiRG93biIsIkRlbCIsIldpbiIsIk1lbnUiLCJBcHBzIiwiU2Nyb2xsIiwiTW96UHJpbnRhYmxlS2V5IiwiSWQiLCIxMyIsIjE2IiwiMTciLCIxOCIsIjE5IiwiMjAiLCIyNyIsIjMyIiwiMzMiLCIzNCIsIjM1IiwiMzYiLCIzNyIsIjM4IiwiMzkiLCI0MCIsIjQ1IiwiNDYiLCIxMTIiLCIxMTMiLCIxMTQiLCIxMTUiLCIxMTYiLCIxMTciLCIxMTgiLCIxMTkiLCIxMjAiLCIxMjEiLCIxMjIiLCIxMjMiLCIxNDQiLCIxNDUiLCIyMjQiLCJKZCIsImxvY2FsZSIsIktkIiwiZGF0YVRyYW5zZmVyIiwiTGQiLCJNZCIsIk5kIiwiZGVsdGFYIiwid2hlZWxEZWx0YVgiLCJkZWx0YVkiLCJ3aGVlbERlbHRhWSIsIndoZWVsRGVsdGEiLCJkZWx0YVoiLCJkZWx0YU1vZGUiLCJPZCIsIlBkIiwiUWQiLCJpc0ludGVyYWN0aXZlIiwiUmQiLCJpc0ludGVyYWN0aXZlVG9wTGV2ZWxFdmVudFR5cGUiLCJTZCIsIlRkIiwiVWQiLCJ0YXJnZXRJbnN0IiwiYW5jZXN0b3JzIiwiY29udGFpbmVySW5mbyIsInRvcExldmVsVHlwZSIsIlZkIiwiV2QiLCJXIiwiWGQiLCJZZCIsIlpkIiwiJGQiLCJfZW5hYmxlZCIsInNldEVuYWJsZWQiLCJpc0VuYWJsZWQiLCJ0cmFwQnViYmxlZEV2ZW50IiwidHJhcENhcHR1cmVkRXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwiYWUiLCJiZSIsImFuaW1hdGlvbmVuZCIsImFuaW1hdGlvbml0ZXJhdGlvbiIsImFuaW1hdGlvbnN0YXJ0IiwidHJhbnNpdGlvbmVuZCIsImNlIiwiZGUiLCJlZSIsInRyYW5zaXRpb24iLCJmZSIsInRvcEFuaW1hdGlvbkVuZCIsInRvcEFuaW1hdGlvbkl0ZXJhdGlvbiIsInRvcEFuaW1hdGlvblN0YXJ0IiwidG9wQmx1ciIsInRvcENhbmNlbCIsInRvcENoYW5nZSIsInRvcENsaWNrIiwidG9wQ2xvc2UiLCJ0b3BDb21wb3NpdGlvbkVuZCIsInRvcENvbXBvc2l0aW9uU3RhcnQiLCJ0b3BDb21wb3NpdGlvblVwZGF0ZSIsInRvcENvbnRleHRNZW51IiwidG9wQ29weSIsInRvcEN1dCIsInRvcERvdWJsZUNsaWNrIiwidG9wRHJhZyIsInRvcERyYWdFbmQiLCJ0b3BEcmFnRW50ZXIiLCJ0b3BEcmFnRXhpdCIsInRvcERyYWdMZWF2ZSIsInRvcERyYWdPdmVyIiwidG9wRHJhZ1N0YXJ0IiwidG9wRHJvcCIsInRvcEZvY3VzIiwidG9wSW5wdXQiLCJ0b3BLZXlEb3duIiwidG9wS2V5UHJlc3MiLCJ0b3BLZXlVcCIsInRvcExvYWQiLCJ0b3BMb2FkU3RhcnQiLCJ0b3BNb3VzZURvd24iLCJ0b3BNb3VzZU1vdmUiLCJ0b3BNb3VzZU91dCIsInRvcE1vdXNlT3ZlciIsInRvcE1vdXNlVXAiLCJ0b3BQYXN0ZSIsInRvcFNjcm9sbCIsInRvcFNlbGVjdGlvbkNoYW5nZSIsInRvcFRleHRJbnB1dCIsInRvcFRvZ2dsZSIsInRvcFRvdWNoQ2FuY2VsIiwidG9wVG91Y2hFbmQiLCJ0b3BUb3VjaE1vdmUiLCJ0b3BUb3VjaFN0YXJ0IiwidG9wVHJhbnNpdGlvbkVuZCIsInRvcFdoZWVsIiwiZ2UiLCJ0b3BBYm9ydCIsInRvcENhblBsYXkiLCJ0b3BDYW5QbGF5VGhyb3VnaCIsInRvcER1cmF0aW9uQ2hhbmdlIiwidG9wRW1wdGllZCIsInRvcEVuY3J5cHRlZCIsInRvcEVuZGVkIiwidG9wRXJyb3IiLCJ0b3BMb2FkZWREYXRhIiwidG9wTG9hZGVkTWV0YWRhdGEiLCJ0b3BQYXVzZSIsInRvcFBsYXkiLCJ0b3BQbGF5aW5nIiwidG9wUHJvZ3Jlc3MiLCJ0b3BSYXRlQ2hhbmdlIiwidG9wU2Vla2VkIiwidG9wU2Vla2luZyIsInRvcFN0YWxsZWQiLCJ0b3BTdXNwZW5kIiwidG9wVGltZVVwZGF0ZSIsInRvcFZvbHVtZUNoYW5nZSIsInRvcFdhaXRpbmciLCJoZSIsImllIiwiamUiLCJrZSIsImxlIiwibWUiLCJuZSIsImNvbnRlbnRFZGl0YWJsZSIsIm9lIiwicGUiLCJxZSIsInNlIiwidGUiLCJ1ZSIsInNlbGVjdGlvblN0YXJ0Iiwic2VsZWN0aW9uRW5kIiwiZ2V0U2VsZWN0aW9uIiwiYW5jaG9yTm9kZSIsImFuY2hvck9mZnNldCIsImZvY3VzTm9kZSIsImZvY3VzT2Zmc2V0IiwidmUiLCJvblNlbGVjdCIsInhlIiwicGVuZGluZ1Byb3BzIiwibWVtb2l6ZWRTdGF0ZSIsInVwZGF0ZVF1ZXVlIiwibWVtb2l6ZWRQcm9wcyIsIm1vZGUiLCJsYXN0RWZmZWN0IiwiZmlyc3RFZmZlY3QiLCJuZXh0RWZmZWN0IiwiZXhwaXJhdGlvblRpbWUiLCJ6ZSIsIkFlIiwiaXNSZWFjdENvbXBvbmVudCIsIkJlIiwiQ2UiLCJEZSIsInBlbmRpbmdDaGlsZHJlbiIsIlNpbXBsZUV2ZW50UGx1Z2luIiwiRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIiwiQ2hhbmdlRXZlbnRQbHVnaW4iLCJTZWxlY3RFdmVudFBsdWdpbiIsIkJlZm9yZUlucHV0RXZlbnRQbHVnaW4iLCJFZSIsIkZlIiwiR2UiLCJJZSIsIkplIiwiS2UiLCJiYXNlU3RhdGUiLCJjYWxsYmFja0xpc3QiLCJoYXNGb3JjZVVwZGF0ZSIsImlzSW5pdGlhbGl6ZWQiLCJjYXB0dXJlZFZhbHVlcyIsIkxlIiwiU2V0IiwiTWUiLCJOZSIsIk9lIiwiUGUiLCJRZSIsInBhcnRpYWxTdGF0ZSIsIlJlIiwiaXNSZXBsYWNlIiwiaXNGb3JjZWQiLCJjYXB0dXJlZFZhbHVlIiwiU2UiLCJVZSIsIlZlIiwiX293bmVyIiwiX3N0cmluZ1JlZiIsInJlZnMiLCJXZSIsIlhlIiwiTWFwIiwieiIsIkIiLCJ1IiwiUSIsIkgiLCJZZSIsIlplIiwiJGUiLCJwZW5kaW5nQ29udGV4dCIsIlkiLCJzaG91bGRTZXRUZXh0Q29udGVudCIsInNob3VsZERlcHJpb3JpdGl6ZVN1YnRyZWUiLCJwdXNoSG9zdENvbnRleHQiLCJwdXNoSG9zdENvbnRhaW5lciIsIkciLCJwdXNoUHJvdmlkZXIiLCJSIiwiZ2V0TWFza2VkQ29udGV4dCIsIlMiLCJnZXRVbm1hc2tlZENvbnRleHQiLCJoYXNDb250ZXh0Q2hhbmdlZCIsInB1c2hDb250ZXh0UHJvdmlkZXIiLCJwdXNoVG9wTGV2ZWxDb250ZXh0T2JqZWN0IiwiaW52YWxpZGF0ZUNvbnRleHRQcm92aWRlciIsImVudGVySHlkcmF0aW9uU3RhdGUiLCJXYSIsInJlc2V0SHlkcmF0aW9uU3RhdGUiLCJDYiIsInRyeVRvQ2xhaW1OZXh0SHlkcmF0YWJsZUluc3RhbmNlIiwiSmMiLCJzaG91bGRDb21wb25lbnRVcGRhdGUiLCJpc1B1cmVSZWFjdENvbXBvbmVudCIsInVwZGF0ZXIiLCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsImVucXVldWVSZXBsYWNlU3RhdGUiLCJjYWNoZUNvbnRleHQiLCJpc0NvbnRleHRDb25zdW1lciIsImlzTW91bnRlZCIsImVucXVldWVTZXRTdGF0ZSIsImVucXVldWVGb3JjZVVwZGF0ZSIsImFkb3B0Q2xhc3NJbnN0YW5jZSIsImNhbGxHZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJjb25zdHJ1Y3RDbGFzc0luc3RhbmNlIiwibW91bnRDbGFzc0luc3RhbmNlIiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50IiwicmVzdW1lTW91bnRDbGFzc0luc3RhbmNlIiwidXBkYXRlQ2xhc3NJbnN0YW5jZSIsIlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50V2lsbFVwZGF0ZSIsIlRlIiwiS2MiLCJMYyIsIkRiIiwiTWMiLCJFYiIsImJlZ2luV29yayIsImh5ZHJhdGUiLCJfY2FsY3VsYXRlQ2hhbmdlZEJpdHMiLCJfY3VycmVudFZhbHVlIiwiX2NoYW5nZWRCaXRzIiwidW5zdGFibGVfb2JzZXJ2ZWRCaXRzIiwiY2YiLCJzdXBwcmVzc1JlYWN0RXJyb3JMb2dnaW5nIiwiZWYiLCJsZiIsIkkiLCJZYSIsIloiLCJOYyIsInlhIiwiY2EiLCJwZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWUiLCJPYyIsIlphIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbUNhdGNoIiwiY29tcG9uZW50RGlkQ2F0Y2giLCJpYSIsInphIiwiZGEiLCJGYiIsInhnIiwieWUiLCJJYyIsIlBjIiwiR2IiLCJtZyIsIlFjIiwibGciLCJuZXh0U2NoZWR1bGVkUm9vdCIsInJlbWFpbmluZ0V4cGlyYXRpb25UaW1lIiwiSyIsImxhIiwiVCIsIkoiLCJIYiIsImFhIiwiUCIsIiRhIiwiSWIiLCJBYSIsIl9vbkNvbXBsZXRlIiwid2ciLCJCYSIsIkpiIiwiZmluaXNoZWRXb3JrIiwiZmlyc3RCYXRjaCIsIl9leHBpcmF0aW9uVGltZSIsIl9kZWZlciIsInpnIiwiYWIiLCJrZyIsIndlIiwiZ2ciLCJBZyIsImhnIiwiaWciLCJqZyIsInRpbWVSZW1haW5pbmciLCJCZyIsImNyZWF0ZUN1cnNvciIsImlzRW1wdHkiLCJjaGVja1RoYXRTdGFja0lzRW1wdHkiLCJyZXNldFN0YWNrQWZ0ZXJGYXRhbEVycm9ySW5EZXYiLCJrZiIsImdldENoaWxkSG9zdENvbnRleHQiLCJnZXRSb290SG9zdENvbnRleHQiLCJnZXRIb3N0Q29udGV4dCIsImdldFJvb3RIb3N0Q29udGFpbmVyIiwicG9wSG9zdENvbnRhaW5lciIsInBvcEhvc3RDb250ZXh0IiwiZmYiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0IiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQiLCJpc0NvbnRleHRQcm92aWRlciIsInBvcENvbnRleHRQcm92aWRlciIsInBvcFRvcExldmVsQ29udGV4dE9iamVjdCIsImN1cnNvciIsInByb2Nlc3NDaGlsZENvbnRleHQiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dCIsImZpbmRDdXJyZW50VW5tYXNrZWRDb250ZXh0IiwiaGYiLCJwb3BQcm92aWRlciIsImpmIiwiaHlkcmF0aW9uIiwicHJlcGFyZVRvSHlkcmF0ZUhvc3RJbnN0YW5jZSIsInByZXBhcmVUb0h5ZHJhdGVIb3N0VGV4dEluc3RhbmNlIiwicG9wSHlkcmF0aW9uU3RhdGUiLCJjYW5IeWRyYXRlSW5zdGFuY2UiLCJjYW5IeWRyYXRlVGV4dEluc3RhbmNlIiwiZ2V0TmV4dEh5ZHJhdGFibGVTaWJsaW5nIiwiZ2V0Rmlyc3RIeWRyYXRhYmxlQ2hpbGQiLCJoeWRyYXRlSW5zdGFuY2UiLCJoeWRyYXRlVGV4dEluc3RhbmNlIiwiZ2YiLCJjcmVhdGVUZXh0SW5zdGFuY2UiLCJhcHBlbmRJbml0aWFsQ2hpbGQiLCJmaW5hbGl6ZUluaXRpYWxDaGlsZHJlbiIsInByZXBhcmVVcGRhdGUiLCJwZXJzaXN0ZW5jZSIsIm11dGF0aW9uIiwiY29tcGxldGVXb3JrIiwiYWYiLCJ1bndpbmRXb3JrIiwidW53aW5kSW50ZXJydXB0ZWRXb3JrIiwiYmYiLCJnZXRQdWJsaWNJbnN0YW5jZSIsImNvbW1pdE1vdW50IiwiY29tbWl0VXBkYXRlIiwicmVzZXRUZXh0Q29udGVudCIsImNvbW1pdFRleHRVcGRhdGUiLCJhcHBlbmRDaGlsZFRvQ29udGFpbmVyIiwiaW5zZXJ0SW5Db250YWluZXJCZWZvcmUiLCJyZW1vdmVDaGlsZEZyb21Db250YWluZXIiLCJjb21taXRCZWZvcmVNdXRhdGlvbkxpZmVDeWNsZXMiLCJfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsImNvbW1pdFJlc2V0VGV4dENvbnRlbnQiLCJjb21taXRQbGFjZW1lbnQiLCJjb21taXREZWxldGlvbiIsImNvbW1pdFdvcmsiLCJjb21taXRMaWZlQ3ljbGVzIiwiY29tbWl0RXJyb3JMb2dnaW5nIiwiY29tcG9uZW50U3RhY2siLCJjb21taXRBdHRhY2hSZWYiLCJjb21taXREZXRhY2hSZWYiLCJkZiIsInNjaGVkdWxlRGVmZXJyZWRDYWxsYmFjayIsImNhbmNlbERlZmVycmVkQ2FsbGJhY2siLCJwcmVwYXJlRm9yQ29tbWl0IiwicmVzZXRBZnRlckNvbW1pdCIsIlJjIiwicmVjYWxjdWxhdGVDdXJyZW50VGltZSIsImNvbXB1dGVFeHBpcmF0aW9uRm9yRmliZXIiLCJzY2hlZHVsZVdvcmsiLCJyZXF1ZXN0V29yayIsImZsdXNoUm9vdCIsImJhdGNoZWRVcGRhdGVzIiwidW5iYXRjaGVkVXBkYXRlcyIsImZsdXNoU3luYyIsImZsdXNoQ29udHJvbGxlZCIsImRlZmVycmVkVXBkYXRlcyIsInN5bmNVcGRhdGVzIiwiaW50ZXJhY3RpdmVVcGRhdGVzIiwiZmx1c2hJbnRlcmFjdGl2ZVVwZGF0ZXMiLCJjb21wdXRlVW5pcXVlQXN5bmNFeHBpcmF0aW9uIiwibGVnYWN5Q29udGV4dCIsIm1mIiwiY3JlYXRlQ29udGFpbmVyIiwidXBkYXRlQ29udGFpbmVyIiwidXBkYXRlQ29udGFpbmVyQXRFeHBpcmF0aW9uVGltZSIsImdldFB1YmxpY1Jvb3RJbnN0YW5jZSIsImZpbmRIb3N0SW5zdGFuY2UiLCJmaW5kSG9zdEluc3RhbmNlV2l0aE5vUG9ydGFscyIsIkNkIiwiaW5qZWN0SW50b0RldlRvb2xzIiwiZmluZEZpYmVyQnlIb3N0SW5zdGFuY2UiLCJfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJzdXBwb3J0c0ZpYmVyIiwiaW5qZWN0Iiwib25Db21taXRGaWJlclJvb3QiLCJvbkNvbW1pdEZpYmVyVW5tb3VudCIsIkhlIiwiZmluZEhvc3RJbnN0YW5jZUJ5RmliZXIiLCJuZiIsIm9mIiwicGYiLCJyZiIsInBlcmZvcm1hbmNlIiwic2YiLCJ0ZiIsInVmIiwicmVxdWVzdElkbGVDYWxsYmFjayIsImNhbmNlbElkbGVDYWxsYmFjayIsInZmIiwid2YiLCJ4ZiIsInlmIiwiemYiLCJBZiIsIkJmIiwiQ2YiLCJkaWRUaW1lb3V0IiwiRGYiLCJFZiIsInBvc3RNZXNzYWdlIiwiSW5maW5pdHkiLCJHZiIsIkZmIiwiSGYiLCJkZWZhdWx0U2VsZWN0ZWQiLCJJZiIsIndhc011bHRpcGxlIiwibXVsdGlwbGUiLCJKZiIsImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MIiwiS2YiLCJMZiIsIk1mIiwiTmYiLCJtYXRobWwiLCJzdmciLCJPZiIsIlBmIiwiUWYiLCJSZiIsIk1TQXBwIiwiZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24iLCJTZiIsIlRmIiwiYm9yZGVySW1hZ2VPdXRzZXQiLCJib3JkZXJJbWFnZVNsaWNlIiwiYm9yZGVySW1hZ2VXaWR0aCIsImJveEZsZXgiLCJib3hGbGV4R3JvdXAiLCJib3hPcmRpbmFsR3JvdXAiLCJjb2x1bW5zIiwiZmxleCIsImZsZXhQb3NpdGl2ZSIsImZsZXhOZWdhdGl2ZSIsImZsZXhPcmRlciIsImdyaWRSb3dTcGFuIiwiZ3JpZENvbHVtblNwYW4iLCJsaW5lQ2xhbXAiLCJ0YWJTaXplIiwiZmxvb2RPcGFjaXR5Iiwic3RvcE9wYWNpdHkiLCJzdHJva2VEYXNoYXJyYXkiLCJzdHJva2VEYXNob2Zmc2V0Iiwic3Ryb2tlTWl0ZXJsaW1pdCIsInN0cm9rZU9wYWNpdHkiLCJzdHJva2VXaWR0aCIsIlVmIiwiVmYiLCJXZiIsIm1lbnVpdGVtIiwiYXJlYSIsImJyIiwiZW1iZWQiLCJociIsImltZyIsImtleWdlbiIsImxpbmsiLCJtZXRhIiwidHJhY2siLCJ3YnIiLCJYZiIsIllmIiwiWmYiLCIkZiIsImFnIiwiY3JlYXRlRWxlbWVudE5TIiwiYmciLCJjZyIsIl9faHRtbCIsIm9uY2xpY2siLCJkZyIsImVnIiwiZmciLCJuZyIsIm9nIiwic2V0SW5pdGlhbFByb3BlcnRpZXMiLCJkaWZmUHJvcGVydGllcyIsInVwZGF0ZVByb3BlcnRpZXMiLCJkaWZmSHlkcmF0ZWRQcm9wZXJ0aWVzIiwiZGlmZkh5ZHJhdGVkVGV4dCIsIndhcm5Gb3JVbm1hdGNoZWRUZXh0Iiwid2FybkZvckRlbGV0ZWRIeWRyYXRhYmxlRWxlbWVudCIsIndhcm5Gb3JEZWxldGVkSHlkcmF0YWJsZVRleHQiLCJ3YXJuRm9ySW5zZXJ0ZWRIeWRyYXRlZEVsZW1lbnQiLCJ3YXJuRm9ySW5zZXJ0ZWRIeWRyYXRlZFRleHQiLCJmb3JtIiwicGciLCJxZyIsInJnIiwiWCIsIl9jYWxsYmFja3MiLCJfbmV4dCIsIl9oYXNDaGlsZHJlbiIsIl9kaWRDb21wbGV0ZSIsIl9jaGlsZHJlbiIsInNnIiwiX2RpZENvbW1pdCIsIl9vbkNvbW1pdCIsInRnIiwiX2ludGVybmFsUm9vdCIsInVnIiwidmciLCJhdXRvRm9jdXMiLCJjb21taXQiLCJ1bm1vdW50IiwibGVnYWN5X3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwiY3JlYXRlQmF0Y2giLCJ0YWdOYW1lIiwicmFuZ2VDb3VudCIsImZvY3VzZWRFbGVtIiwic2VsZWN0aW9uUmFuZ2UiLCJjcmVhdGVSYW5nZSIsInNldFN0YXJ0IiwicmVtb3ZlQWxsUmFuZ2VzIiwiYWRkUmFuZ2UiLCJzZXRFbmQiLCJkaWROb3RNYXRjaEh5ZHJhdGVkQ29udGFpbmVyVGV4dEluc3RhbmNlIiwiZGlkTm90TWF0Y2hIeWRyYXRlZFRleHRJbnN0YW5jZSIsImRpZE5vdEh5ZHJhdGVDb250YWluZXJJbnN0YW5jZSIsImRpZE5vdEh5ZHJhdGVJbnN0YW5jZSIsImRpZE5vdEZpbmRIeWRyYXRhYmxlQ29udGFpbmVySW5zdGFuY2UiLCJkaWROb3RGaW5kSHlkcmF0YWJsZUNvbnRhaW5lclRleHRJbnN0YW5jZSIsImRpZE5vdEZpbmRIeWRyYXRhYmxlSW5zdGFuY2UiLCJkaWROb3RGaW5kSHlkcmF0YWJsZVRleHRJbnN0YW5jZSIsIkNnIiwiRWciLCJfcmVhY3RSb290Q29udGFpbmVyIiwiaGFzQXR0cmlidXRlIiwiRGciLCJGZyIsInFmIiwiR2ciLCJjcmVhdGVQb3J0YWwiLCJmaW5kRE9NTm9kZSIsInVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyIiwidW5tb3VudENvbXBvbmVudEF0Tm9kZSIsInVuc3RhYmxlX2NyZWF0ZVBvcnRhbCIsInVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIiwidW5zdGFibGVfZGVmZXJyZWRVcGRhdGVzIiwidW5zdGFibGVfZmx1c2hDb250cm9sbGVkIiwiRXZlbnRQbHVnaW5IdWIiLCJFdmVudFBsdWdpblJlZ2lzdHJ5IiwiRXZlbnRQcm9wYWdhdG9ycyIsIlJlYWN0Q29udHJvbGxlZENvbXBvbmVudCIsIlJlYWN0RE9NQ29tcG9uZW50VHJlZSIsIlJlYWN0RE9NRXZlbnRMaXN0ZW5lciIsInVuc3RhYmxlX2NyZWF0ZVJvb3QiLCJidW5kbGVUeXBlIiwicmVuZGVyZXJQYWNrYWdlTmFtZSIsIkhnIiwiSWciLCJjaGVja0RDRSIsImZvcmNlVXBkYXRlIiwiX19zZWxmIiwiX19zb3VyY2UiLCJrZXlQcmVmaXgiLCI9IiwiOiIsImNyZWF0ZVJlZiIsIlB1cmVDb21wb25lbnQiLCJjcmVhdGVDb250ZXh0IiwiX2RlZmF1bHRWYWx1ZSIsIlByb3ZpZGVyIiwiQ29uc3VtZXIiLCJmb3J3YXJkUmVmIiwiRnJhZ21lbnQiLCJTdHJpY3RNb2RlIiwidW5zdGFibGVfQXN5bmNNb2RlIiwiY3JlYXRlRmFjdG9yeSIsImFwcCIsIlJlYWN0RE9NIiwiX2xheW91dDIiLCJzay1zdHJldGNoZGVsYXkiLCJjYXJkLXRpdGxlIl0sIm1hcHBpbmdzIjoiYUFDQSxJQUFBQSxLQUdBLFNBQUFDLEVBQUFDLEdBR0EsR0FBQUYsRUFBQUUsR0FDQSxPQUFBRixFQUFBRSxHQUFBQyxRQUdBLElBQUFDLEVBQUFKLEVBQUFFLElBQ0FHLEVBQUFILEVBQ0FJLEdBQUEsRUFDQUgsWUFVQSxPQU5BSSxFQUFBTCxHQUFBTSxLQUFBSixFQUFBRCxRQUFBQyxJQUFBRCxRQUFBRixHQUdBRyxFQUFBRSxHQUFBLEVBR0FGLEVBQUFELFFBS0FGLEVBQUFRLEVBQUFGLEVBR0FOLEVBQUFTLEVBQUFWLEVBR0FDLEVBQUFVLEVBQUEsU0FBQVIsRUFBQVMsRUFBQUMsR0FDQVosRUFBQWEsRUFBQVgsRUFBQVMsSUFDQUcsT0FBQUMsZUFBQWIsRUFBQVMsR0FDQUssY0FBQSxFQUNBQyxZQUFBLEVBQ0FDLElB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a0JBQUFzWixFQUFBcnVGLE9BQUE5SixJQUE4QitvRyxFQUFBem9HLE9BQUFvMUUsUUFBa0IxNEQsUUFBQXlzRSxJQUM5ZWlMLEVBQUFxVSxHQUFBdGYsR0FBQXNmLEVBQVVwcEcsRUFBQUQsUUFBQWcxRixFQUFBLFFBQUFBLEVBQUEsUUFBQUEsZ0NDckJWLFFBQUFsMUYsRUFBQSxRQUNBQSxFQUFBLFNBRUFBLEVBQUEsd0RBRUEsSUFBTXV1RyxFQUFNNXBHLFNBQVNxNUIsZUFBZSxPQUNwQ3d3RSxVQUFTN2dHLE9BQU8wUyxFQUFBN0MsUUFBQTVPLGNBQUM2L0YsRUFBQWp4RixRQUFELE1BQVcrd0Ysa0JDTDNCcHVHLEVBQUFELFNBQWtCczhCLGdCQUFBLHNEQ0FsQnI4QixFQUFBRCxTQUFrQmtuQyxrQkFBQSxxQ0FBQUQsT0FBQSwwQ0NBbEJobkMsRUFBQUQsU0FBa0JxbkMsUUFBQSwwQkFBQW1uRSxrQkFBQSxrQ0FBQWpuRSxNQUFBLHdCQUFBQyxNQUFBLHdCQUFBQyxNQUFBLHdCQUFBQyxNQUFBLHlDQ0FsQnpuQyxFQUFBRCxTQUFrQituQyxVQUFBLDhCQUFBMG1FLGFBQUEiLCJmaWxlIjoiY2xpZW50Lm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbiBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4gXHRcdFx0XHRnZXQ6IGdldHRlclxuIFx0XHRcdH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gODMpO1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgUkVBQ1RfRUxFTUVOVF9UWVBFID0gKHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiZcbiAgICBTeW1ib2wuZm9yICYmXG4gICAgU3ltYm9sLmZvcigncmVhY3QuZWxlbWVudCcpKSB8fFxuICAgIDB4ZWFjNztcblxuICB2YXIgaXNWYWxpZEVsZW1lbnQgPSBmdW5jdGlvbihvYmplY3QpIHtcbiAgICByZXR1cm4gdHlwZW9mIG9iamVjdCA9PT0gJ29iamVjdCcgJiZcbiAgICAgIG9iamVjdCAhPT0gbnVsbCAmJlxuICAgICAgb2JqZWN0LiQkdHlwZW9mID09PSBSRUFDVF9FTEVNRU5UX1RZUEU7XG4gIH07XG5cbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgZGV2ZWxvcG1lbnQgYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgdmFyIHRocm93T25EaXJlY3RBY2Nlc3MgPSB0cnVlO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMnKShpc1ZhbGlkRWxlbWVudCwgdGhyb3dPbkRpcmVjdEFjY2Vzcyk7XG59IGVsc2Uge1xuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBwcm9kdWN0aW9uIGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMnKSgpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAyMDE0LTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU2ltaWxhciB0byBpbnZhcmlhbnQgYnV0IG9ubHkgbG9ncyBhIHdhcm5pbmcgaWYgdGhlIGNvbmRpdGlvbiBpcyBub3QgbWV0LlxuICogVGhpcyBjYW4gYmUgdXNlZCB0byBsb2cgaXNzdWVzIGluIGRldmVsb3BtZW50IGVudmlyb25tZW50cyBpbiBjcml0aWNhbFxuICogcGF0aHMuIFJlbW92aW5nIHRoZSBsb2dnaW5nIGNvZGUgZm9yIHByb2R1Y3Rpb24gZW52aXJvbm1lbnRzIHdpbGwga2VlcCB0aGVcbiAqIHNhbWUgbG9naWMgYW5kIGZvbGxvdyB0aGUgc2FtZSBjb2RlIHBhdGhzLlxuICovXG5cbnZhciB3YXJuaW5nID0gZnVuY3Rpb24oKSB7fTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgd2FybmluZyA9IGZ1bmN0aW9uKGNvbmRpdGlvbiwgZm9ybWF0LCBhcmdzKSB7XG4gICAgdmFyIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgYXJncyA9IG5ldyBBcnJheShsZW4gPiAyID8gbGVuIC0gMiA6IDApO1xuICAgIGZvciAodmFyIGtleSA9IDI7IGtleSA8IGxlbjsga2V5KyspIHtcbiAgICAgIGFyZ3Nba2V5IC0gMl0gPSBhcmd1bWVudHNba2V5XTtcbiAgICB9XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdgd2FybmluZyhjb25kaXRpb24sIGZvcm1hdCwgLi4uYXJncylgIHJlcXVpcmVzIGEgd2FybmluZyAnICtcbiAgICAgICAgJ21lc3NhZ2UgYXJndW1lbnQnXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmIChmb3JtYXQubGVuZ3RoIDwgMTAgfHwgKC9eW3NcXFddKiQvKS50ZXN0KGZvcm1hdCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ1RoZSB3YXJuaW5nIGZvcm1hdCBzaG91bGQgYmUgYWJsZSB0byB1bmlxdWVseSBpZGVudGlmeSB0aGlzICcgK1xuICAgICAgICAnd2FybmluZy4gUGxlYXNlLCB1c2UgYSBtb3JlIGRlc2NyaXB0aXZlIGZvcm1hdCB0aGFuOiAnICsgZm9ybWF0XG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICghY29uZGl0aW9uKSB7XG4gICAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgICAgdmFyIG1lc3NhZ2UgPSAnV2FybmluZzogJyArXG4gICAgICAgIGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gYXJnc1thcmdJbmRleCsrXTtcbiAgICAgICAgfSk7XG4gICAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gICAgICB9XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IHlvdSBjYW4gdXNlIHRoaXMgc3RhY2tcbiAgICAgICAgLy8gdG8gZmluZCB0aGUgY2FsbHNpdGUgdGhhdCBjYXVzZWQgdGhpcyB3YXJuaW5nIHRvIGZpcmUuXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICAgIH0gY2F0Y2goeCkge31cbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gd2FybmluZztcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVzZSBpbnZhcmlhbnQoKSB0byBhc3NlcnQgc3RhdGUgd2hpY2ggeW91ciBwcm9ncmFtIGFzc3VtZXMgdG8gYmUgdHJ1ZS5cbiAqXG4gKiBQcm92aWRlIHNwcmludGYtc3R5bGUgZm9ybWF0IChvbmx5ICVzIGlzIHN1cHBvcnRlZCkgYW5kIGFyZ3VtZW50c1xuICogdG8gcHJvdmlkZSBpbmZvcm1hdGlvbiBhYm91dCB3aGF0IGJyb2tlIGFuZCB3aGF0IHlvdSB3ZXJlXG4gKiBleHBlY3RpbmcuXG4gKlxuICogVGhlIGludmFyaWFudCBtZXNzYWdlIHdpbGwgYmUgc3RyaXBwZWQgaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBpbnZhcmlhbnRcbiAqIHdpbGwgcmVtYWluIHRvIGVuc3VyZSBsb2dpYyBkb2VzIG5vdCBkaWZmZXIgaW4gcHJvZHVjdGlvbi5cbiAqL1xuXG52YXIgaW52YXJpYW50ID0gZnVuY3Rpb24oY29uZGl0aW9uLCBmb3JtYXQsIGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignaW52YXJpYW50IHJlcXVpcmVzIGFuIGVycm9yIG1lc3NhZ2UgYXJndW1lbnQnKTtcbiAgICB9XG4gIH1cblxuICBpZiAoIWNvbmRpdGlvbikge1xuICAgIHZhciBlcnJvcjtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKFxuICAgICAgICAnTWluaWZpZWQgZXhjZXB0aW9uIG9jY3VycmVkOyB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgJyArXG4gICAgICAgICdmb3IgdGhlIGZ1bGwgZXJyb3IgbWVzc2FnZSBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLidcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhcmdzID0gW2EsIGIsIGMsIGQsIGUsIGZdO1xuICAgICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKFxuICAgICAgICBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24oKSB7IHJldHVybiBhcmdzW2FyZ0luZGV4KytdOyB9KVxuICAgICAgKTtcbiAgICAgIGVycm9yLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgfVxuXG4gICAgZXJyb3IuZnJhbWVzVG9Qb3AgPSAxOyAvLyB3ZSBkb24ndCBjYXJlIGFib3V0IGludmFyaWFudCdzIG93biBmcmFtZVxuICAgIHRocm93IGVycm9yO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGludmFyaWFudDtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGJpbmQgPSByZXF1aXJlKCcuL2hlbHBlcnMvYmluZCcpO1xudmFyIGlzQnVmZmVyID0gcmVxdWlyZSgnaXMtYnVmZmVyJyk7XG5cbi8qZ2xvYmFsIHRvU3RyaW5nOnRydWUqL1xuXG4vLyB1dGlscyBpcyBhIGxpYnJhcnkgb2YgZ2VuZXJpYyBoZWxwZXIgZnVuY3Rpb25zIG5vbi1zcGVjaWZpYyB0byBheGlvc1xuXG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXksIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5KHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIEFycmF5QnVmZmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyKHZhbCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWwpID09PSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRm9ybURhdGFcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBGb3JtRGF0YSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRm9ybURhdGEodmFsKSB7XG4gIHJldHVybiAodHlwZW9mIEZvcm1EYXRhICE9PSAndW5kZWZpbmVkJykgJiYgKHZhbCBpbnN0YW5jZW9mIEZvcm1EYXRhKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXJcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIHZpZXcgb24gYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5QnVmZmVyVmlldyh2YWwpIHtcbiAgdmFyIHJlc3VsdDtcbiAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnKSAmJiAoQXJyYXlCdWZmZXIuaXNWaWV3KSkge1xuICAgIHJlc3VsdCA9IEFycmF5QnVmZmVyLmlzVmlldyh2YWwpO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9ICh2YWwpICYmICh2YWwuYnVmZmVyKSAmJiAodmFsLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyaW5nXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBTdHJpbmcsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmluZyh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgTnVtYmVyXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBOdW1iZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc051bWJlcih2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdudW1iZXInO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIHVuZGVmaW5lZFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSB2YWx1ZSBpcyB1bmRlZmluZWQsIG90aGVyd2lzZSBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1VuZGVmaW5lZCh2YWwpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIE9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbCkge1xuICByZXR1cm4gdmFsICE9PSBudWxsICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRGF0ZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRGF0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRGF0ZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRmlsZVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRmlsZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzRmlsZSh2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRmlsZV0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQmxvYlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgQmxvYiwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQmxvYih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgQmxvYl0nO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRnVuY3Rpb25cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEZ1bmN0aW9uLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWwpIHtcbiAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFN0cmVhbVxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyZWFtLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTdHJlYW0odmFsKSB7XG4gIHJldHVybiBpc09iamVjdCh2YWwpICYmIGlzRnVuY3Rpb24odmFsLnBpcGUpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzVVJMU2VhcmNoUGFyYW1zKHZhbCkge1xuICByZXR1cm4gdHlwZW9mIFVSTFNlYXJjaFBhcmFtcyAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsIGluc3RhbmNlb2YgVVJMU2VhcmNoUGFyYW1zO1xufVxuXG4vKipcbiAqIFRyaW0gZXhjZXNzIHdoaXRlc3BhY2Ugb2ZmIHRoZSBiZWdpbm5pbmcgYW5kIGVuZCBvZiBhIHN0cmluZ1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgVGhlIFN0cmluZyB0byB0cmltXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgU3RyaW5nIGZyZWVkIG9mIGV4Y2VzcyB3aGl0ZXNwYWNlXG4gKi9cbmZ1bmN0aW9uIHRyaW0oc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvXlxccyovLCAnJykucmVwbGFjZSgvXFxzKiQvLCAnJyk7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIHdlJ3JlIHJ1bm5pbmcgaW4gYSBzdGFuZGFyZCBicm93c2VyIGVudmlyb25tZW50XG4gKlxuICogVGhpcyBhbGxvd3MgYXhpb3MgdG8gcnVuIGluIGEgd2ViIHdvcmtlciwgYW5kIHJlYWN0LW5hdGl2ZS5cbiAqIEJvdGggZW52aXJvbm1lbnRzIHN1cHBvcnQgWE1MSHR0cFJlcXVlc3QsIGJ1dCBub3QgZnVsbHkgc3RhbmRhcmQgZ2xvYmFscy5cbiAqXG4gKiB3ZWIgd29ya2VyczpcbiAqICB0eXBlb2Ygd2luZG93IC0+IHVuZGVmaW5lZFxuICogIHR5cGVvZiBkb2N1bWVudCAtPiB1bmRlZmluZWRcbiAqXG4gKiByZWFjdC1uYXRpdmU6XG4gKiAgbmF2aWdhdG9yLnByb2R1Y3QgLT4gJ1JlYWN0TmF0aXZlJ1xuICovXG5mdW5jdGlvbiBpc1N0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci5wcm9kdWN0ID09PSAnUmVhY3ROYXRpdmUnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHJldHVybiAoXG4gICAgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnXG4gICk7XG59XG5cbi8qKlxuICogSXRlcmF0ZSBvdmVyIGFuIEFycmF5IG9yIGFuIE9iamVjdCBpbnZva2luZyBhIGZ1bmN0aW9uIGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgYG9iamAgaXMgYW4gQXJyYXkgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBpbmRleCwgYW5kIGNvbXBsZXRlIGFycmF5IGZvciBlYWNoIGl0ZW0uXG4gKlxuICogSWYgJ29iaicgaXMgYW4gT2JqZWN0IGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIHBhc3NpbmdcbiAqIHRoZSB2YWx1ZSwga2V5LCBhbmQgY29tcGxldGUgb2JqZWN0IGZvciBlYWNoIHByb3BlcnR5LlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fEFycmF5fSBvYmogVGhlIG9iamVjdCB0byBpdGVyYXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgY2FsbGJhY2sgdG8gaW52b2tlIGZvciBlYWNoIGl0ZW1cbiAqL1xuZnVuY3Rpb24gZm9yRWFjaChvYmosIGZuKSB7XG4gIC8vIERvbid0IGJvdGhlciBpZiBubyB2YWx1ZSBwcm92aWRlZFxuICBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRm9yY2UgYW4gYXJyYXkgaWYgbm90IGFscmVhZHkgc29tZXRoaW5nIGl0ZXJhYmxlXG4gIGlmICh0eXBlb2Ygb2JqICE9PSAnb2JqZWN0Jykge1xuICAgIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICAgIG9iaiA9IFtvYmpdO1xuICB9XG5cbiAgaWYgKGlzQXJyYXkob2JqKSkge1xuICAgIC8vIEl0ZXJhdGUgb3ZlciBhcnJheSB2YWx1ZXNcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IG9iai5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGZuLmNhbGwobnVsbCwgb2JqW2ldLCBpLCBvYmopO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBJdGVyYXRlIG92ZXIgb2JqZWN0IGtleXNcbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7XG4gICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkge1xuICAgICAgICBmbi5jYWxsKG51bGwsIG9ialtrZXldLCBrZXksIG9iaik7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQWNjZXB0cyB2YXJhcmdzIGV4cGVjdGluZyBlYWNoIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCwgdGhlblxuICogaW1tdXRhYmx5IG1lcmdlcyB0aGUgcHJvcGVydGllcyBvZiBlYWNoIG9iamVjdCBhbmQgcmV0dXJucyByZXN1bHQuXG4gKlxuICogV2hlbiBtdWx0aXBsZSBvYmplY3RzIGNvbnRhaW4gdGhlIHNhbWUga2V5IHRoZSBsYXRlciBvYmplY3QgaW5cbiAqIHRoZSBhcmd1bWVudHMgbGlzdCB3aWxsIHRha2UgcHJlY2VkZW5jZS5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYGpzXG4gKiB2YXIgcmVzdWx0ID0gbWVyZ2Uoe2ZvbzogMTIzfSwge2ZvbzogNDU2fSk7XG4gKiBjb25zb2xlLmxvZyhyZXN1bHQuZm9vKTsgLy8gb3V0cHV0cyA0NTZcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmoxIE9iamVjdCB0byBtZXJnZVxuICogQHJldHVybnMge09iamVjdH0gUmVzdWx0IG9mIGFsbCBtZXJnZSBwcm9wZXJ0aWVzXG4gKi9cbmZ1bmN0aW9uIG1lcmdlKC8qIG9iajEsIG9iajIsIG9iajMsIC4uLiAqLykge1xuICB2YXIgcmVzdWx0ID0ge307XG4gIGZ1bmN0aW9uIGFzc2lnblZhbHVlKHZhbCwga2V5KSB7XG4gICAgaWYgKHR5cGVvZiByZXN1bHRba2V5XSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHZhbCA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHJlc3VsdFtrZXldID0gbWVyZ2UocmVzdWx0W2tleV0sIHZhbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdFtrZXldID0gdmFsO1xuICAgIH1cbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGZvckVhY2goYXJndW1lbnRzW2ldLCBhc3NpZ25WYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBFeHRlbmRzIG9iamVjdCBhIGJ5IG11dGFibHkgYWRkaW5nIHRvIGl0IHRoZSBwcm9wZXJ0aWVzIG9mIG9iamVjdCBiLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBhIFRoZSBvYmplY3QgdG8gYmUgZXh0ZW5kZWRcbiAqIEBwYXJhbSB7T2JqZWN0fSBiIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb21cbiAqIEBwYXJhbSB7T2JqZWN0fSB0aGlzQXJnIFRoZSBvYmplY3QgdG8gYmluZCBmdW5jdGlvbiB0b1xuICogQHJldHVybiB7T2JqZWN0fSBUaGUgcmVzdWx0aW5nIHZhbHVlIG9mIG9iamVjdCBhXG4gKi9cbmZ1bmN0aW9uIGV4dGVuZChhLCBiLCB0aGlzQXJnKSB7XG4gIGZvckVhY2goYiwgZnVuY3Rpb24gYXNzaWduVmFsdWUodmFsLCBrZXkpIHtcbiAgICBpZiAodGhpc0FyZyAmJiB0eXBlb2YgdmFsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBhW2tleV0gPSBiaW5kKHZhbCwgdGhpc0FyZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFba2V5XSA9IHZhbDtcbiAgICB9XG4gIH0pO1xuICByZXR1cm4gYTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlzQXJyYXk6IGlzQXJyYXksXG4gIGlzQXJyYXlCdWZmZXI6IGlzQXJyYXlCdWZmZXIsXG4gIGlzQnVmZmVyOiBpc0J1ZmZlcixcbiAgaXNGb3JtRGF0YTogaXNGb3JtRGF0YSxcbiAgaXNBcnJheUJ1ZmZlclZpZXc6IGlzQXJyYXlCdWZmZXJWaWV3LFxuICBpc1N0cmluZzogaXNTdHJpbmcsXG4gIGlzTnVtYmVyOiBpc051bWJlcixcbiAgaXNPYmplY3Q6IGlzT2JqZWN0LFxuICBpc1VuZGVmaW5lZDogaXNVbmRlZmluZWQsXG4gIGlzRGF0ZTogaXNEYXRlLFxuICBpc0ZpbGU6IGlzRmlsZSxcbiAgaXNCbG9iOiBpc0Jsb2IsXG4gIGlzRnVuY3Rpb246IGlzRnVuY3Rpb24sXG4gIGlzU3RyZWFtOiBpc1N0cmVhbSxcbiAgaXNVUkxTZWFyY2hQYXJhbXM6IGlzVVJMU2VhcmNoUGFyYW1zLFxuICBpc1N0YW5kYXJkQnJvd3NlckVudjogaXNTdGFuZGFyZEJyb3dzZXJFbnYsXG4gIGZvckVhY2g6IGZvckVhY2gsXG4gIG1lcmdlOiBtZXJnZSxcbiAgZXh0ZW5kOiBleHRlbmQsXG4gIHRyaW06IHRyaW1cbn07XG4iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBVdGlsaXR5IHtcbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIHN0cmluZyBvZiBnaXZlbiBsZW5ndGhcbiAgICogXG4gICAqIEBzdGF0aWNcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHN0cmluZ0xlbmd0aCBcbiAgICogQHJldHVybnMgXG4gICAqIEBtZW1iZXJvZiBVdGlsaXR5XG4gICAqL1xuICBzdGF0aWMgZ2VuZXJhdGVSYW5kb21TdHJpbmcoc3RyaW5nTGVuZ3RoKSB7XG4gICAgY29uc3QgYWxsb3dlZENoYXJzID0gXCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OVwiO1xuICAgIGxldCB0ZXh0ID0gXCJcIjtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyaW5nTGVuZ3RoOyBpKyspXG4gICAgICB0ZXh0ICs9IGFsbG93ZWRDaGFycy5jaGFyQXQoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogYWxsb3dlZENoYXJzLmxlbmd0aCkpO1xuXG4gICAgcmV0dXJuIHRleHQ7XG4gIH1cblxuICAvKipcbiAgICogRGVlcCBtZXJnZXMgb2JqZWN0cyBzZW50IGFzIGFyZ3VtZW50c1xuICAgKiBcbiAgICogQHN0YXRpY1xuICAgKiBAcmV0dXJucyBcbiAgICogQG1lbWJlcm9mIFV0aWxpdHlcbiAgICovXG4gIHN0YXRpYyBtZXJnZSgpIHtcbiAgICBsZXQgcmVzdWx0ID0ge307XG4gICAgaWYgKCFhcmd1bWVudHMgfHwgIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBjdXJyZW50QXJnID0gYXJndW1lbnRzW2ldO1xuICAgICAgaWYgKCFjdXJyZW50QXJnKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgT2JqZWN0LmtleXMoY3VycmVudEFyZykuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICBpZiAoVXRpbGl0eS5pc09iamVjdChjdXJyZW50QXJnW2tleV0pICYmIHJlc3VsdFtrZXldICYmIFV0aWxpdHkuaXNPYmplY3QocmVzdWx0W2tleV0pKSB7XG4gICAgICAgICAgcmVzdWx0W2tleV0gPSBVdGlsaXR5Lm1lcmdlKHJlc3VsdFtrZXldLCBjdXJyZW50QXJnW2tleV0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3VsdFtrZXldID0gY3VycmVudEFyZ1trZXldO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXRlcm1pbmVzIGlmIGEgdmFyaWFibGUgaXMgUGxhaW4gSlMgT2JqZWN0XG4gICAqIFxuICAgKiBAc3RhdGljXG4gICAqIEBwYXJhbSB7YW55fSBkYXRhIFxuICAgKiBAcmV0dXJucyB7Qm9vbGVhbn1cbiAgICogQG1lbWJlcm9mIFV0aWxpdHlcbiAgICovXG4gIHN0YXRpYyBpc09iamVjdChkYXRhKSB7XG4gICAgaWYgKCFkYXRhKSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZGF0YSkgPT09ICdbb2JqZWN0IE9iamVjdF0nKTtcbiAgfVxuXG4gIHN0YXRpYyBpc05pbGwoZGF0YSkge1xuICAgIGlmIChkYXRhID09IG51bGwgfHwgZGF0YSA9PSB1bmRlZmluZWQpIHJldHVybiB0cnVlO1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0YXRpYyBpc0VtcHR5KGRhdGEpIHtcbiAgICBpZiAoZGF0YSA9PSBudWxsIHx8IGRhdGEgPT0gdW5kZWZpbmVkKSByZXR1cm4gdHJ1ZTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShkYXRhKSB8fCB0eXBlb2YgZGF0YSA9PSAnc3RyaW5nJykgcmV0dXJuIGRhdGEubGVuZ3RoID8gZmFsc2UgOiB0cnVlO1xuICAgIGlmIChVdGlsaXR5LmlzT2JqZWN0KGRhdGEpKSByZXR1cm4gT2JqZWN0LmtleXMoZGF0YSkubGVuZ3RoID8gZmFsc2UgOiB0cnVlO1xuICB9XG59IiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xudmFyIGFkZExlYWRpbmdTbGFzaCA9IGV4cG9ydHMuYWRkTGVhZGluZ1NsYXNoID0gZnVuY3Rpb24gYWRkTGVhZGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnLycgPyBwYXRoIDogJy8nICsgcGF0aDtcbn07XG5cbnZhciBzdHJpcExlYWRpbmdTbGFzaCA9IGV4cG9ydHMuc3RyaXBMZWFkaW5nU2xhc2ggPSBmdW5jdGlvbiBzdHJpcExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nID8gcGF0aC5zdWJzdHIoMSkgOiBwYXRoO1xufTtcblxudmFyIGhhc0Jhc2VuYW1lID0gZXhwb3J0cy5oYXNCYXNlbmFtZSA9IGZ1bmN0aW9uIGhhc0Jhc2VuYW1lKHBhdGgsIHByZWZpeCkge1xuICByZXR1cm4gbmV3IFJlZ0V4cCgnXicgKyBwcmVmaXggKyAnKFxcXFwvfFxcXFw/fCN8JCknLCAnaScpLnRlc3QocGF0aCk7XG59O1xuXG52YXIgc3RyaXBCYXNlbmFtZSA9IGV4cG9ydHMuc3RyaXBCYXNlbmFtZSA9IGZ1bmN0aW9uIHN0cmlwQmFzZW5hbWUocGF0aCwgcHJlZml4KSB7XG4gIHJldHVybiBoYXNCYXNlbmFtZShwYXRoLCBwcmVmaXgpID8gcGF0aC5zdWJzdHIocHJlZml4Lmxlbmd0aCkgOiBwYXRoO1xufTtcblxudmFyIHN0cmlwVHJhaWxpbmdTbGFzaCA9IGV4cG9ydHMuc3RyaXBUcmFpbGluZ1NsYXNoID0gZnVuY3Rpb24gc3RyaXBUcmFpbGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KHBhdGgubGVuZ3RoIC0gMSkgPT09ICcvJyA/IHBhdGguc2xpY2UoMCwgLTEpIDogcGF0aDtcbn07XG5cbnZhciBwYXJzZVBhdGggPSBleHBvcnRzLnBhcnNlUGF0aCA9IGZ1bmN0aW9uIHBhcnNlUGF0aChwYXRoKSB7XG4gIHZhciBwYXRobmFtZSA9IHBhdGggfHwgJy8nO1xuICB2YXIgc2VhcmNoID0gJyc7XG4gIHZhciBoYXNoID0gJyc7XG5cbiAgdmFyIGhhc2hJbmRleCA9IHBhdGhuYW1lLmluZGV4T2YoJyMnKTtcbiAgaWYgKGhhc2hJbmRleCAhPT0gLTEpIHtcbiAgICBoYXNoID0gcGF0aG5hbWUuc3Vic3RyKGhhc2hJbmRleCk7XG4gICAgcGF0aG5hbWUgPSBwYXRobmFtZS5zdWJzdHIoMCwgaGFzaEluZGV4KTtcbiAgfVxuXG4gIHZhciBzZWFyY2hJbmRleCA9IHBhdGhuYW1lLmluZGV4T2YoJz8nKTtcbiAgaWYgKHNlYXJjaEluZGV4ICE9PSAtMSkge1xuICAgIHNlYXJjaCA9IHBhdGhuYW1lLnN1YnN0cihzZWFyY2hJbmRleCk7XG4gICAgcGF0aG5hbWUgPSBwYXRobmFtZS5zdWJzdHIoMCwgc2VhcmNoSW5kZXgpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBwYXRobmFtZTogcGF0aG5hbWUsXG4gICAgc2VhcmNoOiBzZWFyY2ggPT09ICc/JyA/ICcnIDogc2VhcmNoLFxuICAgIGhhc2g6IGhhc2ggPT09ICcjJyA/ICcnIDogaGFzaFxuICB9O1xufTtcblxudmFyIGNyZWF0ZVBhdGggPSBleHBvcnRzLmNyZWF0ZVBhdGggPSBmdW5jdGlvbiBjcmVhdGVQYXRoKGxvY2F0aW9uKSB7XG4gIHZhciBwYXRobmFtZSA9IGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgc2VhcmNoID0gbG9jYXRpb24uc2VhcmNoLFxuICAgICAgaGFzaCA9IGxvY2F0aW9uLmhhc2g7XG5cblxuICB2YXIgcGF0aCA9IHBhdGhuYW1lIHx8ICcvJztcblxuICBpZiAoc2VhcmNoICYmIHNlYXJjaCAhPT0gJz8nKSBwYXRoICs9IHNlYXJjaC5jaGFyQXQoMCkgPT09ICc/JyA/IHNlYXJjaCA6ICc/JyArIHNlYXJjaDtcblxuICBpZiAoaGFzaCAmJiBoYXNoICE9PSAnIycpIHBhdGggKz0gaGFzaC5jaGFyQXQoMCkgPT09ICcjJyA/IGhhc2ggOiAnIycgKyBoYXNoO1xuXG4gIHJldHVybiBwYXRoO1xufTsiLCIvKlxuQ29weXJpZ2h0IChjKSAyMDEwLDIwMTEsMjAxMiwyMDEzLDIwMTQgTW9yZ2FuIFJvZGVyaWNrIGh0dHA6Ly9yb2Rlcmljay5ka1xuTGljZW5zZTogTUlUIC0gaHR0cDovL21yZ25yZHJjay5taXQtbGljZW5zZS5vcmdcblxuaHR0cHM6Ly9naXRodWIuY29tL21yb2Rlcmljay9QdWJTdWJKU1xuKi9cbihmdW5jdGlvbiAocm9vdCwgZmFjdG9yeSl7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgdmFyIFB1YlN1YiA9IHt9O1xuICAgIHJvb3QuUHViU3ViID0gUHViU3ViO1xuXG4gICAgdmFyIGRlZmluZSA9IHJvb3QuZGVmaW5lO1xuXG4gICAgZmFjdG9yeShQdWJTdWIpO1xuXG4gICAgLy8gQU1EIHN1cHBvcnRcbiAgICBpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKXtcbiAgICAgICAgZGVmaW5lKGZ1bmN0aW9uKCkgeyByZXR1cm4gUHViU3ViOyB9KTtcblxuICAgICAgICAvLyBDb21tb25KUyBhbmQgTm9kZS5qcyBtb2R1bGUgc3VwcG9ydFxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKXtcbiAgICAgICAgaWYgKG1vZHVsZSAhPT0gdW5kZWZpbmVkICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gICAgICAgICAgICBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBQdWJTdWI7IC8vIE5vZGUuanMgc3BlY2lmaWMgYG1vZHVsZS5leHBvcnRzYFxuICAgICAgICB9XG4gICAgICAgIGV4cG9ydHMuUHViU3ViID0gUHViU3ViOyAvLyBDb21tb25KUyBtb2R1bGUgMS4xLjEgc3BlY1xuICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHMgPSBQdWJTdWI7IC8vIENvbW1vbkpTXG4gICAgfVxuXG59KCggdHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcgJiYgd2luZG93ICkgfHwgdGhpcywgZnVuY3Rpb24gKFB1YlN1Yil7XG4gICAgJ3VzZSBzdHJpY3QnO1xuXG4gICAgdmFyIG1lc3NhZ2VzID0ge30sXG4gICAgICAgIGxhc3RVaWQgPSAtMTtcblxuICAgIGZ1bmN0aW9uIGhhc0tleXMob2JqKXtcbiAgICAgICAgdmFyIGtleTtcblxuICAgICAgICBmb3IgKGtleSBpbiBvYmope1xuICAgICAgICAgICAgaWYgKCBvYmouaGFzT3duUHJvcGVydHkoa2V5KSApe1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcblx0ICpcdFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IHRocm93cyB0aGUgcGFzc2VkIGV4Y2VwdGlvbiwgZm9yIHVzZSBhcyBhcmd1bWVudCBmb3Igc2V0VGltZW91dFxuXHQgKlx0QHBhcmFtIHsgT2JqZWN0IH0gZXggQW4gRXJyb3Igb2JqZWN0XG5cdCAqL1xuICAgIGZ1bmN0aW9uIHRocm93RXhjZXB0aW9uKCBleCApe1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gcmVUaHJvd0V4Y2VwdGlvbigpe1xuICAgICAgICAgICAgdGhyb3cgZXg7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2FsbFN1YnNjcmliZXJXaXRoRGVsYXllZEV4Y2VwdGlvbnMoIHN1YnNjcmliZXIsIG1lc3NhZ2UsIGRhdGEgKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIoIG1lc3NhZ2UsIGRhdGEgKTtcbiAgICAgICAgfSBjYXRjaCggZXggKXtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoIHRocm93RXhjZXB0aW9uKCBleCApLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNhbGxTdWJzY3JpYmVyV2l0aEltbWVkaWF0ZUV4Y2VwdGlvbnMoIHN1YnNjcmliZXIsIG1lc3NhZ2UsIGRhdGEgKXtcbiAgICAgICAgc3Vic2NyaWJlciggbWVzc2FnZSwgZGF0YSApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlbGl2ZXJNZXNzYWdlKCBvcmlnaW5hbE1lc3NhZ2UsIG1hdGNoZWRNZXNzYWdlLCBkYXRhLCBpbW1lZGlhdGVFeGNlcHRpb25zICl7XG4gICAgICAgIHZhciBzdWJzY3JpYmVycyA9IG1lc3NhZ2VzW21hdGNoZWRNZXNzYWdlXSxcbiAgICAgICAgICAgIGNhbGxTdWJzY3JpYmVyID0gaW1tZWRpYXRlRXhjZXB0aW9ucyA/IGNhbGxTdWJzY3JpYmVyV2l0aEltbWVkaWF0ZUV4Y2VwdGlvbnMgOiBjYWxsU3Vic2NyaWJlcldpdGhEZWxheWVkRXhjZXB0aW9ucyxcbiAgICAgICAgICAgIHM7XG5cbiAgICAgICAgaWYgKCAhbWVzc2FnZXMuaGFzT3duUHJvcGVydHkoIG1hdGNoZWRNZXNzYWdlICkgKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHMgaW4gc3Vic2NyaWJlcnMpe1xuICAgICAgICAgICAgaWYgKCBzdWJzY3JpYmVycy5oYXNPd25Qcm9wZXJ0eShzKSl7XG4gICAgICAgICAgICAgICAgY2FsbFN1YnNjcmliZXIoIHN1YnNjcmliZXJzW3NdLCBvcmlnaW5hbE1lc3NhZ2UsIGRhdGEgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZURlbGl2ZXJ5RnVuY3Rpb24oIG1lc3NhZ2UsIGRhdGEsIGltbWVkaWF0ZUV4Y2VwdGlvbnMgKXtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGRlbGl2ZXJOYW1lc3BhY2VkKCl7XG4gICAgICAgICAgICB2YXIgdG9waWMgPSBTdHJpbmcoIG1lc3NhZ2UgKSxcbiAgICAgICAgICAgICAgICBwb3NpdGlvbiA9IHRvcGljLmxhc3RJbmRleE9mKCAnLicgKTtcblxuICAgICAgICAgICAgLy8gZGVsaXZlciB0aGUgbWVzc2FnZSBhcyBpdCBpcyBub3dcbiAgICAgICAgICAgIGRlbGl2ZXJNZXNzYWdlKG1lc3NhZ2UsIG1lc3NhZ2UsIGRhdGEsIGltbWVkaWF0ZUV4Y2VwdGlvbnMpO1xuXG4gICAgICAgICAgICAvLyB0cmltIHRoZSBoaWVyYXJjaHkgYW5kIGRlbGl2ZXIgbWVzc2FnZSB0byBlYWNoIGxldmVsXG4gICAgICAgICAgICB3aGlsZSggcG9zaXRpb24gIT09IC0xICl7XG4gICAgICAgICAgICAgICAgdG9waWMgPSB0b3BpYy5zdWJzdHIoIDAsIHBvc2l0aW9uICk7XG4gICAgICAgICAgICAgICAgcG9zaXRpb24gPSB0b3BpYy5sYXN0SW5kZXhPZignLicpO1xuICAgICAgICAgICAgICAgIGRlbGl2ZXJNZXNzYWdlKCBtZXNzYWdlLCB0b3BpYywgZGF0YSwgaW1tZWRpYXRlRXhjZXB0aW9ucyApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1lc3NhZ2VIYXNTdWJzY3JpYmVycyggbWVzc2FnZSApe1xuICAgICAgICB2YXIgdG9waWMgPSBTdHJpbmcoIG1lc3NhZ2UgKSxcbiAgICAgICAgICAgIGZvdW5kID0gQm9vbGVhbihtZXNzYWdlcy5oYXNPd25Qcm9wZXJ0eSggdG9waWMgKSAmJiBoYXNLZXlzKG1lc3NhZ2VzW3RvcGljXSkpLFxuICAgICAgICAgICAgcG9zaXRpb24gPSB0b3BpYy5sYXN0SW5kZXhPZiggJy4nICk7XG5cbiAgICAgICAgd2hpbGUgKCAhZm91bmQgJiYgcG9zaXRpb24gIT09IC0xICl7XG4gICAgICAgICAgICB0b3BpYyA9IHRvcGljLnN1YnN0ciggMCwgcG9zaXRpb24gKTtcbiAgICAgICAgICAgIHBvc2l0aW9uID0gdG9waWMubGFzdEluZGV4T2YoICcuJyApO1xuICAgICAgICAgICAgZm91bmQgPSBCb29sZWFuKG1lc3NhZ2VzLmhhc093blByb3BlcnR5KCB0b3BpYyApICYmIGhhc0tleXMobWVzc2FnZXNbdG9waWNdKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZm91bmQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcHVibGlzaCggbWVzc2FnZSwgZGF0YSwgc3luYywgaW1tZWRpYXRlRXhjZXB0aW9ucyApe1xuICAgICAgICB2YXIgZGVsaXZlciA9IGNyZWF0ZURlbGl2ZXJ5RnVuY3Rpb24oIG1lc3NhZ2UsIGRhdGEsIGltbWVkaWF0ZUV4Y2VwdGlvbnMgKSxcbiAgICAgICAgICAgIGhhc1N1YnNjcmliZXJzID0gbWVzc2FnZUhhc1N1YnNjcmliZXJzKCBtZXNzYWdlICk7XG5cbiAgICAgICAgaWYgKCAhaGFzU3Vic2NyaWJlcnMgKXtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICggc3luYyA9PT0gdHJ1ZSApe1xuICAgICAgICAgICAgZGVsaXZlcigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2V0VGltZW91dCggZGVsaXZlciwgMCApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuXHQgKlx0UHViU3ViLnB1Ymxpc2goIG1lc3NhZ2VbLCBkYXRhXSApIC0+IEJvb2xlYW5cblx0ICpcdC0gbWVzc2FnZSAoU3RyaW5nKTogVGhlIG1lc3NhZ2UgdG8gcHVibGlzaFxuXHQgKlx0LSBkYXRhOiBUaGUgZGF0YSB0byBwYXNzIHRvIHN1YnNjcmliZXJzXG5cdCAqXHRQdWJsaXNoZXMgdGhlIHRoZSBtZXNzYWdlLCBwYXNzaW5nIHRoZSBkYXRhIHRvIGl0J3Mgc3Vic2NyaWJlcnNcblx0KiovXG4gICAgUHViU3ViLnB1Ymxpc2ggPSBmdW5jdGlvbiggbWVzc2FnZSwgZGF0YSApe1xuICAgICAgICByZXR1cm4gcHVibGlzaCggbWVzc2FnZSwgZGF0YSwgZmFsc2UsIFB1YlN1Yi5pbW1lZGlhdGVFeGNlcHRpb25zICk7XG4gICAgfTtcblxuICAgIC8qKlxuXHQgKlx0UHViU3ViLnB1Ymxpc2hTeW5jKCBtZXNzYWdlWywgZGF0YV0gKSAtPiBCb29sZWFuXG5cdCAqXHQtIG1lc3NhZ2UgKFN0cmluZyk6IFRoZSBtZXNzYWdlIHRvIHB1Ymxpc2hcblx0ICpcdC0gZGF0YTogVGhlIGRhdGEgdG8gcGFzcyB0byBzdWJzY3JpYmVyc1xuXHQgKlx0UHVibGlzaGVzIHRoZSB0aGUgbWVzc2FnZSBzeW5jaHJvbm91c2x5LCBwYXNzaW5nIHRoZSBkYXRhIHRvIGl0J3Mgc3Vic2NyaWJlcnNcblx0KiovXG4gICAgUHViU3ViLnB1Ymxpc2hTeW5jID0gZnVuY3Rpb24oIG1lc3NhZ2UsIGRhdGEgKXtcbiAgICAgICAgcmV0dXJuIHB1Ymxpc2goIG1lc3NhZ2UsIGRhdGEsIHRydWUsIFB1YlN1Yi5pbW1lZGlhdGVFeGNlcHRpb25zICk7XG4gICAgfTtcblxuICAgIC8qKlxuXHQgKlx0UHViU3ViLnN1YnNjcmliZSggbWVzc2FnZSwgZnVuYyApIC0+IFN0cmluZ1xuXHQgKlx0LSBtZXNzYWdlIChTdHJpbmcpOiBUaGUgbWVzc2FnZSB0byBzdWJzY3JpYmUgdG9cblx0ICpcdC0gZnVuYyAoRnVuY3Rpb24pOiBUaGUgZnVuY3Rpb24gdG8gY2FsbCB3aGVuIGEgbmV3IG1lc3NhZ2UgaXMgcHVibGlzaGVkXG5cdCAqXHRTdWJzY3JpYmVzIHRoZSBwYXNzZWQgZnVuY3Rpb24gdG8gdGhlIHBhc3NlZCBtZXNzYWdlLiBFdmVyeSByZXR1cm5lZCB0b2tlbiBpcyB1bmlxdWUgYW5kIHNob3VsZCBiZSBzdG9yZWQgaWZcblx0ICpcdHlvdSBuZWVkIHRvIHVuc3Vic2NyaWJlXG5cdCoqL1xuICAgIFB1YlN1Yi5zdWJzY3JpYmUgPSBmdW5jdGlvbiggbWVzc2FnZSwgZnVuYyApe1xuICAgICAgICBpZiAoIHR5cGVvZiBmdW5jICE9PSAnZnVuY3Rpb24nKXtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIG1lc3NhZ2UgaXMgbm90IHJlZ2lzdGVyZWQgeWV0XG4gICAgICAgIGlmICggIW1lc3NhZ2VzLmhhc093blByb3BlcnR5KCBtZXNzYWdlICkgKXtcbiAgICAgICAgICAgIG1lc3NhZ2VzW21lc3NhZ2VdID0ge307XG4gICAgICAgIH1cblxuICAgICAgICAvLyBmb3JjaW5nIHRva2VuIGFzIFN0cmluZywgdG8gYWxsb3cgZm9yIGZ1dHVyZSBleHBhbnNpb25zIHdpdGhvdXQgYnJlYWtpbmcgdXNhZ2VcbiAgICAgICAgLy8gYW5kIGFsbG93IGZvciBlYXN5IHVzZSBhcyBrZXkgbmFtZXMgZm9yIHRoZSAnbWVzc2FnZXMnIG9iamVjdFxuICAgICAgICB2YXIgdG9rZW4gPSAndWlkXycgKyBTdHJpbmcoKytsYXN0VWlkKTtcbiAgICAgICAgbWVzc2FnZXNbbWVzc2FnZV1bdG9rZW5dID0gZnVuYztcblxuICAgICAgICAvLyByZXR1cm4gdG9rZW4gZm9yIHVuc3Vic2NyaWJpbmdcbiAgICAgICAgcmV0dXJuIHRva2VuO1xuICAgIH07XG5cbiAgICAvKipcblx0ICpcdFB1YlN1Yi5zdWJzY3JpYmVPbmNlKCBtZXNzYWdlLCBmdW5jICkgLT4gUHViU3ViXG5cdCAqXHQtIG1lc3NhZ2UgKFN0cmluZyk6IFRoZSBtZXNzYWdlIHRvIHN1YnNjcmliZSB0b1xuXHQgKlx0LSBmdW5jIChGdW5jdGlvbik6IFRoZSBmdW5jdGlvbiB0byBjYWxsIHdoZW4gYSBuZXcgbWVzc2FnZSBpcyBwdWJsaXNoZWRcblx0ICpcdFN1YnNjcmliZXMgdGhlIHBhc3NlZCBmdW5jdGlvbiB0byB0aGUgcGFzc2VkIG1lc3NhZ2Ugb25jZVxuXHQqKi9cbiAgICBQdWJTdWIuc3Vic2NyaWJlT25jZSA9IGZ1bmN0aW9uKCBtZXNzYWdlLCBmdW5jICl7XG4gICAgICAgIHZhciB0b2tlbiA9IFB1YlN1Yi5zdWJzY3JpYmUoIG1lc3NhZ2UsIGZ1bmN0aW9uKCl7XG4gICAgICAgICAgICAvLyBiZWZvcmUgZnVuYyBhcHBseSwgdW5zdWJzY3JpYmUgbWVzc2FnZVxuICAgICAgICAgICAgUHViU3ViLnVuc3Vic2NyaWJlKCB0b2tlbiApO1xuICAgICAgICAgICAgZnVuYy5hcHBseSggdGhpcywgYXJndW1lbnRzICk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gUHViU3ViO1xuICAgIH07XG5cbiAgICAvKiBQdWJsaWM6IENsZWFycyBhbGwgc3Vic2NyaXB0aW9uc1xuXHQgKi9cbiAgICBQdWJTdWIuY2xlYXJBbGxTdWJzY3JpcHRpb25zID0gZnVuY3Rpb24gY2xlYXJBbGxTdWJzY3JpcHRpb25zKCl7XG4gICAgICAgIG1lc3NhZ2VzID0ge307XG4gICAgfTtcblxuICAgIC8qUHVibGljOiBDbGVhciBzdWJzY3JpcHRpb25zIGJ5IHRoZSB0b3BpY1xuXHQqL1xuICAgIFB1YlN1Yi5jbGVhclN1YnNjcmlwdGlvbnMgPSBmdW5jdGlvbiBjbGVhclN1YnNjcmlwdGlvbnModG9waWMpe1xuICAgICAgICB2YXIgbTtcbiAgICAgICAgZm9yIChtIGluIG1lc3NhZ2VzKXtcbiAgICAgICAgICAgIGlmIChtZXNzYWdlcy5oYXNPd25Qcm9wZXJ0eShtKSAmJiBtLmluZGV4T2YodG9waWMpID09PSAwKXtcbiAgICAgICAgICAgICAgICBkZWxldGUgbWVzc2FnZXNbbV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgLyogUHVibGljOiByZW1vdmVzIHN1YnNjcmlwdGlvbnMuXG5cdCAqIFdoZW4gcGFzc2VkIGEgdG9rZW4sIHJlbW92ZXMgYSBzcGVjaWZpYyBzdWJzY3JpcHRpb24uXG5cdCAqIFdoZW4gcGFzc2VkIGEgZnVuY3Rpb24sIHJlbW92ZXMgYWxsIHN1YnNjcmlwdGlvbnMgZm9yIHRoYXQgZnVuY3Rpb25cblx0ICogV2hlbiBwYXNzZWQgYSB0b3BpYywgcmVtb3ZlcyBhbGwgc3Vic2NyaXB0aW9ucyBmb3IgdGhhdCB0b3BpYyAoaGllcmFyY2h5KVxuXHQgKlxuXHQgKiB2YWx1ZSAtIEEgdG9rZW4sIGZ1bmN0aW9uIG9yIHRvcGljIHRvIHVuc3Vic2NyaWJlLlxuXHQgKlxuXHQgKiBFeGFtcGxlc1xuXHQgKlxuXHQgKlx0XHQvLyBFeGFtcGxlIDEgLSB1bnN1YnNjcmliaW5nIHdpdGggYSB0b2tlblxuXHQgKlx0XHR2YXIgdG9rZW4gPSBQdWJTdWIuc3Vic2NyaWJlKCdteXRvcGljJywgbXlGdW5jKTtcblx0ICpcdFx0UHViU3ViLnVuc3Vic2NyaWJlKHRva2VuKTtcblx0ICpcblx0ICpcdFx0Ly8gRXhhbXBsZSAyIC0gdW5zdWJzY3JpYmluZyB3aXRoIGEgZnVuY3Rpb25cblx0ICpcdFx0UHViU3ViLnVuc3Vic2NyaWJlKG15RnVuYyk7XG5cdCAqXG5cdCAqXHRcdC8vIEV4YW1wbGUgMyAtIHVuc3Vic2NyaWJpbmcgYSB0b3BpY1xuXHQgKlx0XHRQdWJTdWIudW5zdWJzY3JpYmUoJ215dG9waWMnKTtcblx0ICovXG4gICAgUHViU3ViLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24odmFsdWUpe1xuICAgICAgICB2YXIgZGVzY2VuZGFudFRvcGljRXhpc3RzID0gZnVuY3Rpb24odG9waWMpIHtcbiAgICAgICAgICAgICAgICB2YXIgbTtcbiAgICAgICAgICAgICAgICBmb3IgKCBtIGluIG1lc3NhZ2VzICl7XG4gICAgICAgICAgICAgICAgICAgIGlmICggbWVzc2FnZXMuaGFzT3duUHJvcGVydHkobSkgJiYgbS5pbmRleE9mKHRvcGljKSA9PT0gMCApe1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYSBkZXNjZW5kYW50IG9mIHRoZSB0b3BpYyBleGlzdHM6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpc1RvcGljICAgID0gdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyAmJiAoIG1lc3NhZ2VzLmhhc093blByb3BlcnR5KHZhbHVlKSB8fCBkZXNjZW5kYW50VG9waWNFeGlzdHModmFsdWUpICksXG4gICAgICAgICAgICBpc1Rva2VuICAgID0gIWlzVG9waWMgJiYgdHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyxcbiAgICAgICAgICAgIGlzRnVuY3Rpb24gPSB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicsXG4gICAgICAgICAgICByZXN1bHQgPSBmYWxzZSxcbiAgICAgICAgICAgIG0sIG1lc3NhZ2UsIHQ7XG5cbiAgICAgICAgaWYgKGlzVG9waWMpe1xuICAgICAgICAgICAgUHViU3ViLmNsZWFyU3Vic2NyaXB0aW9ucyh2YWx1ZSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKCBtIGluIG1lc3NhZ2VzICl7XG4gICAgICAgICAgICBpZiAoIG1lc3NhZ2VzLmhhc093blByb3BlcnR5KCBtICkgKXtcbiAgICAgICAgICAgICAgICBtZXNzYWdlID0gbWVzc2FnZXNbbV07XG5cbiAgICAgICAgICAgICAgICBpZiAoIGlzVG9rZW4gJiYgbWVzc2FnZVt2YWx1ZV0gKXtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIG1lc3NhZ2VbdmFsdWVdO1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgLy8gdG9rZW5zIGFyZSB1bmlxdWUsIHNvIHdlIGNhbiBqdXN0IHN0b3AgaGVyZVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoaXNGdW5jdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKCB0IGluIG1lc3NhZ2UgKXtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlLmhhc093blByb3BlcnR5KHQpICYmIG1lc3NhZ2VbdF0gPT09IHZhbHVlKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgbWVzc2FnZVt0XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xufSkpO1xuIiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBwdXR0aW5nIGhpc3Rvcnkgb24gY29udGV4dC5cbiAqL1xuXG52YXIgUm91dGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUm91dGVyKCkge1xuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUm91dGVyKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5zdGF0ZSA9IHtcbiAgICAgIG1hdGNoOiBfdGhpcy5jb21wdXRlTWF0Y2goX3RoaXMucHJvcHMuaGlzdG9yeS5sb2NhdGlvbi5wYXRobmFtZSlcbiAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIFJvdXRlci5wcm90b3R5cGUuZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgIHJldHVybiB7XG4gICAgICByb3V0ZXI6IF9leHRlbmRzKHt9LCB0aGlzLmNvbnRleHQucm91dGVyLCB7XG4gICAgICAgIGhpc3Rvcnk6IHRoaXMucHJvcHMuaGlzdG9yeSxcbiAgICAgICAgcm91dGU6IHtcbiAgICAgICAgICBsb2NhdGlvbjogdGhpcy5wcm9wcy5oaXN0b3J5LmxvY2F0aW9uLFxuICAgICAgICAgIG1hdGNoOiB0aGlzLnN0YXRlLm1hdGNoXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfTtcbiAgfTtcblxuICBSb3V0ZXIucHJvdG90eXBlLmNvbXB1dGVNYXRjaCA9IGZ1bmN0aW9uIGNvbXB1dGVNYXRjaChwYXRobmFtZSkge1xuICAgIHJldHVybiB7XG4gICAgICBwYXRoOiAnLycsXG4gICAgICB1cmw6ICcvJyxcbiAgICAgIHBhcmFtczoge30sXG4gICAgICBpc0V4YWN0OiBwYXRobmFtZSA9PT0gJy8nXG4gICAgfTtcbiAgfTtcblxuICBSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBjaGlsZHJlbiA9IF9wcm9wcy5jaGlsZHJlbixcbiAgICAgICAgaGlzdG9yeSA9IF9wcm9wcy5oaXN0b3J5O1xuXG5cbiAgICBpbnZhcmlhbnQoY2hpbGRyZW4gPT0gbnVsbCB8fCBSZWFjdC5DaGlsZHJlbi5jb3VudChjaGlsZHJlbikgPT09IDEsICdBIDxSb3V0ZXI+IG1heSBoYXZlIG9ubHkgb25lIGNoaWxkIGVsZW1lbnQnKTtcblxuICAgIC8vIERvIHRoaXMgaGVyZSBzbyB3ZSBjYW4gc2V0U3RhdGUgd2hlbiBhIDxSZWRpcmVjdD4gY2hhbmdlcyB0aGVcbiAgICAvLyBsb2NhdGlvbiBpbiBjb21wb25lbnRXaWxsTW91bnQuIFRoaXMgaGFwcGVucyBlLmcuIHdoZW4gZG9pbmdcbiAgICAvLyBzZXJ2ZXIgcmVuZGVyaW5nIHVzaW5nIGEgPFN0YXRpY1JvdXRlcj4uXG4gICAgdGhpcy51bmxpc3RlbiA9IGhpc3RvcnkubGlzdGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgIF90aGlzMi5zZXRTdGF0ZSh7XG4gICAgICAgIG1hdGNoOiBfdGhpczIuY29tcHV0ZU1hdGNoKGhpc3RvcnkubG9jYXRpb24ucGF0aG5hbWUpXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICBSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgIHdhcm5pbmcodGhpcy5wcm9wcy5oaXN0b3J5ID09PSBuZXh0UHJvcHMuaGlzdG9yeSwgJ1lvdSBjYW5ub3QgY2hhbmdlIDxSb3V0ZXIgaGlzdG9yeT4nKTtcbiAgfTtcblxuICBSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy51bmxpc3RlbigpO1xuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBjaGlsZHJlbiA9IHRoaXMucHJvcHMuY2hpbGRyZW47XG5cbiAgICByZXR1cm4gY2hpbGRyZW4gPyBSZWFjdC5DaGlsZHJlbi5vbmx5KGNoaWxkcmVuKSA6IG51bGw7XG4gIH07XG5cbiAgcmV0dXJuIFJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgaGlzdG9yeTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGVcbn07XG5Sb3V0ZXIuY29udGV4dFR5cGVzID0ge1xuICByb3V0ZXI6IFByb3BUeXBlcy5vYmplY3Rcbn07XG5Sb3V0ZXIuY2hpbGRDb250ZXh0VHlwZXMgPSB7XG4gIHJvdXRlcjogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IFJvdXRlcjsiLCIvLyBXcml0dGVuIGluIHRoaXMgcm91bmQgYWJvdXQgd2F5IGZvciBiYWJlbC10cmFuc2Zvcm0taW1wb3J0c1xuaW1wb3J0IFJvdXRlciBmcm9tICdyZWFjdC1yb3V0ZXIvZXMvUm91dGVyJztcblxuZXhwb3J0IGRlZmF1bHQgUm91dGVyOyIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjcmVhdGVIaXN0b3J5IGZyb20gJ2hpc3RvcnkvY3JlYXRlQnJvd3Nlckhpc3RvcnknO1xuaW1wb3J0IFJvdXRlciBmcm9tICcuL1JvdXRlcic7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIGEgPFJvdXRlcj4gdGhhdCB1c2VzIEhUTUw1IGhpc3RvcnkuXG4gKi9cblxudmFyIEJyb3dzZXJSb3V0ZXIgPSBmdW5jdGlvbiAoX1JlYWN0JENvbXBvbmVudCkge1xuICBfaW5oZXJpdHMoQnJvd3NlclJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gQnJvd3NlclJvdXRlcigpIHtcbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIEJyb3dzZXJSb3V0ZXIpO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmNhbGwuYXBwbHkoX1JlYWN0JENvbXBvbmVudCwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLmhpc3RvcnkgPSBjcmVhdGVIaXN0b3J5KF90aGlzLnByb3BzKSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gIH1cblxuICBCcm93c2VyUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCAnPEJyb3dzZXJSb3V0ZXI+IGlnbm9yZXMgdGhlIGhpc3RvcnkgcHJvcC4gVG8gdXNlIGEgY3VzdG9tIGhpc3RvcnksICcgKyAndXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgQnJvd3NlclJvdXRlciBhcyBSb3V0ZXIgfWAuJyk7XG4gIH07XG5cbiAgQnJvd3NlclJvdXRlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwgeyBoaXN0b3J5OiB0aGlzLmhpc3RvcnksIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuIH0pO1xuICB9O1xuXG4gIHJldHVybiBCcm93c2VyUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Ccm93c2VyUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgYmFzZW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGZvcmNlUmVmcmVzaDogUHJvcFR5cGVzLmJvb2wsXG4gIGdldFVzZXJDb25maXJtYXRpb246IFByb3BUeXBlcy5mdW5jLFxuICBrZXlMZW5ndGg6IFByb3BUeXBlcy5udW1iZXIsXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZVxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBCcm93c2VyUm91dGVyOyIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBjcmVhdGVIaXN0b3J5IGZyb20gJ2hpc3RvcnkvY3JlYXRlSGFzaEhpc3RvcnknO1xuaW1wb3J0IFJvdXRlciBmcm9tICcuL1JvdXRlcic7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIGEgPFJvdXRlcj4gdGhhdCB1c2VzIHdpbmRvdy5sb2NhdGlvbi5oYXNoLlxuICovXG5cbnZhciBIYXNoUm91dGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKEhhc2hSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIEhhc2hSb3V0ZXIoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBIYXNoUm91dGVyKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5oaXN0b3J5ID0gY3JlYXRlSGlzdG9yeShfdGhpcy5wcm9wcyksIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgSGFzaFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHdhcm5pbmcoIXRoaXMucHJvcHMuaGlzdG9yeSwgJzxIYXNoUm91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCAnICsgJ3VzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IEhhc2hSb3V0ZXIgYXMgUm91dGVyIH1gLicpO1xuICB9O1xuXG4gIEhhc2hSb3V0ZXIucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIHsgaGlzdG9yeTogdGhpcy5oaXN0b3J5LCBjaGlsZHJlbjogdGhpcy5wcm9wcy5jaGlsZHJlbiB9KTtcbiAgfTtcblxuICByZXR1cm4gSGFzaFJvdXRlcjtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuSGFzaFJvdXRlci5wcm9wVHlwZXMgPSB7XG4gIGJhc2VuYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBnZXRVc2VyQ29uZmlybWF0aW9uOiBQcm9wVHlwZXMuZnVuYyxcbiAgaGFzaFR5cGU6IFByb3BUeXBlcy5vbmVPZihbJ2hhc2hiYW5nJywgJ25vc2xhc2gnLCAnc2xhc2gnXSksXG4gIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZVxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBIYXNoUm91dGVyOyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcblxudmFyIGlzTW9kaWZpZWRFdmVudCA9IGZ1bmN0aW9uIGlzTW9kaWZpZWRFdmVudChldmVudCkge1xuICByZXR1cm4gISEoZXZlbnQubWV0YUtleSB8fCBldmVudC5hbHRLZXkgfHwgZXZlbnQuY3RybEtleSB8fCBldmVudC5zaGlmdEtleSk7XG59O1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciByZW5kZXJpbmcgYSBoaXN0b3J5LWF3YXJlIDxhPi5cbiAqL1xuXG52YXIgTGluayA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhMaW5rLCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBMaW5rKCkge1xuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTGluayk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuaGFuZGxlQ2xpY2sgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGlmIChfdGhpcy5wcm9wcy5vbkNsaWNrKSBfdGhpcy5wcm9wcy5vbkNsaWNrKGV2ZW50KTtcblxuICAgICAgaWYgKCFldmVudC5kZWZhdWx0UHJldmVudGVkICYmIC8vIG9uQ2xpY2sgcHJldmVudGVkIGRlZmF1bHRcbiAgICAgIGV2ZW50LmJ1dHRvbiA9PT0gMCAmJiAvLyBpZ25vcmUgcmlnaHQgY2xpY2tzXG4gICAgICAhX3RoaXMucHJvcHMudGFyZ2V0ICYmIC8vIGxldCBicm93c2VyIGhhbmRsZSBcInRhcmdldD1fYmxhbmtcIiBldGMuXG4gICAgICAhaXNNb2RpZmllZEV2ZW50KGV2ZW50KSAvLyBpZ25vcmUgY2xpY2tzIHdpdGggbW9kaWZpZXIga2V5c1xuICAgICAgKSB7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgIHZhciBoaXN0b3J5ID0gX3RoaXMuY29udGV4dC5yb3V0ZXIuaGlzdG9yeTtcbiAgICAgICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICAgICAgcmVwbGFjZSA9IF90aGlzJHByb3BzLnJlcGxhY2UsXG4gICAgICAgICAgICAgIHRvID0gX3RoaXMkcHJvcHMudG87XG5cblxuICAgICAgICAgIGlmIChyZXBsYWNlKSB7XG4gICAgICAgICAgICBoaXN0b3J5LnJlcGxhY2UodG8pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBoaXN0b3J5LnB1c2godG8pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgTGluay5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICByZXBsYWNlID0gX3Byb3BzLnJlcGxhY2UsXG4gICAgICAgIHRvID0gX3Byb3BzLnRvLFxuICAgICAgICBpbm5lclJlZiA9IF9wcm9wcy5pbm5lclJlZixcbiAgICAgICAgcHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoX3Byb3BzLCBbJ3JlcGxhY2UnLCAndG8nLCAnaW5uZXJSZWYnXSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcblxuICAgIGludmFyaWFudCh0aGlzLmNvbnRleHQucm91dGVyLCAnWW91IHNob3VsZCBub3QgdXNlIDxMaW5rPiBvdXRzaWRlIGEgPFJvdXRlcj4nKTtcblxuICAgIHZhciBocmVmID0gdGhpcy5jb250ZXh0LnJvdXRlci5oaXN0b3J5LmNyZWF0ZUhyZWYodHlwZW9mIHRvID09PSAnc3RyaW5nJyA/IHsgcGF0aG5hbWU6IHRvIH0gOiB0byk7XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudCgnYScsIF9leHRlbmRzKHt9LCBwcm9wcywgeyBvbkNsaWNrOiB0aGlzLmhhbmRsZUNsaWNrLCBocmVmOiBocmVmLCByZWY6IGlubmVyUmVmIH0pKTtcbiAgfTtcblxuICByZXR1cm4gTGluaztcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuTGluay5wcm9wVHlwZXMgPSB7XG4gIG9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuICB0YXJnZXQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gIHJlcGxhY2U6IFByb3BUeXBlcy5ib29sLFxuICB0bzogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdF0pLmlzUmVxdWlyZWQsXG4gIGlubmVyUmVmOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMuZnVuY10pXG59O1xuTGluay5kZWZhdWx0UHJvcHMgPSB7XG4gIHJlcGxhY2U6IGZhbHNlXG59O1xuTGluay5jb250ZXh0VHlwZXMgPSB7XG4gIHJvdXRlcjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBoaXN0b3J5OiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgcHVzaDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICAgIHJlcGxhY2U6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgICBjcmVhdGVIcmVmOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkXG4gICAgfSkuaXNSZXF1aXJlZFxuICB9KS5pc1JlcXVpcmVkXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IExpbms7IiwiZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IGNyZWF0ZUhpc3RvcnkgZnJvbSAnaGlzdG9yeS9jcmVhdGVNZW1vcnlIaXN0b3J5JztcbmltcG9ydCBSb3V0ZXIgZnJvbSAnLi9Sb3V0ZXInO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgc3RvcmVzIGxvY2F0aW9uIGluIG1lbW9yeS5cbiAqL1xuXG52YXIgTWVtb3J5Um91dGVyID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKE1lbW9yeVJvdXRlciwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gTWVtb3J5Um91dGVyKCkge1xuICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTWVtb3J5Um91dGVyKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX1JlYWN0JENvbXBvbmVudC5jYWxsLmFwcGx5KF9SZWFjdCRDb21wb25lbnQsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5oaXN0b3J5ID0gY3JlYXRlSGlzdG9yeShfdGhpcy5wcm9wcyksIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICB9XG5cbiAgTWVtb3J5Um91dGVyLnByb3RvdHlwZS5jb21wb25lbnRXaWxsTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsTW91bnQoKSB7XG4gICAgd2FybmluZyghdGhpcy5wcm9wcy5oaXN0b3J5LCAnPE1lbW9yeVJvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgJyArICd1c2UgYGltcG9ydCB7IFJvdXRlciB9YCBpbnN0ZWFkIG9mIGBpbXBvcnQgeyBNZW1vcnlSb3V0ZXIgYXMgUm91dGVyIH1gLicpO1xuICB9O1xuXG4gIE1lbW9yeVJvdXRlci5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlciwgeyBoaXN0b3J5OiB0aGlzLmhpc3RvcnksIGNoaWxkcmVuOiB0aGlzLnByb3BzLmNoaWxkcmVuIH0pO1xuICB9O1xuXG4gIHJldHVybiBNZW1vcnlSb3V0ZXI7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cbk1lbW9yeVJvdXRlci5wcm9wVHlwZXMgPSB7XG4gIGluaXRpYWxFbnRyaWVzOiBQcm9wVHlwZXMuYXJyYXksXG4gIGluaXRpYWxJbmRleDogUHJvcFR5cGVzLm51bWJlcixcbiAgZ2V0VXNlckNvbmZpcm1hdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG4gIGtleUxlbmd0aDogUHJvcFR5cGVzLm51bWJlcixcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlXG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IE1lbW9yeVJvdXRlcjsiLCIvLyBXcml0dGVuIGluIHRoaXMgcm91bmQgYWJvdXQgd2F5IGZvciBiYWJlbC10cmFuc2Zvcm0taW1wb3J0c1xuaW1wb3J0IE1lbW9yeVJvdXRlciBmcm9tICdyZWFjdC1yb3V0ZXIvZXMvTWVtb3J5Um91dGVyJztcblxuZXhwb3J0IGRlZmF1bHQgTWVtb3J5Um91dGVyOyIsImltcG9ydCBwYXRoVG9SZWdleHAgZnJvbSAncGF0aC10by1yZWdleHAnO1xuXG52YXIgcGF0dGVybkNhY2hlID0ge307XG52YXIgY2FjaGVMaW1pdCA9IDEwMDAwO1xudmFyIGNhY2hlQ291bnQgPSAwO1xuXG52YXIgY29tcGlsZVBhdGggPSBmdW5jdGlvbiBjb21waWxlUGF0aChwYXR0ZXJuLCBvcHRpb25zKSB7XG4gIHZhciBjYWNoZUtleSA9ICcnICsgb3B0aW9ucy5lbmQgKyBvcHRpb25zLnN0cmljdCArIG9wdGlvbnMuc2Vuc2l0aXZlO1xuICB2YXIgY2FjaGUgPSBwYXR0ZXJuQ2FjaGVbY2FjaGVLZXldIHx8IChwYXR0ZXJuQ2FjaGVbY2FjaGVLZXldID0ge30pO1xuXG4gIGlmIChjYWNoZVtwYXR0ZXJuXSkgcmV0dXJuIGNhY2hlW3BhdHRlcm5dO1xuXG4gIHZhciBrZXlzID0gW107XG4gIHZhciByZSA9IHBhdGhUb1JlZ2V4cChwYXR0ZXJuLCBrZXlzLCBvcHRpb25zKTtcbiAgdmFyIGNvbXBpbGVkUGF0dGVybiA9IHsgcmU6IHJlLCBrZXlzOiBrZXlzIH07XG5cbiAgaWYgKGNhY2hlQ291bnQgPCBjYWNoZUxpbWl0KSB7XG4gICAgY2FjaGVbcGF0dGVybl0gPSBjb21waWxlZFBhdHRlcm47XG4gICAgY2FjaGVDb3VudCsrO1xuICB9XG5cbiAgcmV0dXJuIGNvbXBpbGVkUGF0dGVybjtcbn07XG5cbi8qKlxuICogUHVibGljIEFQSSBmb3IgbWF0Y2hpbmcgYSBVUkwgcGF0aG5hbWUgdG8gYSBwYXRoIHBhdHRlcm4uXG4gKi9cbnZhciBtYXRjaFBhdGggPSBmdW5jdGlvbiBtYXRjaFBhdGgocGF0aG5hbWUpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ3N0cmluZycpIG9wdGlvbnMgPSB7IHBhdGg6IG9wdGlvbnMgfTtcblxuICB2YXIgX29wdGlvbnMgPSBvcHRpb25zLFxuICAgICAgX29wdGlvbnMkcGF0aCA9IF9vcHRpb25zLnBhdGgsXG4gICAgICBwYXRoID0gX29wdGlvbnMkcGF0aCA9PT0gdW5kZWZpbmVkID8gJy8nIDogX29wdGlvbnMkcGF0aCxcbiAgICAgIF9vcHRpb25zJGV4YWN0ID0gX29wdGlvbnMuZXhhY3QsXG4gICAgICBleGFjdCA9IF9vcHRpb25zJGV4YWN0ID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IF9vcHRpb25zJGV4YWN0LFxuICAgICAgX29wdGlvbnMkc3RyaWN0ID0gX29wdGlvbnMuc3RyaWN0LFxuICAgICAgc3RyaWN0ID0gX29wdGlvbnMkc3RyaWN0ID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IF9vcHRpb25zJHN0cmljdCxcbiAgICAgIF9vcHRpb25zJHNlbnNpdGl2ZSA9IF9vcHRpb25zLnNlbnNpdGl2ZSxcbiAgICAgIHNlbnNpdGl2ZSA9IF9vcHRpb25zJHNlbnNpdGl2ZSA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBfb3B0aW9ucyRzZW5zaXRpdmU7XG5cbiAgdmFyIF9jb21waWxlUGF0aCA9IGNvbXBpbGVQYXRoKHBhdGgsIHsgZW5kOiBleGFjdCwgc3RyaWN0OiBzdHJpY3QsIHNlbnNpdGl2ZTogc2Vuc2l0aXZlIH0pLFxuICAgICAgcmUgPSBfY29tcGlsZVBhdGgucmUsXG4gICAgICBrZXlzID0gX2NvbXBpbGVQYXRoLmtleXM7XG5cbiAgdmFyIG1hdGNoID0gcmUuZXhlYyhwYXRobmFtZSk7XG5cbiAgaWYgKCFtYXRjaCkgcmV0dXJuIG51bGw7XG5cbiAgdmFyIHVybCA9IG1hdGNoWzBdLFxuICAgICAgdmFsdWVzID0gbWF0Y2guc2xpY2UoMSk7XG5cbiAgdmFyIGlzRXhhY3QgPSBwYXRobmFtZSA9PT0gdXJsO1xuXG4gIGlmIChleGFjdCAmJiAhaXNFeGFjdCkgcmV0dXJuIG51bGw7XG5cbiAgcmV0dXJuIHtcbiAgICBwYXRoOiBwYXRoLCAvLyB0aGUgcGF0aCBwYXR0ZXJuIHVzZWQgdG8gbWF0Y2hcbiAgICB1cmw6IHBhdGggPT09ICcvJyAmJiB1cmwgPT09ICcnID8gJy8nIDogdXJsLCAvLyB0aGUgbWF0Y2hlZCBwb3J0aW9uIG9mIHRoZSBVUkxcbiAgICBpc0V4YWN0OiBpc0V4YWN0LCAvLyB3aGV0aGVyIG9yIG5vdCB3ZSBtYXRjaGVkIGV4YWN0bHlcbiAgICBwYXJhbXM6IGtleXMucmVkdWNlKGZ1bmN0aW9uIChtZW1vLCBrZXksIGluZGV4KSB7XG4gICAgICBtZW1vW2tleS5uYW1lXSA9IHZhbHVlc1tpbmRleF07XG4gICAgICByZXR1cm4gbWVtbztcbiAgICB9LCB7fSlcbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IG1hdGNoUGF0aDsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICdpbnZhcmlhbnQnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgbWF0Y2hQYXRoIGZyb20gJy4vbWF0Y2hQYXRoJztcblxudmFyIGlzRW1wdHlDaGlsZHJlbiA9IGZ1bmN0aW9uIGlzRW1wdHlDaGlsZHJlbihjaGlsZHJlbikge1xuICByZXR1cm4gUmVhY3QuQ2hpbGRyZW4uY291bnQoY2hpbGRyZW4pID09PSAwO1xufTtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgbWF0Y2hpbmcgYSBzaW5nbGUgcGF0aCBhbmQgcmVuZGVyaW5nLlxuICovXG5cbnZhciBSb3V0ZSA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhSb3V0ZSwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gUm91dGUoKSB7XG4gICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSb3V0ZSk7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuc3RhdGUgPSB7XG4gICAgICBtYXRjaDogX3RoaXMuY29tcHV0ZU1hdGNoKF90aGlzLnByb3BzLCBfdGhpcy5jb250ZXh0LnJvdXRlcilcbiAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIFJvdXRlLnByb3RvdHlwZS5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHJvdXRlcjogX2V4dGVuZHMoe30sIHRoaXMuY29udGV4dC5yb3V0ZXIsIHtcbiAgICAgICAgcm91dGU6IHtcbiAgICAgICAgICBsb2NhdGlvbjogdGhpcy5wcm9wcy5sb2NhdGlvbiB8fCB0aGlzLmNvbnRleHQucm91dGVyLnJvdXRlLmxvY2F0aW9uLFxuICAgICAgICAgIG1hdGNoOiB0aGlzLnN0YXRlLm1hdGNoXG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfTtcbiAgfTtcblxuICBSb3V0ZS5wcm90b3R5cGUuY29tcHV0ZU1hdGNoID0gZnVuY3Rpb24gY29tcHV0ZU1hdGNoKF9yZWYsIHJvdXRlcikge1xuICAgIHZhciBjb21wdXRlZE1hdGNoID0gX3JlZi5jb21wdXRlZE1hdGNoLFxuICAgICAgICBsb2NhdGlvbiA9IF9yZWYubG9jYXRpb24sXG4gICAgICAgIHBhdGggPSBfcmVmLnBhdGgsXG4gICAgICAgIHN0cmljdCA9IF9yZWYuc3RyaWN0LFxuICAgICAgICBleGFjdCA9IF9yZWYuZXhhY3QsXG4gICAgICAgIHNlbnNpdGl2ZSA9IF9yZWYuc2Vuc2l0aXZlO1xuXG4gICAgaWYgKGNvbXB1dGVkTWF0Y2gpIHJldHVybiBjb21wdXRlZE1hdGNoOyAvLyA8U3dpdGNoPiBhbHJlYWR5IGNvbXB1dGVkIHRoZSBtYXRjaCBmb3IgdXNcblxuICAgIGludmFyaWFudChyb3V0ZXIsICdZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlPiBvciB3aXRoUm91dGVyKCkgb3V0c2lkZSBhIDxSb3V0ZXI+Jyk7XG5cbiAgICB2YXIgcm91dGUgPSByb3V0ZXIucm91dGU7XG5cbiAgICB2YXIgcGF0aG5hbWUgPSAobG9jYXRpb24gfHwgcm91dGUubG9jYXRpb24pLnBhdGhuYW1lO1xuXG4gICAgcmV0dXJuIHBhdGggPyBtYXRjaFBhdGgocGF0aG5hbWUsIHsgcGF0aDogcGF0aCwgc3RyaWN0OiBzdHJpY3QsIGV4YWN0OiBleGFjdCwgc2Vuc2l0aXZlOiBzZW5zaXRpdmUgfSkgOiByb3V0ZS5tYXRjaDtcbiAgfTtcblxuICBSb3V0ZS5wcm90b3R5cGUuY29tcG9uZW50V2lsbE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbE1vdW50KCkge1xuICAgIHdhcm5pbmcoISh0aGlzLnByb3BzLmNvbXBvbmVudCAmJiB0aGlzLnByb3BzLnJlbmRlciksICdZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIGNvbXBvbmVudD4gYW5kIDxSb3V0ZSByZW5kZXI+IGluIHRoZSBzYW1lIHJvdXRlOyA8Um91dGUgcmVuZGVyPiB3aWxsIGJlIGlnbm9yZWQnKTtcblxuICAgIHdhcm5pbmcoISh0aGlzLnByb3BzLmNvbXBvbmVudCAmJiB0aGlzLnByb3BzLmNoaWxkcmVuICYmICFpc0VtcHR5Q2hpbGRyZW4odGhpcy5wcm9wcy5jaGlsZHJlbikpLCAnWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZSBjb21wb25lbnQ+IGFuZCA8Um91dGUgY2hpbGRyZW4+IGluIHRoZSBzYW1lIHJvdXRlOyA8Um91dGUgY2hpbGRyZW4+IHdpbGwgYmUgaWdub3JlZCcpO1xuXG4gICAgd2FybmluZyghKHRoaXMucHJvcHMucmVuZGVyICYmIHRoaXMucHJvcHMuY2hpbGRyZW4gJiYgIWlzRW1wdHlDaGlsZHJlbih0aGlzLnByb3BzLmNoaWxkcmVuKSksICdZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIHJlbmRlcj4gYW5kIDxSb3V0ZSBjaGlsZHJlbj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSBjaGlsZHJlbj4gd2lsbCBiZSBpZ25vcmVkJyk7XG4gIH07XG5cbiAgUm91dGUucHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcywgbmV4dENvbnRleHQpIHtcbiAgICB3YXJuaW5nKCEobmV4dFByb3BzLmxvY2F0aW9uICYmICF0aGlzLnByb3BzLmxvY2F0aW9uKSwgJzxSb3V0ZT4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSB1bmNvbnRyb2xsZWQgdG8gY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBpbml0aWFsbHkgdXNlZCBubyBcImxvY2F0aW9uXCIgcHJvcCBhbmQgdGhlbiBwcm92aWRlZCBvbmUgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKTtcblxuICAgIHdhcm5pbmcoISghbmV4dFByb3BzLmxvY2F0aW9uICYmIHRoaXMucHJvcHMubG9jYXRpb24pLCAnPFJvdXRlPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIGNvbnRyb2xsZWQgdG8gdW5jb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IHByb3ZpZGVkIGEgXCJsb2NhdGlvblwiIHByb3AgaW5pdGlhbGx5IGJ1dCBvbWl0dGVkIGl0IG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJyk7XG5cbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIG1hdGNoOiB0aGlzLmNvbXB1dGVNYXRjaChuZXh0UHJvcHMsIG5leHRDb250ZXh0LnJvdXRlcilcbiAgICB9KTtcbiAgfTtcblxuICBSb3V0ZS5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciBtYXRjaCA9IHRoaXMuc3RhdGUubWF0Y2g7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGNoaWxkcmVuID0gX3Byb3BzLmNoaWxkcmVuLFxuICAgICAgICBjb21wb25lbnQgPSBfcHJvcHMuY29tcG9uZW50LFxuICAgICAgICByZW5kZXIgPSBfcHJvcHMucmVuZGVyO1xuICAgIHZhciBfY29udGV4dCRyb3V0ZXIgPSB0aGlzLmNvbnRleHQucm91dGVyLFxuICAgICAgICBoaXN0b3J5ID0gX2NvbnRleHQkcm91dGVyLmhpc3RvcnksXG4gICAgICAgIHJvdXRlID0gX2NvbnRleHQkcm91dGVyLnJvdXRlLFxuICAgICAgICBzdGF0aWNDb250ZXh0ID0gX2NvbnRleHQkcm91dGVyLnN0YXRpY0NvbnRleHQ7XG5cbiAgICB2YXIgbG9jYXRpb24gPSB0aGlzLnByb3BzLmxvY2F0aW9uIHx8IHJvdXRlLmxvY2F0aW9uO1xuICAgIHZhciBwcm9wcyA9IHsgbWF0Y2g6IG1hdGNoLCBsb2NhdGlvbjogbG9jYXRpb24sIGhpc3Rvcnk6IGhpc3RvcnksIHN0YXRpY0NvbnRleHQ6IHN0YXRpY0NvbnRleHQgfTtcblxuICAgIHJldHVybiBjb21wb25lbnQgPyAvLyBjb21wb25lbnQgcHJvcCBnZXRzIGZpcnN0IHByaW9yaXR5LCBvbmx5IGNhbGxlZCBpZiB0aGVyZSdzIGEgbWF0Y2hcbiAgICBtYXRjaCA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29tcG9uZW50LCBwcm9wcykgOiBudWxsIDogcmVuZGVyID8gLy8gcmVuZGVyIHByb3AgaXMgbmV4dCwgb25seSBjYWxsZWQgaWYgdGhlcmUncyBhIG1hdGNoXG4gICAgbWF0Y2ggPyByZW5kZXIocHJvcHMpIDogbnVsbCA6IGNoaWxkcmVuID8gLy8gY2hpbGRyZW4gY29tZSBsYXN0LCBhbHdheXMgY2FsbGVkXG4gICAgdHlwZW9mIGNoaWxkcmVuID09PSAnZnVuY3Rpb24nID8gY2hpbGRyZW4ocHJvcHMpIDogIWlzRW1wdHlDaGlsZHJlbihjaGlsZHJlbikgPyBSZWFjdC5DaGlsZHJlbi5vbmx5KGNoaWxkcmVuKSA6IG51bGwgOiBudWxsO1xuICB9O1xuXG4gIHJldHVybiBSb3V0ZTtcbn0oUmVhY3QuQ29tcG9uZW50KTtcblxuUm91dGUucHJvcFR5cGVzID0ge1xuICBjb21wdXRlZE1hdGNoOiBQcm9wVHlwZXMub2JqZWN0LCAvLyBwcml2YXRlLCBmcm9tIDxTd2l0Y2g+XG4gIHBhdGg6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGV4YWN0OiBQcm9wVHlwZXMuYm9vbCxcbiAgc3RyaWN0OiBQcm9wVHlwZXMuYm9vbCxcbiAgc2Vuc2l0aXZlOiBQcm9wVHlwZXMuYm9vbCxcbiAgY29tcG9uZW50OiBQcm9wVHlwZXMuZnVuYyxcbiAgcmVuZGVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgY2hpbGRyZW46IFByb3BUeXBlcy5vbmVPZlR5cGUoW1Byb3BUeXBlcy5mdW5jLCBQcm9wVHlwZXMubm9kZV0pLFxuICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdFxufTtcblJvdXRlLmNvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgIGhpc3Rvcnk6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICByb3V0ZTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICAgIHN0YXRpY0NvbnRleHQ6IFByb3BUeXBlcy5vYmplY3RcbiAgfSlcbn07XG5Sb3V0ZS5jaGlsZENvbnRleHRUeXBlcyA9IHtcbiAgcm91dGVyOiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWRcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgUm91dGU7IiwiLy8gV3JpdHRlbiBpbiB0aGlzIHJvdW5kIGFib3V0IHdheSBmb3IgYmFiZWwtdHJhbnNmb3JtLWltcG9ydHNcbmltcG9ydCBSb3V0ZSBmcm9tICdyZWFjdC1yb3V0ZXIvZXMvUm91dGUnO1xuXG5leHBvcnQgZGVmYXVsdCBSb3V0ZTsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgUm91dGUgZnJvbSAnLi9Sb3V0ZSc7XG5pbXBvcnQgTGluayBmcm9tICcuL0xpbmsnO1xuXG4vKipcbiAqIEEgPExpbms+IHdyYXBwZXIgdGhhdCBrbm93cyBpZiBpdCdzIFwiYWN0aXZlXCIgb3Igbm90LlxuICovXG52YXIgTmF2TGluayA9IGZ1bmN0aW9uIE5hdkxpbmsoX3JlZikge1xuICB2YXIgdG8gPSBfcmVmLnRvLFxuICAgICAgZXhhY3QgPSBfcmVmLmV4YWN0LFxuICAgICAgc3RyaWN0ID0gX3JlZi5zdHJpY3QsXG4gICAgICBsb2NhdGlvbiA9IF9yZWYubG9jYXRpb24sXG4gICAgICBhY3RpdmVDbGFzc05hbWUgPSBfcmVmLmFjdGl2ZUNsYXNzTmFtZSxcbiAgICAgIGNsYXNzTmFtZSA9IF9yZWYuY2xhc3NOYW1lLFxuICAgICAgYWN0aXZlU3R5bGUgPSBfcmVmLmFjdGl2ZVN0eWxlLFxuICAgICAgc3R5bGUgPSBfcmVmLnN0eWxlLFxuICAgICAgZ2V0SXNBY3RpdmUgPSBfcmVmLmlzQWN0aXZlLFxuICAgICAgYXJpYUN1cnJlbnQgPSBfcmVmLmFyaWFDdXJyZW50LFxuICAgICAgcmVzdCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcmVmLCBbJ3RvJywgJ2V4YWN0JywgJ3N0cmljdCcsICdsb2NhdGlvbicsICdhY3RpdmVDbGFzc05hbWUnLCAnY2xhc3NOYW1lJywgJ2FjdGl2ZVN0eWxlJywgJ3N0eWxlJywgJ2lzQWN0aXZlJywgJ2FyaWFDdXJyZW50J10pO1xuXG4gIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlLCB7XG4gICAgcGF0aDogKHR5cGVvZiB0byA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YodG8pKSA9PT0gJ29iamVjdCcgPyB0by5wYXRobmFtZSA6IHRvLFxuICAgIGV4YWN0OiBleGFjdCxcbiAgICBzdHJpY3Q6IHN0cmljdCxcbiAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgY2hpbGRyZW46IGZ1bmN0aW9uIGNoaWxkcmVuKF9yZWYyKSB7XG4gICAgICB2YXIgbG9jYXRpb24gPSBfcmVmMi5sb2NhdGlvbixcbiAgICAgICAgICBtYXRjaCA9IF9yZWYyLm1hdGNoO1xuXG4gICAgICB2YXIgaXNBY3RpdmUgPSAhIShnZXRJc0FjdGl2ZSA/IGdldElzQWN0aXZlKG1hdGNoLCBsb2NhdGlvbikgOiBtYXRjaCk7XG5cbiAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KExpbmssIF9leHRlbmRzKHtcbiAgICAgICAgdG86IHRvLFxuICAgICAgICBjbGFzc05hbWU6IGlzQWN0aXZlID8gW2NsYXNzTmFtZSwgYWN0aXZlQ2xhc3NOYW1lXS5maWx0ZXIoZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgfSkuam9pbignICcpIDogY2xhc3NOYW1lLFxuICAgICAgICBzdHlsZTogaXNBY3RpdmUgPyBfZXh0ZW5kcyh7fSwgc3R5bGUsIGFjdGl2ZVN0eWxlKSA6IHN0eWxlLFxuICAgICAgICAnYXJpYS1jdXJyZW50JzogaXNBY3RpdmUgJiYgYXJpYUN1cnJlbnRcbiAgICAgIH0sIHJlc3QpKTtcbiAgICB9XG4gIH0pO1xufTtcblxuTmF2TGluay5wcm9wVHlwZXMgPSB7XG4gIHRvOiBMaW5rLnByb3BUeXBlcy50byxcbiAgZXhhY3Q6IFByb3BUeXBlcy5ib29sLFxuICBzdHJpY3Q6IFByb3BUeXBlcy5ib29sLFxuICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdCxcbiAgYWN0aXZlQ2xhc3NOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxuICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gIGFjdGl2ZVN0eWxlOiBQcm9wVHlwZXMub2JqZWN0LFxuICBzdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgaXNBY3RpdmU6IFByb3BUeXBlcy5mdW5jLFxuICBhcmlhQ3VycmVudDogUHJvcFR5cGVzLm9uZU9mKFsncGFnZScsICdzdGVwJywgJ2xvY2F0aW9uJywgJ3RydWUnXSlcbn07XG5cbk5hdkxpbmsuZGVmYXVsdFByb3BzID0ge1xuICBhY3RpdmVDbGFzc05hbWU6ICdhY3RpdmUnLFxuICBhcmlhQ3VycmVudDogJ3RydWUnXG59O1xuXG5leHBvcnQgZGVmYXVsdCBOYXZMaW5rOyIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHByb21wdGluZyB0aGUgdXNlciBiZWZvcmUgbmF2aWdhdGluZyBhd2F5XG4gKiBmcm9tIGEgc2NyZWVuIHdpdGggYSBjb21wb25lbnQuXG4gKi9cblxudmFyIFByb21wdCA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhQcm9tcHQsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFByb21wdCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUHJvbXB0KTtcblxuICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCBfUmVhY3QkQ29tcG9uZW50LmFwcGx5KHRoaXMsIGFyZ3VtZW50cykpO1xuICB9XG5cbiAgUHJvbXB0LnByb3RvdHlwZS5lbmFibGUgPSBmdW5jdGlvbiBlbmFibGUobWVzc2FnZSkge1xuICAgIGlmICh0aGlzLnVuYmxvY2spIHRoaXMudW5ibG9jaygpO1xuXG4gICAgdGhpcy51bmJsb2NrID0gdGhpcy5jb250ZXh0LnJvdXRlci5oaXN0b3J5LmJsb2NrKG1lc3NhZ2UpO1xuICB9O1xuXG4gIFByb21wdC5wcm90b3R5cGUuZGlzYWJsZSA9IGZ1bmN0aW9uIGRpc2FibGUoKSB7XG4gICAgaWYgKHRoaXMudW5ibG9jaykge1xuICAgICAgdGhpcy51bmJsb2NrKCk7XG4gICAgICB0aGlzLnVuYmxvY2sgPSBudWxsO1xuICAgIH1cbiAgfTtcblxuICBQcm9tcHQucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICBpbnZhcmlhbnQodGhpcy5jb250ZXh0LnJvdXRlciwgJ1lvdSBzaG91bGQgbm90IHVzZSA8UHJvbXB0PiBvdXRzaWRlIGEgPFJvdXRlcj4nKTtcblxuICAgIGlmICh0aGlzLnByb3BzLndoZW4pIHRoaXMuZW5hYmxlKHRoaXMucHJvcHMubWVzc2FnZSk7XG4gIH07XG5cbiAgUHJvbXB0LnByb3RvdHlwZS5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICBpZiAobmV4dFByb3BzLndoZW4pIHtcbiAgICAgIGlmICghdGhpcy5wcm9wcy53aGVuIHx8IHRoaXMucHJvcHMubWVzc2FnZSAhPT0gbmV4dFByb3BzLm1lc3NhZ2UpIHRoaXMuZW5hYmxlKG5leHRQcm9wcy5tZXNzYWdlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kaXNhYmxlKCk7XG4gICAgfVxuICB9O1xuXG4gIFByb21wdC5wcm90b3R5cGUuY29tcG9uZW50V2lsbFVubW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLmRpc2FibGUoKTtcbiAgfTtcblxuICBQcm9tcHQucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICByZXR1cm4gUHJvbXB0O1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5Qcm9tcHQucHJvcFR5cGVzID0ge1xuICB3aGVuOiBQcm9wVHlwZXMuYm9vbCxcbiAgbWVzc2FnZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5zdHJpbmddKS5pc1JlcXVpcmVkXG59O1xuUHJvbXB0LmRlZmF1bHRQcm9wcyA9IHtcbiAgd2hlbjogdHJ1ZVxufTtcblByb21wdC5jb250ZXh0VHlwZXMgPSB7XG4gIHJvdXRlcjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBoaXN0b3J5OiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgYmxvY2s6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbiAgICB9KS5pc1JlcXVpcmVkXG4gIH0pLmlzUmVxdWlyZWRcbn07XG5cblxuZXhwb3J0IGRlZmF1bHQgUHJvbXB0OyIsIi8vIFdyaXR0ZW4gaW4gdGhpcyByb3VuZCBhYm91dCB3YXkgZm9yIGJhYmVsLXRyYW5zZm9ybS1pbXBvcnRzXG5pbXBvcnQgUHJvbXB0IGZyb20gJ3JlYWN0LXJvdXRlci9lcy9Qcm9tcHQnO1xuXG5leHBvcnQgZGVmYXVsdCBQcm9tcHQ7IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuaW1wb3J0IHJlc29sdmVQYXRobmFtZSBmcm9tICdyZXNvbHZlLXBhdGhuYW1lJztcbmltcG9ydCB2YWx1ZUVxdWFsIGZyb20gJ3ZhbHVlLWVxdWFsJztcbmltcG9ydCB7IHBhcnNlUGF0aCB9IGZyb20gJy4vUGF0aFV0aWxzJztcblxuZXhwb3J0IHZhciBjcmVhdGVMb2NhdGlvbiA9IGZ1bmN0aW9uIGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBrZXksIGN1cnJlbnRMb2NhdGlvbikge1xuICB2YXIgbG9jYXRpb24gPSB2b2lkIDA7XG4gIGlmICh0eXBlb2YgcGF0aCA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyBUd28tYXJnIGZvcm06IHB1c2gocGF0aCwgc3RhdGUpXG4gICAgbG9jYXRpb24gPSBwYXJzZVBhdGgocGF0aCk7XG4gICAgbG9jYXRpb24uc3RhdGUgPSBzdGF0ZTtcbiAgfSBlbHNlIHtcbiAgICAvLyBPbmUtYXJnIGZvcm06IHB1c2gobG9jYXRpb24pXG4gICAgbG9jYXRpb24gPSBfZXh0ZW5kcyh7fSwgcGF0aCk7XG5cbiAgICBpZiAobG9jYXRpb24ucGF0aG5hbWUgPT09IHVuZGVmaW5lZCkgbG9jYXRpb24ucGF0aG5hbWUgPSAnJztcblxuICAgIGlmIChsb2NhdGlvbi5zZWFyY2gpIHtcbiAgICAgIGlmIChsb2NhdGlvbi5zZWFyY2guY2hhckF0KDApICE9PSAnPycpIGxvY2F0aW9uLnNlYXJjaCA9ICc/JyArIGxvY2F0aW9uLnNlYXJjaDtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYXRpb24uc2VhcmNoID0gJyc7XG4gICAgfVxuXG4gICAgaWYgKGxvY2F0aW9uLmhhc2gpIHtcbiAgICAgIGlmIChsb2NhdGlvbi5oYXNoLmNoYXJBdCgwKSAhPT0gJyMnKSBsb2NhdGlvbi5oYXNoID0gJyMnICsgbG9jYXRpb24uaGFzaDtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYXRpb24uaGFzaCA9ICcnO1xuICAgIH1cblxuICAgIGlmIChzdGF0ZSAhPT0gdW5kZWZpbmVkICYmIGxvY2F0aW9uLnN0YXRlID09PSB1bmRlZmluZWQpIGxvY2F0aW9uLnN0YXRlID0gc3RhdGU7XG4gIH1cblxuICB0cnkge1xuICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gZGVjb2RlVVJJKGxvY2F0aW9uLnBhdGhuYW1lKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmIChlIGluc3RhbmNlb2YgVVJJRXJyb3IpIHtcbiAgICAgIHRocm93IG5ldyBVUklFcnJvcignUGF0aG5hbWUgXCInICsgbG9jYXRpb24ucGF0aG5hbWUgKyAnXCIgY291bGQgbm90IGJlIGRlY29kZWQuICcgKyAnVGhpcyBpcyBsaWtlbHkgY2F1c2VkIGJ5IGFuIGludmFsaWQgcGVyY2VudC1lbmNvZGluZy4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gIH1cblxuICBpZiAoa2V5KSBsb2NhdGlvbi5rZXkgPSBrZXk7XG5cbiAgaWYgKGN1cnJlbnRMb2NhdGlvbikge1xuICAgIC8vIFJlc29sdmUgaW5jb21wbGV0ZS9yZWxhdGl2ZSBwYXRobmFtZSByZWxhdGl2ZSB0byBjdXJyZW50IGxvY2F0aW9uLlxuICAgIGlmICghbG9jYXRpb24ucGF0aG5hbWUpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gY3VycmVudExvY2F0aW9uLnBhdGhuYW1lO1xuICAgIH0gZWxzZSBpZiAobG9jYXRpb24ucGF0aG5hbWUuY2hhckF0KDApICE9PSAnLycpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gcmVzb2x2ZVBhdGhuYW1lKGxvY2F0aW9uLnBhdGhuYW1lLCBjdXJyZW50TG9jYXRpb24ucGF0aG5hbWUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBXaGVuIHRoZXJlIGlzIG5vIHByaW9yIGxvY2F0aW9uIGFuZCBwYXRobmFtZSBpcyBlbXB0eSwgc2V0IGl0IHRvIC9cbiAgICBpZiAoIWxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9ICcvJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbG9jYXRpb247XG59O1xuXG5leHBvcnQgdmFyIGxvY2F0aW9uc0FyZUVxdWFsID0gZnVuY3Rpb24gbG9jYXRpb25zQXJlRXF1YWwoYSwgYikge1xuICByZXR1cm4gYS5wYXRobmFtZSA9PT0gYi5wYXRobmFtZSAmJiBhLnNlYXJjaCA9PT0gYi5zZWFyY2ggJiYgYS5oYXNoID09PSBiLmhhc2ggJiYgYS5rZXkgPT09IGIua2V5ICYmIHZhbHVlRXF1YWwoYS5zdGF0ZSwgYi5zdGF0ZSk7XG59OyIsImV4cG9ydCB2YXIgYWRkTGVhZGluZ1NsYXNoID0gZnVuY3Rpb24gYWRkTGVhZGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnLycgPyBwYXRoIDogJy8nICsgcGF0aDtcbn07XG5cbmV4cG9ydCB2YXIgc3RyaXBMZWFkaW5nU2xhc2ggPSBmdW5jdGlvbiBzdHJpcExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nID8gcGF0aC5zdWJzdHIoMSkgOiBwYXRoO1xufTtcblxuZXhwb3J0IHZhciBoYXNCYXNlbmFtZSA9IGZ1bmN0aW9uIGhhc0Jhc2VuYW1lKHBhdGgsIHByZWZpeCkge1xuICByZXR1cm4gbmV3IFJlZ0V4cCgnXicgKyBwcmVmaXggKyAnKFxcXFwvfFxcXFw/fCN8JCknLCAnaScpLnRlc3QocGF0aCk7XG59O1xuXG5leHBvcnQgdmFyIHN0cmlwQmFzZW5hbWUgPSBmdW5jdGlvbiBzdHJpcEJhc2VuYW1lKHBhdGgsIHByZWZpeCkge1xuICByZXR1cm4gaGFzQmFzZW5hbWUocGF0aCwgcHJlZml4KSA/IHBhdGguc3Vic3RyKHByZWZpeC5sZW5ndGgpIDogcGF0aDtcbn07XG5cbmV4cG9ydCB2YXIgc3RyaXBUcmFpbGluZ1NsYXNoID0gZnVuY3Rpb24gc3RyaXBUcmFpbGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KHBhdGgubGVuZ3RoIC0gMSkgPT09ICcvJyA/IHBhdGguc2xpY2UoMCwgLTEpIDogcGF0aDtcbn07XG5cbmV4cG9ydCB2YXIgcGFyc2VQYXRoID0gZnVuY3Rpb24gcGFyc2VQYXRoKHBhdGgpIHtcbiAgdmFyIHBhdGhuYW1lID0gcGF0aCB8fCAnLyc7XG4gIHZhciBzZWFyY2ggPSAnJztcbiAgdmFyIGhhc2ggPSAnJztcblxuICB2YXIgaGFzaEluZGV4ID0gcGF0aG5hbWUuaW5kZXhPZignIycpO1xuICBpZiAoaGFzaEluZGV4ICE9PSAtMSkge1xuICAgIGhhc2ggPSBwYXRobmFtZS5zdWJzdHIoaGFzaEluZGV4KTtcbiAgICBwYXRobmFtZSA9IHBhdGhuYW1lLnN1YnN0cigwLCBoYXNoSW5kZXgpO1xuICB9XG5cbiAgdmFyIHNlYXJjaEluZGV4ID0gcGF0aG5hbWUuaW5kZXhPZignPycpO1xuICBpZiAoc2VhcmNoSW5kZXggIT09IC0xKSB7XG4gICAgc2VhcmNoID0gcGF0aG5hbWUuc3Vic3RyKHNlYXJjaEluZGV4KTtcbiAgICBwYXRobmFtZSA9IHBhdGhuYW1lLnN1YnN0cigwLCBzZWFyY2hJbmRleCk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHBhdGhuYW1lOiBwYXRobmFtZSxcbiAgICBzZWFyY2g6IHNlYXJjaCA9PT0gJz8nID8gJycgOiBzZWFyY2gsXG4gICAgaGFzaDogaGFzaCA9PT0gJyMnID8gJycgOiBoYXNoXG4gIH07XG59O1xuXG5leHBvcnQgdmFyIGNyZWF0ZVBhdGggPSBmdW5jdGlvbiBjcmVhdGVQYXRoKGxvY2F0aW9uKSB7XG4gIHZhciBwYXRobmFtZSA9IGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgc2VhcmNoID0gbG9jYXRpb24uc2VhcmNoLFxuICAgICAgaGFzaCA9IGxvY2F0aW9uLmhhc2g7XG5cblxuICB2YXIgcGF0aCA9IHBhdGhuYW1lIHx8ICcvJztcblxuICBpZiAoc2VhcmNoICYmIHNlYXJjaCAhPT0gJz8nKSBwYXRoICs9IHNlYXJjaC5jaGFyQXQoMCkgPT09ICc/JyA/IHNlYXJjaCA6ICc/JyArIHNlYXJjaDtcblxuICBpZiAoaGFzaCAmJiBoYXNoICE9PSAnIycpIHBhdGggKz0gaGFzaC5jaGFyQXQoMCkgPT09ICcjJyA/IGhhc2ggOiAnIycgKyBoYXNoO1xuXG4gIHJldHVybiBwYXRoO1xufTsiLCJleHBvcnQgdmFyIGNhblVzZURPTSA9ICEhKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5kb2N1bWVudCAmJiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5cbmV4cG9ydCB2YXIgYWRkRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXIobm9kZSwgZXZlbnQsIGxpc3RlbmVyKSB7XG4gIHJldHVybiBub2RlLmFkZEV2ZW50TGlzdGVuZXIgPyBub2RlLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyLCBmYWxzZSkgOiBub2RlLmF0dGFjaEV2ZW50KCdvbicgKyBldmVudCwgbGlzdGVuZXIpO1xufTtcblxuZXhwb3J0IHZhciByZW1vdmVFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gcmVtb3ZlRXZlbnRMaXN0ZW5lcihub2RlLCBldmVudCwgbGlzdGVuZXIpIHtcbiAgcmV0dXJuIG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lciA/IG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgbGlzdGVuZXIsIGZhbHNlKSA6IG5vZGUuZGV0YWNoRXZlbnQoJ29uJyArIGV2ZW50LCBsaXN0ZW5lcik7XG59O1xuXG5leHBvcnQgdmFyIGdldENvbmZpcm1hdGlvbiA9IGZ1bmN0aW9uIGdldENvbmZpcm1hdGlvbihtZXNzYWdlLCBjYWxsYmFjaykge1xuICByZXR1cm4gY2FsbGJhY2sod2luZG93LmNvbmZpcm0obWVzc2FnZSkpO1xufTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1hbGVydFxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgSFRNTDUgaGlzdG9yeSBBUEkgaXMgc3VwcG9ydGVkLiBUYWtlbiBmcm9tIE1vZGVybml6ci5cbiAqXG4gKiBodHRwczovL2dpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKiBodHRwczovL2dpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9ibG9iL21hc3Rlci9mZWF0dXJlLWRldGVjdHMvaGlzdG9yeS5qc1xuICogY2hhbmdlZCB0byBhdm9pZCBmYWxzZSBuZWdhdGl2ZXMgZm9yIFdpbmRvd3MgUGhvbmVzOiBodHRwczovL2dpdGh1Yi5jb20vcmVhY3Rqcy9yZWFjdC1yb3V0ZXIvaXNzdWVzLzU4NlxuICovXG5leHBvcnQgdmFyIHN1cHBvcnRzSGlzdG9yeSA9IGZ1bmN0aW9uIHN1cHBvcnRzSGlzdG9yeSgpIHtcbiAgdmFyIHVhID0gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQ7XG5cbiAgaWYgKCh1YS5pbmRleE9mKCdBbmRyb2lkIDIuJykgIT09IC0xIHx8IHVhLmluZGV4T2YoJ0FuZHJvaWQgNC4wJykgIT09IC0xKSAmJiB1YS5pbmRleE9mKCdNb2JpbGUgU2FmYXJpJykgIT09IC0xICYmIHVhLmluZGV4T2YoJ0Nocm9tZScpID09PSAtMSAmJiB1YS5pbmRleE9mKCdXaW5kb3dzIFBob25lJykgPT09IC0xKSByZXR1cm4gZmFsc2U7XG5cbiAgcmV0dXJuIHdpbmRvdy5oaXN0b3J5ICYmICdwdXNoU3RhdGUnIGluIHdpbmRvdy5oaXN0b3J5O1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYnJvd3NlciBmaXJlcyBwb3BzdGF0ZSBvbiBoYXNoIGNoYW5nZS5cbiAqIElFMTAgYW5kIElFMTEgZG8gbm90LlxuICovXG5leHBvcnQgdmFyIHN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UgPSBmdW5jdGlvbiBzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlKCkge1xuICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignVHJpZGVudCcpID09PSAtMTtcbn07XG5cbi8qKlxuICogUmV0dXJucyBmYWxzZSBpZiB1c2luZyBnbyhuKSB3aXRoIGhhc2ggaGlzdG9yeSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkLlxuICovXG5leHBvcnQgdmFyIHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoID0gZnVuY3Rpb24gc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2goKSB7XG4gIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdGaXJlZm94JykgPT09IC0xO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYSBnaXZlbiBwb3BzdGF0ZSBldmVudCBpcyBhbiBleHRyYW5lb3VzIFdlYktpdCBldmVudC5cbiAqIEFjY291bnRzIGZvciB0aGUgZmFjdCB0aGF0IENocm9tZSBvbiBpT1MgZmlyZXMgcmVhbCBwb3BzdGF0ZSBldmVudHNcbiAqIGNvbnRhaW5pbmcgdW5kZWZpbmVkIHN0YXRlIHdoZW4gcHJlc3NpbmcgdGhlIGJhY2sgYnV0dG9uLlxuICovXG5leHBvcnQgdmFyIGlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQgPSBmdW5jdGlvbiBpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiBldmVudC5zdGF0ZSA9PT0gdW5kZWZpbmVkICYmIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignQ3JpT1MnKSA9PT0gLTE7XG59OyIsInZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5pbXBvcnQgeyBjcmVhdGVMb2NhdGlvbiB9IGZyb20gJy4vTG9jYXRpb25VdGlscyc7XG5pbXBvcnQgeyBhZGRMZWFkaW5nU2xhc2gsIHN0cmlwVHJhaWxpbmdTbGFzaCwgaGFzQmFzZW5hbWUsIHN0cmlwQmFzZW5hbWUsIGNyZWF0ZVBhdGggfSBmcm9tICcuL1BhdGhVdGlscyc7XG5pbXBvcnQgY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIgZnJvbSAnLi9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcic7XG5pbXBvcnQgeyBjYW5Vc2VET00sIGFkZEV2ZW50TGlzdGVuZXIsIHJlbW92ZUV2ZW50TGlzdGVuZXIsIGdldENvbmZpcm1hdGlvbiwgc3VwcG9ydHNIaXN0b3J5LCBzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlLCBpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50IH0gZnJvbSAnLi9ET01VdGlscyc7XG5cbnZhciBQb3BTdGF0ZUV2ZW50ID0gJ3BvcHN0YXRlJztcbnZhciBIYXNoQ2hhbmdlRXZlbnQgPSAnaGFzaGNoYW5nZSc7XG5cbnZhciBnZXRIaXN0b3J5U3RhdGUgPSBmdW5jdGlvbiBnZXRIaXN0b3J5U3RhdGUoKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHdpbmRvdy5oaXN0b3J5LnN0YXRlIHx8IHt9O1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gSUUgMTEgc29tZXRpbWVzIHRocm93cyB3aGVuIGFjY2Vzc2luZyB3aW5kb3cuaGlzdG9yeS5zdGF0ZVxuICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vUmVhY3RUcmFpbmluZy9oaXN0b3J5L3B1bGwvMjg5XG4gICAgcmV0dXJuIHt9O1xuICB9XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBoaXN0b3J5IG9iamVjdCB0aGF0IHVzZXMgdGhlIEhUTUw1IGhpc3RvcnkgQVBJIGluY2x1ZGluZ1xuICogcHVzaFN0YXRlLCByZXBsYWNlU3RhdGUsIGFuZCB0aGUgcG9wc3RhdGUgZXZlbnQuXG4gKi9cbnZhciBjcmVhdGVCcm93c2VySGlzdG9yeSA9IGZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJIaXN0b3J5KCkge1xuICB2YXIgcHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gIGludmFyaWFudChjYW5Vc2VET00sICdCcm93c2VyIGhpc3RvcnkgbmVlZHMgYSBET00nKTtcblxuICB2YXIgZ2xvYmFsSGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5O1xuICB2YXIgY2FuVXNlSGlzdG9yeSA9IHN1cHBvcnRzSGlzdG9yeSgpO1xuICB2YXIgbmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIgPSAhc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSgpO1xuXG4gIHZhciBfcHJvcHMkZm9yY2VSZWZyZXNoID0gcHJvcHMuZm9yY2VSZWZyZXNoLFxuICAgICAgZm9yY2VSZWZyZXNoID0gX3Byb3BzJGZvcmNlUmVmcmVzaCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBfcHJvcHMkZm9yY2VSZWZyZXNoLFxuICAgICAgX3Byb3BzJGdldFVzZXJDb25maXJtID0gcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIGdldFVzZXJDb25maXJtYXRpb24gPSBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPT09IHVuZGVmaW5lZCA/IGdldENvbmZpcm1hdGlvbiA6IF9wcm9wcyRnZXRVc2VyQ29uZmlybSxcbiAgICAgIF9wcm9wcyRrZXlMZW5ndGggPSBwcm9wcy5rZXlMZW5ndGgsXG4gICAgICBrZXlMZW5ndGggPSBfcHJvcHMka2V5TGVuZ3RoID09PSB1bmRlZmluZWQgPyA2IDogX3Byb3BzJGtleUxlbmd0aDtcblxuICB2YXIgYmFzZW5hbWUgPSBwcm9wcy5iYXNlbmFtZSA/IHN0cmlwVHJhaWxpbmdTbGFzaChhZGRMZWFkaW5nU2xhc2gocHJvcHMuYmFzZW5hbWUpKSA6ICcnO1xuXG4gIHZhciBnZXRET01Mb2NhdGlvbiA9IGZ1bmN0aW9uIGdldERPTUxvY2F0aW9uKGhpc3RvcnlTdGF0ZSkge1xuICAgIHZhciBfcmVmID0gaGlzdG9yeVN0YXRlIHx8IHt9LFxuICAgICAgICBrZXkgPSBfcmVmLmtleSxcbiAgICAgICAgc3RhdGUgPSBfcmVmLnN0YXRlO1xuXG4gICAgdmFyIF93aW5kb3ckbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb24sXG4gICAgICAgIHBhdGhuYW1lID0gX3dpbmRvdyRsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgICAgc2VhcmNoID0gX3dpbmRvdyRsb2NhdGlvbi5zZWFyY2gsXG4gICAgICAgIGhhc2ggPSBfd2luZG93JGxvY2F0aW9uLmhhc2g7XG5cblxuICAgIHZhciBwYXRoID0gcGF0aG5hbWUgKyBzZWFyY2ggKyBoYXNoO1xuXG4gICAgd2FybmluZyghYmFzZW5hbWUgfHwgaGFzQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpLCAnWW91IGFyZSBhdHRlbXB0aW5nIHRvIHVzZSBhIGJhc2VuYW1lIG9uIGEgcGFnZSB3aG9zZSBVUkwgcGF0aCBkb2VzIG5vdCBiZWdpbiAnICsgJ3dpdGggdGhlIGJhc2VuYW1lLiBFeHBlY3RlZCBwYXRoIFwiJyArIHBhdGggKyAnXCIgdG8gYmVnaW4gd2l0aCBcIicgKyBiYXNlbmFtZSArICdcIi4nKTtcblxuICAgIGlmIChiYXNlbmFtZSkgcGF0aCA9IHN0cmlwQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpO1xuXG4gICAgcmV0dXJuIGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBrZXkpO1xuICB9O1xuXG4gIHZhciBjcmVhdGVLZXkgPSBmdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCBrZXlMZW5ndGgpO1xuICB9O1xuXG4gIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCk7XG5cbiAgdmFyIHNldFN0YXRlID0gZnVuY3Rpb24gc2V0U3RhdGUobmV4dFN0YXRlKSB7XG4gICAgX2V4dGVuZHMoaGlzdG9yeSwgbmV4dFN0YXRlKTtcblxuICAgIGhpc3RvcnkubGVuZ3RoID0gZ2xvYmFsSGlzdG9yeS5sZW5ndGg7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9O1xuXG4gIHZhciBoYW5kbGVQb3BTdGF0ZSA9IGZ1bmN0aW9uIGhhbmRsZVBvcFN0YXRlKGV2ZW50KSB7XG4gICAgLy8gSWdub3JlIGV4dHJhbmVvdXMgcG9wc3RhdGUgZXZlbnRzIGluIFdlYktpdC5cbiAgICBpZiAoaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudChldmVudCkpIHJldHVybjtcblxuICAgIGhhbmRsZVBvcChnZXRET01Mb2NhdGlvbihldmVudC5zdGF0ZSkpO1xuICB9O1xuXG4gIHZhciBoYW5kbGVIYXNoQ2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlSGFzaENoYW5nZSgpIHtcbiAgICBoYW5kbGVQb3AoZ2V0RE9NTG9jYXRpb24oZ2V0SGlzdG9yeVN0YXRlKCkpKTtcbiAgfTtcblxuICB2YXIgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG5cbiAgdmFyIGhhbmRsZVBvcCA9IGZ1bmN0aW9uIGhhbmRsZVBvcChsb2NhdGlvbikge1xuICAgIGlmIChmb3JjZU5leHRQb3ApIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICAgICAgc2V0U3RhdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuXG4gICAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgICBpZiAob2spIHtcbiAgICAgICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV2ZXJ0UG9wKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciByZXZlcnRQb3AgPSBmdW5jdGlvbiByZXZlcnRQb3AoZnJvbUxvY2F0aW9uKSB7XG4gICAgdmFyIHRvTG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uO1xuXG4gICAgLy8gVE9ETzogV2UgY291bGQgcHJvYmFibHkgbWFrZSB0aGlzIG1vcmUgcmVsaWFibGUgYnlcbiAgICAvLyBrZWVwaW5nIGEgbGlzdCBvZiBrZXlzIHdlJ3ZlIHNlZW4gaW4gc2Vzc2lvblN0b3JhZ2UuXG4gICAgLy8gSW5zdGVhZCwgd2UganVzdCBkZWZhdWx0IHRvIDAgZm9yIGtleXMgd2UgZG9uJ3Qga25vdy5cblxuICAgIHZhciB0b0luZGV4ID0gYWxsS2V5cy5pbmRleE9mKHRvTG9jYXRpb24ua2V5KTtcblxuICAgIGlmICh0b0luZGV4ID09PSAtMSkgdG9JbmRleCA9IDA7XG5cbiAgICB2YXIgZnJvbUluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGZyb21Mb2NhdGlvbi5rZXkpO1xuXG4gICAgaWYgKGZyb21JbmRleCA9PT0gLTEpIGZyb21JbmRleCA9IDA7XG5cbiAgICB2YXIgZGVsdGEgPSB0b0luZGV4IC0gZnJvbUluZGV4O1xuXG4gICAgaWYgKGRlbHRhKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSB0cnVlO1xuICAgICAgZ28oZGVsdGEpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oZ2V0SGlzdG9yeVN0YXRlKCkpO1xuICB2YXIgYWxsS2V5cyA9IFtpbml0aWFsTG9jYXRpb24ua2V5XTtcblxuICAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgdmFyIGNyZWF0ZUhyZWYgPSBmdW5jdGlvbiBjcmVhdGVIcmVmKGxvY2F0aW9uKSB7XG4gICAgcmV0dXJuIGJhc2VuYW1lICsgY3JlYXRlUGF0aChsb2NhdGlvbik7XG4gIH07XG5cbiAgdmFyIHB1c2ggPSBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgd2FybmluZyghKCh0eXBlb2YgcGF0aCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YocGF0aCkpID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byBwdXNoIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgdmFyIGhyZWYgPSBjcmVhdGVIcmVmKGxvY2F0aW9uKTtcbiAgICAgIHZhciBrZXkgPSBsb2NhdGlvbi5rZXksXG4gICAgICAgICAgc3RhdGUgPSBsb2NhdGlvbi5zdGF0ZTtcblxuXG4gICAgICBpZiAoY2FuVXNlSGlzdG9yeSkge1xuICAgICAgICBnbG9iYWxIaXN0b3J5LnB1c2hTdGF0ZSh7IGtleToga2V5LCBzdGF0ZTogc3RhdGUgfSwgbnVsbCwgaHJlZik7XG5cbiAgICAgICAgaWYgKGZvcmNlUmVmcmVzaCkge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gaHJlZjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGhpc3RvcnkubG9jYXRpb24ua2V5KTtcbiAgICAgICAgICB2YXIgbmV4dEtleXMgPSBhbGxLZXlzLnNsaWNlKDAsIHByZXZJbmRleCA9PT0gLTEgPyAwIDogcHJldkluZGV4ICsgMSk7XG5cbiAgICAgICAgICBuZXh0S2V5cy5wdXNoKGxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgYWxsS2V5cyA9IG5leHRLZXlzO1xuXG4gICAgICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdCcm93c2VyIGhpc3RvcnkgY2Fubm90IHB1c2ggc3RhdGUgaW4gYnJvd3NlcnMgdGhhdCBkbyBub3Qgc3VwcG9ydCBIVE1MNSBoaXN0b3J5Jyk7XG5cbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBocmVmO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHZhciByZXBsYWNlID0gZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHdhcm5pbmcoISgodHlwZW9mIHBhdGggPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHBhdGgpKSA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcmVwbGFjZSB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG5cbiAgICAgIHZhciBocmVmID0gY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgICB2YXIga2V5ID0gbG9jYXRpb24ua2V5LFxuICAgICAgICAgIHN0YXRlID0gbG9jYXRpb24uc3RhdGU7XG5cblxuICAgICAgaWYgKGNhblVzZUhpc3RvcnkpIHtcbiAgICAgICAgZ2xvYmFsSGlzdG9yeS5yZXBsYWNlU3RhdGUoeyBrZXk6IGtleSwgc3RhdGU6IHN0YXRlIH0sIG51bGwsIGhyZWYpO1xuXG4gICAgICAgIGlmIChmb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShocmVmKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGhpc3RvcnkubG9jYXRpb24ua2V5KTtcblxuICAgICAgICAgIGlmIChwcmV2SW5kZXggIT09IC0xKSBhbGxLZXlzW3ByZXZJbmRleF0gPSBsb2NhdGlvbi5rZXk7XG5cbiAgICAgICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0Jyb3dzZXIgaGlzdG9yeSBjYW5ub3QgcmVwbGFjZSBzdGF0ZSBpbiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IEhUTUw1IGhpc3RvcnknKTtcblxuICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShocmVmKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB2YXIgZ28gPSBmdW5jdGlvbiBnbyhuKSB7XG4gICAgZ2xvYmFsSGlzdG9yeS5nbyhuKTtcbiAgfTtcblxuICB2YXIgZ29CYWNrID0gZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIHJldHVybiBnbygtMSk7XG4gIH07XG5cbiAgdmFyIGdvRm9yd2FyZCA9IGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICByZXR1cm4gZ28oMSk7XG4gIH07XG5cbiAgdmFyIGxpc3RlbmVyQ291bnQgPSAwO1xuXG4gIHZhciBjaGVja0RPTUxpc3RlbmVycyA9IGZ1bmN0aW9uIGNoZWNrRE9NTGlzdGVuZXJzKGRlbHRhKSB7XG4gICAgbGlzdGVuZXJDb3VudCArPSBkZWx0YTtcblxuICAgIGlmIChsaXN0ZW5lckNvdW50ID09PSAxKSB7XG4gICAgICBhZGRFdmVudExpc3RlbmVyKHdpbmRvdywgUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuXG4gICAgICBpZiAobmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIpIGFkZEV2ZW50TGlzdGVuZXIod2luZG93LCBIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH0gZWxzZSBpZiAobGlzdGVuZXJDb3VudCA9PT0gMCkge1xuICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcih3aW5kb3csIFBvcFN0YXRlRXZlbnQsIGhhbmRsZVBvcFN0YXRlKTtcblxuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSByZW1vdmVFdmVudExpc3RlbmVyKHdpbmRvdywgSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGlzQmxvY2tlZCA9IGZhbHNlO1xuXG4gIHZhciBibG9jayA9IGZ1bmN0aW9uIGJsb2NrKCkge1xuICAgIHZhciBwcm9tcHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuXG4gICAgdmFyIHVuYmxvY2sgPSB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcblxuICAgIGlmICghaXNCbG9ja2VkKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICAgIGlzQmxvY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgICAgaXNCbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuYmxvY2soKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBsaXN0ZW4gPSBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICB2YXIgdW5saXN0ZW4gPSB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgdW5saXN0ZW4oKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZ2xvYmFsSGlzdG9yeS5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogaW5pdGlhbExvY2F0aW9uLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcblxuICByZXR1cm4gaGlzdG9yeTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUJyb3dzZXJIaXN0b3J5OyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICdpbnZhcmlhbnQnO1xuaW1wb3J0IHsgY3JlYXRlTG9jYXRpb24sIGxvY2F0aW9uc0FyZUVxdWFsIH0gZnJvbSAnLi9Mb2NhdGlvblV0aWxzJztcbmltcG9ydCB7IGFkZExlYWRpbmdTbGFzaCwgc3RyaXBMZWFkaW5nU2xhc2gsIHN0cmlwVHJhaWxpbmdTbGFzaCwgaGFzQmFzZW5hbWUsIHN0cmlwQmFzZW5hbWUsIGNyZWF0ZVBhdGggfSBmcm9tICcuL1BhdGhVdGlscyc7XG5pbXBvcnQgY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIgZnJvbSAnLi9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcic7XG5pbXBvcnQgeyBjYW5Vc2VET00sIGFkZEV2ZW50TGlzdGVuZXIsIHJlbW92ZUV2ZW50TGlzdGVuZXIsIGdldENvbmZpcm1hdGlvbiwgc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2ggfSBmcm9tICcuL0RPTVV0aWxzJztcblxudmFyIEhhc2hDaGFuZ2VFdmVudCA9ICdoYXNoY2hhbmdlJztcblxudmFyIEhhc2hQYXRoQ29kZXJzID0ge1xuICBoYXNoYmFuZzoge1xuICAgIGVuY29kZVBhdGg6IGZ1bmN0aW9uIGVuY29kZVBhdGgocGF0aCkge1xuICAgICAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnIScgPyBwYXRoIDogJyEvJyArIHN0cmlwTGVhZGluZ1NsYXNoKHBhdGgpO1xuICAgIH0sXG4gICAgZGVjb2RlUGF0aDogZnVuY3Rpb24gZGVjb2RlUGF0aChwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICchJyA/IHBhdGguc3Vic3RyKDEpIDogcGF0aDtcbiAgICB9XG4gIH0sXG4gIG5vc2xhc2g6IHtcbiAgICBlbmNvZGVQYXRoOiBzdHJpcExlYWRpbmdTbGFzaCxcbiAgICBkZWNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2hcbiAgfSxcbiAgc2xhc2g6IHtcbiAgICBlbmNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2gsXG4gICAgZGVjb2RlUGF0aDogYWRkTGVhZGluZ1NsYXNoXG4gIH1cbn07XG5cbnZhciBnZXRIYXNoUGF0aCA9IGZ1bmN0aW9uIGdldEhhc2hQYXRoKCkge1xuICAvLyBXZSBjYW4ndCB1c2Ugd2luZG93LmxvY2F0aW9uLmhhc2ggaGVyZSBiZWNhdXNlIGl0J3Mgbm90XG4gIC8vIGNvbnNpc3RlbnQgYWNyb3NzIGJyb3dzZXJzIC0gRmlyZWZveCB3aWxsIHByZS1kZWNvZGUgaXQhXG4gIHZhciBocmVmID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gIHZhciBoYXNoSW5kZXggPSBocmVmLmluZGV4T2YoJyMnKTtcbiAgcmV0dXJuIGhhc2hJbmRleCA9PT0gLTEgPyAnJyA6IGhyZWYuc3Vic3RyaW5nKGhhc2hJbmRleCArIDEpO1xufTtcblxudmFyIHB1c2hIYXNoUGF0aCA9IGZ1bmN0aW9uIHB1c2hIYXNoUGF0aChwYXRoKSB7XG4gIHJldHVybiB3aW5kb3cubG9jYXRpb24uaGFzaCA9IHBhdGg7XG59O1xuXG52YXIgcmVwbGFjZUhhc2hQYXRoID0gZnVuY3Rpb24gcmVwbGFjZUhhc2hQYXRoKHBhdGgpIHtcbiAgdmFyIGhhc2hJbmRleCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmLmluZGV4T2YoJyMnKTtcblxuICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZSh3aW5kb3cubG9jYXRpb24uaHJlZi5zbGljZSgwLCBoYXNoSW5kZXggPj0gMCA/IGhhc2hJbmRleCA6IDApICsgJyMnICsgcGF0aCk7XG59O1xuXG52YXIgY3JlYXRlSGFzaEhpc3RvcnkgPSBmdW5jdGlvbiBjcmVhdGVIYXNoSGlzdG9yeSgpIHtcbiAgdmFyIHByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcblxuICBpbnZhcmlhbnQoY2FuVXNlRE9NLCAnSGFzaCBoaXN0b3J5IG5lZWRzIGEgRE9NJyk7XG5cbiAgdmFyIGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdmFyIGNhbkdvV2l0aG91dFJlbG9hZCA9IHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoKCk7XG5cbiAgdmFyIF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9IHByb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzJGdldFVzZXJDb25maXJtID09PSB1bmRlZmluZWQgPyBnZXRDb25maXJtYXRpb24gOiBfcHJvcHMkZ2V0VXNlckNvbmZpcm0sXG4gICAgICBfcHJvcHMkaGFzaFR5cGUgPSBwcm9wcy5oYXNoVHlwZSxcbiAgICAgIGhhc2hUeXBlID0gX3Byb3BzJGhhc2hUeXBlID09PSB1bmRlZmluZWQgPyAnc2xhc2gnIDogX3Byb3BzJGhhc2hUeXBlO1xuXG4gIHZhciBiYXNlbmFtZSA9IHByb3BzLmJhc2VuYW1lID8gc3RyaXBUcmFpbGluZ1NsYXNoKGFkZExlYWRpbmdTbGFzaChwcm9wcy5iYXNlbmFtZSkpIDogJyc7XG5cbiAgdmFyIF9IYXNoUGF0aENvZGVycyRoYXNoVCA9IEhhc2hQYXRoQ29kZXJzW2hhc2hUeXBlXSxcbiAgICAgIGVuY29kZVBhdGggPSBfSGFzaFBhdGhDb2RlcnMkaGFzaFQuZW5jb2RlUGF0aCxcbiAgICAgIGRlY29kZVBhdGggPSBfSGFzaFBhdGhDb2RlcnMkaGFzaFQuZGVjb2RlUGF0aDtcblxuXG4gIHZhciBnZXRET01Mb2NhdGlvbiA9IGZ1bmN0aW9uIGdldERPTUxvY2F0aW9uKCkge1xuICAgIHZhciBwYXRoID0gZGVjb2RlUGF0aChnZXRIYXNoUGF0aCgpKTtcblxuICAgIHdhcm5pbmcoIWJhc2VuYW1lIHx8IGhhc0Jhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKSwgJ1lvdSBhcmUgYXR0ZW1wdGluZyB0byB1c2UgYSBiYXNlbmFtZSBvbiBhIHBhZ2Ugd2hvc2UgVVJMIHBhdGggZG9lcyBub3QgYmVnaW4gJyArICd3aXRoIHRoZSBiYXNlbmFtZS4gRXhwZWN0ZWQgcGF0aCBcIicgKyBwYXRoICsgJ1wiIHRvIGJlZ2luIHdpdGggXCInICsgYmFzZW5hbWUgKyAnXCIuJyk7XG5cbiAgICBpZiAoYmFzZW5hbWUpIHBhdGggPSBzdHJpcEJhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKTtcblxuICAgIHJldHVybiBjcmVhdGVMb2NhdGlvbihwYXRoKTtcbiAgfTtcblxuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpO1xuXG4gIHZhciBzZXRTdGF0ZSA9IGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGdsb2JhbEhpc3RvcnkubGVuZ3RoO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfTtcblxuICB2YXIgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gIHZhciBpZ25vcmVQYXRoID0gbnVsbDtcblxuICB2YXIgaGFuZGxlSGFzaENoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUhhc2hDaGFuZ2UoKSB7XG4gICAgdmFyIHBhdGggPSBnZXRIYXNoUGF0aCgpO1xuICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgocGF0aCk7XG5cbiAgICBpZiAocGF0aCAhPT0gZW5jb2RlZFBhdGgpIHtcbiAgICAgIC8vIEVuc3VyZSB3ZSBhbHdheXMgaGF2ZSBhIHByb3Blcmx5LWVuY29kZWQgaGFzaC5cbiAgICAgIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBsb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKCk7XG4gICAgICB2YXIgcHJldkxvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjtcblxuICAgICAgaWYgKCFmb3JjZU5leHRQb3AgJiYgbG9jYXRpb25zQXJlRXF1YWwocHJldkxvY2F0aW9uLCBsb2NhdGlvbikpIHJldHVybjsgLy8gQSBoYXNoY2hhbmdlIGRvZXNuJ3QgYWx3YXlzID09IGxvY2F0aW9uIGNoYW5nZS5cblxuICAgICAgaWYgKGlnbm9yZVBhdGggPT09IGNyZWF0ZVBhdGgobG9jYXRpb24pKSByZXR1cm47IC8vIElnbm9yZSB0aGlzIGNoYW5nZTsgd2UgYWxyZWFkeSBzZXRTdGF0ZSBpbiBwdXNoL3JlcGxhY2UuXG5cbiAgICAgIGlnbm9yZVBhdGggPSBudWxsO1xuXG4gICAgICBoYW5kbGVQb3AobG9jYXRpb24pO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaGFuZGxlUG9wID0gZnVuY3Rpb24gaGFuZGxlUG9wKGxvY2F0aW9uKSB7XG4gICAgaWYgKGZvcmNlTmV4dFBvcCkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gICAgICBzZXRTdGF0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG5cbiAgICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICAgIGlmIChvaykge1xuICAgICAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXZlcnRQb3AobG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIHJldmVydFBvcCA9IGZ1bmN0aW9uIHJldmVydFBvcChmcm9tTG9jYXRpb24pIHtcbiAgICB2YXIgdG9Mb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247XG5cbiAgICAvLyBUT0RPOiBXZSBjb3VsZCBwcm9iYWJseSBtYWtlIHRoaXMgbW9yZSByZWxpYWJsZSBieVxuICAgIC8vIGtlZXBpbmcgYSBsaXN0IG9mIHBhdGhzIHdlJ3ZlIHNlZW4gaW4gc2Vzc2lvblN0b3JhZ2UuXG4gICAgLy8gSW5zdGVhZCwgd2UganVzdCBkZWZhdWx0IHRvIDAgZm9yIHBhdGhzIHdlIGRvbid0IGtub3cuXG5cbiAgICB2YXIgdG9JbmRleCA9IGFsbFBhdGhzLmxhc3RJbmRleE9mKGNyZWF0ZVBhdGgodG9Mb2NhdGlvbikpO1xuXG4gICAgaWYgKHRvSW5kZXggPT09IC0xKSB0b0luZGV4ID0gMDtcblxuICAgIHZhciBmcm9tSW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZihjcmVhdGVQYXRoKGZyb21Mb2NhdGlvbikpO1xuXG4gICAgaWYgKGZyb21JbmRleCA9PT0gLTEpIGZyb21JbmRleCA9IDA7XG5cbiAgICB2YXIgZGVsdGEgPSB0b0luZGV4IC0gZnJvbUluZGV4O1xuXG4gICAgaWYgKGRlbHRhKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSB0cnVlO1xuICAgICAgZ28oZGVsdGEpO1xuICAgIH1cbiAgfTtcblxuICAvLyBFbnN1cmUgdGhlIGhhc2ggaXMgZW5jb2RlZCBwcm9wZXJseSBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZS5cbiAgdmFyIHBhdGggPSBnZXRIYXNoUGF0aCgpO1xuICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKHBhdGgpO1xuXG4gIGlmIChwYXRoICE9PSBlbmNvZGVkUGF0aCkgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcblxuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oKTtcbiAgdmFyIGFsbFBhdGhzID0gW2NyZWF0ZVBhdGgoaW5pdGlhbExvY2F0aW9uKV07XG5cbiAgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIHZhciBjcmVhdGVIcmVmID0gZnVuY3Rpb24gY3JlYXRlSHJlZihsb2NhdGlvbikge1xuICAgIHJldHVybiAnIycgKyBlbmNvZGVQYXRoKGJhc2VuYW1lICsgY3JlYXRlUGF0aChsb2NhdGlvbikpO1xuICB9O1xuXG4gIHZhciBwdXNoID0gZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgIHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgcHVzaCBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgaGlzdG9yeS5sb2NhdGlvbik7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuXG4gICAgICB2YXIgcGF0aCA9IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICAgICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChiYXNlbmFtZSArIHBhdGgpO1xuICAgICAgdmFyIGhhc2hDaGFuZ2VkID0gZ2V0SGFzaFBhdGgoKSAhPT0gZW5jb2RlZFBhdGg7XG5cbiAgICAgIGlmIChoYXNoQ2hhbmdlZCkge1xuICAgICAgICAvLyBXZSBjYW5ub3QgdGVsbCBpZiBhIGhhc2hjaGFuZ2Ugd2FzIGNhdXNlZCBieSBhIFBVU0gsIHNvIHdlJ2RcbiAgICAgICAgLy8gcmF0aGVyIHNldFN0YXRlIGhlcmUgYW5kIGlnbm9yZSB0aGUgaGFzaGNoYW5nZS4gVGhlIGNhdmVhdCBoZXJlXG4gICAgICAgIC8vIGlzIHRoYXQgb3RoZXIgaGFzaCBoaXN0b3JpZXMgaW4gdGhlIHBhZ2Ugd2lsbCBjb25zaWRlciBpdCBhIFBPUC5cbiAgICAgICAgaWdub3JlUGF0aCA9IHBhdGg7XG4gICAgICAgIHB1c2hIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG5cbiAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbFBhdGhzLmxhc3RJbmRleE9mKGNyZWF0ZVBhdGgoaGlzdG9yeS5sb2NhdGlvbikpO1xuICAgICAgICB2YXIgbmV4dFBhdGhzID0gYWxsUGF0aHMuc2xpY2UoMCwgcHJldkluZGV4ID09PSAtMSA/IDAgOiBwcmV2SW5kZXggKyAxKTtcblxuICAgICAgICBuZXh0UGF0aHMucHVzaChwYXRoKTtcbiAgICAgICAgYWxsUGF0aHMgPSBuZXh0UGF0aHM7XG5cbiAgICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2FybmluZyhmYWxzZSwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgUFVTSCB0aGUgc2FtZSBwYXRoOyBhIG5ldyBlbnRyeSB3aWxsIG5vdCBiZSBhZGRlZCB0byB0aGUgaGlzdG9yeSBzdGFjaycpO1xuXG4gICAgICAgIHNldFN0YXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIHJlcGxhY2UgPSBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCByZXBsYWNlIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBoaXN0b3J5LmxvY2F0aW9uKTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG5cbiAgICAgIHZhciBwYXRoID0gY3JlYXRlUGF0aChsb2NhdGlvbik7XG4gICAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKGJhc2VuYW1lICsgcGF0aCk7XG4gICAgICB2YXIgaGFzaENoYW5nZWQgPSBnZXRIYXNoUGF0aCgpICE9PSBlbmNvZGVkUGF0aDtcblxuICAgICAgaWYgKGhhc2hDaGFuZ2VkKSB7XG4gICAgICAgIC8vIFdlIGNhbm5vdCB0ZWxsIGlmIGEgaGFzaGNoYW5nZSB3YXMgY2F1c2VkIGJ5IGEgUkVQTEFDRSwgc28gd2UnZFxuICAgICAgICAvLyByYXRoZXIgc2V0U3RhdGUgaGVyZSBhbmQgaWdub3JlIHRoZSBoYXNoY2hhbmdlLiBUaGUgY2F2ZWF0IGhlcmVcbiAgICAgICAgLy8gaXMgdGhhdCBvdGhlciBoYXNoIGhpc3RvcmllcyBpbiB0aGUgcGFnZSB3aWxsIGNvbnNpZGVyIGl0IGEgUE9QLlxuICAgICAgICBpZ25vcmVQYXRoID0gcGF0aDtcbiAgICAgICAgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHByZXZJbmRleCA9IGFsbFBhdGhzLmluZGV4T2YoY3JlYXRlUGF0aChoaXN0b3J5LmxvY2F0aW9uKSk7XG5cbiAgICAgIGlmIChwcmV2SW5kZXggIT09IC0xKSBhbGxQYXRoc1twcmV2SW5kZXhdID0gcGF0aDtcblxuICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciBnbyA9IGZ1bmN0aW9uIGdvKG4pIHtcbiAgICB3YXJuaW5nKGNhbkdvV2l0aG91dFJlbG9hZCwgJ0hhc2ggaGlzdG9yeSBnbyhuKSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkIGluIHRoaXMgYnJvd3NlcicpO1xuXG4gICAgZ2xvYmFsSGlzdG9yeS5nbyhuKTtcbiAgfTtcblxuICB2YXIgZ29CYWNrID0gZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIHJldHVybiBnbygtMSk7XG4gIH07XG5cbiAgdmFyIGdvRm9yd2FyZCA9IGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICByZXR1cm4gZ28oMSk7XG4gIH07XG5cbiAgdmFyIGxpc3RlbmVyQ291bnQgPSAwO1xuXG4gIHZhciBjaGVja0RPTUxpc3RlbmVycyA9IGZ1bmN0aW9uIGNoZWNrRE9NTGlzdGVuZXJzKGRlbHRhKSB7XG4gICAgbGlzdGVuZXJDb3VudCArPSBkZWx0YTtcblxuICAgIGlmIChsaXN0ZW5lckNvdW50ID09PSAxKSB7XG4gICAgICBhZGRFdmVudExpc3RlbmVyKHdpbmRvdywgSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9IGVsc2UgaWYgKGxpc3RlbmVyQ291bnQgPT09IDApIHtcbiAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXIod2luZG93LCBIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaXNCbG9ja2VkID0gZmFsc2U7XG5cbiAgdmFyIGJsb2NrID0gZnVuY3Rpb24gYmxvY2soKSB7XG4gICAgdmFyIHByb21wdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZmFsc2U7XG5cbiAgICB2YXIgdW5ibG9jayA9IHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuXG4gICAgaWYgKCFpc0Jsb2NrZWQpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgICAgaXNCbG9ja2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGlzQmxvY2tlZCkge1xuICAgICAgICBpc0Jsb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdW5ibG9jaygpO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGxpc3RlbiA9IGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHZhciB1bmxpc3RlbiA9IHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB1bmxpc3RlbigpO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBnbG9iYWxIaXN0b3J5Lmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBpbml0aWFsTG9jYXRpb24sXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuXG4gIHJldHVybiBoaXN0b3J5O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlSGFzaEhpc3Rvcnk7IiwidmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCB7IGNyZWF0ZVBhdGggfSBmcm9tICcuL1BhdGhVdGlscyc7XG5pbXBvcnQgeyBjcmVhdGVMb2NhdGlvbiB9IGZyb20gJy4vTG9jYXRpb25VdGlscyc7XG5pbXBvcnQgY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIgZnJvbSAnLi9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcic7XG5cbnZhciBjbGFtcCA9IGZ1bmN0aW9uIGNsYW1wKG4sIGxvd2VyQm91bmQsIHVwcGVyQm91bmQpIHtcbiAgcmV0dXJuIE1hdGgubWluKE1hdGgubWF4KG4sIGxvd2VyQm91bmQpLCB1cHBlckJvdW5kKTtcbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhIGhpc3Rvcnkgb2JqZWN0IHRoYXQgc3RvcmVzIGxvY2F0aW9ucyBpbiBtZW1vcnkuXG4gKi9cbnZhciBjcmVhdGVNZW1vcnlIaXN0b3J5ID0gZnVuY3Rpb24gY3JlYXRlTWVtb3J5SGlzdG9yeSgpIHtcbiAgdmFyIHByb3BzID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgdmFyIGdldFVzZXJDb25maXJtYXRpb24gPSBwcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgX3Byb3BzJGluaXRpYWxFbnRyaWVzID0gcHJvcHMuaW5pdGlhbEVudHJpZXMsXG4gICAgICBpbml0aWFsRW50cmllcyA9IF9wcm9wcyRpbml0aWFsRW50cmllcyA9PT0gdW5kZWZpbmVkID8gWycvJ10gOiBfcHJvcHMkaW5pdGlhbEVudHJpZXMsXG4gICAgICBfcHJvcHMkaW5pdGlhbEluZGV4ID0gcHJvcHMuaW5pdGlhbEluZGV4LFxuICAgICAgaW5pdGlhbEluZGV4ID0gX3Byb3BzJGluaXRpYWxJbmRleCA9PT0gdW5kZWZpbmVkID8gMCA6IF9wcm9wcyRpbml0aWFsSW5kZXgsXG4gICAgICBfcHJvcHMka2V5TGVuZ3RoID0gcHJvcHMua2V5TGVuZ3RoLFxuICAgICAga2V5TGVuZ3RoID0gX3Byb3BzJGtleUxlbmd0aCA9PT0gdW5kZWZpbmVkID8gNiA6IF9wcm9wcyRrZXlMZW5ndGg7XG5cblxuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpO1xuXG4gIHZhciBzZXRTdGF0ZSA9IGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGhpc3RvcnkuZW50cmllcy5sZW5ndGg7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9O1xuXG4gIHZhciBjcmVhdGVLZXkgPSBmdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCBrZXlMZW5ndGgpO1xuICB9O1xuXG4gIHZhciBpbmRleCA9IGNsYW1wKGluaXRpYWxJbmRleCwgMCwgaW5pdGlhbEVudHJpZXMubGVuZ3RoIC0gMSk7XG4gIHZhciBlbnRyaWVzID0gaW5pdGlhbEVudHJpZXMubWFwKGZ1bmN0aW9uIChlbnRyeSkge1xuICAgIHJldHVybiB0eXBlb2YgZW50cnkgPT09ICdzdHJpbmcnID8gY3JlYXRlTG9jYXRpb24oZW50cnksIHVuZGVmaW5lZCwgY3JlYXRlS2V5KCkpIDogY3JlYXRlTG9jYXRpb24oZW50cnksIHVuZGVmaW5lZCwgZW50cnkua2V5IHx8IGNyZWF0ZUtleSgpKTtcbiAgfSk7XG5cbiAgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIHZhciBjcmVhdGVIcmVmID0gY3JlYXRlUGF0aDtcblxuICB2YXIgcHVzaCA9IGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICB3YXJuaW5nKCEoKHR5cGVvZiBwYXRoID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihwYXRoKSkgPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHB1c2ggd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuXG4gICAgICB2YXIgcHJldkluZGV4ID0gaGlzdG9yeS5pbmRleDtcbiAgICAgIHZhciBuZXh0SW5kZXggPSBwcmV2SW5kZXggKyAxO1xuXG4gICAgICB2YXIgbmV4dEVudHJpZXMgPSBoaXN0b3J5LmVudHJpZXMuc2xpY2UoMCk7XG4gICAgICBpZiAobmV4dEVudHJpZXMubGVuZ3RoID4gbmV4dEluZGV4KSB7XG4gICAgICAgIG5leHRFbnRyaWVzLnNwbGljZShuZXh0SW5kZXgsIG5leHRFbnRyaWVzLmxlbmd0aCAtIG5leHRJbmRleCwgbG9jYXRpb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV4dEVudHJpZXMucHVzaChsb2NhdGlvbik7XG4gICAgICB9XG5cbiAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgaW5kZXg6IG5leHRJbmRleCxcbiAgICAgICAgZW50cmllczogbmV4dEVudHJpZXNcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciByZXBsYWNlID0gZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHdhcm5pbmcoISgodHlwZW9mIHBhdGggPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHBhdGgpKSA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcmVwbGFjZSB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG5cbiAgICAgIGhpc3RvcnkuZW50cmllc1toaXN0b3J5LmluZGV4XSA9IGxvY2F0aW9uO1xuXG4gICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIGdvID0gZnVuY3Rpb24gZ28obikge1xuICAgIHZhciBuZXh0SW5kZXggPSBjbGFtcChoaXN0b3J5LmluZGV4ICsgbiwgMCwgaGlzdG9yeS5lbnRyaWVzLmxlbmd0aCAtIDEpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuICAgIHZhciBsb2NhdGlvbiA9IGhpc3RvcnkuZW50cmllc1tuZXh0SW5kZXhdO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmIChvaykge1xuICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICAgIGluZGV4OiBuZXh0SW5kZXhcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBNaW1pYyB0aGUgYmVoYXZpb3Igb2YgRE9NIGhpc3RvcmllcyBieVxuICAgICAgICAvLyBjYXVzaW5nIGEgcmVuZGVyIGFmdGVyIGEgY2FuY2VsbGVkIFBPUC5cbiAgICAgICAgc2V0U3RhdGUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB2YXIgZ29CYWNrID0gZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIHJldHVybiBnbygtMSk7XG4gIH07XG5cbiAgdmFyIGdvRm9yd2FyZCA9IGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICByZXR1cm4gZ28oMSk7XG4gIH07XG5cbiAgdmFyIGNhbkdvID0gZnVuY3Rpb24gY2FuR28obikge1xuICAgIHZhciBuZXh0SW5kZXggPSBoaXN0b3J5LmluZGV4ICsgbjtcbiAgICByZXR1cm4gbmV4dEluZGV4ID49IDAgJiYgbmV4dEluZGV4IDwgaGlzdG9yeS5lbnRyaWVzLmxlbmd0aDtcbiAgfTtcblxuICB2YXIgYmxvY2sgPSBmdW5jdGlvbiBibG9jaygpIHtcbiAgICB2YXIgcHJvbXB0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBmYWxzZTtcbiAgICByZXR1cm4gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG4gIH07XG5cbiAgdmFyIGxpc3RlbiA9IGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHJldHVybiB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gIH07XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBlbnRyaWVzLmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBlbnRyaWVzW2luZGV4XSxcbiAgICBpbmRleDogaW5kZXgsXG4gICAgZW50cmllczogZW50cmllcyxcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgY2FuR286IGNhbkdvLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuXG4gIHJldHVybiBoaXN0b3J5O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlTWVtb3J5SGlzdG9yeTsiLCJmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5pbXBvcnQgeyBjcmVhdGVMb2NhdGlvbiwgbG9jYXRpb25zQXJlRXF1YWwgfSBmcm9tICdoaXN0b3J5JztcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgdXBkYXRpbmcgdGhlIGxvY2F0aW9uIHByb2dyYW1tYXRpY2FsbHlcbiAqIHdpdGggYSBjb21wb25lbnQuXG4gKi9cblxudmFyIFJlZGlyZWN0ID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFJlZGlyZWN0LCBfUmVhY3QkQ29tcG9uZW50KTtcblxuICBmdW5jdGlvbiBSZWRpcmVjdCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUmVkaXJlY3QpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBSZWRpcmVjdC5wcm90b3R5cGUuaXNTdGF0aWMgPSBmdW5jdGlvbiBpc1N0YXRpYygpIHtcbiAgICByZXR1cm4gdGhpcy5jb250ZXh0LnJvdXRlciAmJiB0aGlzLmNvbnRleHQucm91dGVyLnN0YXRpY0NvbnRleHQ7XG4gIH07XG5cbiAgUmVkaXJlY3QucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICBpbnZhcmlhbnQodGhpcy5jb250ZXh0LnJvdXRlciwgJ1lvdSBzaG91bGQgbm90IHVzZSA8UmVkaXJlY3Q+IG91dHNpZGUgYSA8Um91dGVyPicpO1xuXG4gICAgaWYgKHRoaXMuaXNTdGF0aWMoKSkgdGhpcy5wZXJmb3JtKCk7XG4gIH07XG5cbiAgUmVkaXJlY3QucHJvdG90eXBlLmNvbXBvbmVudERpZE1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgaWYgKCF0aGlzLmlzU3RhdGljKCkpIHRoaXMucGVyZm9ybSgpO1xuICB9O1xuXG4gIFJlZGlyZWN0LnByb3RvdHlwZS5jb21wb25lbnREaWRVcGRhdGUgPSBmdW5jdGlvbiBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgdmFyIHByZXZUbyA9IGNyZWF0ZUxvY2F0aW9uKHByZXZQcm9wcy50byk7XG4gICAgdmFyIG5leHRUbyA9IGNyZWF0ZUxvY2F0aW9uKHRoaXMucHJvcHMudG8pO1xuXG4gICAgaWYgKGxvY2F0aW9uc0FyZUVxdWFsKHByZXZUbywgbmV4dFRvKSkge1xuICAgICAgd2FybmluZyhmYWxzZSwgJ1lvdSB0cmllZCB0byByZWRpcmVjdCB0byB0aGUgc2FtZSByb3V0ZSB5b3VcXCdyZSBjdXJyZW50bHkgb246ICcgKyAoJ1wiJyArIG5leHRUby5wYXRobmFtZSArIG5leHRUby5zZWFyY2ggKyAnXCInKSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5wZXJmb3JtKCk7XG4gIH07XG5cbiAgUmVkaXJlY3QucHJvdG90eXBlLnBlcmZvcm0gPSBmdW5jdGlvbiBwZXJmb3JtKCkge1xuICAgIHZhciBoaXN0b3J5ID0gdGhpcy5jb250ZXh0LnJvdXRlci5oaXN0b3J5O1xuICAgIHZhciBfcHJvcHMgPSB0aGlzLnByb3BzLFxuICAgICAgICBwdXNoID0gX3Byb3BzLnB1c2gsXG4gICAgICAgIHRvID0gX3Byb3BzLnRvO1xuXG5cbiAgICBpZiAocHVzaCkge1xuICAgICAgaGlzdG9yeS5wdXNoKHRvKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaGlzdG9yeS5yZXBsYWNlKHRvKTtcbiAgICB9XG4gIH07XG5cbiAgUmVkaXJlY3QucHJvdG90eXBlLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfTtcblxuICByZXR1cm4gUmVkaXJlY3Q7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblJlZGlyZWN0LnByb3BUeXBlcyA9IHtcbiAgcHVzaDogUHJvcFR5cGVzLmJvb2wsXG4gIGZyb206IFByb3BUeXBlcy5zdHJpbmcsXG4gIHRvOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSkuaXNSZXF1aXJlZFxufTtcblJlZGlyZWN0LmRlZmF1bHRQcm9wcyA9IHtcbiAgcHVzaDogZmFsc2Vcbn07XG5SZWRpcmVjdC5jb250ZXh0VHlwZXMgPSB7XG4gIHJvdXRlcjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICBoaXN0b3J5OiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgcHVzaDogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICAgIHJlcGxhY2U6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbiAgICB9KS5pc1JlcXVpcmVkLFxuICAgIHN0YXRpY0NvbnRleHQ6IFByb3BUeXBlcy5vYmplY3RcbiAgfSkuaXNSZXF1aXJlZFxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBSZWRpcmVjdDsiLCIvLyBXcml0dGVuIGluIHRoaXMgcm91bmQgYWJvdXQgd2F5IGZvciBiYWJlbC10cmFuc2Zvcm0taW1wb3J0c1xuaW1wb3J0IFJlZGlyZWN0IGZyb20gJ3JlYWN0LXJvdXRlci9lcy9SZWRpcmVjdCc7XG5cbmV4cG9ydCBkZWZhdWx0IFJlZGlyZWN0OyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhvYmosIGtleXMpIHsgdmFyIHRhcmdldCA9IHt9OyBmb3IgKHZhciBpIGluIG9iaikgeyBpZiAoa2V5cy5pbmRleE9mKGkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGkpKSBjb250aW51ZTsgdGFyZ2V0W2ldID0gb2JqW2ldOyB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHsgYWRkTGVhZGluZ1NsYXNoLCBjcmVhdGVQYXRoLCBwYXJzZVBhdGggfSBmcm9tICdoaXN0b3J5L1BhdGhVdGlscyc7XG5pbXBvcnQgUm91dGVyIGZyb20gJy4vUm91dGVyJztcblxudmFyIG5vcm1hbGl6ZUxvY2F0aW9uID0gZnVuY3Rpb24gbm9ybWFsaXplTG9jYXRpb24ob2JqZWN0KSB7XG4gIHZhciBfb2JqZWN0JHBhdGhuYW1lID0gb2JqZWN0LnBhdGhuYW1lLFxuICAgICAgcGF0aG5hbWUgPSBfb2JqZWN0JHBhdGhuYW1lID09PSB1bmRlZmluZWQgPyAnLycgOiBfb2JqZWN0JHBhdGhuYW1lLFxuICAgICAgX29iamVjdCRzZWFyY2ggPSBvYmplY3Quc2VhcmNoLFxuICAgICAgc2VhcmNoID0gX29iamVjdCRzZWFyY2ggPT09IHVuZGVmaW5lZCA/ICcnIDogX29iamVjdCRzZWFyY2gsXG4gICAgICBfb2JqZWN0JGhhc2ggPSBvYmplY3QuaGFzaCxcbiAgICAgIGhhc2ggPSBfb2JqZWN0JGhhc2ggPT09IHVuZGVmaW5lZCA/ICcnIDogX29iamVjdCRoYXNoO1xuXG5cbiAgcmV0dXJuIHtcbiAgICBwYXRobmFtZTogcGF0aG5hbWUsXG4gICAgc2VhcmNoOiBzZWFyY2ggPT09ICc/JyA/ICcnIDogc2VhcmNoLFxuICAgIGhhc2g6IGhhc2ggPT09ICcjJyA/ICcnIDogaGFzaFxuICB9O1xufTtcblxudmFyIGFkZEJhc2VuYW1lID0gZnVuY3Rpb24gYWRkQmFzZW5hbWUoYmFzZW5hbWUsIGxvY2F0aW9uKSB7XG4gIGlmICghYmFzZW5hbWUpIHJldHVybiBsb2NhdGlvbjtcblxuICByZXR1cm4gX2V4dGVuZHMoe30sIGxvY2F0aW9uLCB7XG4gICAgcGF0aG5hbWU6IGFkZExlYWRpbmdTbGFzaChiYXNlbmFtZSkgKyBsb2NhdGlvbi5wYXRobmFtZVxuICB9KTtcbn07XG5cbnZhciBzdHJpcEJhc2VuYW1lID0gZnVuY3Rpb24gc3RyaXBCYXNlbmFtZShiYXNlbmFtZSwgbG9jYXRpb24pIHtcbiAgaWYgKCFiYXNlbmFtZSkgcmV0dXJuIGxvY2F0aW9uO1xuXG4gIHZhciBiYXNlID0gYWRkTGVhZGluZ1NsYXNoKGJhc2VuYW1lKTtcblxuICBpZiAobG9jYXRpb24ucGF0aG5hbWUuaW5kZXhPZihiYXNlKSAhPT0gMCkgcmV0dXJuIGxvY2F0aW9uO1xuXG4gIHJldHVybiBfZXh0ZW5kcyh7fSwgbG9jYXRpb24sIHtcbiAgICBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWUuc3Vic3RyKGJhc2UubGVuZ3RoKVxuICB9KTtcbn07XG5cbnZhciBjcmVhdGVMb2NhdGlvbiA9IGZ1bmN0aW9uIGNyZWF0ZUxvY2F0aW9uKGxvY2F0aW9uKSB7XG4gIHJldHVybiB0eXBlb2YgbG9jYXRpb24gPT09ICdzdHJpbmcnID8gcGFyc2VQYXRoKGxvY2F0aW9uKSA6IG5vcm1hbGl6ZUxvY2F0aW9uKGxvY2F0aW9uKTtcbn07XG5cbnZhciBjcmVhdGVVUkwgPSBmdW5jdGlvbiBjcmVhdGVVUkwobG9jYXRpb24pIHtcbiAgcmV0dXJuIHR5cGVvZiBsb2NhdGlvbiA9PT0gJ3N0cmluZycgPyBsb2NhdGlvbiA6IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xufTtcblxudmFyIHN0YXRpY0hhbmRsZXIgPSBmdW5jdGlvbiBzdGF0aWNIYW5kbGVyKG1ldGhvZE5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpbnZhcmlhbnQoZmFsc2UsICdZb3UgY2Fubm90ICVzIHdpdGggPFN0YXRpY1JvdXRlcj4nLCBtZXRob2ROYW1lKTtcbiAgfTtcbn07XG5cbnZhciBub29wID0gZnVuY3Rpb24gbm9vcCgpIHt9O1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgdG9wLWxldmVsIEFQSSBmb3IgYSBcInN0YXRpY1wiIDxSb3V0ZXI+LCBzby1jYWxsZWQgYmVjYXVzZSBpdFxuICogY2FuJ3QgYWN0dWFsbHkgY2hhbmdlIHRoZSBjdXJyZW50IGxvY2F0aW9uLiBJbnN0ZWFkLCBpdCBqdXN0IHJlY29yZHNcbiAqIGxvY2F0aW9uIGNoYW5nZXMgaW4gYSBjb250ZXh0IG9iamVjdC4gVXNlZnVsIG1haW5seSBpbiB0ZXN0aW5nIGFuZFxuICogc2VydmVyLXJlbmRlcmluZyBzY2VuYXJpb3MuXG4gKi9cblxudmFyIFN0YXRpY1JvdXRlciA9IGZ1bmN0aW9uIChfUmVhY3QkQ29tcG9uZW50KSB7XG4gIF9pbmhlcml0cyhTdGF0aWNSb3V0ZXIsIF9SZWFjdCRDb21wb25lbnQpO1xuXG4gIGZ1bmN0aW9uIFN0YXRpY1JvdXRlcigpIHtcbiAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFN0YXRpY1JvdXRlcik7XG5cbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuY2FsbC5hcHBseShfUmVhY3QkQ29tcG9uZW50LCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuY3JlYXRlSHJlZiA9IGZ1bmN0aW9uIChwYXRoKSB7XG4gICAgICByZXR1cm4gYWRkTGVhZGluZ1NsYXNoKF90aGlzLnByb3BzLmJhc2VuYW1lICsgY3JlYXRlVVJMKHBhdGgpKTtcbiAgICB9LCBfdGhpcy5oYW5kbGVQdXNoID0gZnVuY3Rpb24gKGxvY2F0aW9uKSB7XG4gICAgICB2YXIgX3RoaXMkcHJvcHMgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBiYXNlbmFtZSA9IF90aGlzJHByb3BzLmJhc2VuYW1lLFxuICAgICAgICAgIGNvbnRleHQgPSBfdGhpcyRwcm9wcy5jb250ZXh0O1xuXG4gICAgICBjb250ZXh0LmFjdGlvbiA9ICdQVVNIJztcbiAgICAgIGNvbnRleHQubG9jYXRpb24gPSBhZGRCYXNlbmFtZShiYXNlbmFtZSwgY3JlYXRlTG9jYXRpb24obG9jYXRpb24pKTtcbiAgICAgIGNvbnRleHQudXJsID0gY3JlYXRlVVJMKGNvbnRleHQubG9jYXRpb24pO1xuICAgIH0sIF90aGlzLmhhbmRsZVJlcGxhY2UgPSBmdW5jdGlvbiAobG9jYXRpb24pIHtcbiAgICAgIHZhciBfdGhpcyRwcm9wczIgPSBfdGhpcy5wcm9wcyxcbiAgICAgICAgICBiYXNlbmFtZSA9IF90aGlzJHByb3BzMi5iYXNlbmFtZSxcbiAgICAgICAgICBjb250ZXh0ID0gX3RoaXMkcHJvcHMyLmNvbnRleHQ7XG5cbiAgICAgIGNvbnRleHQuYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgICAgY29udGV4dC5sb2NhdGlvbiA9IGFkZEJhc2VuYW1lKGJhc2VuYW1lLCBjcmVhdGVMb2NhdGlvbihsb2NhdGlvbikpO1xuICAgICAgY29udGV4dC51cmwgPSBjcmVhdGVVUkwoY29udGV4dC5sb2NhdGlvbik7XG4gICAgfSwgX3RoaXMuaGFuZGxlTGlzdGVuID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIG5vb3A7XG4gICAgfSwgX3RoaXMuaGFuZGxlQmxvY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gbm9vcDtcbiAgICB9LCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgfVxuXG4gIFN0YXRpY1JvdXRlci5wcm90b3R5cGUuZ2V0Q2hpbGRDb250ZXh0ID0gZnVuY3Rpb24gZ2V0Q2hpbGRDb250ZXh0KCkge1xuICAgIHJldHVybiB7XG4gICAgICByb3V0ZXI6IHtcbiAgICAgICAgc3RhdGljQ29udGV4dDogdGhpcy5wcm9wcy5jb250ZXh0XG4gICAgICB9XG4gICAgfTtcbiAgfTtcblxuICBTdGF0aWNSb3V0ZXIucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICB3YXJuaW5nKCF0aGlzLnByb3BzLmhpc3RvcnksICc8U3RhdGljUm91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCAnICsgJ3VzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IFN0YXRpY1JvdXRlciBhcyBSb3V0ZXIgfWAuJyk7XG4gIH07XG5cbiAgU3RhdGljUm91dGVyLnByb3RvdHlwZS5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdmFyIF9wcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICAgIGJhc2VuYW1lID0gX3Byb3BzLmJhc2VuYW1lLFxuICAgICAgICBjb250ZXh0ID0gX3Byb3BzLmNvbnRleHQsXG4gICAgICAgIGxvY2F0aW9uID0gX3Byb3BzLmxvY2F0aW9uLFxuICAgICAgICBwcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfcHJvcHMsIFsnYmFzZW5hbWUnLCAnY29udGV4dCcsICdsb2NhdGlvbiddKTtcblxuICAgIHZhciBoaXN0b3J5ID0ge1xuICAgICAgY3JlYXRlSHJlZjogdGhpcy5jcmVhdGVIcmVmLFxuICAgICAgYWN0aW9uOiAnUE9QJyxcbiAgICAgIGxvY2F0aW9uOiBzdHJpcEJhc2VuYW1lKGJhc2VuYW1lLCBjcmVhdGVMb2NhdGlvbihsb2NhdGlvbikpLFxuICAgICAgcHVzaDogdGhpcy5oYW5kbGVQdXNoLFxuICAgICAgcmVwbGFjZTogdGhpcy5oYW5kbGVSZXBsYWNlLFxuICAgICAgZ286IHN0YXRpY0hhbmRsZXIoJ2dvJyksXG4gICAgICBnb0JhY2s6IHN0YXRpY0hhbmRsZXIoJ2dvQmFjaycpLFxuICAgICAgZ29Gb3J3YXJkOiBzdGF0aWNIYW5kbGVyKCdnb0ZvcndhcmQnKSxcbiAgICAgIGxpc3RlbjogdGhpcy5oYW5kbGVMaXN0ZW4sXG4gICAgICBibG9jazogdGhpcy5oYW5kbGVCbG9ja1xuICAgIH07XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChSb3V0ZXIsIF9leHRlbmRzKHt9LCBwcm9wcywgeyBoaXN0b3J5OiBoaXN0b3J5IH0pKTtcbiAgfTtcblxuICByZXR1cm4gU3RhdGljUm91dGVyO1xufShSZWFjdC5Db21wb25lbnQpO1xuXG5TdGF0aWNSb3V0ZXIucHJvcFR5cGVzID0ge1xuICBiYXNlbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgY29udGV4dDogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkLFxuICBsb2NhdGlvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdF0pXG59O1xuU3RhdGljUm91dGVyLmRlZmF1bHRQcm9wcyA9IHtcbiAgYmFzZW5hbWU6ICcnLFxuICBsb2NhdGlvbjogJy8nXG59O1xuU3RhdGljUm91dGVyLmNoaWxkQ29udGV4dFR5cGVzID0ge1xuICByb3V0ZXI6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZFxufTtcblxuXG5leHBvcnQgZGVmYXVsdCBTdGF0aWNSb3V0ZXI7IiwiLy8gV3JpdHRlbiBpbiB0aGlzIHJvdW5kIGFib3V0IHdheSBmb3IgYmFiZWwtdHJhbnNmb3JtLWltcG9ydHNcbmltcG9ydCBTdGF0aWNSb3V0ZXIgZnJvbSAncmVhY3Qtcm91dGVyL2VzL1N0YXRpY1JvdXRlcic7XG5cbmV4cG9ydCBkZWZhdWx0IFN0YXRpY1JvdXRlcjsiLCJmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbmltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5pbXBvcnQgbWF0Y2hQYXRoIGZyb20gJy4vbWF0Y2hQYXRoJztcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcmVuZGVyaW5nIHRoZSBmaXJzdCA8Um91dGU+IHRoYXQgbWF0Y2hlcy5cbiAqL1xuXG52YXIgU3dpdGNoID0gZnVuY3Rpb24gKF9SZWFjdCRDb21wb25lbnQpIHtcbiAgX2luaGVyaXRzKFN3aXRjaCwgX1JlYWN0JENvbXBvbmVudCk7XG5cbiAgZnVuY3Rpb24gU3dpdGNoKCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBTd2l0Y2gpO1xuXG4gICAgcmV0dXJuIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9SZWFjdCRDb21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH1cblxuICBTd2l0Y2gucHJvdG90eXBlLmNvbXBvbmVudFdpbGxNb3VudCA9IGZ1bmN0aW9uIGNvbXBvbmVudFdpbGxNb3VudCgpIHtcbiAgICBpbnZhcmlhbnQodGhpcy5jb250ZXh0LnJvdXRlciwgJ1lvdSBzaG91bGQgbm90IHVzZSA8U3dpdGNoPiBvdXRzaWRlIGEgPFJvdXRlcj4nKTtcbiAgfTtcblxuICBTd2l0Y2gucHJvdG90eXBlLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMgPSBmdW5jdGlvbiBjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKG5leHRQcm9wcykge1xuICAgIHdhcm5pbmcoIShuZXh0UHJvcHMubG9jYXRpb24gJiYgIXRoaXMucHJvcHMubG9jYXRpb24pLCAnPFN3aXRjaD4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSB1bmNvbnRyb2xsZWQgdG8gY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBpbml0aWFsbHkgdXNlZCBubyBcImxvY2F0aW9uXCIgcHJvcCBhbmQgdGhlbiBwcm92aWRlZCBvbmUgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nKTtcblxuICAgIHdhcm5pbmcoISghbmV4dFByb3BzLmxvY2F0aW9uICYmIHRoaXMucHJvcHMubG9jYXRpb24pLCAnPFN3aXRjaD4gZWxlbWVudHMgc2hvdWxkIG5vdCBjaGFuZ2UgZnJvbSBjb250cm9sbGVkIHRvIHVuY29udHJvbGxlZCAob3IgdmljZSB2ZXJzYSkuIFlvdSBwcm92aWRlZCBhIFwibG9jYXRpb25cIiBwcm9wIGluaXRpYWxseSBidXQgb21pdHRlZCBpdCBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLicpO1xuICB9O1xuXG4gIFN3aXRjaC5wcm90b3R5cGUucmVuZGVyID0gZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHZhciByb3V0ZSA9IHRoaXMuY29udGV4dC5yb3V0ZXIucm91dGU7XG4gICAgdmFyIGNoaWxkcmVuID0gdGhpcy5wcm9wcy5jaGlsZHJlbjtcblxuICAgIHZhciBsb2NhdGlvbiA9IHRoaXMucHJvcHMubG9jYXRpb24gfHwgcm91dGUubG9jYXRpb247XG5cbiAgICB2YXIgbWF0Y2ggPSB2b2lkIDAsXG4gICAgICAgIGNoaWxkID0gdm9pZCAwO1xuICAgIFJlYWN0LkNoaWxkcmVuLmZvckVhY2goY2hpbGRyZW4sIGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICBpZiAoIVJlYWN0LmlzVmFsaWRFbGVtZW50KGVsZW1lbnQpKSByZXR1cm47XG5cbiAgICAgIHZhciBfZWxlbWVudCRwcm9wcyA9IGVsZW1lbnQucHJvcHMsXG4gICAgICAgICAgcGF0aFByb3AgPSBfZWxlbWVudCRwcm9wcy5wYXRoLFxuICAgICAgICAgIGV4YWN0ID0gX2VsZW1lbnQkcHJvcHMuZXhhY3QsXG4gICAgICAgICAgc3RyaWN0ID0gX2VsZW1lbnQkcHJvcHMuc3RyaWN0LFxuICAgICAgICAgIHNlbnNpdGl2ZSA9IF9lbGVtZW50JHByb3BzLnNlbnNpdGl2ZSxcbiAgICAgICAgICBmcm9tID0gX2VsZW1lbnQkcHJvcHMuZnJvbTtcblxuICAgICAgdmFyIHBhdGggPSBwYXRoUHJvcCB8fCBmcm9tO1xuXG4gICAgICBpZiAobWF0Y2ggPT0gbnVsbCkge1xuICAgICAgICBjaGlsZCA9IGVsZW1lbnQ7XG4gICAgICAgIG1hdGNoID0gcGF0aCA/IG1hdGNoUGF0aChsb2NhdGlvbi5wYXRobmFtZSwgeyBwYXRoOiBwYXRoLCBleGFjdDogZXhhY3QsIHN0cmljdDogc3RyaWN0LCBzZW5zaXRpdmU6IHNlbnNpdGl2ZSB9KSA6IHJvdXRlLm1hdGNoO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIG1hdGNoID8gUmVhY3QuY2xvbmVFbGVtZW50KGNoaWxkLCB7IGxvY2F0aW9uOiBsb2NhdGlvbiwgY29tcHV0ZWRNYXRjaDogbWF0Y2ggfSkgOiBudWxsO1xuICB9O1xuXG4gIHJldHVybiBTd2l0Y2g7XG59KFJlYWN0LkNvbXBvbmVudCk7XG5cblN3aXRjaC5jb250ZXh0VHlwZXMgPSB7XG4gIHJvdXRlcjogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICByb3V0ZTogUHJvcFR5cGVzLm9iamVjdC5pc1JlcXVpcmVkXG4gIH0pLmlzUmVxdWlyZWRcbn07XG5Td2l0Y2gucHJvcFR5cGVzID0ge1xuICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gIGxvY2F0aW9uOiBQcm9wVHlwZXMub2JqZWN0XG59O1xuXG5cbmV4cG9ydCBkZWZhdWx0IFN3aXRjaDsiLCIvLyBXcml0dGVuIGluIHRoaXMgcm91bmQgYWJvdXQgd2F5IGZvciBiYWJlbC10cmFuc2Zvcm0taW1wb3J0c1xuaW1wb3J0IFN3aXRjaCBmcm9tICdyZWFjdC1yb3V0ZXIvZXMvU3dpdGNoJztcblxuZXhwb3J0IGRlZmF1bHQgU3dpdGNoOyIsIi8vIFdyaXR0ZW4gaW4gdGhpcyByb3VuZCBhYm91dCB3YXkgZm9yIGJhYmVsLXRyYW5zZm9ybS1pbXBvcnRzXG5pbXBvcnQgbWF0Y2hQYXRoIGZyb20gJ3JlYWN0LXJvdXRlci9lcy9tYXRjaFBhdGgnO1xuXG5leHBvcnQgZGVmYXVsdCBtYXRjaFBhdGg7IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKG9iaiwga2V5cykgeyB2YXIgdGFyZ2V0ID0ge307IGZvciAodmFyIGkgaW4gb2JqKSB7IGlmIChrZXlzLmluZGV4T2YoaSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgaSkpIGNvbnRpbnVlOyB0YXJnZXRbaV0gPSBvYmpbaV07IH0gcmV0dXJuIHRhcmdldDsgfVxuXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBob2lzdFN0YXRpY3MgZnJvbSAnaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MnO1xuaW1wb3J0IFJvdXRlIGZyb20gJy4vUm91dGUnO1xuXG4vKipcbiAqIEEgcHVibGljIGhpZ2hlci1vcmRlciBjb21wb25lbnQgdG8gYWNjZXNzIHRoZSBpbXBlcmF0aXZlIEFQSVxuICovXG52YXIgd2l0aFJvdXRlciA9IGZ1bmN0aW9uIHdpdGhSb3V0ZXIoQ29tcG9uZW50KSB7XG4gIHZhciBDID0gZnVuY3Rpb24gQyhwcm9wcykge1xuICAgIHZhciB3cmFwcGVkQ29tcG9uZW50UmVmID0gcHJvcHMud3JhcHBlZENvbXBvbmVudFJlZixcbiAgICAgICAgcmVtYWluaW5nUHJvcHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIFsnd3JhcHBlZENvbXBvbmVudFJlZiddKTtcblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFJvdXRlLCB7IHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyKHJvdXRlQ29tcG9uZW50UHJvcHMpIHtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ29tcG9uZW50LCBfZXh0ZW5kcyh7fSwgcmVtYWluaW5nUHJvcHMsIHJvdXRlQ29tcG9uZW50UHJvcHMsIHsgcmVmOiB3cmFwcGVkQ29tcG9uZW50UmVmIH0pKTtcbiAgICAgIH0gfSk7XG4gIH07XG5cbiAgQy5kaXNwbGF5TmFtZSA9ICd3aXRoUm91dGVyKCcgKyAoQ29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lKSArICcpJztcbiAgQy5XcmFwcGVkQ29tcG9uZW50ID0gQ29tcG9uZW50O1xuICBDLnByb3BUeXBlcyA9IHtcbiAgICB3cmFwcGVkQ29tcG9uZW50UmVmOiBQcm9wVHlwZXMuZnVuY1xuICB9O1xuXG4gIHJldHVybiBob2lzdFN0YXRpY3MoQywgQ29tcG9uZW50KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHdpdGhSb3V0ZXI7IiwiLy8gV3JpdHRlbiBpbiB0aGlzIHJvdW5kIGFib3V0IHdheSBmb3IgYmFiZWwtdHJhbnNmb3JtLWltcG9ydHNcbmltcG9ydCB3aXRoUm91dGVyIGZyb20gJ3JlYWN0LXJvdXRlci9lcy93aXRoUm91dGVyJztcblxuZXhwb3J0IGRlZmF1bHQgd2l0aFJvdXRlcjsiLCJpbXBvcnQgVXRpbHMgZnJvbSBcIi4uLy4uL3NlcnZpY2VzL3V0aWxcIjtcblxuZXhwb3J0IGNvbnN0IFBBR0VfU0NST0xMRURfQk9UVE9NX0VWRU5UID0gYFBBR0VfU1JPTExfQk9UVE9NXyR7VXRpbHMuZ2VuZXJhdGVSYW5kb21TdHJpbmcoNSl9YDtcbmV4cG9ydCBjb25zdCBQQUdFX1NDUk9MTF9XQUlUX1RJTUUgPSAyMDAwOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xudmFyIG5vcm1hbGl6ZUhlYWRlck5hbWUgPSByZXF1aXJlKCcuL2hlbHBlcnMvbm9ybWFsaXplSGVhZGVyTmFtZScpO1xuXG52YXIgREVGQVVMVF9DT05URU5UX1RZUEUgPSB7XG4gICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJ1xufTtcblxuZnVuY3Rpb24gc2V0Q29udGVudFR5cGVJZlVuc2V0KGhlYWRlcnMsIHZhbHVlKSB7XG4gIGlmICghdXRpbHMuaXNVbmRlZmluZWQoaGVhZGVycykgJiYgdXRpbHMuaXNVbmRlZmluZWQoaGVhZGVyc1snQ29udGVudC1UeXBlJ10pKSB7XG4gICAgaGVhZGVyc1snQ29udGVudC1UeXBlJ10gPSB2YWx1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXREZWZhdWx0QWRhcHRlcigpIHtcbiAgdmFyIGFkYXB0ZXI7XG4gIGlmICh0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgLy8gRm9yIGJyb3dzZXJzIHVzZSBYSFIgYWRhcHRlclxuICAgIGFkYXB0ZXIgPSByZXF1aXJlKCcuL2FkYXB0ZXJzL3hocicpO1xuICB9IGVsc2UgaWYgKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJykge1xuICAgIC8vIEZvciBub2RlIHVzZSBIVFRQIGFkYXB0ZXJcbiAgICBhZGFwdGVyID0gcmVxdWlyZSgnLi9hZGFwdGVycy9odHRwJyk7XG4gIH1cbiAgcmV0dXJuIGFkYXB0ZXI7XG59XG5cbnZhciBkZWZhdWx0cyA9IHtcbiAgYWRhcHRlcjogZ2V0RGVmYXVsdEFkYXB0ZXIoKSxcblxuICB0cmFuc2Zvcm1SZXF1ZXN0OiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVxdWVzdChkYXRhLCBoZWFkZXJzKSB7XG4gICAgbm9ybWFsaXplSGVhZGVyTmFtZShoZWFkZXJzLCAnQ29udGVudC1UeXBlJyk7XG4gICAgaWYgKHV0aWxzLmlzRm9ybURhdGEoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQXJyYXlCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQnVmZmVyKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc1N0cmVhbShkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNGaWxlKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0Jsb2IoZGF0YSlcbiAgICApIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNBcnJheUJ1ZmZlclZpZXcoZGF0YSkpIHtcbiAgICAgIHJldHVybiBkYXRhLmJ1ZmZlcjtcbiAgICB9XG4gICAgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKGRhdGEpKSB7XG4gICAgICBzZXRDb250ZW50VHlwZUlmVW5zZXQoaGVhZGVycywgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDtjaGFyc2V0PXV0Zi04Jyk7XG4gICAgICByZXR1cm4gZGF0YS50b1N0cmluZygpO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNPYmplY3QoZGF0YSkpIHtcbiAgICAgIHNldENvbnRlbnRUeXBlSWZVbnNldChoZWFkZXJzLCAnYXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04Jyk7XG4gICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoZGF0YSk7XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xuICB9XSxcblxuICB0cmFuc2Zvcm1SZXNwb25zZTogW2Z1bmN0aW9uIHRyYW5zZm9ybVJlc3BvbnNlKGRhdGEpIHtcbiAgICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0cnkge1xuICAgICAgICBkYXRhID0gSlNPTi5wYXJzZShkYXRhKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHsgLyogSWdub3JlICovIH1cbiAgICB9XG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIC8qKlxuICAgKiBBIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzIHRvIGFib3J0IGEgcmVxdWVzdC4gSWYgc2V0IHRvIDAgKGRlZmF1bHQpIGFcbiAgICogdGltZW91dCBpcyBub3QgY3JlYXRlZC5cbiAgICovXG4gIHRpbWVvdXQ6IDAsXG5cbiAgeHNyZkNvb2tpZU5hbWU6ICdYU1JGLVRPS0VOJyxcbiAgeHNyZkhlYWRlck5hbWU6ICdYLVhTUkYtVE9LRU4nLFxuXG4gIG1heENvbnRlbnRMZW5ndGg6IC0xLFxuXG4gIHZhbGlkYXRlU3RhdHVzOiBmdW5jdGlvbiB2YWxpZGF0ZVN0YXR1cyhzdGF0dXMpIHtcbiAgICByZXR1cm4gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDA7XG4gIH1cbn07XG5cbmRlZmF1bHRzLmhlYWRlcnMgPSB7XG4gIGNvbW1vbjoge1xuICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbiwgdGV4dC9wbGFpbiwgKi8qJ1xuICB9XG59O1xuXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2ROb0RhdGEobWV0aG9kKSB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHt9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIGRlZmF1bHRzLmhlYWRlcnNbbWV0aG9kXSA9IHV0aWxzLm1lcmdlKERFRkFVTFRfQ09OVEVOVF9UWVBFKTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlZmF1bHRzO1xuIiwiaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcbmltcG9ydCBTRVJWSUNFUyBmcm9tICcuLi9jb25maWcvc2VydmljZXMnO1xuaW1wb3J0IHsgTkVXU19BUElfS0VZIH0gZnJvbSAnLi4vY29uZmlnL2NvbnN0YW50cyc7XG5pbXBvcnQgVXRpbHMgZnJvbSBcIi4vdXRpbFwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBOZXdzU2VydmljZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMubWV0YWRhdGEgPSBuZXcgTmV3c0RhdGEoKTtcbiAgfVxuXG4gIGZldGNoTW9ja0hlYWRsaW5lcygpIHtcbiAgICByZXR1cm4gYXhpb3MoJy9tb2Nrcy9tb2NrTmV3cy5qc29uJylcbiAgICAgIC50aGVuKHJlc3VsdCA9PiByZXN1bHQuZGF0YSk7XG4gIH1cblxuICBzZWFyY2hOZXdzKG9wdGlvbnMsIGFkZGl0aW9uYWxPcHRpb25zID0geyBsb2FkTW9yZURhdGE6IGZhbHNlIH0pIHtcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICBvcHRpb25zLmxhbmd1YWdlID0gb3B0aW9ucy5sYW5ndWFnZSB8fCAnZW4nO1xuICAgIGlmICghYWRkaXRpb25hbE9wdGlvbnMubG9hZE1vcmVEYXRhKSB7XG4gICAgICBvcHRpb25zLnBhZ2UgPSBvcHRpb25zLnBhZ2UgfHwgMTtcbiAgICAgIHRoaXMubWV0YWRhdGEuZmx1c2goKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3B0aW9ucy5wYWdlID0gb3B0aW9ucy5wYWdlIHx8IHRoaXMubWV0YWRhdGEuZ2V0TmV3c09wdGlvbnMoKS5wYWdlO1xuICAgICAgKytvcHRpb25zLnBhZ2U7XG4gICAgfVxuICAgIHRoaXMubWV0YWRhdGEuc2V0TmV3c09wdGlvbnMob3B0aW9ucyk7XG5cbiAgICBjb25zdCByZXF1ZXN0T3B0cyA9IHtcbiAgICAgIHVybDogU0VSVklDRVMuTkVXUy5TRUFSQ0gsXG4gICAgICBwYXJhbXM6IHRoaXMubWV0YWRhdGEuZ2V0TmV3c09wdGlvbnMoKSxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke05FV1NfQVBJX0tFWX1gXG4gICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gYXhpb3MocmVxdWVzdE9wdHMpXG4gICAgICAudGhlbihyZXN1bHRzID0+IHtcbiAgICAgICAgdGhpcy5tZXRhZGF0YS5zZXROZXdzQWRkaXRpb25hbERhdGEoeyB0b3RhbFJlc3VsdHM6IChyZXN1bHRzICYmIHJlc3VsdHMuYXJ0aWNsZXMpID8gcmVzdWx0cy5hcnRpY2xlcy5sZW5ndGggOiAwIH0pO1xuICAgICAgICB0aGlzLm1ldGFkYXRhLnNldE1haW5EYXRhKG9wdGlvbnMucGFnZSwgcmVzdWx0cy5kYXRhKTtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLm1ldGFkYXRhLmdldE1haW5EYXRhQWxsKCkpO1xuICAgICAgfSlcbiAgfVxuXG4gIGZldGNoVG9wSGVhZGxpbmVzKG9wdGlvbnMsIGFkZGl0aW9uYWxPcHRpb25zID0geyBsb2FkTW9yZURhdGE6IGZhbHNlIH0pIHtcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICBvcHRpb25zLmxhbmd1YWdlID0gb3B0aW9ucy5sYW5ndWFnZSB8fCAnZW4nO1xuICAgIGlmICghYWRkaXRpb25hbE9wdGlvbnMubG9hZE1vcmVEYXRhKSB7XG4gICAgICBvcHRpb25zLnBhZ2UgPSBvcHRpb25zLnBhZ2UgfHwgMTtcbiAgICAgIHRoaXMubWV0YWRhdGEuZmx1c2goKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3B0aW9ucy5wYWdlID0gb3B0aW9ucy5wYWdlIHx8IHRoaXMubWV0YWRhdGEuZ2V0TmV3c09wdGlvbnMoKS5wYWdlO1xuICAgICAgKytvcHRpb25zLnBhZ2U7XG4gICAgfVxuICAgIHRoaXMubWV0YWRhdGEuc2V0TmV3c09wdGlvbnMob3B0aW9ucyk7XG5cbiAgICBjb25zdCByZXF1ZXN0T3B0cyA9IHtcbiAgICAgIHVybDogU0VSVklDRVMuTkVXUy5IRUFETElORVMsXG4gICAgICBwYXJhbXM6IHRoaXMubWV0YWRhdGEuZ2V0TmV3c09wdGlvbnMoKSxcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgQXV0aG9yaXphdGlvbjogYEJlYXJlciAke05FV1NfQVBJX0tFWX1gXG4gICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiBheGlvcyhyZXF1ZXN0T3B0cylcbiAgICAgIC50aGVuKHJlc3VsdHMgPT4ge1xuICAgICAgICB0aGlzLm1ldGFkYXRhLnNldE5ld3NBZGRpdGlvbmFsRGF0YSh7IHRvdGFsUmVzdWx0czogKHJlc3VsdHMgJiYgcmVzdWx0cy5hcnRpY2xlcykgPyByZXN1bHRzLmFydGljbGVzLmxlbmd0aCA6IDAgfSk7XG4gICAgICAgIHRoaXMubWV0YWRhdGEuc2V0TWFpbkRhdGEob3B0aW9ucy5wYWdlLCByZXN1bHRzLmRhdGEpO1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMubWV0YWRhdGEuZ2V0TWFpbkRhdGFBbGwoKSk7XG4gICAgICB9KVxuICB9XG5cbiAgZmV0Y2hOZXdzU291cmNlcyhvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgb3B0aW9ucy5sYW5ndWFnZSA9IG9wdGlvbnMubGFuZ3VhZ2UgfHwgJ2VuJztcblxuICAgIGlmKE5ld3NEYXRhLlNPVVJDRVMgJiYgT2JqZWN0LmtleXMoTmV3c0RhdGEuU09VUkNFUykubGVuZ3RoID4gMCkge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShOZXdzRGF0YS5TT1VSQ0VTKTtcbiAgICB9XG5cbiAgICBjb25zdCByZXF1ZXN0T3B0cyA9IHtcbiAgICAgIHVybDogU0VSVklDRVMuTkVXUy5TT1VSQ0VTLFxuICAgICAgcGFyYW1zOiBvcHRpb25zLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICBBdXRob3JpemF0aW9uOiBgQmVhcmVyICR7TkVXU19BUElfS0VZfWBcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gYXhpb3MocmVxdWVzdE9wdHMpXG4gICAgICAudGhlbihyZXN1bHRzID0+IHtcbiAgICAgICAgY29uc29sZS5sb2coXCJyZXN1bHRzXCIsIHJlc3VsdHMpXG4gICAgICAgIGlmKCFyZXN1bHRzLmRhdGEgfHwgIXJlc3VsdHMuZGF0YS5zb3VyY2VzKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh7fSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBTT1VSQ0VTID0ge307XG4gICAgICAgIGNvbnN0IG5ld3NEYXRhID0gcmVzdWx0cy5kYXRhO1xuICAgICAgICBcbiAgICAgICAgbmV3c0RhdGEuc291cmNlcy5mb3JFYWNoKHJlc3VsdCA9PiB7XG4gICAgICAgICAgU09VUkNFU1tyZXN1bHQuaWRdID0ge1xuICAgICAgICAgICAgU09VUkNFX05BTUU6IHJlc3VsdC5uYW1lLFxuICAgICAgICAgICAgU09VUkNFX0lEOiByZXN1bHQuaWQsXG4gICAgICAgICAgICBLRVk6IFwiU09VUkNFX1wiICsgVXRpbHMuZ2VuZXJhdGVSYW5kb21TdHJpbmcoNSlcbiAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICAgICAgTmV3c0RhdGEuU09VUkNFUyA9IFNPVVJDRVM7XG4gICAgICAgIHJldHVybiBTT1VSQ0VTO1xuICAgICAgfSk7XG4gIH1cbn1cblxuY2xhc3MgTmV3c0RhdGEge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLkRBVEEgPSB7XG4gICAgICBuZXdzT3B0aW9uczoge1xuICAgICAgICBwYWdlU2l6ZTogMjAsXG4gICAgICAgIHBhZ2U6IDEsXG4gICAgICAgIGxhbmd1YWdlOiAnZW4nXG4gICAgICB9LFxuICAgICAgbWFpbkRhdGE6IHt9LFxuICAgICAgYWRkaXRpb25hbERhdGE6IHtcbiAgICAgICAgdG90YWxSZXN1bHRzOiAwXG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIGdldE5ld3NPcHRpb25zKCkge1xuICAgIHJldHVybiB0aGlzLkRBVEEubmV3c09wdGlvbnM7XG4gIH1cblxuICBzZXROZXdzT3B0aW9ucyhvcHRpb25zKSB7XG4gICAgdGhpcy5EQVRBLm5ld3NPcHRpb25zID0gVXRpbHMubWVyZ2UodGhpcy5EQVRBLm5ld3NPcHRpb25zLCBvcHRpb25zKTtcbiAgfVxuXG4gIGdldE5ld3NBZGRpdGlvbmFsRGF0YSgpIHtcbiAgICByZXR1cm4gdGhpcy5EQVRBLmFkZGl0aW9uYWxEYXRhO1xuICB9XG5cbiAgc2V0TmV3c0FkZGl0aW9uYWxEYXRhKGRhdGEpIHtcbiAgICB0aGlzLkRBVEEuYWRkaXRpb25hbERhdGEgPSBVdGlscy5tZXJnZSh0aGlzLkRBVEEuYWRkaXRpb25hbERhdGEsIGRhdGEpO1xuICB9XG5cbiAgc2V0TWFpbkRhdGEocGFnZSwgZGF0YSkge1xuICAgIHRoaXMuREFUQS5tYWluRGF0YVtgUEFHRV8ke3BhZ2V9YF0gPSBkYXRhO1xuICB9XG5cbiAgZ2V0TWFpbkRhdGFCeVBhZ2UocGFnZSkge1xuICAgIHJldHVybiB0aGlzLkRBVEEubWFpbkRhdGFbYFBBR0VfJHtwYWdlfWBdIHx8IHt9O1xuICB9XG5cbiAgZ2V0TWFpbkRhdGFBbGwoKSB7XG4gICAgbGV0IGFsbE5ld3NEYXRhID0geyBzdGF0dXM6IFwib2tcIiwgYXJ0aWNsZXM6IFtdIH07XG4gICAgbGV0IHBhZ2VObyA9IDE7XG4gICAgd2hpbGUgKHRoaXMuREFUQS5tYWluRGF0YVsnUEFHRV8nICsgcGFnZU5vXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAodGhpcy5EQVRBLm1haW5EYXRhW2BQQUdFXyR7cGFnZU5vfWBdLmFydGljbGVzICYmIHRoaXMuREFUQS5tYWluRGF0YVtgUEFHRV8ke3BhZ2VOb31gXS5hcnRpY2xlcy5sZW5ndGgpIHtcbiAgICAgICAgYWxsTmV3c0RhdGEuYXJ0aWNsZXMgPSBhbGxOZXdzRGF0YS5hcnRpY2xlcy5jb25jYXQodGhpcy5EQVRBLm1haW5EYXRhW2BQQUdFXyR7cGFnZU5vfWBdLmFydGljbGVzKTtcbiAgICAgICAgYWxsTmV3c0RhdGEudG90YWxSZXN1bHRzID0gdGhpcy5EQVRBLm1haW5EYXRhW2BQQUdFXyR7cGFnZU5vfWBdLnRvdGFsUmVzdWx0cztcbiAgICAgIH1cbiAgICAgIHBhZ2VObysrO1xuICAgIH1cbiAgICByZXR1cm4gYWxsTmV3c0RhdGE7XG4gIH1cblxuICBnZXROZXdzRGF0YSgpIHtcbiAgICByZXR1cm4gdGhpcy5EQVRBO1xuICB9XG5cbiAgc2V0TmV3c0RhdGEoZGF0YSkge1xuICAgIHRoaXMuREFUQSA9IFV0aWxzLm1lcmdlKHRoaXMuREFUQSwgZGF0YSk7XG4gIH1cblxuICBmbHVzaCgpIHtcbiAgICB0aGlzLkRBVEEgPSB7XG4gICAgICBuZXdzT3B0aW9uczoge1xuICAgICAgICBwYWdlU2l6ZTogMjAsXG4gICAgICAgIHBhZ2U6IDEsXG4gICAgICAgIGxhbmd1YWdlOiAnZW4nXG4gICAgICB9LFxuICAgICAgbWFpbkRhdGE6IHt9LFxuICAgICAgYWRkaXRpb25hbERhdGE6IHtcbiAgICAgICAgdG90YWxSZXN1bHRzOiAwXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbk5ld3NEYXRhLkRFRkFVTFRfREFUQSA9IChmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB7XG4gICAgbmV3c09wdGlvbnM6IHtcbiAgICAgIHBhZ2VTaXplOiAyMCxcbiAgICAgIHBhZ2U6IDEsXG4gICAgICBsYW5ndWFnZTogJ2VuJ1xuICAgIH0sXG4gICAgbWFpbkRhdGE6IHt9LFxuICAgIGFkZGl0aW9uYWxEYXRhOiB7XG4gICAgICB0b3RhbFJlc3VsdHM6IDBcbiAgICB9XG4gIH1cbn0pKCk7XG5cbk5ld3NEYXRhLlNPVVJDRVMgPSBudWxsO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFB1YlN1YiBmcm9tIFwicHVic3ViLWpzXCI7XG5cbmltcG9ydCBVdGlsaXR5IGZyb20gXCIuLi8uLi9zZXJ2aWNlcy91dGlsXCI7XG5pbXBvcnQgTmV3c0NhcmQgZnJvbSBcIi4uL25ld3MtY2FyZC9uZXdzQ2FyZC5jb21wb25lbnRcIjtcbmltcG9ydCBOb1Jlc3VsdEZvdW5kIGZyb20gXCIuLi9uZXdzLXNlYXJjaC9ub1Jlc3VsdC5jb21wb25lbnRcIjtcbmltcG9ydCBMb2FkZXIgZnJvbSBcIi4vbG9hZGVyLmNvbXBvbmVudFwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBOZXdzUGFuZWwgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgbmV3c0NhcmRzTGlzdDogW10sXG4gICAgICBsYXp5TG9hZGluZ0JvdHRvbTogZmFsc2VcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzKG5leHRQcm9wcywgcHJldlN0YXRlKSB7XG4gICAgaWYgKChuZXh0UHJvcHMubmV3c0RhdGEgJiYgbmV4dFByb3BzLm5ld3NEYXRhLmFydGljbGVzKSB8fCBuZXh0UHJvcHMuaXNTY3JvbGxlZERvd24pIHtcbiAgICAgIHJldHVybiB7IG5ld3NDYXJkc0xpc3Q6IE5ld3NQYW5lbC5nZXROZXdzQ2FyZHMobmV4dFByb3BzLm5ld3NEYXRhKSwgbGF6eUxvYWRpbmdCb3R0b206IG5leHRQcm9wcy5pc1Njcm9sbGVkRG93biB8fCBmYWxzZSB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgc3RhdGljIG1ha2VOZXdzQ2FyZChwcm9wZXJ0aWVzKSB7XG4gICAgaWYgKCFwcm9wZXJ0aWVzLnRpdGxlIHx8IHByb3BlcnRpZXMudGl0bGUudHJpbSgpLmxlbmd0aCA9PSAwIHx8ICFwcm9wZXJ0aWVzLmRlc2NyaXB0aW9uIHx8IHByb3BlcnRpZXMuZGVzY3JpcHRpb24udHJpbSgpLmxlbmd0aCA9PSAwKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIChcbiAgICAgIDxOZXdzQ2FyZCB0aXRsZT17cHJvcGVydGllcy50aXRsZX0gY29udGVudD17cHJvcGVydGllcy5kZXNjcmlwdGlvbn0gaW1hZ2VVcmw9e3Byb3BlcnRpZXMudXJsVG9JbWFnZX0gYXV0aG9yPXtwcm9wZXJ0aWVzLmF1dGhvcn0gbmV3c0xpbms9e3Byb3BlcnRpZXMudXJsfSBrZXk9e3Byb3BlcnRpZXMua2V5fSAvPlxuICAgICk7XG4gIH1cblxuICBzdGF0aWMgZ2V0TmV3c0NhcmRzKG5ld3NPYmopIHtcbiAgICBpZiAobmV3c09iai5hcnRpY2xlcyAmJiBuZXdzT2JqLmFydGljbGVzLmxlbmd0aCA9PSAwKSB7XG4gICAgICByZXR1cm4gPE5vUmVzdWx0Rm91bmQgLz5cbiAgICB9XG5cbiAgICByZXR1cm4gbmV3c09iai5hcnRpY2xlcy5tYXAoKGFydGljbGUsIGluZGV4KSA9PiB7XG4gICAgICBhcnRpY2xlLmtleSA9IFV0aWxpdHkuZ2VuZXJhdGVSYW5kb21TdHJpbmcoNSk7XG4gICAgICByZXR1cm4gTmV3c1BhbmVsLm1ha2VOZXdzQ2FyZChhcnRpY2xlKVxuICAgIH0pXG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udGFpbmVyLWZsdWlkIGFuaW1hdGlvbmxvYWRcIiByZWY9e2VsID0+IHRoaXMuaGVhZGxpbmVzRWxlbWVudCA9IGVsfT5cbiAgICAgICAge1xuICAgICAgICAgIHRoaXMucHJvcHMuaXNMb2FkaW5nID9cbiAgICAgICAgICAgIDxMb2FkZXIgLz4gOlxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgeyF0aGlzLnByb3BzLmlzTG9hZGluZyA/IHRoaXMuc3RhdGUubmV3c0NhcmRzTGlzdCA6IG51bGx9XG4gICAgICAgICAgICAgIHt0aGlzLnByb3BzLnNjcm9sbFN1cHBvcnQgJiYgdGhpcy5zdGF0ZS5sYXp5TG9hZGluZ0JvdHRvbSA/IDxMb2FkZXIgLz4gOiBudWxsfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIH1cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn0iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfd2FybmluZyA9IHJlcXVpcmUoJ3dhcm5pbmcnKTtcblxudmFyIF93YXJuaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dhcm5pbmcpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIgPSBmdW5jdGlvbiBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpIHtcbiAgdmFyIHByb21wdCA9IG51bGw7XG5cbiAgdmFyIHNldFByb21wdCA9IGZ1bmN0aW9uIHNldFByb21wdChuZXh0UHJvbXB0KSB7XG4gICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KShwcm9tcHQgPT0gbnVsbCwgJ0EgaGlzdG9yeSBzdXBwb3J0cyBvbmx5IG9uZSBwcm9tcHQgYXQgYSB0aW1lJyk7XG5cbiAgICBwcm9tcHQgPSBuZXh0UHJvbXB0O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChwcm9tcHQgPT09IG5leHRQcm9tcHQpIHByb21wdCA9IG51bGw7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgY29uZmlybVRyYW5zaXRpb25UbyA9IGZ1bmN0aW9uIGNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgY2FsbGJhY2spIHtcbiAgICAvLyBUT0RPOiBJZiBhbm90aGVyIHRyYW5zaXRpb24gc3RhcnRzIHdoaWxlIHdlJ3JlIHN0aWxsIGNvbmZpcm1pbmdcbiAgICAvLyB0aGUgcHJldmlvdXMgb25lLCB3ZSBtYXkgZW5kIHVwIGluIGEgd2VpcmQgc3RhdGUuIEZpZ3VyZSBvdXQgdGhlXG4gICAgLy8gYmVzdCB3YXkgdG8gaGFuZGxlIHRoaXMuXG4gICAgaWYgKHByb21wdCAhPSBudWxsKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdHlwZW9mIHByb21wdCA9PT0gJ2Z1bmN0aW9uJyA/IHByb21wdChsb2NhdGlvbiwgYWN0aW9uKSA6IHByb21wdDtcblxuICAgICAgaWYgKHR5cGVvZiByZXN1bHQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZ2V0VXNlckNvbmZpcm1hdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGdldFVzZXJDb25maXJtYXRpb24ocmVzdWx0LCBjYWxsYmFjayk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KShmYWxzZSwgJ0EgaGlzdG9yeSBuZWVkcyBhIGdldFVzZXJDb25maXJtYXRpb24gZnVuY3Rpb24gaW4gb3JkZXIgdG8gdXNlIGEgcHJvbXB0IG1lc3NhZ2UnKTtcblxuICAgICAgICAgIGNhbGxiYWNrKHRydWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBSZXR1cm4gZmFsc2UgZnJvbSBhIHRyYW5zaXRpb24gaG9vayB0byBjYW5jZWwgdGhlIHRyYW5zaXRpb24uXG4gICAgICAgIGNhbGxiYWNrKHJlc3VsdCAhPT0gZmFsc2UpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjYWxsYmFjayh0cnVlKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGxpc3RlbmVycyA9IFtdO1xuXG4gIHZhciBhcHBlbmRMaXN0ZW5lciA9IGZ1bmN0aW9uIGFwcGVuZExpc3RlbmVyKGZuKSB7XG4gICAgdmFyIGlzQWN0aXZlID0gdHJ1ZTtcblxuICAgIHZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uIGxpc3RlbmVyKCkge1xuICAgICAgaWYgKGlzQWN0aXZlKSBmbi5hcHBseSh1bmRlZmluZWQsIGFyZ3VtZW50cyk7XG4gICAgfTtcblxuICAgIGxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpc0FjdGl2ZSA9IGZhbHNlO1xuICAgICAgbGlzdGVuZXJzID0gbGlzdGVuZXJzLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICByZXR1cm4gaXRlbSAhPT0gbGlzdGVuZXI7XG4gICAgICB9KTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBub3RpZnlMaXN0ZW5lcnMgPSBmdW5jdGlvbiBub3RpZnlMaXN0ZW5lcnMoKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgbGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICByZXR1cm4gbGlzdGVuZXIuYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIHNldFByb21wdDogc2V0UHJvbXB0LFxuICAgIGNvbmZpcm1UcmFuc2l0aW9uVG86IGNvbmZpcm1UcmFuc2l0aW9uVG8sXG4gICAgYXBwZW5kTGlzdGVuZXI6IGFwcGVuZExpc3RlbmVyLFxuICAgIG5vdGlmeUxpc3RlbmVyczogbm90aWZ5TGlzdGVuZXJzXG4gIH07XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcjsiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5leHBvcnRzLmxvY2F0aW9uc0FyZUVxdWFsID0gZXhwb3J0cy5jcmVhdGVMb2NhdGlvbiA9IHVuZGVmaW5lZDtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF9yZXNvbHZlUGF0aG5hbWUgPSByZXF1aXJlKCdyZXNvbHZlLXBhdGhuYW1lJyk7XG5cbnZhciBfcmVzb2x2ZVBhdGhuYW1lMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Jlc29sdmVQYXRobmFtZSk7XG5cbnZhciBfdmFsdWVFcXVhbCA9IHJlcXVpcmUoJ3ZhbHVlLWVxdWFsJyk7XG5cbnZhciBfdmFsdWVFcXVhbDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF92YWx1ZUVxdWFsKTtcblxudmFyIF9QYXRoVXRpbHMgPSByZXF1aXJlKCcuL1BhdGhVdGlscycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgY3JlYXRlTG9jYXRpb24gPSBleHBvcnRzLmNyZWF0ZUxvY2F0aW9uID0gZnVuY3Rpb24gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGtleSwgY3VycmVudExvY2F0aW9uKSB7XG4gIHZhciBsb2NhdGlvbiA9IHZvaWQgMDtcbiAgaWYgKHR5cGVvZiBwYXRoID09PSAnc3RyaW5nJykge1xuICAgIC8vIFR3by1hcmcgZm9ybTogcHVzaChwYXRoLCBzdGF0ZSlcbiAgICBsb2NhdGlvbiA9ICgwLCBfUGF0aFV0aWxzLnBhcnNlUGF0aCkocGF0aCk7XG4gICAgbG9jYXRpb24uc3RhdGUgPSBzdGF0ZTtcbiAgfSBlbHNlIHtcbiAgICAvLyBPbmUtYXJnIGZvcm06IHB1c2gobG9jYXRpb24pXG4gICAgbG9jYXRpb24gPSBfZXh0ZW5kcyh7fSwgcGF0aCk7XG5cbiAgICBpZiAobG9jYXRpb24ucGF0aG5hbWUgPT09IHVuZGVmaW5lZCkgbG9jYXRpb24ucGF0aG5hbWUgPSAnJztcblxuICAgIGlmIChsb2NhdGlvbi5zZWFyY2gpIHtcbiAgICAgIGlmIChsb2NhdGlvbi5zZWFyY2guY2hhckF0KDApICE9PSAnPycpIGxvY2F0aW9uLnNlYXJjaCA9ICc/JyArIGxvY2F0aW9uLnNlYXJjaDtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYXRpb24uc2VhcmNoID0gJyc7XG4gICAgfVxuXG4gICAgaWYgKGxvY2F0aW9uLmhhc2gpIHtcbiAgICAgIGlmIChsb2NhdGlvbi5oYXNoLmNoYXJBdCgwKSAhPT0gJyMnKSBsb2NhdGlvbi5oYXNoID0gJyMnICsgbG9jYXRpb24uaGFzaDtcbiAgICB9IGVsc2Uge1xuICAgICAgbG9jYXRpb24uaGFzaCA9ICcnO1xuICAgIH1cblxuICAgIGlmIChzdGF0ZSAhPT0gdW5kZWZpbmVkICYmIGxvY2F0aW9uLnN0YXRlID09PSB1bmRlZmluZWQpIGxvY2F0aW9uLnN0YXRlID0gc3RhdGU7XG4gIH1cblxuICB0cnkge1xuICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gZGVjb2RlVVJJKGxvY2F0aW9uLnBhdGhuYW1lKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGlmIChlIGluc3RhbmNlb2YgVVJJRXJyb3IpIHtcbiAgICAgIHRocm93IG5ldyBVUklFcnJvcignUGF0aG5hbWUgXCInICsgbG9jYXRpb24ucGF0aG5hbWUgKyAnXCIgY291bGQgbm90IGJlIGRlY29kZWQuICcgKyAnVGhpcyBpcyBsaWtlbHkgY2F1c2VkIGJ5IGFuIGludmFsaWQgcGVyY2VudC1lbmNvZGluZy4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gIH1cblxuICBpZiAoa2V5KSBsb2NhdGlvbi5rZXkgPSBrZXk7XG5cbiAgaWYgKGN1cnJlbnRMb2NhdGlvbikge1xuICAgIC8vIFJlc29sdmUgaW5jb21wbGV0ZS9yZWxhdGl2ZSBwYXRobmFtZSByZWxhdGl2ZSB0byBjdXJyZW50IGxvY2F0aW9uLlxuICAgIGlmICghbG9jYXRpb24ucGF0aG5hbWUpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gY3VycmVudExvY2F0aW9uLnBhdGhuYW1lO1xuICAgIH0gZWxzZSBpZiAobG9jYXRpb24ucGF0aG5hbWUuY2hhckF0KDApICE9PSAnLycpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gKDAsIF9yZXNvbHZlUGF0aG5hbWUyLmRlZmF1bHQpKGxvY2F0aW9uLnBhdGhuYW1lLCBjdXJyZW50TG9jYXRpb24ucGF0aG5hbWUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBXaGVuIHRoZXJlIGlzIG5vIHByaW9yIGxvY2F0aW9uIGFuZCBwYXRobmFtZSBpcyBlbXB0eSwgc2V0IGl0IHRvIC9cbiAgICBpZiAoIWxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9ICcvJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbG9jYXRpb247XG59O1xuXG52YXIgbG9jYXRpb25zQXJlRXF1YWwgPSBleHBvcnRzLmxvY2F0aW9uc0FyZUVxdWFsID0gZnVuY3Rpb24gbG9jYXRpb25zQXJlRXF1YWwoYSwgYikge1xuICByZXR1cm4gYS5wYXRobmFtZSA9PT0gYi5wYXRobmFtZSAmJiBhLnNlYXJjaCA9PT0gYi5zZWFyY2ggJiYgYS5oYXNoID09PSBiLmhhc2ggJiYgYS5rZXkgPT09IGIua2V5ICYmICgwLCBfdmFsdWVFcXVhbDIuZGVmYXVsdCkoYS5zdGF0ZSwgYi5zdGF0ZSk7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICovXG5cbmZ1bmN0aW9uIG1ha2VFbXB0eUZ1bmN0aW9uKGFyZykge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBhcmc7XG4gIH07XG59XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBhY2NlcHRzIGFuZCBkaXNjYXJkcyBpbnB1dHM7IGl0IGhhcyBubyBzaWRlIGVmZmVjdHMuIFRoaXMgaXNcbiAqIHByaW1hcmlseSB1c2VmdWwgaWRpb21hdGljYWxseSBmb3Igb3ZlcnJpZGFibGUgZnVuY3Rpb24gZW5kcG9pbnRzIHdoaWNoXG4gKiBhbHdheXMgbmVlZCB0byBiZSBjYWxsYWJsZSwgc2luY2UgSlMgbGFja3MgYSBudWxsLWNhbGwgaWRpb20gYWxhIENvY29hLlxuICovXG52YXIgZW1wdHlGdW5jdGlvbiA9IGZ1bmN0aW9uIGVtcHR5RnVuY3Rpb24oKSB7fTtcblxuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJucyA9IG1ha2VFbXB0eUZ1bmN0aW9uO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0ZhbHNlID0gbWFrZUVtcHR5RnVuY3Rpb24oZmFsc2UpO1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc1RydWUgPSBtYWtlRW1wdHlGdW5jdGlvbih0cnVlKTtcbmVtcHR5RnVuY3Rpb24udGhhdFJldHVybnNOdWxsID0gbWFrZUVtcHR5RnVuY3Rpb24obnVsbCk7XG5lbXB0eUZ1bmN0aW9uLnRoYXRSZXR1cm5zVGhpcyA9IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIHRoaXM7XG59O1xuZW1wdHlGdW5jdGlvbi50aGF0UmV0dXJuc0FyZ3VtZW50ID0gZnVuY3Rpb24gKGFyZykge1xuICByZXR1cm4gYXJnO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBlbXB0eUZ1bmN0aW9uOyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBVc2UgaW52YXJpYW50KCkgdG8gYXNzZXJ0IHN0YXRlIHdoaWNoIHlvdXIgcHJvZ3JhbSBhc3N1bWVzIHRvIGJlIHRydWUuXG4gKlxuICogUHJvdmlkZSBzcHJpbnRmLXN0eWxlIGZvcm1hdCAob25seSAlcyBpcyBzdXBwb3J0ZWQpIGFuZCBhcmd1bWVudHNcbiAqIHRvIHByb3ZpZGUgaW5mb3JtYXRpb24gYWJvdXQgd2hhdCBicm9rZSBhbmQgd2hhdCB5b3Ugd2VyZVxuICogZXhwZWN0aW5nLlxuICpcbiAqIFRoZSBpbnZhcmlhbnQgbWVzc2FnZSB3aWxsIGJlIHN0cmlwcGVkIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgaW52YXJpYW50XG4gKiB3aWxsIHJlbWFpbiB0byBlbnN1cmUgbG9naWMgZG9lcyBub3QgZGlmZmVyIGluIHByb2R1Y3Rpb24uXG4gKi9cblxudmFyIHZhbGlkYXRlRm9ybWF0ID0gZnVuY3Rpb24gdmFsaWRhdGVGb3JtYXQoZm9ybWF0KSB7fTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFsaWRhdGVGb3JtYXQgPSBmdW5jdGlvbiB2YWxpZGF0ZUZvcm1hdChmb3JtYXQpIHtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignaW52YXJpYW50IHJlcXVpcmVzIGFuIGVycm9yIG1lc3NhZ2UgYXJndW1lbnQnKTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGludmFyaWFudChjb25kaXRpb24sIGZvcm1hdCwgYSwgYiwgYywgZCwgZSwgZikge1xuICB2YWxpZGF0ZUZvcm1hdChmb3JtYXQpO1xuXG4gIGlmICghY29uZGl0aW9uKSB7XG4gICAgdmFyIGVycm9yO1xuICAgIGlmIChmb3JtYXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoJ01pbmlmaWVkIGV4Y2VwdGlvbiBvY2N1cnJlZDsgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50ICcgKyAnZm9yIHRoZSBmdWxsIGVycm9yIG1lc3NhZ2UgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFyZ3MgPSBbYSwgYiwgYywgZCwgZSwgZl07XG4gICAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgICAgZXJyb3IgPSBuZXcgRXJyb3IoZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGFyZ3NbYXJnSW5kZXgrK107XG4gICAgICB9KSk7XG4gICAgICBlcnJvci5uYW1lID0gJ0ludmFyaWFudCBWaW9sYXRpb24nO1xuICAgIH1cblxuICAgIGVycm9yLmZyYW1lc1RvUG9wID0gMTsgLy8gd2UgZG9uJ3QgY2FyZSBhYm91dCBpbnZhcmlhbnQncyBvd24gZnJhbWVcbiAgICB0aHJvdyBlcnJvcjtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGludmFyaWFudDsiLCJ2YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbmZ1bmN0aW9uIHZhbHVlRXF1YWwoYSwgYikge1xuICBpZiAoYSA9PT0gYikgcmV0dXJuIHRydWU7XG5cbiAgaWYgKGEgPT0gbnVsbCB8fCBiID09IG51bGwpIHJldHVybiBmYWxzZTtcblxuICBpZiAoQXJyYXkuaXNBcnJheShhKSkge1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KGIpICYmIGEubGVuZ3RoID09PSBiLmxlbmd0aCAmJiBhLmV2ZXJ5KGZ1bmN0aW9uIChpdGVtLCBpbmRleCkge1xuICAgICAgcmV0dXJuIHZhbHVlRXF1YWwoaXRlbSwgYltpbmRleF0pO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIGFUeXBlID0gdHlwZW9mIGEgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGEpO1xuICB2YXIgYlR5cGUgPSB0eXBlb2YgYiA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoYik7XG5cbiAgaWYgKGFUeXBlICE9PSBiVHlwZSkgcmV0dXJuIGZhbHNlO1xuXG4gIGlmIChhVHlwZSA9PT0gJ29iamVjdCcpIHtcbiAgICB2YXIgYVZhbHVlID0gYS52YWx1ZU9mKCk7XG4gICAgdmFyIGJWYWx1ZSA9IGIudmFsdWVPZigpO1xuXG4gICAgaWYgKGFWYWx1ZSAhPT0gYSB8fCBiVmFsdWUgIT09IGIpIHJldHVybiB2YWx1ZUVxdWFsKGFWYWx1ZSwgYlZhbHVlKTtcblxuICAgIHZhciBhS2V5cyA9IE9iamVjdC5rZXlzKGEpO1xuICAgIHZhciBiS2V5cyA9IE9iamVjdC5rZXlzKGIpO1xuXG4gICAgaWYgKGFLZXlzLmxlbmd0aCAhPT0gYktleXMubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG5cbiAgICByZXR1cm4gYUtleXMuZXZlcnkoZnVuY3Rpb24gKGtleSkge1xuICAgICAgcmV0dXJuIHZhbHVlRXF1YWwoYVtrZXldLCBiW2tleV0pO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnQgZGVmYXVsdCB2YWx1ZUVxdWFsOyIsImZ1bmN0aW9uIGlzQWJzb2x1dGUocGF0aG5hbWUpIHtcbiAgcmV0dXJuIHBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nO1xufVxuXG4vLyBBYm91dCAxLjV4IGZhc3RlciB0aGFuIHRoZSB0d28tYXJnIHZlcnNpb24gb2YgQXJyYXkjc3BsaWNlKClcbmZ1bmN0aW9uIHNwbGljZU9uZShsaXN0LCBpbmRleCkge1xuICBmb3IgKHZhciBpID0gaW5kZXgsIGsgPSBpICsgMSwgbiA9IGxpc3QubGVuZ3RoOyBrIDwgbjsgaSArPSAxLCBrICs9IDEpIHtcbiAgICBsaXN0W2ldID0gbGlzdFtrXTtcbiAgfVxuXG4gIGxpc3QucG9wKCk7XG59XG5cbi8vIFRoaXMgaW1wbGVtZW50YXRpb24gaXMgYmFzZWQgaGVhdmlseSBvbiBub2RlJ3MgdXJsLnBhcnNlXG5mdW5jdGlvbiByZXNvbHZlUGF0aG5hbWUodG8pIHtcbiAgdmFyIGZyb20gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICcnO1xuXG4gIHZhciB0b1BhcnRzID0gdG8gJiYgdG8uc3BsaXQoJy8nKSB8fCBbXTtcbiAgdmFyIGZyb21QYXJ0cyA9IGZyb20gJiYgZnJvbS5zcGxpdCgnLycpIHx8IFtdO1xuXG4gIHZhciBpc1RvQWJzID0gdG8gJiYgaXNBYnNvbHV0ZSh0byk7XG4gIHZhciBpc0Zyb21BYnMgPSBmcm9tICYmIGlzQWJzb2x1dGUoZnJvbSk7XG4gIHZhciBtdXN0RW5kQWJzID0gaXNUb0FicyB8fCBpc0Zyb21BYnM7XG5cbiAgaWYgKHRvICYmIGlzQWJzb2x1dGUodG8pKSB7XG4gICAgLy8gdG8gaXMgYWJzb2x1dGVcbiAgICBmcm9tUGFydHMgPSB0b1BhcnRzO1xuICB9IGVsc2UgaWYgKHRvUGFydHMubGVuZ3RoKSB7XG4gICAgLy8gdG8gaXMgcmVsYXRpdmUsIGRyb3AgdGhlIGZpbGVuYW1lXG4gICAgZnJvbVBhcnRzLnBvcCgpO1xuICAgIGZyb21QYXJ0cyA9IGZyb21QYXJ0cy5jb25jYXQodG9QYXJ0cyk7XG4gIH1cblxuICBpZiAoIWZyb21QYXJ0cy5sZW5ndGgpIHJldHVybiAnLyc7XG5cbiAgdmFyIGhhc1RyYWlsaW5nU2xhc2ggPSB2b2lkIDA7XG4gIGlmIChmcm9tUGFydHMubGVuZ3RoKSB7XG4gICAgdmFyIGxhc3QgPSBmcm9tUGFydHNbZnJvbVBhcnRzLmxlbmd0aCAtIDFdO1xuICAgIGhhc1RyYWlsaW5nU2xhc2ggPSBsYXN0ID09PSAnLicgfHwgbGFzdCA9PT0gJy4uJyB8fCBsYXN0ID09PSAnJztcbiAgfSBlbHNlIHtcbiAgICBoYXNUcmFpbGluZ1NsYXNoID0gZmFsc2U7XG4gIH1cblxuICB2YXIgdXAgPSAwO1xuICBmb3IgKHZhciBpID0gZnJvbVBhcnRzLmxlbmd0aDsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgcGFydCA9IGZyb21QYXJ0c1tpXTtcblxuICAgIGlmIChwYXJ0ID09PSAnLicpIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgIH0gZWxzZSBpZiAocGFydCA9PT0gJy4uJykge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgICB1cCsrO1xuICAgIH0gZWxzZSBpZiAodXApIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgICAgdXAtLTtcbiAgICB9XG4gIH1cblxuICBpZiAoIW11c3RFbmRBYnMpIGZvciAoOyB1cC0tOyB1cCkge1xuICAgIGZyb21QYXJ0cy51bnNoaWZ0KCcuLicpO1xuICB9aWYgKG11c3RFbmRBYnMgJiYgZnJvbVBhcnRzWzBdICE9PSAnJyAmJiAoIWZyb21QYXJ0c1swXSB8fCAhaXNBYnNvbHV0ZShmcm9tUGFydHNbMF0pKSkgZnJvbVBhcnRzLnVuc2hpZnQoJycpO1xuXG4gIHZhciByZXN1bHQgPSBmcm9tUGFydHMuam9pbignLycpO1xuXG4gIGlmIChoYXNUcmFpbGluZ1NsYXNoICYmIHJlc3VsdC5zdWJzdHIoLTEpICE9PSAnLycpIHJlc3VsdCArPSAnLyc7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgcmVzb2x2ZVBhdGhuYW1lOyIsImltcG9ydCBVdGlscyBmcm9tIFwiLi4vLi4vc2VydmljZXMvdXRpbFwiO1xuXG5leHBvcnQgY29uc3QgU09VUkNFX0xJU1RfSVRFTV9FVkVOVCA9ICdTT1VSQ0VfTElTVF9JVEVNXycgKyBVdGlscy5nZW5lcmF0ZVJhbmRvbVN0cmluZyg1KTtcblxuZXhwb3J0IGNvbnN0IFNPVVJDRVNfRFJPUERPV05fVElUTEUgPSAnU2VsZWN0IGEgTmV3cyBTb3VyY2UnO1xuXG5leHBvcnQgY29uc3QgU09VUkNFU19MSVNUID0ge1xuICBcImFiYy1uZXdzXCI6IHtcbiAgICBcIlNPVVJDRV9OQU1FXCI6IFwiQUJDIE5ld3NcIixcbiAgICBcIlNPVVJDRV9JRFwiOiBcImFiYy1uZXdzXCIsXG4gICAgXCJLRVlcIjogXCJTT1VSQ0VfXCIgKyBVdGlscy5nZW5lcmF0ZVJhbmRvbVN0cmluZyg1KVxuICB9LFxuICBcImFiYy1uZXdzLWF1XCI6IHtcbiAgICBcIlNPVVJDRV9OQU1FXCI6IFwiQUJDIE5ld3MgKEFVKVwiLFxuICAgIFwiU09VUkNFX0lEXCI6IFwiYWJjLW5ld3MtYXVcIixcbiAgICBcIktFWVwiOiBcIlNPVVJDRV9cIiArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpXG4gIH0sXG4gIFwiYWZ0ZW5wb3N0ZW5cIjoge1xuICAgIFwiU09VUkNFX05BTUVcIjogXCJBZnRlbnBvc3RlblwiLFxuICAgIFwiU09VUkNFX0lEXCI6IFwiYWZ0ZW5wb3N0ZW5cIixcbiAgICBcIktFWVwiOiBcIlNPVVJDRV9cIiArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpXG4gIH0sXG4gIFwiYWwtamF6ZWVyYS1lbmdsaXNoXCI6IHtcbiAgICBcIlNPVVJDRV9OQU1FXCI6IFwiQWwgSmF6ZWVyYSBFbmdsaXNoXCIsXG4gICAgXCJTT1VSQ0VfSURcIjogXCJhbC1qYXplZXJhLWVuZ2xpc2hcIixcbiAgICBcIktFWVwiOiBcIlNPVVJDRV9cIiArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpXG4gIH0sXG4gIFwiYW5zYVwiOiB7XG4gICAgXCJTT1VSQ0VfTkFNRVwiOiBcIkFOU0EuaXRcIixcbiAgICBcIlNPVVJDRV9JRFwiOiBcImFuc2FcIixcbiAgICBcIktFWVwiOiBcIlNPVVJDRV9cIiArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpXG4gIH0sXG4gIFwiYXJnYWFtXCI6IHtcbiAgICBcIlNPVVJDRV9OQU1FXCI6IFwiQXJnYWFtXCIsXG4gICAgXCJTT1VSQ0VfSURcIjogXCJhcmdhYW1cIixcbiAgICBcIktFWVwiOiBcIlNPVVJDRV9cIiArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpXG4gIH0sXG4gIFwiYXJzLXRlY2huaWNhXCI6IHtcbiAgICBcIlNPVVJDRV9OQU1FXCI6IFwiQXJzIFRlY2huaWNhXCIsXG4gICAgXCJTT1VSQ0VfSURcIjogXCJhcnMtdGVjaG5pY2FcIixcbiAgICBcIktFWVwiOiBcIlNPVVJDRV9cIiArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpXG4gIH0sXG4gIFwiYXJ5LW5ld3NcIjoge1xuICAgIFwiU09VUkNFX05BTUVcIjogXCJBcnkgTmV3c1wiLFxuICAgIFwiU09VUkNFX0lEXCI6IFwiYXJ5LW5ld3NcIixcbiAgICBcIktFWVwiOiBcIlNPVVJDRV9cIiArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpXG4gIH0sXG4gIFwiYXNzb2NpYXRlZC1wcmVzc1wiOiB7XG4gICAgXCJTT1VSQ0VfTkFNRVwiOiBcIkFzc29jaWF0ZWQgUHJlc3NcIixcbiAgICBcIlNPVVJDRV9JRFwiOiBcImFzc29jaWF0ZWQtcHJlc3NcIixcbiAgICBcIktFWVwiOiBcIlNPVVJDRV9cIiArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpXG4gIH0sXG4gIFwiYXVzdHJhbGlhbi1maW5hbmNpYWwtcmV2aWV3XCI6IHtcbiAgICBcIlNPVVJDRV9OQU1FXCI6IFwiQXVzdHJhbGlhbiBGaW5hbmNpYWwgUmV2aWV3XCIsXG4gICAgXCJTT1VSQ0VfSURcIjogXCJhdXN0cmFsaWFuLWZpbmFuY2lhbC1yZXZpZXdcIixcbiAgICBcIktFWVwiOiBcIlNPVVJDRV9cIiArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpXG4gIH0sXG4gIFwiYXhpb3NcIjoge1xuICAgIFwiU09VUkNFX05BTUVcIjogXCJBeGlvc1wiLFxuICAgIFwiU09VUkNFX0lEXCI6IFwiYXhpb3NcIixcbiAgICBcIktFWVwiOiBcIlNPVVJDRV9cIiArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpXG4gIH0sXG4gIFwiYmJjLW5ld3NcIjoge1xuICAgIFwiU09VUkNFX05BTUVcIjogXCJCQkMgTmV3c1wiLFxuICAgIFwiU09VUkNFX0lEXCI6IFwiYmJjLW5ld3NcIixcbiAgICBcIktFWVwiOiBcIlNPVVJDRV9cIiArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpXG4gIH0sXG4gIFwiYmJjLXNwb3J0XCI6IHtcbiAgICBcIlNPVVJDRV9OQU1FXCI6IFwiQkJDIFNwb3J0XCIsXG4gICAgXCJTT1VSQ0VfSURcIjogXCJiYmMtc3BvcnRcIixcbiAgICBcIktFWVwiOiBcIlNPVVJDRV9cIiArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpXG4gIH0sXG4gIFwiYmlsZFwiOiB7XG4gICAgXCJTT1VSQ0VfTkFNRVwiOiBcIkJpbGRcIixcbiAgICBcIlNPVVJDRV9JRFwiOiBcImJpbGRcIixcbiAgICBcIktFWVwiOiBcIlNPVVJDRV9cIiArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpXG4gIH0sXG4gIFwiYmxhc3RpbmctbmV3cy1iclwiOiB7XG4gICAgXCJTT1VSQ0VfTkFNRVwiOiBcIkJsYXN0aW5nIE5ld3MgKEJSKVwiLFxuICAgIFwiU09VUkNFX0lEXCI6IFwiYmxhc3RpbmctbmV3cy1iclwiLFxuICAgIFwiS0VZXCI6IFwiU09VUkNFX1wiICsgVXRpbHMuZ2VuZXJhdGVSYW5kb21TdHJpbmcoNSlcbiAgfSxcbiAgXCJibGVhY2hlci1yZXBvcnRcIjoge1xuICAgIFwiU09VUkNFX05BTUVcIjogXCJCbGVhY2hlciBSZXBvcnRcIixcbiAgICBcIlNPVVJDRV9JRFwiOiBcImJsZWFjaGVyLXJlcG9ydFwiLFxuICAgIFwiS0VZXCI6IFwiU09VUkNFX1wiICsgVXRpbHMuZ2VuZXJhdGVSYW5kb21TdHJpbmcoNSlcbiAgfSxcbiAgXCJibG9vbWJlcmdcIjoge1xuICAgIFwiU09VUkNFX05BTUVcIjogXCJCbG9vbWJlcmdcIixcbiAgICBcIlNPVVJDRV9JRFwiOiBcImJsb29tYmVyZ1wiLFxuICAgIFwiS0VZXCI6IFwiU09VUkNFX1wiICsgVXRpbHMuZ2VuZXJhdGVSYW5kb21TdHJpbmcoNSlcbiAgfSxcbiAgXCJicmVpdGJhcnQtbmV3c1wiOiB7XG4gICAgXCJTT1VSQ0VfTkFNRVwiOiBcIkJyZWl0YmFydCBOZXdzXCIsXG4gICAgXCJTT1VSQ0VfSURcIjogXCJicmVpdGJhcnQtbmV3c1wiLFxuICAgIFwiS0VZXCI6IFwiU09VUkNFX1wiICsgVXRpbHMuZ2VuZXJhdGVSYW5kb21TdHJpbmcoNSlcbiAgfSxcbiAgXCJidXNpbmVzcy1pbnNpZGVyXCI6IHtcbiAgICBcIlNPVVJDRV9OQU1FXCI6IFwiQnVzaW5lc3MgSW5zaWRlclwiLFxuICAgIFwiU09VUkNFX0lEXCI6IFwiYnVzaW5lc3MtaW5zaWRlclwiLFxuICAgIFwiS0VZXCI6IFwiU09VUkNFX1wiICsgVXRpbHMuZ2VuZXJhdGVSYW5kb21TdHJpbmcoNSlcbiAgfSxcbiAgXCJidXNpbmVzcy1pbnNpZGVyLXVrXCI6IHtcbiAgICBcIlNPVVJDRV9OQU1FXCI6IFwiQnVzaW5lc3MgSW5zaWRlciAoVUspXCIsXG4gICAgXCJTT1VSQ0VfSURcIjogXCJidXNpbmVzcy1pbnNpZGVyLXVrXCIsXG4gICAgXCJLRVlcIjogXCJTT1VSQ0VfXCIgKyBVdGlscy5nZW5lcmF0ZVJhbmRvbVN0cmluZyg1KVxuICB9LFxuICBcImJ1enpmZWVkXCI6IHtcbiAgICBcIlNPVVJDRV9OQU1FXCI6IFwiQnV6emZlZWRcIixcbiAgICBcIlNPVVJDRV9JRFwiOiBcImJ1enpmZWVkXCIsXG4gICAgXCJLRVlcIjogXCJTT1VSQ0VfXCIgKyBVdGlscy5nZW5lcmF0ZVJhbmRvbVN0cmluZyg1KVxuICB9LFxuICBcImNiYy1uZXdzXCI6IHtcbiAgICBcIlNPVVJDRV9OQU1FXCI6IFwiQ0JDIE5ld3NcIixcbiAgICBcIlNPVVJDRV9JRFwiOiBcImNiYy1uZXdzXCIsXG4gICAgXCJLRVlcIjogXCJTT1VSQ0VfXCIgKyBVdGlscy5nZW5lcmF0ZVJhbmRvbVN0cmluZyg1KVxuICB9LFxuICBcImNicy1uZXdzXCI6IHtcbiAgICBcIlNPVVJDRV9OQU1FXCI6IFwiQ0JTIE5ld3NcIixcbiAgICBcIlNPVVJDRV9JRFwiOiBcImNicy1uZXdzXCIsXG4gICAgXCJLRVlcIjogXCJTT1VSQ0VfXCIgKyBVdGlscy5nZW5lcmF0ZVJhbmRvbVN0cmluZyg1KVxuICB9LFxuICBcImNuYmNcIjoge1xuICAgIFwiU09VUkNFX05BTUVcIjogXCJDTkJDXCIsXG4gICAgXCJTT1VSQ0VfSURcIjogXCJjbmJjXCIsXG4gICAgXCJLRVlcIjogXCJTT1VSQ0VfXCIgKyBVdGlscy5nZW5lcmF0ZVJhbmRvbVN0cmluZyg1KVxuICB9LFxuICBcImNublwiOiB7XG4gICAgXCJTT1VSQ0VfTkFNRVwiOiBcIkNOTlwiLFxuICAgIFwiU09VUkNFX0lEXCI6IFwiY25uXCIsXG4gICAgXCJLRVlcIjogXCJTT1VSQ0VfXCIgKyBVdGlscy5nZW5lcmF0ZVJhbmRvbVN0cmluZyg1KVxuICB9LFxuICBcImNubi1lc1wiOiB7XG4gICAgXCJTT1VSQ0VfTkFNRVwiOiBcIkNOTiBTcGFuaXNoXCIsXG4gICAgXCJTT1VSQ0VfSURcIjogXCJjbm4tZXNcIixcbiAgICBcIktFWVwiOiBcIlNPVVJDRV9cIiArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpXG4gIH0sXG4gIFwiY3J5cHRvLWNvaW5zLW5ld3NcIjoge1xuICAgIFwiU09VUkNFX05BTUVcIjogXCJDcnlwdG8gQ29pbnMgTmV3c1wiLFxuICAgIFwiU09VUkNFX0lEXCI6IFwiY3J5cHRvLWNvaW5zLW5ld3NcIixcbiAgICBcIktFWVwiOiBcIlNPVVJDRV9cIiArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpXG4gIH0sXG4gIFwiZGFpbHktbWFpbFwiOiB7XG4gICAgXCJTT1VSQ0VfTkFNRVwiOiBcIkRhaWx5IE1haWxcIixcbiAgICBcIlNPVVJDRV9JRFwiOiBcImRhaWx5LW1haWxcIixcbiAgICBcIktFWVwiOiBcIlNPVVJDRV9cIiArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpXG4gIH0sXG4gIFwiZGVyLXRhZ2Vzc3BpZWdlbFwiOiB7XG4gICAgXCJTT1VSQ0VfTkFNRVwiOiBcIkRlciBUYWdlc3NwaWVnZWxcIixcbiAgICBcIlNPVVJDRV9JRFwiOiBcImRlci10YWdlc3NwaWVnZWxcIixcbiAgICBcIktFWVwiOiBcIlNPVVJDRV9cIiArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpXG4gIH0sXG4gIFwiZGllLXplaXRcIjoge1xuICAgIFwiU09VUkNFX05BTUVcIjogXCJEaWUgWmVpdFwiLFxuICAgIFwiU09VUkNFX0lEXCI6IFwiZGllLXplaXRcIixcbiAgICBcIktFWVwiOiBcIlNPVVJDRV9cIiArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpXG4gIH0sXG4gIFwiZWwtbXVuZG9cIjoge1xuICAgIFwiU09VUkNFX05BTUVcIjogXCJFbCBNdW5kb1wiLFxuICAgIFwiU09VUkNFX0lEXCI6IFwiZWwtbXVuZG9cIixcbiAgICBcIktFWVwiOiBcIlNPVVJDRV9cIiArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpXG4gIH0sXG4gIFwiZW5nYWRnZXRcIjoge1xuICAgIFwiU09VUkNFX05BTUVcIjogXCJFbmdhZGdldFwiLFxuICAgIFwiU09VUkNFX0lEXCI6IFwiZW5nYWRnZXRcIixcbiAgICBcIktFWVwiOiBcIlNPVVJDRV9cIiArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpXG4gIH0sXG4gIFwiZW50ZXJ0YWlubWVudC13ZWVrbHlcIjoge1xuICAgIFwiU09VUkNFX05BTUVcIjogXCJFbnRlcnRhaW5tZW50IFdlZWtseVwiLFxuICAgIFwiU09VUkNFX0lEXCI6IFwiZW50ZXJ0YWlubWVudC13ZWVrbHlcIixcbiAgICBcIktFWVwiOiBcIlNPVVJDRV9cIiArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpXG4gIH0sXG4gIFwiZXNwblwiOiB7XG4gICAgXCJTT1VSQ0VfTkFNRVwiOiBcIkVTUE5cIixcbiAgICBcIlNPVVJDRV9JRFwiOiBcImVzcG5cIixcbiAgICBcIktFWVwiOiBcIlNPVVJDRV9cIiArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpXG4gIH0sXG4gIFwiZXNwbi1jcmljLWluZm9cIjoge1xuICAgIFwiU09VUkNFX05BTUVcIjogXCJFU1BOIENyaWMgSW5mb1wiLFxuICAgIFwiU09VUkNFX0lEXCI6IFwiZXNwbi1jcmljLWluZm9cIixcbiAgICBcIktFWVwiOiBcIlNPVVJDRV9cIiArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpXG4gIH0sXG4gIFwiZmluYW5jaWFsLXBvc3RcIjoge1xuICAgIFwiU09VUkNFX05BTUVcIjogXCJGaW5hbmNpYWwgUG9zdFwiLFxuICAgIFwiU09VUkNFX0lEXCI6IFwiZmluYW5jaWFsLXBvc3RcIixcbiAgICBcIktFWVwiOiBcIlNPVVJDRV9cIiArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpXG4gIH0sXG4gIFwiZmluYW5jaWFsLXRpbWVzXCI6IHtcbiAgICBcIlNPVVJDRV9OQU1FXCI6IFwiRmluYW5jaWFsIFRpbWVzXCIsXG4gICAgXCJTT1VSQ0VfSURcIjogXCJmaW5hbmNpYWwtdGltZXNcIixcbiAgICBcIktFWVwiOiBcIlNPVVJDRV9cIiArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpXG4gIH0sXG4gIFwiZm9jdXNcIjoge1xuICAgIFwiU09VUkNFX05BTUVcIjogXCJGb2N1c1wiLFxuICAgIFwiU09VUkNFX0lEXCI6IFwiZm9jdXNcIixcbiAgICBcIktFWVwiOiBcIlNPVVJDRV9cIiArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpXG4gIH0sXG4gIFwiZm9vdGJhbGwtaXRhbGlhXCI6IHtcbiAgICBcIlNPVVJDRV9OQU1FXCI6IFwiRm9vdGJhbGwgSXRhbGlhXCIsXG4gICAgXCJTT1VSQ0VfSURcIjogXCJmb290YmFsbC1pdGFsaWFcIixcbiAgICBcIktFWVwiOiBcIlNPVVJDRV9cIiArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpXG4gIH0sXG4gIFwiZm9ydHVuZVwiOiB7XG4gICAgXCJTT1VSQ0VfTkFNRVwiOiBcIkZvcnR1bmVcIixcbiAgICBcIlNPVVJDRV9JRFwiOiBcImZvcnR1bmVcIixcbiAgICBcIktFWVwiOiBcIlNPVVJDRV9cIiArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpXG4gIH0sXG4gIFwiZm91ci1mb3VyLXR3b1wiOiB7XG4gICAgXCJTT1VSQ0VfTkFNRVwiOiBcIkZvdXJGb3VyVHdvXCIsXG4gICAgXCJTT1VSQ0VfSURcIjogXCJmb3VyLWZvdXItdHdvXCIsXG4gICAgXCJLRVlcIjogXCJTT1VSQ0VfXCIgKyBVdGlscy5nZW5lcmF0ZVJhbmRvbVN0cmluZyg1KVxuICB9LFxuICBcImZveC1uZXdzXCI6IHtcbiAgICBcIlNPVVJDRV9OQU1FXCI6IFwiRm94IE5ld3NcIixcbiAgICBcIlNPVVJDRV9JRFwiOiBcImZveC1uZXdzXCIsXG4gICAgXCJLRVlcIjogXCJTT1VSQ0VfXCIgKyBVdGlscy5nZW5lcmF0ZVJhbmRvbVN0cmluZyg1KVxuICB9LFxuICBcImZveC1zcG9ydHNcIjoge1xuICAgIFwiU09VUkNFX05BTUVcIjogXCJGb3ggU3BvcnRzXCIsXG4gICAgXCJTT1VSQ0VfSURcIjogXCJmb3gtc3BvcnRzXCIsXG4gICAgXCJLRVlcIjogXCJTT1VSQ0VfXCIgKyBVdGlscy5nZW5lcmF0ZVJhbmRvbVN0cmluZyg1KVxuICB9LFxuICBcImdsb2JvXCI6IHtcbiAgICBcIlNPVVJDRV9OQU1FXCI6IFwiR2xvYm9cIixcbiAgICBcIlNPVVJDRV9JRFwiOiBcImdsb2JvXCIsXG4gICAgXCJLRVlcIjogXCJTT1VSQ0VfXCIgKyBVdGlscy5nZW5lcmF0ZVJhbmRvbVN0cmluZyg1KVxuICB9LFxuICBcImdvb2dsZS1uZXdzXCI6IHtcbiAgICBcIlNPVVJDRV9OQU1FXCI6IFwiR29vZ2xlIE5ld3NcIixcbiAgICBcIlNPVVJDRV9JRFwiOiBcImdvb2dsZS1uZXdzXCIsXG4gICAgXCJLRVlcIjogXCJTT1VSQ0VfXCIgKyBVdGlscy5nZW5lcmF0ZVJhbmRvbVN0cmluZyg1KVxuICB9LFxuICBcImdvb2dsZS1uZXdzLWFyXCI6IHtcbiAgICBcIlNPVVJDRV9OQU1FXCI6IFwiR29vZ2xlIE5ld3MgKEFyZ2VudGluYSlcIixcbiAgICBcIlNPVVJDRV9JRFwiOiBcImdvb2dsZS1uZXdzLWFyXCIsXG4gICAgXCJLRVlcIjogXCJTT1VSQ0VfXCIgKyBVdGlscy5nZW5lcmF0ZVJhbmRvbVN0cmluZyg1KVxuICB9LFxuICBcImdvb2dsZS1uZXdzLWF1XCI6IHtcbiAgICBcIlNPVVJDRV9OQU1FXCI6IFwiR29vZ2xlIE5ld3MgKEF1c3RyYWxpYSlcIixcbiAgICBcIlNPVVJDRV9JRFwiOiBcImdvb2dsZS1uZXdzLWF1XCIsXG4gICAgXCJLRVlcIjogXCJTT1VSQ0VfXCIgKyBVdGlscy5nZW5lcmF0ZVJhbmRvbVN0cmluZyg1KVxuICB9LFxuICBcImdvb2dsZS1uZXdzLWJyXCI6IHtcbiAgICBcIlNPVVJDRV9OQU1FXCI6IFwiR29vZ2xlIE5ld3MgKEJyYXNpbClcIixcbiAgICBcIlNPVVJDRV9JRFwiOiBcImdvb2dsZS1uZXdzLWJyXCIsXG4gICAgXCJLRVlcIjogXCJTT1VSQ0VfXCIgKyBVdGlscy5nZW5lcmF0ZVJhbmRvbVN0cmluZyg1KVxuICB9LFxuICBcImdvb2dsZS1uZXdzLWNhXCI6IHtcbiAgICBcIlNPVVJDRV9OQU1FXCI6IFwiR29vZ2xlIE5ld3MgKENhbmFkYSlcIixcbiAgICBcIlNPVVJDRV9JRFwiOiBcImdvb2dsZS1uZXdzLWNhXCIsXG4gICAgXCJLRVlcIjogXCJTT1VSQ0VfXCIgKyBVdGlscy5nZW5lcmF0ZVJhbmRvbVN0cmluZyg1KVxuICB9LFxuICBcImdvb2dsZS1uZXdzLWZyXCI6IHtcbiAgICBcIlNPVVJDRV9OQU1FXCI6IFwiR29vZ2xlIE5ld3MgKEZyYW5jZSlcIixcbiAgICBcIlNPVVJDRV9JRFwiOiBcImdvb2dsZS1uZXdzLWZyXCIsXG4gICAgXCJLRVlcIjogXCJTT1VSQ0VfXCIgKyBVdGlscy5nZW5lcmF0ZVJhbmRvbVN0cmluZyg1KVxuICB9LFxuICBcImdvb2dsZS1uZXdzLWluXCI6IHtcbiAgICBcIlNPVVJDRV9OQU1FXCI6IFwiR29vZ2xlIE5ld3MgKEluZGlhKVwiLFxuICAgIFwiU09VUkNFX0lEXCI6IFwiZ29vZ2xlLW5ld3MtaW5cIixcbiAgICBcIktFWVwiOiBcIlNPVVJDRV9cIiArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpXG4gIH0sXG4gIFwiZ29vZ2xlLW5ld3MtaXNcIjoge1xuICAgIFwiU09VUkNFX05BTUVcIjogXCJHb29nbGUgTmV3cyAoSXNyYWVsKVwiLFxuICAgIFwiU09VUkNFX0lEXCI6IFwiZ29vZ2xlLW5ld3MtaXNcIixcbiAgICBcIktFWVwiOiBcIlNPVVJDRV9cIiArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpXG4gIH0sXG4gIFwiZ29vZ2xlLW5ld3MtaXRcIjoge1xuICAgIFwiU09VUkNFX05BTUVcIjogXCJHb29nbGUgTmV3cyAoSXRhbHkpXCIsXG4gICAgXCJTT1VSQ0VfSURcIjogXCJnb29nbGUtbmV3cy1pdFwiLFxuICAgIFwiS0VZXCI6IFwiU09VUkNFX1wiICsgVXRpbHMuZ2VuZXJhdGVSYW5kb21TdHJpbmcoNSlcbiAgfSxcbiAgXCJnb29nbGUtbmV3cy1ydVwiOiB7XG4gICAgXCJTT1VSQ0VfTkFNRVwiOiBcIkdvb2dsZSBOZXdzIChSdXNzaWEpXCIsXG4gICAgXCJTT1VSQ0VfSURcIjogXCJnb29nbGUtbmV3cy1ydVwiLFxuICAgIFwiS0VZXCI6IFwiU09VUkNFX1wiICsgVXRpbHMuZ2VuZXJhdGVSYW5kb21TdHJpbmcoNSlcbiAgfSxcbiAgXCJnb29nbGUtbmV3cy1zYVwiOiB7XG4gICAgXCJTT1VSQ0VfTkFNRVwiOiBcIkdvb2dsZSBOZXdzIChTYXVkaSBBcmFiaWEpXCIsXG4gICAgXCJTT1VSQ0VfSURcIjogXCJnb29nbGUtbmV3cy1zYVwiLFxuICAgIFwiS0VZXCI6IFwiU09VUkNFX1wiICsgVXRpbHMuZ2VuZXJhdGVSYW5kb21TdHJpbmcoNSlcbiAgfSxcbiAgXCJnb29nbGUtbmV3cy11a1wiOiB7XG4gICAgXCJTT1VSQ0VfTkFNRVwiOiBcIkdvb2dsZSBOZXdzIChVSylcIixcbiAgICBcIlNPVVJDRV9JRFwiOiBcImdvb2dsZS1uZXdzLXVrXCIsXG4gICAgXCJLRVlcIjogXCJTT1VSQ0VfXCIgKyBVdGlscy5nZW5lcmF0ZVJhbmRvbVN0cmluZyg1KVxuICB9LFxuICBcImdvdGVib3Jncy1wb3N0ZW5cIjoge1xuICAgIFwiU09VUkNFX05BTUVcIjogXCJHw7Z0ZWJvcmdzLVBvc3RlblwiLFxuICAgIFwiU09VUkNFX0lEXCI6IFwiZ290ZWJvcmdzLXBvc3RlblwiLFxuICAgIFwiS0VZXCI6IFwiU09VUkNFX1wiICsgVXRpbHMuZ2VuZXJhdGVSYW5kb21TdHJpbmcoNSlcbiAgfSxcbiAgXCJncnVlbmRlcnN6ZW5lXCI6IHtcbiAgICBcIlNPVVJDRV9OQU1FXCI6IFwiR3J1ZW5kZXJzemVuZVwiLFxuICAgIFwiU09VUkNFX0lEXCI6IFwiZ3J1ZW5kZXJzemVuZVwiLFxuICAgIFwiS0VZXCI6IFwiU09VUkNFX1wiICsgVXRpbHMuZ2VuZXJhdGVSYW5kb21TdHJpbmcoNSlcbiAgfSxcbiAgXCJoYWNrZXItbmV3c1wiOiB7XG4gICAgXCJTT1VSQ0VfTkFNRVwiOiBcIkhhY2tlciBOZXdzXCIsXG4gICAgXCJTT1VSQ0VfSURcIjogXCJoYWNrZXItbmV3c1wiLFxuICAgIFwiS0VZXCI6IFwiU09VUkNFX1wiICsgVXRpbHMuZ2VuZXJhdGVSYW5kb21TdHJpbmcoNSlcbiAgfSxcbiAgXCJoYW5kZWxzYmxhdHRcIjoge1xuICAgIFwiU09VUkNFX05BTUVcIjogXCJIYW5kZWxzYmxhdHRcIixcbiAgICBcIlNPVVJDRV9JRFwiOiBcImhhbmRlbHNibGF0dFwiLFxuICAgIFwiS0VZXCI6IFwiU09VUkNFX1wiICsgVXRpbHMuZ2VuZXJhdGVSYW5kb21TdHJpbmcoNSlcbiAgfSxcbiAgXCJpZ25cIjoge1xuICAgIFwiU09VUkNFX05BTUVcIjogXCJJR05cIixcbiAgICBcIlNPVVJDRV9JRFwiOiBcImlnblwiLFxuICAgIFwiS0VZXCI6IFwiU09VUkNFX1wiICsgVXRpbHMuZ2VuZXJhdGVSYW5kb21TdHJpbmcoNSlcbiAgfSxcbiAgXCJpbC1zb2xlLTI0LW9yZVwiOiB7XG4gICAgXCJTT1VSQ0VfTkFNRVwiOiBcIklsIFNvbGUgMjQgT3JlXCIsXG4gICAgXCJTT1VSQ0VfSURcIjogXCJpbC1zb2xlLTI0LW9yZVwiLFxuICAgIFwiS0VZXCI6IFwiU09VUkNFX1wiICsgVXRpbHMuZ2VuZXJhdGVSYW5kb21TdHJpbmcoNSlcbiAgfSxcbiAgXCJpbmRlcGVuZGVudFwiOiB7XG4gICAgXCJTT1VSQ0VfTkFNRVwiOiBcIkluZGVwZW5kZW50XCIsXG4gICAgXCJTT1VSQ0VfSURcIjogXCJpbmRlcGVuZGVudFwiLFxuICAgIFwiS0VZXCI6IFwiU09VUkNFX1wiICsgVXRpbHMuZ2VuZXJhdGVSYW5kb21TdHJpbmcoNSlcbiAgfSxcbiAgXCJpbmZvYmFlXCI6IHtcbiAgICBcIlNPVVJDRV9OQU1FXCI6IFwiSW5mb2JhZVwiLFxuICAgIFwiU09VUkNFX0lEXCI6IFwiaW5mb2JhZVwiLFxuICAgIFwiS0VZXCI6IFwiU09VUkNFX1wiICsgVXRpbHMuZ2VuZXJhdGVSYW5kb21TdHJpbmcoNSlcbiAgfSxcbiAgXCJpbmZvLW1vbmV5XCI6IHtcbiAgICBcIlNPVVJDRV9OQU1FXCI6IFwiSW5mb01vbmV5XCIsXG4gICAgXCJTT1VSQ0VfSURcIjogXCJpbmZvLW1vbmV5XCIsXG4gICAgXCJLRVlcIjogXCJTT1VSQ0VfXCIgKyBVdGlscy5nZW5lcmF0ZVJhbmRvbVN0cmluZyg1KVxuICB9LFxuICBcImxhLWdhY2V0YVwiOiB7XG4gICAgXCJTT1VSQ0VfTkFNRVwiOiBcIkxhIEdhY2V0YVwiLFxuICAgIFwiU09VUkNFX0lEXCI6IFwibGEtZ2FjZXRhXCIsXG4gICAgXCJLRVlcIjogXCJTT1VSQ0VfXCIgKyBVdGlscy5nZW5lcmF0ZVJhbmRvbVN0cmluZyg1KVxuICB9LFxuICBcImxhLW5hY2lvblwiOiB7XG4gICAgXCJTT1VSQ0VfTkFNRVwiOiBcIkxhIE5hY2lvblwiLFxuICAgIFwiU09VUkNFX0lEXCI6IFwibGEtbmFjaW9uXCIsXG4gICAgXCJLRVlcIjogXCJTT1VSQ0VfXCIgKyBVdGlscy5nZW5lcmF0ZVJhbmRvbVN0cmluZyg1KVxuICB9LFxuICBcImxhLXJlcHViYmxpY2FcIjoge1xuICAgIFwiU09VUkNFX05BTUVcIjogXCJMYSBSZXB1YmJsaWNhXCIsXG4gICAgXCJTT1VSQ0VfSURcIjogXCJsYS1yZXB1YmJsaWNhXCIsXG4gICAgXCJLRVlcIjogXCJTT1VSQ0VfXCIgKyBVdGlscy5nZW5lcmF0ZVJhbmRvbVN0cmluZyg1KVxuICB9LFxuICBcImxlLW1vbmRlXCI6IHtcbiAgICBcIlNPVVJDRV9OQU1FXCI6IFwiTGUgTW9uZGVcIixcbiAgICBcIlNPVVJDRV9JRFwiOiBcImxlLW1vbmRlXCIsXG4gICAgXCJLRVlcIjogXCJTT1VSQ0VfXCIgKyBVdGlscy5nZW5lcmF0ZVJhbmRvbVN0cmluZyg1KVxuICB9LFxuICBcImxlbnRhXCI6IHtcbiAgICBcIlNPVVJDRV9OQU1FXCI6IFwiTGVudGFcIixcbiAgICBcIlNPVVJDRV9JRFwiOiBcImxlbnRhXCIsXG4gICAgXCJLRVlcIjogXCJTT1VSQ0VfXCIgKyBVdGlscy5nZW5lcmF0ZVJhbmRvbVN0cmluZyg1KVxuICB9LFxuICBcImxlcXVpcGVcIjoge1xuICAgIFwiU09VUkNFX05BTUVcIjogXCJMJ2VxdWlwZVwiLFxuICAgIFwiU09VUkNFX0lEXCI6IFwibGVxdWlwZVwiLFxuICAgIFwiS0VZXCI6IFwiU09VUkNFX1wiICsgVXRpbHMuZ2VuZXJhdGVSYW5kb21TdHJpbmcoNSlcbiAgfSxcbiAgXCJsZXMtZWNob3NcIjoge1xuICAgIFwiU09VUkNFX05BTUVcIjogXCJMZXMgRWNob3NcIixcbiAgICBcIlNPVVJDRV9JRFwiOiBcImxlcy1lY2hvc1wiLFxuICAgIFwiS0VZXCI6IFwiU09VUkNFX1wiICsgVXRpbHMuZ2VuZXJhdGVSYW5kb21TdHJpbmcoNSlcbiAgfSxcbiAgXCJsaWJlcmF0aW9uXCI6IHtcbiAgICBcIlNPVVJDRV9OQU1FXCI6IFwiTGliw6lyYXRpb25cIixcbiAgICBcIlNPVVJDRV9JRFwiOiBcImxpYmVyYXRpb25cIixcbiAgICBcIktFWVwiOiBcIlNPVVJDRV9cIiArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpXG4gIH0sXG4gIFwibWFyY2FcIjoge1xuICAgIFwiU09VUkNFX05BTUVcIjogXCJNYXJjYVwiLFxuICAgIFwiU09VUkNFX0lEXCI6IFwibWFyY2FcIixcbiAgICBcIktFWVwiOiBcIlNPVVJDRV9cIiArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpXG4gIH0sXG4gIFwibWFzaGFibGVcIjoge1xuICAgIFwiU09VUkNFX05BTUVcIjogXCJNYXNoYWJsZVwiLFxuICAgIFwiU09VUkNFX0lEXCI6IFwibWFzaGFibGVcIixcbiAgICBcIktFWVwiOiBcIlNPVVJDRV9cIiArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpXG4gIH0sXG4gIFwibWVkaWNhbC1uZXdzLXRvZGF5XCI6IHtcbiAgICBcIlNPVVJDRV9OQU1FXCI6IFwiTWVkaWNhbCBOZXdzIFRvZGF5XCIsXG4gICAgXCJTT1VSQ0VfSURcIjogXCJtZWRpY2FsLW5ld3MtdG9kYXlcIixcbiAgICBcIktFWVwiOiBcIlNPVVJDRV9cIiArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpXG4gIH0sXG4gIFwibWV0cm9cIjoge1xuICAgIFwiU09VUkNFX05BTUVcIjogXCJNZXRyb1wiLFxuICAgIFwiU09VUkNFX0lEXCI6IFwibWV0cm9cIixcbiAgICBcIktFWVwiOiBcIlNPVVJDRV9cIiArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpXG4gIH0sXG4gIFwibWlycm9yXCI6IHtcbiAgICBcIlNPVVJDRV9OQU1FXCI6IFwiTWlycm9yXCIsXG4gICAgXCJTT1VSQ0VfSURcIjogXCJtaXJyb3JcIixcbiAgICBcIktFWVwiOiBcIlNPVVJDRV9cIiArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpXG4gIH0sXG4gIFwibXNuYmNcIjoge1xuICAgIFwiU09VUkNFX05BTUVcIjogXCJNU05CQ1wiLFxuICAgIFwiU09VUkNFX0lEXCI6IFwibXNuYmNcIixcbiAgICBcIktFWVwiOiBcIlNPVVJDRV9cIiArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpXG4gIH0sXG4gIFwibXR2LW5ld3NcIjoge1xuICAgIFwiU09VUkNFX05BTUVcIjogXCJNVFYgTmV3c1wiLFxuICAgIFwiU09VUkNFX0lEXCI6IFwibXR2LW5ld3NcIixcbiAgICBcIktFWVwiOiBcIlNPVVJDRV9cIiArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpXG4gIH0sXG4gIFwibXR2LW5ld3MtdWtcIjoge1xuICAgIFwiU09VUkNFX05BTUVcIjogXCJNVFYgTmV3cyAoVUspXCIsXG4gICAgXCJTT1VSQ0VfSURcIjogXCJtdHYtbmV3cy11a1wiLFxuICAgIFwiS0VZXCI6IFwiU09VUkNFX1wiICsgVXRpbHMuZ2VuZXJhdGVSYW5kb21TdHJpbmcoNSlcbiAgfSxcbiAgXCJuYXRpb25hbC1nZW9ncmFwaGljXCI6IHtcbiAgICBcIlNPVVJDRV9OQU1FXCI6IFwiTmF0aW9uYWwgR2VvZ3JhcGhpY1wiLFxuICAgIFwiU09VUkNFX0lEXCI6IFwibmF0aW9uYWwtZ2VvZ3JhcGhpY1wiLFxuICAgIFwiS0VZXCI6IFwiU09VUkNFX1wiICsgVXRpbHMuZ2VuZXJhdGVSYW5kb21TdHJpbmcoNSlcbiAgfSxcbiAgXCJuYXRpb25hbC1yZXZpZXdcIjoge1xuICAgIFwiU09VUkNFX05BTUVcIjogXCJOYXRpb25hbCBSZXZpZXdcIixcbiAgICBcIlNPVVJDRV9JRFwiOiBcIm5hdGlvbmFsLXJldmlld1wiLFxuICAgIFwiS0VZXCI6IFwiU09VUkNFX1wiICsgVXRpbHMuZ2VuZXJhdGVSYW5kb21TdHJpbmcoNSlcbiAgfSxcbiAgXCJuYmMtbmV3c1wiOiB7XG4gICAgXCJTT1VSQ0VfTkFNRVwiOiBcIk5CQyBOZXdzXCIsXG4gICAgXCJTT1VSQ0VfSURcIjogXCJuYmMtbmV3c1wiLFxuICAgIFwiS0VZXCI6IFwiU09VUkNFX1wiICsgVXRpbHMuZ2VuZXJhdGVSYW5kb21TdHJpbmcoNSlcbiAgfSxcbiAgXCJuZXdzMjRcIjoge1xuICAgIFwiU09VUkNFX05BTUVcIjogXCJOZXdzMjRcIixcbiAgICBcIlNPVVJDRV9JRFwiOiBcIm5ld3MyNFwiLFxuICAgIFwiS0VZXCI6IFwiU09VUkNFX1wiICsgVXRpbHMuZ2VuZXJhdGVSYW5kb21TdHJpbmcoNSlcbiAgfSxcbiAgXCJuZXctc2NpZW50aXN0XCI6IHtcbiAgICBcIlNPVVJDRV9OQU1FXCI6IFwiTmV3IFNjaWVudGlzdFwiLFxuICAgIFwiU09VUkNFX0lEXCI6IFwibmV3LXNjaWVudGlzdFwiLFxuICAgIFwiS0VZXCI6IFwiU09VUkNFX1wiICsgVXRpbHMuZ2VuZXJhdGVSYW5kb21TdHJpbmcoNSlcbiAgfSxcbiAgXCJuZXdzLWNvbS1hdVwiOiB7XG4gICAgXCJTT1VSQ0VfTkFNRVwiOiBcIk5ld3MuY29tLmF1XCIsXG4gICAgXCJTT1VSQ0VfSURcIjogXCJuZXdzLWNvbS1hdVwiLFxuICAgIFwiS0VZXCI6IFwiU09VUkNFX1wiICsgVXRpbHMuZ2VuZXJhdGVSYW5kb21TdHJpbmcoNSlcbiAgfSxcbiAgXCJuZXdzd2Vla1wiOiB7XG4gICAgXCJTT1VSQ0VfTkFNRVwiOiBcIk5ld3N3ZWVrXCIsXG4gICAgXCJTT1VSQ0VfSURcIjogXCJuZXdzd2Vla1wiLFxuICAgIFwiS0VZXCI6IFwiU09VUkNFX1wiICsgVXRpbHMuZ2VuZXJhdGVSYW5kb21TdHJpbmcoNSlcbiAgfSxcbiAgXCJuZXcteW9yay1tYWdhemluZVwiOiB7XG4gICAgXCJTT1VSQ0VfTkFNRVwiOiBcIk5ldyBZb3JrIE1hZ2F6aW5lXCIsXG4gICAgXCJTT1VSQ0VfSURcIjogXCJuZXcteW9yay1tYWdhemluZVwiLFxuICAgIFwiS0VZXCI6IFwiU09VUkNFX1wiICsgVXRpbHMuZ2VuZXJhdGVSYW5kb21TdHJpbmcoNSlcbiAgfSxcbiAgXCJuZXh0LWJpZy1mdXR1cmVcIjoge1xuICAgIFwiU09VUkNFX05BTUVcIjogXCJOZXh0IEJpZyBGdXR1cmVcIixcbiAgICBcIlNPVVJDRV9JRFwiOiBcIm5leHQtYmlnLWZ1dHVyZVwiLFxuICAgIFwiS0VZXCI6IFwiU09VUkNFX1wiICsgVXRpbHMuZ2VuZXJhdGVSYW5kb21TdHJpbmcoNSlcbiAgfSxcbiAgXCJuZmwtbmV3c1wiOiB7XG4gICAgXCJTT1VSQ0VfTkFNRVwiOiBcIk5GTCBOZXdzXCIsXG4gICAgXCJTT1VSQ0VfSURcIjogXCJuZmwtbmV3c1wiLFxuICAgIFwiS0VZXCI6IFwiU09VUkNFX1wiICsgVXRpbHMuZ2VuZXJhdGVSYW5kb21TdHJpbmcoNSlcbiAgfSxcbiAgXCJuaGwtbmV3c1wiOiB7XG4gICAgXCJTT1VSQ0VfTkFNRVwiOiBcIk5ITCBOZXdzXCIsXG4gICAgXCJTT1VSQ0VfSURcIjogXCJuaGwtbmV3c1wiLFxuICAgIFwiS0VZXCI6IFwiU09VUkNFX1wiICsgVXRpbHMuZ2VuZXJhdGVSYW5kb21TdHJpbmcoNSlcbiAgfSxcbiAgXCJucmtcIjoge1xuICAgIFwiU09VUkNFX05BTUVcIjogXCJOUktcIixcbiAgICBcIlNPVVJDRV9JRFwiOiBcIm5ya1wiLFxuICAgIFwiS0VZXCI6IFwiU09VUkNFX1wiICsgVXRpbHMuZ2VuZXJhdGVSYW5kb21TdHJpbmcoNSlcbiAgfSxcbiAgXCJwb2xpdGljb1wiOiB7XG4gICAgXCJTT1VSQ0VfTkFNRVwiOiBcIlBvbGl0aWNvXCIsXG4gICAgXCJTT1VSQ0VfSURcIjogXCJwb2xpdGljb1wiLFxuICAgIFwiS0VZXCI6IFwiU09VUkNFX1wiICsgVXRpbHMuZ2VuZXJhdGVSYW5kb21TdHJpbmcoNSlcbiAgfSxcbiAgXCJwb2x5Z29uXCI6IHtcbiAgICBcIlNPVVJDRV9OQU1FXCI6IFwiUG9seWdvblwiLFxuICAgIFwiU09VUkNFX0lEXCI6IFwicG9seWdvblwiLFxuICAgIFwiS0VZXCI6IFwiU09VUkNFX1wiICsgVXRpbHMuZ2VuZXJhdGVSYW5kb21TdHJpbmcoNSlcbiAgfSxcbiAgXCJyYmNcIjoge1xuICAgIFwiU09VUkNFX05BTUVcIjogXCJSQkNcIixcbiAgICBcIlNPVVJDRV9JRFwiOiBcInJiY1wiLFxuICAgIFwiS0VZXCI6IFwiU09VUkNFX1wiICsgVXRpbHMuZ2VuZXJhdGVSYW5kb21TdHJpbmcoNSlcbiAgfSxcbiAgXCJyZWNvZGVcIjoge1xuICAgIFwiU09VUkNFX05BTUVcIjogXCJSZWNvZGVcIixcbiAgICBcIlNPVVJDRV9JRFwiOiBcInJlY29kZVwiLFxuICAgIFwiS0VZXCI6IFwiU09VUkNFX1wiICsgVXRpbHMuZ2VuZXJhdGVSYW5kb21TdHJpbmcoNSlcbiAgfSxcbiAgXCJyZWRkaXQtci1hbGxcIjoge1xuICAgIFwiU09VUkNFX05BTUVcIjogXCJSZWRkaXQgL3IvYWxsXCIsXG4gICAgXCJTT1VSQ0VfSURcIjogXCJyZWRkaXQtci1hbGxcIixcbiAgICBcIktFWVwiOiBcIlNPVVJDRV9cIiArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpXG4gIH0sXG4gIFwicmV1dGVyc1wiOiB7XG4gICAgXCJTT1VSQ0VfTkFNRVwiOiBcIlJldXRlcnNcIixcbiAgICBcIlNPVVJDRV9JRFwiOiBcInJldXRlcnNcIixcbiAgICBcIktFWVwiOiBcIlNPVVJDRV9cIiArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpXG4gIH0sXG4gIFwicnRcIjoge1xuICAgIFwiU09VUkNFX05BTUVcIjogXCJSVFwiLFxuICAgIFwiU09VUkNFX0lEXCI6IFwicnRcIixcbiAgICBcIktFWVwiOiBcIlNPVVJDRV9cIiArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpXG4gIH0sXG4gIFwicnRlXCI6IHtcbiAgICBcIlNPVVJDRV9OQU1FXCI6IFwiUlRFXCIsXG4gICAgXCJTT1VSQ0VfSURcIjogXCJydGVcIixcbiAgICBcIktFWVwiOiBcIlNPVVJDRV9cIiArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpXG4gIH0sXG4gIFwicnRsLW5pZXV3c1wiOiB7XG4gICAgXCJTT1VSQ0VfTkFNRVwiOiBcIlJUTCBOaWV1d3NcIixcbiAgICBcIlNPVVJDRV9JRFwiOiBcInJ0bC1uaWV1d3NcIixcbiAgICBcIktFWVwiOiBcIlNPVVJDRV9cIiArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpXG4gIH0sXG4gIFwic2FicVwiOiB7XG4gICAgXCJTT1VSQ0VfTkFNRVwiOiBcIlNBQlFcIixcbiAgICBcIlNPVVJDRV9JRFwiOiBcInNhYnFcIixcbiAgICBcIktFWVwiOiBcIlNPVVJDRV9cIiArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpXG4gIH0sXG4gIFwic3BpZWdlbC1vbmxpbmVcIjoge1xuICAgIFwiU09VUkNFX05BTUVcIjogXCJTcGllZ2VsIE9ubGluZVwiLFxuICAgIFwiU09VUkNFX0lEXCI6IFwic3BpZWdlbC1vbmxpbmVcIixcbiAgICBcIktFWVwiOiBcIlNPVVJDRV9cIiArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpXG4gIH0sXG4gIFwic3ZlbnNrYS1kYWdibGFkZXRcIjoge1xuICAgIFwiU09VUkNFX05BTUVcIjogXCJTdmVuc2thIERhZ2JsYWRldFwiLFxuICAgIFwiU09VUkNFX0lEXCI6IFwic3ZlbnNrYS1kYWdibGFkZXRcIixcbiAgICBcIktFWVwiOiBcIlNPVVJDRV9cIiArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpXG4gIH0sXG4gIFwidDNuXCI6IHtcbiAgICBcIlNPVVJDRV9OQU1FXCI6IFwiVDNuXCIsXG4gICAgXCJTT1VSQ0VfSURcIjogXCJ0M25cIixcbiAgICBcIktFWVwiOiBcIlNPVVJDRV9cIiArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpXG4gIH0sXG4gIFwidGFsa3Nwb3J0XCI6IHtcbiAgICBcIlNPVVJDRV9OQU1FXCI6IFwiVGFsa1Nwb3J0XCIsXG4gICAgXCJTT1VSQ0VfSURcIjogXCJ0YWxrc3BvcnRcIixcbiAgICBcIktFWVwiOiBcIlNPVVJDRV9cIiArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpXG4gIH0sXG4gIFwidGVjaGNydW5jaFwiOiB7XG4gICAgXCJTT1VSQ0VfTkFNRVwiOiBcIlRlY2hDcnVuY2hcIixcbiAgICBcIlNPVVJDRV9JRFwiOiBcInRlY2hjcnVuY2hcIixcbiAgICBcIktFWVwiOiBcIlNPVVJDRV9cIiArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpXG4gIH0sXG4gIFwidGVjaGNydW5jaC1jblwiOiB7XG4gICAgXCJTT1VSQ0VfTkFNRVwiOiBcIlRlY2hDcnVuY2ggKENOKVwiLFxuICAgIFwiU09VUkNFX0lEXCI6IFwidGVjaGNydW5jaC1jblwiLFxuICAgIFwiS0VZXCI6IFwiU09VUkNFX1wiICsgVXRpbHMuZ2VuZXJhdGVSYW5kb21TdHJpbmcoNSlcbiAgfSxcbiAgXCJ0ZWNocmFkYXJcIjoge1xuICAgIFwiU09VUkNFX05BTUVcIjogXCJUZWNoUmFkYXJcIixcbiAgICBcIlNPVVJDRV9JRFwiOiBcInRlY2hyYWRhclwiLFxuICAgIFwiS0VZXCI6IFwiU09VUkNFX1wiICsgVXRpbHMuZ2VuZXJhdGVSYW5kb21TdHJpbmcoNSlcbiAgfSxcbiAgXCJ0aGUtYW1lcmljYW4tY29uc2VydmF0aXZlXCI6IHtcbiAgICBcIlNPVVJDRV9OQU1FXCI6IFwiVGhlIEFtZXJpY2FuIENvbnNlcnZhdGl2ZVwiLFxuICAgIFwiU09VUkNFX0lEXCI6IFwidGhlLWFtZXJpY2FuLWNvbnNlcnZhdGl2ZVwiLFxuICAgIFwiS0VZXCI6IFwiU09VUkNFX1wiICsgVXRpbHMuZ2VuZXJhdGVSYW5kb21TdHJpbmcoNSlcbiAgfSxcbiAgXCJ0aGUtZWNvbm9taXN0XCI6IHtcbiAgICBcIlNPVVJDRV9OQU1FXCI6IFwiVGhlIEVjb25vbWlzdFwiLFxuICAgIFwiU09VUkNFX0lEXCI6IFwidGhlLWVjb25vbWlzdFwiLFxuICAgIFwiS0VZXCI6IFwiU09VUkNFX1wiICsgVXRpbHMuZ2VuZXJhdGVSYW5kb21TdHJpbmcoNSlcbiAgfSxcbiAgXCJ0aGUtZ2xvYmUtYW5kLW1haWxcIjoge1xuICAgIFwiU09VUkNFX05BTUVcIjogXCJUaGUgR2xvYmUgQW5kIE1haWxcIixcbiAgICBcIlNPVVJDRV9JRFwiOiBcInRoZS1nbG9iZS1hbmQtbWFpbFwiLFxuICAgIFwiS0VZXCI6IFwiU09VUkNFX1wiICsgVXRpbHMuZ2VuZXJhdGVSYW5kb21TdHJpbmcoNSlcbiAgfSxcbiAgXCJ0aGUtZ3VhcmRpYW4tYXVcIjoge1xuICAgIFwiU09VUkNFX05BTUVcIjogXCJUaGUgR3VhcmRpYW4gKEFVKVwiLFxuICAgIFwiU09VUkNFX0lEXCI6IFwidGhlLWd1YXJkaWFuLWF1XCIsXG4gICAgXCJLRVlcIjogXCJTT1VSQ0VfXCIgKyBVdGlscy5nZW5lcmF0ZVJhbmRvbVN0cmluZyg1KVxuICB9LFxuICBcInRoZS1ndWFyZGlhbi11a1wiOiB7XG4gICAgXCJTT1VSQ0VfTkFNRVwiOiBcIlRoZSBHdWFyZGlhbiAoVUspXCIsXG4gICAgXCJTT1VSQ0VfSURcIjogXCJ0aGUtZ3VhcmRpYW4tdWtcIixcbiAgICBcIktFWVwiOiBcIlNPVVJDRV9cIiArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpXG4gIH0sXG4gIFwidGhlLWhpbGxcIjoge1xuICAgIFwiU09VUkNFX05BTUVcIjogXCJUaGUgSGlsbFwiLFxuICAgIFwiU09VUkNFX0lEXCI6IFwidGhlLWhpbGxcIixcbiAgICBcIktFWVwiOiBcIlNPVVJDRV9cIiArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpXG4gIH0sXG4gIFwidGhlLWhpbmR1XCI6IHtcbiAgICBcIlNPVVJDRV9OQU1FXCI6IFwiVGhlIEhpbmR1XCIsXG4gICAgXCJTT1VSQ0VfSURcIjogXCJ0aGUtaGluZHVcIixcbiAgICBcIktFWVwiOiBcIlNPVVJDRV9cIiArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpXG4gIH0sXG4gIFwidGhlLWh1ZmZpbmd0b24tcG9zdFwiOiB7XG4gICAgXCJTT1VSQ0VfTkFNRVwiOiBcIlRoZSBIdWZmaW5ndG9uIFBvc3RcIixcbiAgICBcIlNPVVJDRV9JRFwiOiBcInRoZS1odWZmaW5ndG9uLXBvc3RcIixcbiAgICBcIktFWVwiOiBcIlNPVVJDRV9cIiArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpXG4gIH0sXG4gIFwidGhlLWlyaXNoLXRpbWVzXCI6IHtcbiAgICBcIlNPVVJDRV9OQU1FXCI6IFwiVGhlIElyaXNoIFRpbWVzXCIsXG4gICAgXCJTT1VSQ0VfSURcIjogXCJ0aGUtaXJpc2gtdGltZXNcIixcbiAgICBcIktFWVwiOiBcIlNPVVJDRV9cIiArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpXG4gIH0sXG4gIFwidGhlLWxhZC1iaWJsZVwiOiB7XG4gICAgXCJTT1VSQ0VfTkFNRVwiOiBcIlRoZSBMYWQgQmlibGVcIixcbiAgICBcIlNPVVJDRV9JRFwiOiBcInRoZS1sYWQtYmlibGVcIixcbiAgICBcIktFWVwiOiBcIlNPVVJDRV9cIiArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpXG4gIH0sXG4gIFwidGhlLW5ldy15b3JrLXRpbWVzXCI6IHtcbiAgICBcIlNPVVJDRV9OQU1FXCI6IFwiVGhlIE5ldyBZb3JrIFRpbWVzXCIsXG4gICAgXCJTT1VSQ0VfSURcIjogXCJ0aGUtbmV3LXlvcmstdGltZXNcIixcbiAgICBcIktFWVwiOiBcIlNPVVJDRV9cIiArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpXG4gIH0sXG4gIFwidGhlLW5leHQtd2ViXCI6IHtcbiAgICBcIlNPVVJDRV9OQU1FXCI6IFwiVGhlIE5leHQgV2ViXCIsXG4gICAgXCJTT1VSQ0VfSURcIjogXCJ0aGUtbmV4dC13ZWJcIixcbiAgICBcIktFWVwiOiBcIlNPVVJDRV9cIiArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpXG4gIH0sXG4gIFwidGhlLXNwb3J0LWJpYmxlXCI6IHtcbiAgICBcIlNPVVJDRV9OQU1FXCI6IFwiVGhlIFNwb3J0IEJpYmxlXCIsXG4gICAgXCJTT1VSQ0VfSURcIjogXCJ0aGUtc3BvcnQtYmlibGVcIixcbiAgICBcIktFWVwiOiBcIlNPVVJDRV9cIiArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpXG4gIH0sXG4gIFwidGhlLXRlbGVncmFwaFwiOiB7XG4gICAgXCJTT1VSQ0VfTkFNRVwiOiBcIlRoZSBUZWxlZ3JhcGhcIixcbiAgICBcIlNPVVJDRV9JRFwiOiBcInRoZS10ZWxlZ3JhcGhcIixcbiAgICBcIktFWVwiOiBcIlNPVVJDRV9cIiArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpXG4gIH0sXG4gIFwidGhlLXRpbWVzLW9mLWluZGlhXCI6IHtcbiAgICBcIlNPVVJDRV9OQU1FXCI6IFwiVGhlIFRpbWVzIG9mIEluZGlhXCIsXG4gICAgXCJTT1VSQ0VfSURcIjogXCJ0aGUtdGltZXMtb2YtaW5kaWFcIixcbiAgICBcIktFWVwiOiBcIlNPVVJDRV9cIiArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpXG4gIH0sXG4gIFwidGhlLXZlcmdlXCI6IHtcbiAgICBcIlNPVVJDRV9OQU1FXCI6IFwiVGhlIFZlcmdlXCIsXG4gICAgXCJTT1VSQ0VfSURcIjogXCJ0aGUtdmVyZ2VcIixcbiAgICBcIktFWVwiOiBcIlNPVVJDRV9cIiArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpXG4gIH0sXG4gIFwidGhlLXdhbGwtc3RyZWV0LWpvdXJuYWxcIjoge1xuICAgIFwiU09VUkNFX05BTUVcIjogXCJUaGUgV2FsbCBTdHJlZXQgSm91cm5hbFwiLFxuICAgIFwiU09VUkNFX0lEXCI6IFwidGhlLXdhbGwtc3RyZWV0LWpvdXJuYWxcIixcbiAgICBcIktFWVwiOiBcIlNPVVJDRV9cIiArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpXG4gIH0sXG4gIFwidGhlLXdhc2hpbmd0b24tcG9zdFwiOiB7XG4gICAgXCJTT1VSQ0VfTkFNRVwiOiBcIlRoZSBXYXNoaW5ndG9uIFBvc3RcIixcbiAgICBcIlNPVVJDRV9JRFwiOiBcInRoZS13YXNoaW5ndG9uLXBvc3RcIixcbiAgICBcIktFWVwiOiBcIlNPVVJDRV9cIiArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpXG4gIH0sXG4gIFwidGhlLXdhc2hpbmd0b24tdGltZXNcIjoge1xuICAgIFwiU09VUkNFX05BTUVcIjogXCJUaGUgV2FzaGluZ3RvbiBUaW1lc1wiLFxuICAgIFwiU09VUkNFX0lEXCI6IFwidGhlLXdhc2hpbmd0b24tdGltZXNcIixcbiAgICBcIktFWVwiOiBcIlNPVVJDRV9cIiArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpXG4gIH0sXG4gIFwidGltZVwiOiB7XG4gICAgXCJTT1VSQ0VfTkFNRVwiOiBcIlRpbWVcIixcbiAgICBcIlNPVVJDRV9JRFwiOiBcInRpbWVcIixcbiAgICBcIktFWVwiOiBcIlNPVVJDRV9cIiArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpXG4gIH0sXG4gIFwidXNhLXRvZGF5XCI6IHtcbiAgICBcIlNPVVJDRV9OQU1FXCI6IFwiVVNBIFRvZGF5XCIsXG4gICAgXCJTT1VSQ0VfSURcIjogXCJ1c2EtdG9kYXlcIixcbiAgICBcIktFWVwiOiBcIlNPVVJDRV9cIiArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpXG4gIH0sXG4gIFwidmljZS1uZXdzXCI6IHtcbiAgICBcIlNPVVJDRV9OQU1FXCI6IFwiVmljZSBOZXdzXCIsXG4gICAgXCJTT1VSQ0VfSURcIjogXCJ2aWNlLW5ld3NcIixcbiAgICBcIktFWVwiOiBcIlNPVVJDRV9cIiArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpXG4gIH0sXG4gIFwid2lyZWRcIjoge1xuICAgIFwiU09VUkNFX05BTUVcIjogXCJXaXJlZFwiLFxuICAgIFwiU09VUkNFX0lEXCI6IFwid2lyZWRcIixcbiAgICBcIktFWVwiOiBcIlNPVVJDRV9cIiArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpXG4gIH0sXG4gIFwid2lyZWQtZGVcIjoge1xuICAgIFwiU09VUkNFX05BTUVcIjogXCJXaXJlZC5kZVwiLFxuICAgIFwiU09VUkNFX0lEXCI6IFwid2lyZWQtZGVcIixcbiAgICBcIktFWVwiOiBcIlNPVVJDRV9cIiArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpXG4gIH0sXG4gIFwid2lydHNjaGFmdHMtd29jaGVcIjoge1xuICAgIFwiU09VUkNFX05BTUVcIjogXCJXaXJ0c2NoYWZ0cyBXb2NoZVwiLFxuICAgIFwiU09VUkNFX0lEXCI6IFwid2lydHNjaGFmdHMtd29jaGVcIixcbiAgICBcIktFWVwiOiBcIlNPVVJDRV9cIiArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpXG4gIH0sXG4gIFwieGluaHVhLW5ldFwiOiB7XG4gICAgXCJTT1VSQ0VfTkFNRVwiOiBcIlhpbmh1YSBOZXRcIixcbiAgICBcIlNPVVJDRV9JRFwiOiBcInhpbmh1YS1uZXRcIixcbiAgICBcIktFWVwiOiBcIlNPVVJDRV9cIiArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpXG4gIH0sXG4gIFwieW5ldFwiOiB7XG4gICAgXCJTT1VSQ0VfTkFNRVwiOiBcIlluZXRcIixcbiAgICBcIlNPVVJDRV9JRFwiOiBcInluZXRcIixcbiAgICBcIktFWVwiOiBcIlNPVVJDRV9cIiArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpXG4gIH1cbn1cbiIsImV4cG9ydCBjb25zdCBORVdTX0FQSV9LRVkgPSAnMGZkZjk0MTRhZDc1NDQ2MDk5ZGQwMzhjNTkwZDM3YTgnO1xuXG5leHBvcnQgY29uc3QgRVZFTlRTID0ge1xuICBLRVlVUDoge1xuICAgIG5hbWU6ICdrZXl1cCdcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgS0VZQ09ERVMgPSB7XG4gIEVOVEVSOiAxM1xufSIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBBIGBDYW5jZWxgIGlzIGFuIG9iamVjdCB0aGF0IGlzIHRocm93biB3aGVuIGFuIG9wZXJhdGlvbiBpcyBjYW5jZWxlZC5cbiAqXG4gKiBAY2xhc3NcbiAqIEBwYXJhbSB7c3RyaW5nPX0gbWVzc2FnZSBUaGUgbWVzc2FnZS5cbiAqL1xuZnVuY3Rpb24gQ2FuY2VsKG1lc3NhZ2UpIHtcbiAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbn1cblxuQ2FuY2VsLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gJ0NhbmNlbCcgKyAodGhpcy5tZXNzYWdlID8gJzogJyArIHRoaXMubWVzc2FnZSA6ICcnKTtcbn07XG5cbkNhbmNlbC5wcm90b3R5cGUuX19DQU5DRUxfXyA9IHRydWU7XG5cbm1vZHVsZS5leHBvcnRzID0gQ2FuY2VsO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQ2FuY2VsKHZhbHVlKSB7XG4gIHJldHVybiAhISh2YWx1ZSAmJiB2YWx1ZS5fX0NBTkNFTF9fKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBlbmhhbmNlRXJyb3IgPSByZXF1aXJlKCcuL2VuaGFuY2VFcnJvcicpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgbWVzc2FnZSwgY29uZmlnLCBlcnJvciBjb2RlLCByZXF1ZXN0IGFuZCByZXNwb25zZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBUaGUgZXJyb3IgbWVzc2FnZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgY3JlYXRlZCBlcnJvci5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjcmVhdGVFcnJvcihtZXNzYWdlLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIHZhciBlcnJvciA9IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgcmV0dXJuIGVuaGFuY2VFcnJvcihlcnJvciwgY29uZmlnLCBjb2RlLCByZXF1ZXN0LCByZXNwb25zZSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG52YXIgc2V0dGxlID0gcmVxdWlyZSgnLi8uLi9jb3JlL3NldHRsZScpO1xudmFyIGJ1aWxkVVJMID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2J1aWxkVVJMJyk7XG52YXIgcGFyc2VIZWFkZXJzID0gcmVxdWlyZSgnLi8uLi9oZWxwZXJzL3BhcnNlSGVhZGVycycpO1xudmFyIGlzVVJMU2FtZU9yaWdpbiA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9pc1VSTFNhbWVPcmlnaW4nKTtcbnZhciBjcmVhdGVFcnJvciA9IHJlcXVpcmUoJy4uL2NvcmUvY3JlYXRlRXJyb3InKTtcbnZhciBidG9hID0gKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5idG9hICYmIHdpbmRvdy5idG9hLmJpbmQod2luZG93KSkgfHwgcmVxdWlyZSgnLi8uLi9oZWxwZXJzL2J0b2EnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiB4aHJBZGFwdGVyKGNvbmZpZykge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gZGlzcGF0Y2hYaHJSZXF1ZXN0KHJlc29sdmUsIHJlamVjdCkge1xuICAgIHZhciByZXF1ZXN0RGF0YSA9IGNvbmZpZy5kYXRhO1xuICAgIHZhciByZXF1ZXN0SGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzO1xuXG4gICAgaWYgKHV0aWxzLmlzRm9ybURhdGEocmVxdWVzdERhdGEpKSB7XG4gICAgICBkZWxldGUgcmVxdWVzdEhlYWRlcnNbJ0NvbnRlbnQtVHlwZSddOyAvLyBMZXQgdGhlIGJyb3dzZXIgc2V0IGl0XG4gICAgfVxuXG4gICAgdmFyIHJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICB2YXIgbG9hZEV2ZW50ID0gJ29ucmVhZHlzdGF0ZWNoYW5nZSc7XG4gICAgdmFyIHhEb21haW4gPSBmYWxzZTtcblxuICAgIC8vIEZvciBJRSA4LzkgQ09SUyBzdXBwb3J0XG4gICAgLy8gT25seSBzdXBwb3J0cyBQT1NUIGFuZCBHRVQgY2FsbHMgYW5kIGRvZXNuJ3QgcmV0dXJucyB0aGUgcmVzcG9uc2UgaGVhZGVycy5cbiAgICAvLyBET04nVCBkbyB0aGlzIGZvciB0ZXN0aW5nIGIvYyBYTUxIdHRwUmVxdWVzdCBpcyBtb2NrZWQsIG5vdCBYRG9tYWluUmVxdWVzdC5cbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICd0ZXN0JyAmJlxuICAgICAgICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICB3aW5kb3cuWERvbWFpblJlcXVlc3QgJiYgISgnd2l0aENyZWRlbnRpYWxzJyBpbiByZXF1ZXN0KSAmJlxuICAgICAgICAhaXNVUkxTYW1lT3JpZ2luKGNvbmZpZy51cmwpKSB7XG4gICAgICByZXF1ZXN0ID0gbmV3IHdpbmRvdy5YRG9tYWluUmVxdWVzdCgpO1xuICAgICAgbG9hZEV2ZW50ID0gJ29ubG9hZCc7XG4gICAgICB4RG9tYWluID0gdHJ1ZTtcbiAgICAgIHJlcXVlc3Qub25wcm9ncmVzcyA9IGZ1bmN0aW9uIGhhbmRsZVByb2dyZXNzKCkge307XG4gICAgICByZXF1ZXN0Lm9udGltZW91dCA9IGZ1bmN0aW9uIGhhbmRsZVRpbWVvdXQoKSB7fTtcbiAgICB9XG5cbiAgICAvLyBIVFRQIGJhc2ljIGF1dGhlbnRpY2F0aW9uXG4gICAgaWYgKGNvbmZpZy5hdXRoKSB7XG4gICAgICB2YXIgdXNlcm5hbWUgPSBjb25maWcuYXV0aC51c2VybmFtZSB8fCAnJztcbiAgICAgIHZhciBwYXNzd29yZCA9IGNvbmZpZy5hdXRoLnBhc3N3b3JkIHx8ICcnO1xuICAgICAgcmVxdWVzdEhlYWRlcnMuQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgYnRvYSh1c2VybmFtZSArICc6JyArIHBhc3N3b3JkKTtcbiAgICB9XG5cbiAgICByZXF1ZXN0Lm9wZW4oY29uZmlnLm1ldGhvZC50b1VwcGVyQ2FzZSgpLCBidWlsZFVSTChjb25maWcudXJsLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplciksIHRydWUpO1xuXG4gICAgLy8gU2V0IHRoZSByZXF1ZXN0IHRpbWVvdXQgaW4gTVNcbiAgICByZXF1ZXN0LnRpbWVvdXQgPSBjb25maWcudGltZW91dDtcblxuICAgIC8vIExpc3RlbiBmb3IgcmVhZHkgc3RhdGVcbiAgICByZXF1ZXN0W2xvYWRFdmVudF0gPSBmdW5jdGlvbiBoYW5kbGVMb2FkKCkge1xuICAgICAgaWYgKCFyZXF1ZXN0IHx8IChyZXF1ZXN0LnJlYWR5U3RhdGUgIT09IDQgJiYgIXhEb21haW4pKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gVGhlIHJlcXVlc3QgZXJyb3JlZCBvdXQgYW5kIHdlIGRpZG4ndCBnZXQgYSByZXNwb25zZSwgdGhpcyB3aWxsIGJlXG4gICAgICAvLyBoYW5kbGVkIGJ5IG9uZXJyb3IgaW5zdGVhZFxuICAgICAgLy8gV2l0aCBvbmUgZXhjZXB0aW9uOiByZXF1ZXN0IHRoYXQgdXNpbmcgZmlsZTogcHJvdG9jb2wsIG1vc3QgYnJvd3NlcnNcbiAgICAgIC8vIHdpbGwgcmV0dXJuIHN0YXR1cyBhcyAwIGV2ZW4gdGhvdWdoIGl0J3MgYSBzdWNjZXNzZnVsIHJlcXVlc3RcbiAgICAgIGlmIChyZXF1ZXN0LnN0YXR1cyA9PT0gMCAmJiAhKHJlcXVlc3QucmVzcG9uc2VVUkwgJiYgcmVxdWVzdC5yZXNwb25zZVVSTC5pbmRleE9mKCdmaWxlOicpID09PSAwKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIFByZXBhcmUgdGhlIHJlc3BvbnNlXG4gICAgICB2YXIgcmVzcG9uc2VIZWFkZXJzID0gJ2dldEFsbFJlc3BvbnNlSGVhZGVycycgaW4gcmVxdWVzdCA/IHBhcnNlSGVhZGVycyhyZXF1ZXN0LmdldEFsbFJlc3BvbnNlSGVhZGVycygpKSA6IG51bGw7XG4gICAgICB2YXIgcmVzcG9uc2VEYXRhID0gIWNvbmZpZy5yZXNwb25zZVR5cGUgfHwgY29uZmlnLnJlc3BvbnNlVHlwZSA9PT0gJ3RleHQnID8gcmVxdWVzdC5yZXNwb25zZVRleHQgOiByZXF1ZXN0LnJlc3BvbnNlO1xuICAgICAgdmFyIHJlc3BvbnNlID0ge1xuICAgICAgICBkYXRhOiByZXNwb25zZURhdGEsXG4gICAgICAgIC8vIElFIHNlbmRzIDEyMjMgaW5zdGVhZCBvZiAyMDQgKGh0dHBzOi8vZ2l0aHViLmNvbS9heGlvcy9heGlvcy9pc3N1ZXMvMjAxKVxuICAgICAgICBzdGF0dXM6IHJlcXVlc3Quc3RhdHVzID09PSAxMjIzID8gMjA0IDogcmVxdWVzdC5zdGF0dXMsXG4gICAgICAgIHN0YXR1c1RleHQ6IHJlcXVlc3Quc3RhdHVzID09PSAxMjIzID8gJ05vIENvbnRlbnQnIDogcmVxdWVzdC5zdGF0dXNUZXh0LFxuICAgICAgICBoZWFkZXJzOiByZXNwb25zZUhlYWRlcnMsXG4gICAgICAgIGNvbmZpZzogY29uZmlnLFxuICAgICAgICByZXF1ZXN0OiByZXF1ZXN0XG4gICAgICB9O1xuXG4gICAgICBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCByZXNwb25zZSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgbG93IGxldmVsIG5ldHdvcmsgZXJyb3JzXG4gICAgcmVxdWVzdC5vbmVycm9yID0gZnVuY3Rpb24gaGFuZGxlRXJyb3IoKSB7XG4gICAgICAvLyBSZWFsIGVycm9ycyBhcmUgaGlkZGVuIGZyb20gdXMgYnkgdGhlIGJyb3dzZXJcbiAgICAgIC8vIG9uZXJyb3Igc2hvdWxkIG9ubHkgZmlyZSBpZiBpdCdzIGEgbmV0d29yayBlcnJvclxuICAgICAgcmVqZWN0KGNyZWF0ZUVycm9yKCdOZXR3b3JrIEVycm9yJywgY29uZmlnLCBudWxsLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgdGltZW91dFxuICAgIHJlcXVlc3Qub250aW1lb3V0ID0gZnVuY3Rpb24gaGFuZGxlVGltZW91dCgpIHtcbiAgICAgIHJlamVjdChjcmVhdGVFcnJvcigndGltZW91dCBvZiAnICsgY29uZmlnLnRpbWVvdXQgKyAnbXMgZXhjZWVkZWQnLCBjb25maWcsICdFQ09OTkFCT1JURUQnLFxuICAgICAgICByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAvLyBUaGlzIGlzIG9ubHkgZG9uZSBpZiBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudC5cbiAgICAvLyBTcGVjaWZpY2FsbHkgbm90IGlmIHdlJ3JlIGluIGEgd2ViIHdvcmtlciwgb3IgcmVhY3QtbmF0aXZlLlxuICAgIGlmICh1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpKSB7XG4gICAgICB2YXIgY29va2llcyA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9jb29raWVzJyk7XG5cbiAgICAgIC8vIEFkZCB4c3JmIGhlYWRlclxuICAgICAgdmFyIHhzcmZWYWx1ZSA9IChjb25maWcud2l0aENyZWRlbnRpYWxzIHx8IGlzVVJMU2FtZU9yaWdpbihjb25maWcudXJsKSkgJiYgY29uZmlnLnhzcmZDb29raWVOYW1lID9cbiAgICAgICAgICBjb29raWVzLnJlYWQoY29uZmlnLnhzcmZDb29raWVOYW1lKSA6XG4gICAgICAgICAgdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoeHNyZlZhbHVlKSB7XG4gICAgICAgIHJlcXVlc3RIZWFkZXJzW2NvbmZpZy54c3JmSGVhZGVyTmFtZV0gPSB4c3JmVmFsdWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQWRkIGhlYWRlcnMgdG8gdGhlIHJlcXVlc3RcbiAgICBpZiAoJ3NldFJlcXVlc3RIZWFkZXInIGluIHJlcXVlc3QpIHtcbiAgICAgIHV0aWxzLmZvckVhY2gocmVxdWVzdEhlYWRlcnMsIGZ1bmN0aW9uIHNldFJlcXVlc3RIZWFkZXIodmFsLCBrZXkpIHtcbiAgICAgICAgaWYgKHR5cGVvZiByZXF1ZXN0RGF0YSA9PT0gJ3VuZGVmaW5lZCcgJiYga2V5LnRvTG93ZXJDYXNlKCkgPT09ICdjb250ZW50LXR5cGUnKSB7XG4gICAgICAgICAgLy8gUmVtb3ZlIENvbnRlbnQtVHlwZSBpZiBkYXRhIGlzIHVuZGVmaW5lZFxuICAgICAgICAgIGRlbGV0ZSByZXF1ZXN0SGVhZGVyc1trZXldO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIE90aGVyd2lzZSBhZGQgaGVhZGVyIHRvIHRoZSByZXF1ZXN0XG4gICAgICAgICAgcmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKGtleSwgdmFsKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gQWRkIHdpdGhDcmVkZW50aWFscyB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmIChjb25maWcud2l0aENyZWRlbnRpYWxzKSB7XG4gICAgICByZXF1ZXN0LndpdGhDcmVkZW50aWFscyA9IHRydWU7XG4gICAgfVxuXG4gICAgLy8gQWRkIHJlc3BvbnNlVHlwZSB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmIChjb25maWcucmVzcG9uc2VUeXBlKSB7XG4gICAgICB0cnkge1xuICAgICAgICByZXF1ZXN0LnJlc3BvbnNlVHlwZSA9IGNvbmZpZy5yZXNwb25zZVR5cGU7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIEV4cGVjdGVkIERPTUV4Y2VwdGlvbiB0aHJvd24gYnkgYnJvd3NlcnMgbm90IGNvbXBhdGlibGUgWE1MSHR0cFJlcXVlc3QgTGV2ZWwgMi5cbiAgICAgICAgLy8gQnV0LCB0aGlzIGNhbiBiZSBzdXBwcmVzc2VkIGZvciAnanNvbicgdHlwZSBhcyBpdCBjYW4gYmUgcGFyc2VkIGJ5IGRlZmF1bHQgJ3RyYW5zZm9ybVJlc3BvbnNlJyBmdW5jdGlvbi5cbiAgICAgICAgaWYgKGNvbmZpZy5yZXNwb25zZVR5cGUgIT09ICdqc29uJykge1xuICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgcHJvZ3Jlc3MgaWYgbmVlZGVkXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25Eb3dubG9hZFByb2dyZXNzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcyk7XG4gICAgfVxuXG4gICAgLy8gTm90IGFsbCBicm93c2VycyBzdXBwb3J0IHVwbG9hZCBldmVudHNcbiAgICBpZiAodHlwZW9mIGNvbmZpZy5vblVwbG9hZFByb2dyZXNzID09PSAnZnVuY3Rpb24nICYmIHJlcXVlc3QudXBsb2FkKSB7XG4gICAgICByZXF1ZXN0LnVwbG9hZC5hZGRFdmVudExpc3RlbmVyKCdwcm9ncmVzcycsIGNvbmZpZy5vblVwbG9hZFByb2dyZXNzKTtcbiAgICB9XG5cbiAgICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgICAvLyBIYW5kbGUgY2FuY2VsbGF0aW9uXG4gICAgICBjb25maWcuY2FuY2VsVG9rZW4ucHJvbWlzZS50aGVuKGZ1bmN0aW9uIG9uQ2FuY2VsZWQoY2FuY2VsKSB7XG4gICAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJlcXVlc3QuYWJvcnQoKTtcbiAgICAgICAgcmVqZWN0KGNhbmNlbCk7XG4gICAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgICAgcmVxdWVzdCA9IG51bGw7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAocmVxdWVzdERhdGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmVxdWVzdERhdGEgPSBudWxsO1xuICAgIH1cblxuICAgIC8vIFNlbmQgdGhlIHJlcXVlc3RcbiAgICByZXF1ZXN0LnNlbmQocmVxdWVzdERhdGEpO1xuICB9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYmluZChmbiwgdGhpc0FyZykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcCgpIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgfVxuICAgIHJldHVybiBmbi5hcHBseSh0aGlzQXJnLCBhcmdzKTtcbiAgfTtcbn07XG4iLCJpbXBvcnQgVXRpbHMgZnJvbSBcIi4uLy4uL3NlcnZpY2VzL3V0aWxcIjtcblxuZXhwb3J0IGNvbnN0IFNJREVCQVJfTElOS1MgPSB7XG4gIEdST1VQUzoge1xuICAgIENPVU5UUklFUzoge1xuICAgICAgRUxFTUVOVFM6IHtcbiAgICAgICAgSU5ESUE6IHtcbiAgICAgICAgICBjb2RlOiAnaW4nLFxuICAgICAgICAgIGRpc3BsYXk6ICdOYXRpb25hbCcsXG4gICAgICAgICAgZGF0YUtleTogJ1NJREVCQVJfJyArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpXG4gICAgICAgIH0sXG4gICAgICAgIFdPUkxEOiB7XG4gICAgICAgICAgY29kZTogbnVsbCxcbiAgICAgICAgICBkaXNwbGF5OiAnSW50ZXJuYXRpb25hbCcsXG4gICAgICAgICAgZGF0YUtleTogJ1NJREVCQVJfJyArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpXG4gICAgICAgIH0sXG4gICAgICAgIFVTQToge1xuICAgICAgICAgIGNvZGU6ICd1cycsXG4gICAgICAgICAgZGlzcGxheTogJ1VTQScsXG4gICAgICAgICAgZGF0YUtleTogJ1NJREVCQVJfJyArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpXG4gICAgICAgIH0sXG4gICAgICAgIENISU5BOiB7XG4gICAgICAgICAgY29kZTogJ2NuJyxcbiAgICAgICAgICBkaXNwbGF5OiAnQ2hpbmEnLFxuICAgICAgICAgIGRhdGFLZXk6ICdTSURFQkFSXycgKyBVdGlscy5nZW5lcmF0ZVJhbmRvbVN0cmluZyg1KVxuICAgICAgICB9LFxuICAgICAgICBVSzoge1xuICAgICAgICAgIGNvZGU6ICdnYicsXG4gICAgICAgICAgZGlzcGxheTogJ1VLJyxcbiAgICAgICAgICBkYXRhS2V5OiAnU0lERUJBUl8nICsgVXRpbHMuZ2VuZXJhdGVSYW5kb21TdHJpbmcoNSlcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIEFQSV9GSUVMRDogJ2NvdW50cnknLFxuICAgICAgZGlzcGxheTogJ0NvdW50cmllcycsXG4gICAgICBrZXk6ICdjb3VudHJ5RWxlJyxcbiAgICAgIHN0YXRlUHJvcGVydHlOYW1lOiAnYWN0aXZlQ291bnRyeUxpbmtJZCdcbiAgICB9LFxuICAgIENBVEVHT1JJRVM6IHtcbiAgICAgIEVMRU1FTlRTOiB7XG4gICAgICAgIEJVU0lORVNTOiB7XG4gICAgICAgICAgY29kZTogJ2J1c2luZXNzJyxcbiAgICAgICAgICBkaXNwbGF5OiAnQnVzaW5lc3MnLFxuICAgICAgICAgIGRhdGFLZXk6ICdTSURFQkFSXycgKyBVdGlscy5nZW5lcmF0ZVJhbmRvbVN0cmluZyg1KVxuICAgICAgICB9LFxuICAgICAgICBFTlRFUlRBSU5NRU5UOiB7XG4gICAgICAgICAgY29kZTogJ2VudGVydGFpbm1lbnQnLFxuICAgICAgICAgIGRpc3BsYXk6ICdFbnRlcnRhaW5tZW50JyxcbiAgICAgICAgICBkYXRhS2V5OiAnU0lERUJBUl8nICsgVXRpbHMuZ2VuZXJhdGVSYW5kb21TdHJpbmcoNSlcbiAgICAgICAgfSxcbiAgICAgICAgVEVDSE5PTE9HWToge1xuICAgICAgICAgIGNvZGU6ICd0ZWNobm9sb2d5JyxcbiAgICAgICAgICBkaXNwbGF5OiAnVGVjaG5vbG9neScsXG4gICAgICAgICAgZGF0YUtleTogJ1NJREVCQVJfJyArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpXG4gICAgICAgIH0sXG4gICAgICAgIFNQT1JUUzoge1xuICAgICAgICAgIGNvZGU6ICdzcG9ydHMnLFxuICAgICAgICAgIGRpc3BsYXk6ICdTcG9ydHMnLFxuICAgICAgICAgIGRhdGFLZXk6ICdTSURFQkFSXycgKyBVdGlscy5nZW5lcmF0ZVJhbmRvbVN0cmluZyg1KVxuICAgICAgICB9LFxuICAgICAgICBTQ0lFTkNFOiB7XG4gICAgICAgICAgY29kZTogJ3NjaWVuY2UnLFxuICAgICAgICAgIGRpc3BsYXk6ICdTY2llbmNlJyxcbiAgICAgICAgICBkYXRhS2V5OiAnU0lERUJBUl8nICsgVXRpbHMuZ2VuZXJhdGVSYW5kb21TdHJpbmcoNSlcbiAgICAgICAgfSxcbiAgICAgICAgSEVBTFRIOiB7XG4gICAgICAgICAgY29kZTogJ2hlYWx0aCcsXG4gICAgICAgICAgZGlzcGxheTogJ0hlYWx0aCcsXG4gICAgICAgICAgZGF0YUtleTogJ1NJREVCQVJfJyArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBBUElfRklFTEQ6ICdjYXRlZ29yeScsXG4gICAgICBkaXNwbGF5OiAnQ2F0ZWdvcmllcycsXG4gICAgICBzdGF0ZVByb3BlcnR5TmFtZTogJ2FjdGl2ZUNhdGVnb3J5TGlua0lkJ1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgY29uc3QgTElOS19FVkVOVF9OQU1FID0gJ1NJREVCQVJfJyArIFV0aWxzLmdlbmVyYXRlUmFuZG9tU3RyaW5nKDUpOyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbnZhciBjYW5Vc2VET00gPSBleHBvcnRzLmNhblVzZURPTSA9ICEhKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5kb2N1bWVudCAmJiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5cbnZhciBhZGRFdmVudExpc3RlbmVyID0gZXhwb3J0cy5hZGRFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcihub2RlLCBldmVudCwgbGlzdGVuZXIpIHtcbiAgcmV0dXJuIG5vZGUuYWRkRXZlbnRMaXN0ZW5lciA/IG5vZGUuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgbGlzdGVuZXIsIGZhbHNlKSA6IG5vZGUuYXR0YWNoRXZlbnQoJ29uJyArIGV2ZW50LCBsaXN0ZW5lcik7XG59O1xuXG52YXIgcmVtb3ZlRXZlbnRMaXN0ZW5lciA9IGV4cG9ydHMucmVtb3ZlRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uIHJlbW92ZUV2ZW50TGlzdGVuZXIobm9kZSwgZXZlbnQsIGxpc3RlbmVyKSB7XG4gIHJldHVybiBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIgPyBub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyLCBmYWxzZSkgOiBub2RlLmRldGFjaEV2ZW50KCdvbicgKyBldmVudCwgbGlzdGVuZXIpO1xufTtcblxudmFyIGdldENvbmZpcm1hdGlvbiA9IGV4cG9ydHMuZ2V0Q29uZmlybWF0aW9uID0gZnVuY3Rpb24gZ2V0Q29uZmlybWF0aW9uKG1lc3NhZ2UsIGNhbGxiYWNrKSB7XG4gIHJldHVybiBjYWxsYmFjayh3aW5kb3cuY29uZmlybShtZXNzYWdlKSk7XG59OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWFsZXJ0XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBIVE1MNSBoaXN0b3J5IEFQSSBpcyBzdXBwb3J0ZWQuIFRha2VuIGZyb20gTW9kZXJuaXpyLlxuICpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL2ZlYXR1cmUtZGV0ZWN0cy9oaXN0b3J5LmpzXG4gKiBjaGFuZ2VkIHRvIGF2b2lkIGZhbHNlIG5lZ2F0aXZlcyBmb3IgV2luZG93cyBQaG9uZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXJvdXRlci9pc3N1ZXMvNTg2XG4gKi9cbnZhciBzdXBwb3J0c0hpc3RvcnkgPSBleHBvcnRzLnN1cHBvcnRzSGlzdG9yeSA9IGZ1bmN0aW9uIHN1cHBvcnRzSGlzdG9yeSgpIHtcbiAgdmFyIHVhID0gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQ7XG5cbiAgaWYgKCh1YS5pbmRleE9mKCdBbmRyb2lkIDIuJykgIT09IC0xIHx8IHVhLmluZGV4T2YoJ0FuZHJvaWQgNC4wJykgIT09IC0xKSAmJiB1YS5pbmRleE9mKCdNb2JpbGUgU2FmYXJpJykgIT09IC0xICYmIHVhLmluZGV4T2YoJ0Nocm9tZScpID09PSAtMSAmJiB1YS5pbmRleE9mKCdXaW5kb3dzIFBob25lJykgPT09IC0xKSByZXR1cm4gZmFsc2U7XG5cbiAgcmV0dXJuIHdpbmRvdy5oaXN0b3J5ICYmICdwdXNoU3RhdGUnIGluIHdpbmRvdy5oaXN0b3J5O1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYnJvd3NlciBmaXJlcyBwb3BzdGF0ZSBvbiBoYXNoIGNoYW5nZS5cbiAqIElFMTAgYW5kIElFMTEgZG8gbm90LlxuICovXG52YXIgc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSA9IGV4cG9ydHMuc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSA9IGZ1bmN0aW9uIHN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UoKSB7XG4gIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdUcmlkZW50JykgPT09IC0xO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIGZhbHNlIGlmIHVzaW5nIGdvKG4pIHdpdGggaGFzaCBoaXN0b3J5IGNhdXNlcyBhIGZ1bGwgcGFnZSByZWxvYWQuXG4gKi9cbnZhciBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCA9IGV4cG9ydHMuc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2ggPSBmdW5jdGlvbiBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCgpIHtcbiAgcmV0dXJuIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0ZpcmVmb3gnKSA9PT0gLTE7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBhIGdpdmVuIHBvcHN0YXRlIGV2ZW50IGlzIGFuIGV4dHJhbmVvdXMgV2ViS2l0IGV2ZW50LlxuICogQWNjb3VudHMgZm9yIHRoZSBmYWN0IHRoYXQgQ2hyb21lIG9uIGlPUyBmaXJlcyByZWFsIHBvcHN0YXRlIGV2ZW50c1xuICogY29udGFpbmluZyB1bmRlZmluZWQgc3RhdGUgd2hlbiBwcmVzc2luZyB0aGUgYmFjayBidXR0b24uXG4gKi9cbnZhciBpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50ID0gZXhwb3J0cy5pc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50ID0gZnVuY3Rpb24gaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudChldmVudCkge1xuICByZXR1cm4gZXZlbnQuc3RhdGUgPT09IHVuZGVmaW5lZCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0NyaU9TJykgPT09IC0xO1xufTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBlbXB0eU9iamVjdCA9IHt9O1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICBPYmplY3QuZnJlZXplKGVtcHR5T2JqZWN0KTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBlbXB0eU9iamVjdDsiLCIvKlxub2JqZWN0LWFzc2lnblxuKGMpIFNpbmRyZSBTb3JodXNcbkBsaWNlbnNlIE1JVFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBwcm9wSXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuZnVuY3Rpb24gdG9PYmplY3QodmFsKSB7XG5cdGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBudWxsIG9yIHVuZGVmaW5lZCcpO1xuXHR9XG5cblx0cmV0dXJuIE9iamVjdCh2YWwpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRVc2VOYXRpdmUoKSB7XG5cdHRyeSB7XG5cdFx0aWYgKCFPYmplY3QuYXNzaWduKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZWN0IGJ1Z2d5IHByb3BlcnR5IGVudW1lcmF0aW9uIG9yZGVyIGluIG9sZGVyIFY4IHZlcnNpb25zLlxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDExOFxuXHRcdHZhciB0ZXN0MSA9IG5ldyBTdHJpbmcoJ2FiYycpOyAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnNcblx0XHR0ZXN0MVs1XSA9ICdkZSc7XG5cdFx0aWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QxKVswXSA9PT0gJzUnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MiA9IHt9O1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykge1xuXHRcdFx0dGVzdDJbJ18nICsgU3RyaW5nLmZyb21DaGFyQ29kZShpKV0gPSBpO1xuXHRcdH1cblx0XHR2YXIgb3JkZXIyID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDIpLm1hcChmdW5jdGlvbiAobikge1xuXHRcdFx0cmV0dXJuIHRlc3QyW25dO1xuXHRcdH0pO1xuXHRcdGlmIChvcmRlcjIuam9pbignJykgIT09ICcwMTIzNDU2Nzg5Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDMgPSB7fTtcblx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChsZXR0ZXIpIHtcblx0XHRcdHRlc3QzW2xldHRlcl0gPSBsZXR0ZXI7XG5cdFx0fSk7XG5cdFx0aWYgKE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIHRlc3QzKSkuam9pbignJykgIT09XG5cdFx0XHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0Ly8gV2UgZG9uJ3QgZXhwZWN0IGFueSBvZiB0aGUgYWJvdmUgdG8gdGhyb3csIGJ1dCBiZXR0ZXIgdG8gYmUgc2FmZS5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaG91bGRVc2VOYXRpdmUoKSA/IE9iamVjdC5hc3NpZ24gOiBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcblx0dmFyIGZyb207XG5cdHZhciB0byA9IHRvT2JqZWN0KHRhcmdldCk7XG5cdHZhciBzeW1ib2xzO1xuXG5cdGZvciAodmFyIHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgcysrKSB7XG5cdFx0ZnJvbSA9IE9iamVjdChhcmd1bWVudHNbc10pO1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIGZyb20pIHtcblx0XHRcdGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHtcblx0XHRcdFx0dG9ba2V5XSA9IGZyb21ba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG5cdFx0XHRzeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGZyb20pO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzeW1ib2xzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChwcm9wSXNFbnVtZXJhYmxlLmNhbGwoZnJvbSwgc3ltYm9sc1tpXSkpIHtcblx0XHRcdFx0XHR0b1tzeW1ib2xzW2ldXSA9IGZyb21bc3ltYm9sc1tpXV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdG87XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxNSwgWWFob28hIEluYy5cbiAqIENvcHlyaWdodHMgbGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgTGljZW5zZS4gU2VlIHRoZSBhY2NvbXBhbnlpbmcgTElDRU5TRSBmaWxlIGZvciB0ZXJtcy5cbiAqL1xuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKSA6XG4gICAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDpcbiAgICAoZ2xvYmFsLmhvaXN0Tm9uUmVhY3RTdGF0aWNzID0gZmFjdG9yeSgpKTtcbn0odGhpcywgKGZ1bmN0aW9uICgpIHtcbiAgICAndXNlIHN0cmljdCc7XG4gICAgXG4gICAgdmFyIFJFQUNUX1NUQVRJQ1MgPSB7XG4gICAgICAgIGNoaWxkQ29udGV4dFR5cGVzOiB0cnVlLFxuICAgICAgICBjb250ZXh0VHlwZXM6IHRydWUsXG4gICAgICAgIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgICAgICAgZGlzcGxheU5hbWU6IHRydWUsXG4gICAgICAgIGdldERlZmF1bHRQcm9wczogdHJ1ZSxcbiAgICAgICAgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOiB0cnVlLFxuICAgICAgICBtaXhpbnM6IHRydWUsXG4gICAgICAgIHByb3BUeXBlczogdHJ1ZSxcbiAgICAgICAgdHlwZTogdHJ1ZVxuICAgIH07XG4gICAgXG4gICAgdmFyIEtOT1dOX1NUQVRJQ1MgPSB7XG4gICAgICAgIG5hbWU6IHRydWUsXG4gICAgICAgIGxlbmd0aDogdHJ1ZSxcbiAgICAgICAgcHJvdG90eXBlOiB0cnVlLFxuICAgICAgICBjYWxsZXI6IHRydWUsXG4gICAgICAgIGNhbGxlZTogdHJ1ZSxcbiAgICAgICAgYXJndW1lbnRzOiB0cnVlLFxuICAgICAgICBhcml0eTogdHJ1ZVxuICAgIH07XG4gICAgXG4gICAgdmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuICAgIHZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG4gICAgdmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG4gICAgdmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG4gICAgdmFyIGdldFByb3RvdHlwZU9mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICAgIHZhciBvYmplY3RQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZiAmJiBnZXRQcm90b3R5cGVPZihPYmplY3QpO1xuICAgIFxuICAgIHJldHVybiBmdW5jdGlvbiBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIHNvdXJjZUNvbXBvbmVudCwgYmxhY2tsaXN0KSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc291cmNlQ29tcG9uZW50ICE9PSAnc3RyaW5nJykgeyAvLyBkb24ndCBob2lzdCBvdmVyIHN0cmluZyAoaHRtbCkgY29tcG9uZW50c1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAob2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgICAgICAgICAgdmFyIGluaGVyaXRlZENvbXBvbmVudCA9IGdldFByb3RvdHlwZU9mKHNvdXJjZUNvbXBvbmVudCk7XG4gICAgICAgICAgICAgICAgaWYgKGluaGVyaXRlZENvbXBvbmVudCAmJiBpbmhlcml0ZWRDb21wb25lbnQgIT09IG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICAgICAgICAgICAgICBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIGluaGVyaXRlZENvbXBvbmVudCwgYmxhY2tsaXN0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lcyhzb3VyY2VDb21wb25lbnQpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgICAgICAgICAgICAga2V5cyA9IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2VDb21wb25lbnQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgICAgICAgICAgICAgaWYgKCFSRUFDVF9TVEFUSUNTW2tleV0gJiYgIUtOT1dOX1NUQVRJQ1Nba2V5XSAmJiAoIWJsYWNrbGlzdCB8fCAhYmxhY2tsaXN0W2tleV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZUNvbXBvbmVudCwga2V5KTtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHsgLy8gQXZvaWQgZmFpbHVyZXMgZnJvbSByZWFkLW9ubHkgcHJvcGVydGllc1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVmaW5lUHJvcGVydHkodGFyZ2V0Q29tcG9uZW50LCBrZXksIGRlc2NyaXB0b3IpO1xuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbiAgICB9O1xufSkpKTtcbiIsInZhciBpc2FycmF5ID0gcmVxdWlyZSgnaXNhcnJheScpXG5cbi8qKlxuICogRXhwb3NlIGBwYXRoVG9SZWdleHBgLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IHBhdGhUb1JlZ2V4cFxubW9kdWxlLmV4cG9ydHMucGFyc2UgPSBwYXJzZVxubW9kdWxlLmV4cG9ydHMuY29tcGlsZSA9IGNvbXBpbGVcbm1vZHVsZS5leHBvcnRzLnRva2Vuc1RvRnVuY3Rpb24gPSB0b2tlbnNUb0Z1bmN0aW9uXG5tb2R1bGUuZXhwb3J0cy50b2tlbnNUb1JlZ0V4cCA9IHRva2Vuc1RvUmVnRXhwXG5cbi8qKlxuICogVGhlIG1haW4gcGF0aCBtYXRjaGluZyByZWdleHAgdXRpbGl0eS5cbiAqXG4gKiBAdHlwZSB7UmVnRXhwfVxuICovXG52YXIgUEFUSF9SRUdFWFAgPSBuZXcgUmVnRXhwKFtcbiAgLy8gTWF0Y2ggZXNjYXBlZCBjaGFyYWN0ZXJzIHRoYXQgd291bGQgb3RoZXJ3aXNlIGFwcGVhciBpbiBmdXR1cmUgbWF0Y2hlcy5cbiAgLy8gVGhpcyBhbGxvd3MgdGhlIHVzZXIgdG8gZXNjYXBlIHNwZWNpYWwgY2hhcmFjdGVycyB0aGF0IHdvbid0IHRyYW5zZm9ybS5cbiAgJyhcXFxcXFxcXC4pJyxcbiAgLy8gTWF0Y2ggRXhwcmVzcy1zdHlsZSBwYXJhbWV0ZXJzIGFuZCB1bi1uYW1lZCBwYXJhbWV0ZXJzIHdpdGggYSBwcmVmaXhcbiAgLy8gYW5kIG9wdGlvbmFsIHN1ZmZpeGVzLiBNYXRjaGVzIGFwcGVhciBhczpcbiAgLy9cbiAgLy8gXCIvOnRlc3QoXFxcXGQrKT9cIiA9PiBbXCIvXCIsIFwidGVzdFwiLCBcIlxcZCtcIiwgdW5kZWZpbmVkLCBcIj9cIiwgdW5kZWZpbmVkXVxuICAvLyBcIi9yb3V0ZShcXFxcZCspXCIgID0+IFt1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBcIlxcZCtcIiwgdW5kZWZpbmVkLCB1bmRlZmluZWRdXG4gIC8vIFwiLypcIiAgICAgICAgICAgID0+IFtcIi9cIiwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBcIipcIl1cbiAgJyhbXFxcXC8uXSk/KD86KD86XFxcXDooXFxcXHcrKSg/OlxcXFwoKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKCldKSspXFxcXCkpP3xcXFxcKCgoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpXSkrKVxcXFwpKShbKyo/XSk/fChcXFxcKikpJ1xuXS5qb2luKCd8JyksICdnJylcblxuLyoqXG4gKiBQYXJzZSBhIHN0cmluZyBmb3IgdGhlIHJhdyB0b2tlbnMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgc3RyXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshQXJyYXl9XG4gKi9cbmZ1bmN0aW9uIHBhcnNlIChzdHIsIG9wdGlvbnMpIHtcbiAgdmFyIHRva2VucyA9IFtdXG4gIHZhciBrZXkgPSAwXG4gIHZhciBpbmRleCA9IDBcbiAgdmFyIHBhdGggPSAnJ1xuICB2YXIgZGVmYXVsdERlbGltaXRlciA9IG9wdGlvbnMgJiYgb3B0aW9ucy5kZWxpbWl0ZXIgfHwgJy8nXG4gIHZhciByZXNcblxuICB3aGlsZSAoKHJlcyA9IFBBVEhfUkVHRVhQLmV4ZWMoc3RyKSkgIT0gbnVsbCkge1xuICAgIHZhciBtID0gcmVzWzBdXG4gICAgdmFyIGVzY2FwZWQgPSByZXNbMV1cbiAgICB2YXIgb2Zmc2V0ID0gcmVzLmluZGV4XG4gICAgcGF0aCArPSBzdHIuc2xpY2UoaW5kZXgsIG9mZnNldClcbiAgICBpbmRleCA9IG9mZnNldCArIG0ubGVuZ3RoXG5cbiAgICAvLyBJZ25vcmUgYWxyZWFkeSBlc2NhcGVkIHNlcXVlbmNlcy5cbiAgICBpZiAoZXNjYXBlZCkge1xuICAgICAgcGF0aCArPSBlc2NhcGVkWzFdXG4gICAgICBjb250aW51ZVxuICAgIH1cblxuICAgIHZhciBuZXh0ID0gc3RyW2luZGV4XVxuICAgIHZhciBwcmVmaXggPSByZXNbMl1cbiAgICB2YXIgbmFtZSA9IHJlc1szXVxuICAgIHZhciBjYXB0dXJlID0gcmVzWzRdXG4gICAgdmFyIGdyb3VwID0gcmVzWzVdXG4gICAgdmFyIG1vZGlmaWVyID0gcmVzWzZdXG4gICAgdmFyIGFzdGVyaXNrID0gcmVzWzddXG5cbiAgICAvLyBQdXNoIHRoZSBjdXJyZW50IHBhdGggb250byB0aGUgdG9rZW5zLlxuICAgIGlmIChwYXRoKSB7XG4gICAgICB0b2tlbnMucHVzaChwYXRoKVxuICAgICAgcGF0aCA9ICcnXG4gICAgfVxuXG4gICAgdmFyIHBhcnRpYWwgPSBwcmVmaXggIT0gbnVsbCAmJiBuZXh0ICE9IG51bGwgJiYgbmV4dCAhPT0gcHJlZml4XG4gICAgdmFyIHJlcGVhdCA9IG1vZGlmaWVyID09PSAnKycgfHwgbW9kaWZpZXIgPT09ICcqJ1xuICAgIHZhciBvcHRpb25hbCA9IG1vZGlmaWVyID09PSAnPycgfHwgbW9kaWZpZXIgPT09ICcqJ1xuICAgIHZhciBkZWxpbWl0ZXIgPSByZXNbMl0gfHwgZGVmYXVsdERlbGltaXRlclxuICAgIHZhciBwYXR0ZXJuID0gY2FwdHVyZSB8fCBncm91cFxuXG4gICAgdG9rZW5zLnB1c2goe1xuICAgICAgbmFtZTogbmFtZSB8fCBrZXkrKyxcbiAgICAgIHByZWZpeDogcHJlZml4IHx8ICcnLFxuICAgICAgZGVsaW1pdGVyOiBkZWxpbWl0ZXIsXG4gICAgICBvcHRpb25hbDogb3B0aW9uYWwsXG4gICAgICByZXBlYXQ6IHJlcGVhdCxcbiAgICAgIHBhcnRpYWw6IHBhcnRpYWwsXG4gICAgICBhc3RlcmlzazogISFhc3RlcmlzayxcbiAgICAgIHBhdHRlcm46IHBhdHRlcm4gPyBlc2NhcGVHcm91cChwYXR0ZXJuKSA6IChhc3RlcmlzayA/ICcuKicgOiAnW14nICsgZXNjYXBlU3RyaW5nKGRlbGltaXRlcikgKyAnXSs/JylcbiAgICB9KVxuICB9XG5cbiAgLy8gTWF0Y2ggYW55IGNoYXJhY3RlcnMgc3RpbGwgcmVtYWluaW5nLlxuICBpZiAoaW5kZXggPCBzdHIubGVuZ3RoKSB7XG4gICAgcGF0aCArPSBzdHIuc3Vic3RyKGluZGV4KVxuICB9XG5cbiAgLy8gSWYgdGhlIHBhdGggZXhpc3RzLCBwdXNoIGl0IG9udG8gdGhlIGVuZC5cbiAgaWYgKHBhdGgpIHtcbiAgICB0b2tlbnMucHVzaChwYXRoKVxuICB9XG5cbiAgcmV0dXJuIHRva2Vuc1xufVxuXG4vKipcbiAqIENvbXBpbGUgYSBzdHJpbmcgdG8gYSB0ZW1wbGF0ZSBmdW5jdGlvbiBmb3IgdGhlIHBhdGguXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgICAgICAgICAgICBzdHJcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IWZ1bmN0aW9uKE9iamVjdD0sIE9iamVjdD0pfVxuICovXG5mdW5jdGlvbiBjb21waWxlIChzdHIsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRva2Vuc1RvRnVuY3Rpb24ocGFyc2Uoc3RyLCBvcHRpb25zKSlcbn1cblxuLyoqXG4gKiBQcmV0dGllciBlbmNvZGluZyBvZiBVUkkgcGF0aCBzZWdtZW50cy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9XG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVuY29kZVVSSUNvbXBvbmVudFByZXR0eSAoc3RyKSB7XG4gIHJldHVybiBlbmNvZGVVUkkoc3RyKS5yZXBsYWNlKC9bXFwvPyNdL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuICclJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKVxuICB9KVxufVxuXG4vKipcbiAqIEVuY29kZSB0aGUgYXN0ZXJpc2sgcGFyYW1ldGVyLiBTaW1pbGFyIHRvIGBwcmV0dHlgLCBidXQgYWxsb3dzIHNsYXNoZXMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlbmNvZGVBc3RlcmlzayAoc3RyKSB7XG4gIHJldHVybiBlbmNvZGVVUkkoc3RyKS5yZXBsYWNlKC9bPyNdL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuICclJyArIGMuY2hhckNvZGVBdCgwKS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKVxuICB9KVxufVxuXG4vKipcbiAqIEV4cG9zZSBhIG1ldGhvZCBmb3IgdHJhbnNmb3JtaW5nIHRva2VucyBpbnRvIHRoZSBwYXRoIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiB0b2tlbnNUb0Z1bmN0aW9uICh0b2tlbnMpIHtcbiAgLy8gQ29tcGlsZSBhbGwgdGhlIHRva2VucyBpbnRvIHJlZ2V4cHMuXG4gIHZhciBtYXRjaGVzID0gbmV3IEFycmF5KHRva2Vucy5sZW5ndGgpXG5cbiAgLy8gQ29tcGlsZSBhbGwgdGhlIHBhdHRlcm5zIGJlZm9yZSBjb21waWxhdGlvbi5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAodHlwZW9mIHRva2Vuc1tpXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIG1hdGNoZXNbaV0gPSBuZXcgUmVnRXhwKCdeKD86JyArIHRva2Vuc1tpXS5wYXR0ZXJuICsgJykkJylcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKG9iaiwgb3B0cykge1xuICAgIHZhciBwYXRoID0gJydcbiAgICB2YXIgZGF0YSA9IG9iaiB8fCB7fVxuICAgIHZhciBvcHRpb25zID0gb3B0cyB8fCB7fVxuICAgIHZhciBlbmNvZGUgPSBvcHRpb25zLnByZXR0eSA/IGVuY29kZVVSSUNvbXBvbmVudFByZXR0eSA6IGVuY29kZVVSSUNvbXBvbmVudFxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXVxuXG4gICAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgICBwYXRoICs9IHRva2VuXG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgdmFyIHZhbHVlID0gZGF0YVt0b2tlbi5uYW1lXVxuICAgICAgdmFyIHNlZ21lbnRcblxuICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgICAgLy8gUHJlcGVuZCBwYXJ0aWFsIHNlZ21lbnQgcHJlZml4ZXMuXG4gICAgICAgICAgaWYgKHRva2VuLnBhcnRpYWwpIHtcbiAgICAgICAgICAgIHBhdGggKz0gdG9rZW4ucHJlZml4XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIGJlIGRlZmluZWQnKVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChpc2FycmF5KHZhbHVlKSkge1xuICAgICAgICBpZiAoIXRva2VuLnJlcGVhdCkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbm90IHJlcGVhdCwgYnV0IHJlY2VpdmVkIGAnICsgSlNPTi5zdHJpbmdpZnkodmFsdWUpICsgJ2AnKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgIGlmICh0b2tlbi5vcHRpb25hbCkge1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBub3QgYmUgZW1wdHknKVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsdWUubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICBzZWdtZW50ID0gZW5jb2RlKHZhbHVlW2pdKVxuXG4gICAgICAgICAgaWYgKCFtYXRjaGVzW2ldLnRlc3Qoc2VnbWVudCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIGFsbCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG1hdGNoIFwiJyArIHRva2VuLnBhdHRlcm4gKyAnXCIsIGJ1dCByZWNlaXZlZCBgJyArIEpTT04uc3RyaW5naWZ5KHNlZ21lbnQpICsgJ2AnKVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHBhdGggKz0gKGogPT09IDAgPyB0b2tlbi5wcmVmaXggOiB0b2tlbi5kZWxpbWl0ZXIpICsgc2VnbWVudFxuICAgICAgICB9XG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgc2VnbWVudCA9IHRva2VuLmFzdGVyaXNrID8gZW5jb2RlQXN0ZXJpc2sodmFsdWUpIDogZW5jb2RlKHZhbHVlKVxuXG4gICAgICBpZiAoIW1hdGNoZXNbaV0udGVzdChzZWdtZW50KSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG1hdGNoIFwiJyArIHRva2VuLnBhdHRlcm4gKyAnXCIsIGJ1dCByZWNlaXZlZCBcIicgKyBzZWdtZW50ICsgJ1wiJylcbiAgICAgIH1cblxuICAgICAgcGF0aCArPSB0b2tlbi5wcmVmaXggKyBzZWdtZW50XG4gICAgfVxuXG4gICAgcmV0dXJuIHBhdGhcbiAgfVxufVxuXG4vKipcbiAqIEVzY2FwZSBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBzdHJpbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBzdHJcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZXNjYXBlU3RyaW5nIChzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC8oWy4rKj89XiE6JHt9KClbXFxdfFxcL1xcXFxdKS9nLCAnXFxcXCQxJylcbn1cblxuLyoqXG4gKiBFc2NhcGUgdGhlIGNhcHR1cmluZyBncm91cCBieSBlc2NhcGluZyBzcGVjaWFsIGNoYXJhY3RlcnMgYW5kIG1lYW5pbmcuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSBncm91cFxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlc2NhcGVHcm91cCAoZ3JvdXApIHtcbiAgcmV0dXJuIGdyb3VwLnJlcGxhY2UoLyhbPSE6JFxcLygpXSkvZywgJ1xcXFwkMScpXG59XG5cbi8qKlxuICogQXR0YWNoIHRoZSBrZXlzIGFzIGEgcHJvcGVydHkgb2YgdGhlIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshUmVnRXhwfSByZVxuICogQHBhcmFtICB7QXJyYXl9ICAga2V5c1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gYXR0YWNoS2V5cyAocmUsIGtleXMpIHtcbiAgcmUua2V5cyA9IGtleXNcbiAgcmV0dXJuIHJlXG59XG5cbi8qKlxuICogR2V0IHRoZSBmbGFncyBmb3IgYSByZWdleHAgZnJvbSB0aGUgb3B0aW9ucy5cbiAqXG4gKiBAcGFyYW0gIHtPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZmxhZ3MgKG9wdGlvbnMpIHtcbiAgcmV0dXJuIG9wdGlvbnMuc2Vuc2l0aXZlID8gJycgOiAnaSdcbn1cblxuLyoqXG4gKiBQdWxsIG91dCBrZXlzIGZyb20gYSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IVJlZ0V4cH0gcGF0aFxuICogQHBhcmFtICB7IUFycmF5fSAga2V5c1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gcmVnZXhwVG9SZWdleHAgKHBhdGgsIGtleXMpIHtcbiAgLy8gVXNlIGEgbmVnYXRpdmUgbG9va2FoZWFkIHRvIG1hdGNoIG9ubHkgY2FwdHVyaW5nIGdyb3Vwcy5cbiAgdmFyIGdyb3VwcyA9IHBhdGguc291cmNlLm1hdGNoKC9cXCgoPyFcXD8pL2cpXG5cbiAgaWYgKGdyb3Vwcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZ3JvdXBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBrZXlzLnB1c2goe1xuICAgICAgICBuYW1lOiBpLFxuICAgICAgICBwcmVmaXg6IG51bGwsXG4gICAgICAgIGRlbGltaXRlcjogbnVsbCxcbiAgICAgICAgb3B0aW9uYWw6IGZhbHNlLFxuICAgICAgICByZXBlYXQ6IGZhbHNlLFxuICAgICAgICBwYXJ0aWFsOiBmYWxzZSxcbiAgICAgICAgYXN0ZXJpc2s6IGZhbHNlLFxuICAgICAgICBwYXR0ZXJuOiBudWxsXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKHBhdGgsIGtleXMpXG59XG5cbi8qKlxuICogVHJhbnNmb3JtIGFuIGFycmF5IGludG8gYSByZWdleHAuXG4gKlxuICogQHBhcmFtICB7IUFycmF5fSAgcGF0aFxuICogQHBhcmFtICB7QXJyYXl9ICAga2V5c1xuICogQHBhcmFtICB7IU9iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gYXJyYXlUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICB2YXIgcGFydHMgPSBbXVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcGF0aC5sZW5ndGg7IGkrKykge1xuICAgIHBhcnRzLnB1c2gocGF0aFRvUmVnZXhwKHBhdGhbaV0sIGtleXMsIG9wdGlvbnMpLnNvdXJjZSlcbiAgfVxuXG4gIHZhciByZWdleHAgPSBuZXcgUmVnRXhwKCcoPzonICsgcGFydHMuam9pbignfCcpICsgJyknLCBmbGFncyhvcHRpb25zKSlcblxuICByZXR1cm4gYXR0YWNoS2V5cyhyZWdleHAsIGtleXMpXG59XG5cbi8qKlxuICogQ3JlYXRlIGEgcGF0aCByZWdleHAgZnJvbSBzdHJpbmcgaW5wdXQuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgcGF0aFxuICogQHBhcmFtICB7IUFycmF5fSAga2V5c1xuICogQHBhcmFtICB7IU9iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gc3RyaW5nVG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRva2Vuc1RvUmVnRXhwKHBhcnNlKHBhdGgsIG9wdGlvbnMpLCBrZXlzLCBvcHRpb25zKVxufVxuXG4vKipcbiAqIEV4cG9zZSBhIGZ1bmN0aW9uIGZvciB0YWtpbmcgdG9rZW5zIGFuZCByZXR1cm5pbmcgYSBSZWdFeHAuXG4gKlxuICogQHBhcmFtICB7IUFycmF5fSAgICAgICAgICB0b2tlbnNcbiAqIEBwYXJhbSAgeyhBcnJheXxPYmplY3QpPX0ga2V5c1xuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiB0b2tlbnNUb1JlZ0V4cCAodG9rZW5zLCBrZXlzLCBvcHRpb25zKSB7XG4gIGlmICghaXNhcnJheShrZXlzKSkge1xuICAgIG9wdGlvbnMgPSAvKiogQHR5cGUgeyFPYmplY3R9ICovIChrZXlzIHx8IG9wdGlvbnMpXG4gICAga2V5cyA9IFtdXG4gIH1cblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuXG4gIHZhciBzdHJpY3QgPSBvcHRpb25zLnN0cmljdFxuICB2YXIgZW5kID0gb3B0aW9ucy5lbmQgIT09IGZhbHNlXG4gIHZhciByb3V0ZSA9ICcnXG5cbiAgLy8gSXRlcmF0ZSBvdmVyIHRoZSB0b2tlbnMgYW5kIGNyZWF0ZSBvdXIgcmVnZXhwIHN0cmluZy5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgdG9rZW4gPSB0b2tlbnNbaV1cblxuICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICByb3V0ZSArPSBlc2NhcGVTdHJpbmcodG9rZW4pXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBwcmVmaXggPSBlc2NhcGVTdHJpbmcodG9rZW4ucHJlZml4KVxuICAgICAgdmFyIGNhcHR1cmUgPSAnKD86JyArIHRva2VuLnBhdHRlcm4gKyAnKSdcblxuICAgICAga2V5cy5wdXNoKHRva2VuKVxuXG4gICAgICBpZiAodG9rZW4ucmVwZWF0KSB7XG4gICAgICAgIGNhcHR1cmUgKz0gJyg/OicgKyBwcmVmaXggKyBjYXB0dXJlICsgJykqJ1xuICAgICAgfVxuXG4gICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgaWYgKCF0b2tlbi5wYXJ0aWFsKSB7XG4gICAgICAgICAgY2FwdHVyZSA9ICcoPzonICsgcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpKT8nXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2FwdHVyZSA9IHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKT8nXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNhcHR1cmUgPSBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJyknXG4gICAgICB9XG5cbiAgICAgIHJvdXRlICs9IGNhcHR1cmVcbiAgICB9XG4gIH1cblxuICB2YXIgZGVsaW1pdGVyID0gZXNjYXBlU3RyaW5nKG9wdGlvbnMuZGVsaW1pdGVyIHx8ICcvJylcbiAgdmFyIGVuZHNXaXRoRGVsaW1pdGVyID0gcm91dGUuc2xpY2UoLWRlbGltaXRlci5sZW5ndGgpID09PSBkZWxpbWl0ZXJcblxuICAvLyBJbiBub24tc3RyaWN0IG1vZGUgd2UgYWxsb3cgYSBzbGFzaCBhdCB0aGUgZW5kIG9mIG1hdGNoLiBJZiB0aGUgcGF0aCB0b1xuICAvLyBtYXRjaCBhbHJlYWR5IGVuZHMgd2l0aCBhIHNsYXNoLCB3ZSByZW1vdmUgaXQgZm9yIGNvbnNpc3RlbmN5LiBUaGUgc2xhc2hcbiAgLy8gaXMgdmFsaWQgYXQgdGhlIGVuZCBvZiBhIHBhdGggbWF0Y2gsIG5vdCBpbiB0aGUgbWlkZGxlLiBUaGlzIGlzIGltcG9ydGFudFxuICAvLyBpbiBub24tZW5kaW5nIG1vZGUsIHdoZXJlIFwiL3Rlc3QvXCIgc2hvdWxkbid0IG1hdGNoIFwiL3Rlc3QvL3JvdXRlXCIuXG4gIGlmICghc3RyaWN0KSB7XG4gICAgcm91dGUgPSAoZW5kc1dpdGhEZWxpbWl0ZXIgPyByb3V0ZS5zbGljZSgwLCAtZGVsaW1pdGVyLmxlbmd0aCkgOiByb3V0ZSkgKyAnKD86JyArIGRlbGltaXRlciArICcoPz0kKSk/J1xuICB9XG5cbiAgaWYgKGVuZCkge1xuICAgIHJvdXRlICs9ICckJ1xuICB9IGVsc2Uge1xuICAgIC8vIEluIG5vbi1lbmRpbmcgbW9kZSwgd2UgbmVlZCB0aGUgY2FwdHVyaW5nIGdyb3VwcyB0byBtYXRjaCBhcyBtdWNoIGFzXG4gICAgLy8gcG9zc2libGUgYnkgdXNpbmcgYSBwb3NpdGl2ZSBsb29rYWhlYWQgdG8gdGhlIGVuZCBvciBuZXh0IHBhdGggc2VnbWVudC5cbiAgICByb3V0ZSArPSBzdHJpY3QgJiYgZW5kc1dpdGhEZWxpbWl0ZXIgPyAnJyA6ICcoPz0nICsgZGVsaW1pdGVyICsgJ3wkKSdcbiAgfVxuXG4gIHJldHVybiBhdHRhY2hLZXlzKG5ldyBSZWdFeHAoJ14nICsgcm91dGUsIGZsYWdzKG9wdGlvbnMpKSwga2V5cylcbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgdGhlIGdpdmVuIHBhdGggc3RyaW5nLCByZXR1cm5pbmcgYSByZWd1bGFyIGV4cHJlc3Npb24uXG4gKlxuICogQW4gZW1wdHkgYXJyYXkgY2FuIGJlIHBhc3NlZCBpbiBmb3IgdGhlIGtleXMsIHdoaWNoIHdpbGwgaG9sZCB0aGVcbiAqIHBsYWNlaG9sZGVyIGtleSBkZXNjcmlwdGlvbnMuIEZvciBleGFtcGxlLCB1c2luZyBgL3VzZXIvOmlkYCwgYGtleXNgIHdpbGxcbiAqIGNvbnRhaW4gYFt7IG5hbWU6ICdpZCcsIGRlbGltaXRlcjogJy8nLCBvcHRpb25hbDogZmFsc2UsIHJlcGVhdDogZmFsc2UgfV1gLlxuICpcbiAqIEBwYXJhbSAgeyhzdHJpbmd8UmVnRXhwfEFycmF5KX0gcGF0aFxuICogQHBhcmFtICB7KEFycmF5fE9iamVjdCk9fSAgICAgICBrZXlzXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHBhdGhUb1JlZ2V4cCAocGF0aCwga2V5cywgb3B0aW9ucykge1xuICBpZiAoIWlzYXJyYXkoa2V5cykpIHtcbiAgICBvcHRpb25zID0gLyoqIEB0eXBlIHshT2JqZWN0fSAqLyAoa2V5cyB8fCBvcHRpb25zKVxuICAgIGtleXMgPSBbXVxuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cblxuICBpZiAocGF0aCBpbnN0YW5jZW9mIFJlZ0V4cCkge1xuICAgIHJldHVybiByZWdleHBUb1JlZ2V4cChwYXRoLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpKVxuICB9XG5cbiAgaWYgKGlzYXJyYXkocGF0aCkpIHtcbiAgICByZXR1cm4gYXJyYXlUb1JlZ2V4cCgvKiogQHR5cGUgeyFBcnJheX0gKi8gKHBhdGgpLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpLCBvcHRpb25zKVxuICB9XG5cbiAgcmV0dXJuIHN0cmluZ1RvUmVnZXhwKC8qKiBAdHlwZSB7c3RyaW5nfSAqLyAocGF0aCksIC8qKiBAdHlwZSB7IUFycmF5fSAqLyAoa2V5cyksIG9wdGlvbnMpXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF93YXJuaW5nID0gcmVxdWlyZSgnd2FybmluZycpO1xuXG52YXIgX3dhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2FybmluZyk7XG5cbnZhciBfUGF0aFV0aWxzID0gcmVxdWlyZSgnLi9QYXRoVXRpbHMnKTtcblxudmFyIF9Mb2NhdGlvblV0aWxzID0gcmVxdWlyZSgnLi9Mb2NhdGlvblV0aWxzJyk7XG5cbnZhciBfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIgPSByZXF1aXJlKCcuL2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyJyk7XG5cbnZhciBfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgY2xhbXAgPSBmdW5jdGlvbiBjbGFtcChuLCBsb3dlckJvdW5kLCB1cHBlckJvdW5kKSB7XG4gIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChuLCBsb3dlckJvdW5kKSwgdXBwZXJCb3VuZCk7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBoaXN0b3J5IG9iamVjdCB0aGF0IHN0b3JlcyBsb2NhdGlvbnMgaW4gbWVtb3J5LlxuICovXG52YXIgY3JlYXRlTWVtb3J5SGlzdG9yeSA9IGZ1bmN0aW9uIGNyZWF0ZU1lbW9yeUhpc3RvcnkoKSB7XG4gIHZhciBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gIHZhciBnZXRVc2VyQ29uZmlybWF0aW9uID0gcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIF9wcm9wcyRpbml0aWFsRW50cmllcyA9IHByb3BzLmluaXRpYWxFbnRyaWVzLFxuICAgICAgaW5pdGlhbEVudHJpZXMgPSBfcHJvcHMkaW5pdGlhbEVudHJpZXMgPT09IHVuZGVmaW5lZCA/IFsnLyddIDogX3Byb3BzJGluaXRpYWxFbnRyaWVzLFxuICAgICAgX3Byb3BzJGluaXRpYWxJbmRleCA9IHByb3BzLmluaXRpYWxJbmRleCxcbiAgICAgIGluaXRpYWxJbmRleCA9IF9wcm9wcyRpbml0aWFsSW5kZXggPT09IHVuZGVmaW5lZCA/IDAgOiBfcHJvcHMkaW5pdGlhbEluZGV4LFxuICAgICAgX3Byb3BzJGtleUxlbmd0aCA9IHByb3BzLmtleUxlbmd0aCxcbiAgICAgIGtleUxlbmd0aCA9IF9wcm9wcyRrZXlMZW5ndGggPT09IHVuZGVmaW5lZCA/IDYgOiBfcHJvcHMka2V5TGVuZ3RoO1xuXG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gKDAsIF9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcjIuZGVmYXVsdCkoKTtcblxuICB2YXIgc2V0U3RhdGUgPSBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBoaXN0b3J5LmVudHJpZXMubGVuZ3RoO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfTtcblxuICB2YXIgY3JlYXRlS2V5ID0gZnVuY3Rpb24gY3JlYXRlS2V5KCkge1xuICAgIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwga2V5TGVuZ3RoKTtcbiAgfTtcblxuICB2YXIgaW5kZXggPSBjbGFtcChpbml0aWFsSW5kZXgsIDAsIGluaXRpYWxFbnRyaWVzLmxlbmd0aCAtIDEpO1xuICB2YXIgZW50cmllcyA9IGluaXRpYWxFbnRyaWVzLm1hcChmdW5jdGlvbiAoZW50cnkpIHtcbiAgICByZXR1cm4gdHlwZW9mIGVudHJ5ID09PSAnc3RyaW5nJyA/ICgwLCBfTG9jYXRpb25VdGlscy5jcmVhdGVMb2NhdGlvbikoZW50cnksIHVuZGVmaW5lZCwgY3JlYXRlS2V5KCkpIDogKDAsIF9Mb2NhdGlvblV0aWxzLmNyZWF0ZUxvY2F0aW9uKShlbnRyeSwgdW5kZWZpbmVkLCBlbnRyeS5rZXkgfHwgY3JlYXRlS2V5KCkpO1xuICB9KTtcblxuICAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgdmFyIGNyZWF0ZUhyZWYgPSBfUGF0aFV0aWxzLmNyZWF0ZVBhdGg7XG5cbiAgdmFyIHB1c2ggPSBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KSghKCh0eXBlb2YgcGF0aCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YocGF0aCkpID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byBwdXNoIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSAoMCwgX0xvY2F0aW9uVXRpbHMuY3JlYXRlTG9jYXRpb24pKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuXG4gICAgICB2YXIgcHJldkluZGV4ID0gaGlzdG9yeS5pbmRleDtcbiAgICAgIHZhciBuZXh0SW5kZXggPSBwcmV2SW5kZXggKyAxO1xuXG4gICAgICB2YXIgbmV4dEVudHJpZXMgPSBoaXN0b3J5LmVudHJpZXMuc2xpY2UoMCk7XG4gICAgICBpZiAobmV4dEVudHJpZXMubGVuZ3RoID4gbmV4dEluZGV4KSB7XG4gICAgICAgIG5leHRFbnRyaWVzLnNwbGljZShuZXh0SW5kZXgsIG5leHRFbnRyaWVzLmxlbmd0aCAtIG5leHRJbmRleCwgbG9jYXRpb24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV4dEVudHJpZXMucHVzaChsb2NhdGlvbik7XG4gICAgICB9XG5cbiAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgaW5kZXg6IG5leHRJbmRleCxcbiAgICAgICAgZW50cmllczogbmV4dEVudHJpZXNcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciByZXBsYWNlID0gZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgICgwLCBfd2FybmluZzIuZGVmYXVsdCkoISgodHlwZW9mIHBhdGggPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHBhdGgpKSA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcmVwbGFjZSB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gKDAsIF9Mb2NhdGlvblV0aWxzLmNyZWF0ZUxvY2F0aW9uKShwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgaGlzdG9yeS5lbnRyaWVzW2hpc3RvcnkuaW5kZXhdID0gbG9jYXRpb247XG5cbiAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgZ28gPSBmdW5jdGlvbiBnbyhuKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IGNsYW1wKGhpc3RvcnkuaW5kZXggKyBuLCAwLCBoaXN0b3J5LmVudHJpZXMubGVuZ3RoIC0gMSk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG4gICAgdmFyIGxvY2F0aW9uID0gaGlzdG9yeS5lbnRyaWVzW25leHRJbmRleF07XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKG9rKSB7XG4gICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgICAgaW5kZXg6IG5leHRJbmRleFxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE1pbWljIHRoZSBiZWhhdmlvciBvZiBET00gaGlzdG9yaWVzIGJ5XG4gICAgICAgIC8vIGNhdXNpbmcgYSByZW5kZXIgYWZ0ZXIgYSBjYW5jZWxsZWQgUE9QLlxuICAgICAgICBzZXRTdGF0ZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHZhciBnb0JhY2sgPSBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgcmV0dXJuIGdvKC0xKTtcbiAgfTtcblxuICB2YXIgZ29Gb3J3YXJkID0gZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIHJldHVybiBnbygxKTtcbiAgfTtcblxuICB2YXIgY2FuR28gPSBmdW5jdGlvbiBjYW5HbyhuKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IGhpc3RvcnkuaW5kZXggKyBuO1xuICAgIHJldHVybiBuZXh0SW5kZXggPj0gMCAmJiBuZXh0SW5kZXggPCBoaXN0b3J5LmVudHJpZXMubGVuZ3RoO1xuICB9O1xuXG4gIHZhciBibG9jayA9IGZ1bmN0aW9uIGJsb2NrKCkge1xuICAgIHZhciBwcm9tcHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuICAgIHJldHVybiB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcbiAgfTtcblxuICB2YXIgbGlzdGVuID0gZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgfTtcblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGVudHJpZXMubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGVudHJpZXNbaW5kZXhdLFxuICAgIGluZGV4OiBpbmRleCxcbiAgICBlbnRyaWVzOiBlbnRyaWVzLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBjYW5HbzogY2FuR28sXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG5cbiAgcmV0dXJuIGhpc3Rvcnk7XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBjcmVhdGVNZW1vcnlIaXN0b3J5OyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF93YXJuaW5nID0gcmVxdWlyZSgnd2FybmluZycpO1xuXG52YXIgX3dhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2FybmluZyk7XG5cbnZhciBfaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbnZhciBfaW52YXJpYW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ludmFyaWFudCk7XG5cbnZhciBfTG9jYXRpb25VdGlscyA9IHJlcXVpcmUoJy4vTG9jYXRpb25VdGlscycpO1xuXG52YXIgX1BhdGhVdGlscyA9IHJlcXVpcmUoJy4vUGF0aFV0aWxzJyk7XG5cbnZhciBfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIgPSByZXF1aXJlKCcuL2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyJyk7XG5cbnZhciBfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIpO1xuXG52YXIgX0RPTVV0aWxzID0gcmVxdWlyZSgnLi9ET01VdGlscycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgSGFzaENoYW5nZUV2ZW50ID0gJ2hhc2hjaGFuZ2UnO1xuXG52YXIgSGFzaFBhdGhDb2RlcnMgPSB7XG4gIGhhc2hiYW5nOiB7XG4gICAgZW5jb2RlUGF0aDogZnVuY3Rpb24gZW5jb2RlUGF0aChwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICchJyA/IHBhdGggOiAnIS8nICsgKDAsIF9QYXRoVXRpbHMuc3RyaXBMZWFkaW5nU2xhc2gpKHBhdGgpO1xuICAgIH0sXG4gICAgZGVjb2RlUGF0aDogZnVuY3Rpb24gZGVjb2RlUGF0aChwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICchJyA/IHBhdGguc3Vic3RyKDEpIDogcGF0aDtcbiAgICB9XG4gIH0sXG4gIG5vc2xhc2g6IHtcbiAgICBlbmNvZGVQYXRoOiBfUGF0aFV0aWxzLnN0cmlwTGVhZGluZ1NsYXNoLFxuICAgIGRlY29kZVBhdGg6IF9QYXRoVXRpbHMuYWRkTGVhZGluZ1NsYXNoXG4gIH0sXG4gIHNsYXNoOiB7XG4gICAgZW5jb2RlUGF0aDogX1BhdGhVdGlscy5hZGRMZWFkaW5nU2xhc2gsXG4gICAgZGVjb2RlUGF0aDogX1BhdGhVdGlscy5hZGRMZWFkaW5nU2xhc2hcbiAgfVxufTtcblxudmFyIGdldEhhc2hQYXRoID0gZnVuY3Rpb24gZ2V0SGFzaFBhdGgoKSB7XG4gIC8vIFdlIGNhbid0IHVzZSB3aW5kb3cubG9jYXRpb24uaGFzaCBoZXJlIGJlY2F1c2UgaXQncyBub3RcbiAgLy8gY29uc2lzdGVudCBhY3Jvc3MgYnJvd3NlcnMgLSBGaXJlZm94IHdpbGwgcHJlLWRlY29kZSBpdCFcbiAgdmFyIGhyZWYgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgdmFyIGhhc2hJbmRleCA9IGhyZWYuaW5kZXhPZignIycpO1xuICByZXR1cm4gaGFzaEluZGV4ID09PSAtMSA/ICcnIDogaHJlZi5zdWJzdHJpbmcoaGFzaEluZGV4ICsgMSk7XG59O1xuXG52YXIgcHVzaEhhc2hQYXRoID0gZnVuY3Rpb24gcHVzaEhhc2hQYXRoKHBhdGgpIHtcbiAgcmV0dXJuIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gcGF0aDtcbn07XG5cbnZhciByZXBsYWNlSGFzaFBhdGggPSBmdW5jdGlvbiByZXBsYWNlSGFzaFBhdGgocGF0aCkge1xuICB2YXIgaGFzaEluZGV4ID0gd2luZG93LmxvY2F0aW9uLmhyZWYuaW5kZXhPZignIycpO1xuXG4gIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHdpbmRvdy5sb2NhdGlvbi5ocmVmLnNsaWNlKDAsIGhhc2hJbmRleCA+PSAwID8gaGFzaEluZGV4IDogMCkgKyAnIycgKyBwYXRoKTtcbn07XG5cbnZhciBjcmVhdGVIYXNoSGlzdG9yeSA9IGZ1bmN0aW9uIGNyZWF0ZUhhc2hIaXN0b3J5KCkge1xuICB2YXIgcHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gICgwLCBfaW52YXJpYW50Mi5kZWZhdWx0KShfRE9NVXRpbHMuY2FuVXNlRE9NLCAnSGFzaCBoaXN0b3J5IG5lZWRzIGEgRE9NJyk7XG5cbiAgdmFyIGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdmFyIGNhbkdvV2l0aG91dFJlbG9hZCA9ICgwLCBfRE9NVXRpbHMuc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2gpKCk7XG5cbiAgdmFyIF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9IHByb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzJGdldFVzZXJDb25maXJtID09PSB1bmRlZmluZWQgPyBfRE9NVXRpbHMuZ2V0Q29uZmlybWF0aW9uIDogX3Byb3BzJGdldFVzZXJDb25maXJtLFxuICAgICAgX3Byb3BzJGhhc2hUeXBlID0gcHJvcHMuaGFzaFR5cGUsXG4gICAgICBoYXNoVHlwZSA9IF9wcm9wcyRoYXNoVHlwZSA9PT0gdW5kZWZpbmVkID8gJ3NsYXNoJyA6IF9wcm9wcyRoYXNoVHlwZTtcblxuICB2YXIgYmFzZW5hbWUgPSBwcm9wcy5iYXNlbmFtZSA/ICgwLCBfUGF0aFV0aWxzLnN0cmlwVHJhaWxpbmdTbGFzaCkoKDAsIF9QYXRoVXRpbHMuYWRkTGVhZGluZ1NsYXNoKShwcm9wcy5iYXNlbmFtZSkpIDogJyc7XG5cbiAgdmFyIF9IYXNoUGF0aENvZGVycyRoYXNoVCA9IEhhc2hQYXRoQ29kZXJzW2hhc2hUeXBlXSxcbiAgICAgIGVuY29kZVBhdGggPSBfSGFzaFBhdGhDb2RlcnMkaGFzaFQuZW5jb2RlUGF0aCxcbiAgICAgIGRlY29kZVBhdGggPSBfSGFzaFBhdGhDb2RlcnMkaGFzaFQuZGVjb2RlUGF0aDtcblxuXG4gIHZhciBnZXRET01Mb2NhdGlvbiA9IGZ1bmN0aW9uIGdldERPTUxvY2F0aW9uKCkge1xuICAgIHZhciBwYXRoID0gZGVjb2RlUGF0aChnZXRIYXNoUGF0aCgpKTtcblxuICAgICgwLCBfd2FybmluZzIuZGVmYXVsdCkoIWJhc2VuYW1lIHx8ICgwLCBfUGF0aFV0aWxzLmhhc0Jhc2VuYW1lKShwYXRoLCBiYXNlbmFtZSksICdZb3UgYXJlIGF0dGVtcHRpbmcgdG8gdXNlIGEgYmFzZW5hbWUgb24gYSBwYWdlIHdob3NlIFVSTCBwYXRoIGRvZXMgbm90IGJlZ2luICcgKyAnd2l0aCB0aGUgYmFzZW5hbWUuIEV4cGVjdGVkIHBhdGggXCInICsgcGF0aCArICdcIiB0byBiZWdpbiB3aXRoIFwiJyArIGJhc2VuYW1lICsgJ1wiLicpO1xuXG4gICAgaWYgKGJhc2VuYW1lKSBwYXRoID0gKDAsIF9QYXRoVXRpbHMuc3RyaXBCYXNlbmFtZSkocGF0aCwgYmFzZW5hbWUpO1xuXG4gICAgcmV0dXJuICgwLCBfTG9jYXRpb25VdGlscy5jcmVhdGVMb2NhdGlvbikocGF0aCk7XG4gIH07XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gKDAsIF9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcjIuZGVmYXVsdCkoKTtcblxuICB2YXIgc2V0U3RhdGUgPSBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH07XG5cbiAgdmFyIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICB2YXIgaWdub3JlUGF0aCA9IG51bGw7XG5cbiAgdmFyIGhhbmRsZUhhc2hDaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVIYXNoQ2hhbmdlKCkge1xuICAgIHZhciBwYXRoID0gZ2V0SGFzaFBhdGgoKTtcbiAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKHBhdGgpO1xuXG4gICAgaWYgKHBhdGggIT09IGVuY29kZWRQYXRoKSB7XG4gICAgICAvLyBFbnN1cmUgd2UgYWx3YXlzIGhhdmUgYSBwcm9wZXJseS1lbmNvZGVkIGhhc2guXG4gICAgICByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbigpO1xuICAgICAgdmFyIHByZXZMb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247XG5cbiAgICAgIGlmICghZm9yY2VOZXh0UG9wICYmICgwLCBfTG9jYXRpb25VdGlscy5sb2NhdGlvbnNBcmVFcXVhbCkocHJldkxvY2F0aW9uLCBsb2NhdGlvbikpIHJldHVybjsgLy8gQSBoYXNoY2hhbmdlIGRvZXNuJ3QgYWx3YXlzID09IGxvY2F0aW9uIGNoYW5nZS5cblxuICAgICAgaWYgKGlnbm9yZVBhdGggPT09ICgwLCBfUGF0aFV0aWxzLmNyZWF0ZVBhdGgpKGxvY2F0aW9uKSkgcmV0dXJuOyAvLyBJZ25vcmUgdGhpcyBjaGFuZ2U7IHdlIGFscmVhZHkgc2V0U3RhdGUgaW4gcHVzaC9yZXBsYWNlLlxuXG4gICAgICBpZ25vcmVQYXRoID0gbnVsbDtcblxuICAgICAgaGFuZGxlUG9wKGxvY2F0aW9uKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGhhbmRsZVBvcCA9IGZ1bmN0aW9uIGhhbmRsZVBvcChsb2NhdGlvbikge1xuICAgIGlmIChmb3JjZU5leHRQb3ApIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICAgICAgc2V0U3RhdGUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuXG4gICAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgICBpZiAob2spIHtcbiAgICAgICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV2ZXJ0UG9wKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciByZXZlcnRQb3AgPSBmdW5jdGlvbiByZXZlcnRQb3AoZnJvbUxvY2F0aW9uKSB7XG4gICAgdmFyIHRvTG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uO1xuXG4gICAgLy8gVE9ETzogV2UgY291bGQgcHJvYmFibHkgbWFrZSB0aGlzIG1vcmUgcmVsaWFibGUgYnlcbiAgICAvLyBrZWVwaW5nIGEgbGlzdCBvZiBwYXRocyB3ZSd2ZSBzZWVuIGluIHNlc3Npb25TdG9yYWdlLlxuICAgIC8vIEluc3RlYWQsIHdlIGp1c3QgZGVmYXVsdCB0byAwIGZvciBwYXRocyB3ZSBkb24ndCBrbm93LlxuXG4gICAgdmFyIHRvSW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZigoMCwgX1BhdGhVdGlscy5jcmVhdGVQYXRoKSh0b0xvY2F0aW9uKSk7XG5cbiAgICBpZiAodG9JbmRleCA9PT0gLTEpIHRvSW5kZXggPSAwO1xuXG4gICAgdmFyIGZyb21JbmRleCA9IGFsbFBhdGhzLmxhc3RJbmRleE9mKCgwLCBfUGF0aFV0aWxzLmNyZWF0ZVBhdGgpKGZyb21Mb2NhdGlvbikpO1xuXG4gICAgaWYgKGZyb21JbmRleCA9PT0gLTEpIGZyb21JbmRleCA9IDA7XG5cbiAgICB2YXIgZGVsdGEgPSB0b0luZGV4IC0gZnJvbUluZGV4O1xuXG4gICAgaWYgKGRlbHRhKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSB0cnVlO1xuICAgICAgZ28oZGVsdGEpO1xuICAgIH1cbiAgfTtcblxuICAvLyBFbnN1cmUgdGhlIGhhc2ggaXMgZW5jb2RlZCBwcm9wZXJseSBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZS5cbiAgdmFyIHBhdGggPSBnZXRIYXNoUGF0aCgpO1xuICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKHBhdGgpO1xuXG4gIGlmIChwYXRoICE9PSBlbmNvZGVkUGF0aCkgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcblxuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oKTtcbiAgdmFyIGFsbFBhdGhzID0gWygwLCBfUGF0aFV0aWxzLmNyZWF0ZVBhdGgpKGluaXRpYWxMb2NhdGlvbildO1xuXG4gIC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICB2YXIgY3JlYXRlSHJlZiA9IGZ1bmN0aW9uIGNyZWF0ZUhyZWYobG9jYXRpb24pIHtcbiAgICByZXR1cm4gJyMnICsgZW5jb2RlUGF0aChiYXNlbmFtZSArICgwLCBfUGF0aFV0aWxzLmNyZWF0ZVBhdGgpKGxvY2F0aW9uKSk7XG4gIH07XG5cbiAgdmFyIHB1c2ggPSBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KShzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCBwdXNoIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9ICgwLCBfTG9jYXRpb25VdGlscy5jcmVhdGVMb2NhdGlvbikocGF0aCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgdmFyIHBhdGggPSAoMCwgX1BhdGhVdGlscy5jcmVhdGVQYXRoKShsb2NhdGlvbik7XG4gICAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKGJhc2VuYW1lICsgcGF0aCk7XG4gICAgICB2YXIgaGFzaENoYW5nZWQgPSBnZXRIYXNoUGF0aCgpICE9PSBlbmNvZGVkUGF0aDtcblxuICAgICAgaWYgKGhhc2hDaGFuZ2VkKSB7XG4gICAgICAgIC8vIFdlIGNhbm5vdCB0ZWxsIGlmIGEgaGFzaGNoYW5nZSB3YXMgY2F1c2VkIGJ5IGEgUFVTSCwgc28gd2UnZFxuICAgICAgICAvLyByYXRoZXIgc2V0U3RhdGUgaGVyZSBhbmQgaWdub3JlIHRoZSBoYXNoY2hhbmdlLiBUaGUgY2F2ZWF0IGhlcmVcbiAgICAgICAgLy8gaXMgdGhhdCBvdGhlciBoYXNoIGhpc3RvcmllcyBpbiB0aGUgcGFnZSB3aWxsIGNvbnNpZGVyIGl0IGEgUE9QLlxuICAgICAgICBpZ25vcmVQYXRoID0gcGF0aDtcbiAgICAgICAgcHVzaEhhc2hQYXRoKGVuY29kZWRQYXRoKTtcblxuICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoKDAsIF9QYXRoVXRpbHMuY3JlYXRlUGF0aCkoaGlzdG9yeS5sb2NhdGlvbikpO1xuICAgICAgICB2YXIgbmV4dFBhdGhzID0gYWxsUGF0aHMuc2xpY2UoMCwgcHJldkluZGV4ID09PSAtMSA/IDAgOiBwcmV2SW5kZXggKyAxKTtcblxuICAgICAgICBuZXh0UGF0aHMucHVzaChwYXRoKTtcbiAgICAgICAgYWxsUGF0aHMgPSBuZXh0UGF0aHM7XG5cbiAgICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KShmYWxzZSwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgUFVTSCB0aGUgc2FtZSBwYXRoOyBhIG5ldyBlbnRyeSB3aWxsIG5vdCBiZSBhZGRlZCB0byB0aGUgaGlzdG9yeSBzdGFjaycpO1xuXG4gICAgICAgIHNldFN0YXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIHJlcGxhY2UgPSBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KShzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCByZXBsYWNlIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9ICgwLCBfTG9jYXRpb25VdGlscy5jcmVhdGVMb2NhdGlvbikocGF0aCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgdmFyIHBhdGggPSAoMCwgX1BhdGhVdGlscy5jcmVhdGVQYXRoKShsb2NhdGlvbik7XG4gICAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKGJhc2VuYW1lICsgcGF0aCk7XG4gICAgICB2YXIgaGFzaENoYW5nZWQgPSBnZXRIYXNoUGF0aCgpICE9PSBlbmNvZGVkUGF0aDtcblxuICAgICAgaWYgKGhhc2hDaGFuZ2VkKSB7XG4gICAgICAgIC8vIFdlIGNhbm5vdCB0ZWxsIGlmIGEgaGFzaGNoYW5nZSB3YXMgY2F1c2VkIGJ5IGEgUkVQTEFDRSwgc28gd2UnZFxuICAgICAgICAvLyByYXRoZXIgc2V0U3RhdGUgaGVyZSBhbmQgaWdub3JlIHRoZSBoYXNoY2hhbmdlLiBUaGUgY2F2ZWF0IGhlcmVcbiAgICAgICAgLy8gaXMgdGhhdCBvdGhlciBoYXNoIGhpc3RvcmllcyBpbiB0aGUgcGFnZSB3aWxsIGNvbnNpZGVyIGl0IGEgUE9QLlxuICAgICAgICBpZ25vcmVQYXRoID0gcGF0aDtcbiAgICAgICAgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHByZXZJbmRleCA9IGFsbFBhdGhzLmluZGV4T2YoKDAsIF9QYXRoVXRpbHMuY3JlYXRlUGF0aCkoaGlzdG9yeS5sb2NhdGlvbikpO1xuXG4gICAgICBpZiAocHJldkluZGV4ICE9PSAtMSkgYWxsUGF0aHNbcHJldkluZGV4XSA9IHBhdGg7XG5cbiAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgZ28gPSBmdW5jdGlvbiBnbyhuKSB7XG4gICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KShjYW5Hb1dpdGhvdXRSZWxvYWQsICdIYXNoIGhpc3RvcnkgZ28obikgY2F1c2VzIGEgZnVsbCBwYWdlIHJlbG9hZCBpbiB0aGlzIGJyb3dzZXInKTtcblxuICAgIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gIH07XG5cbiAgdmFyIGdvQmFjayA9IGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICByZXR1cm4gZ28oLTEpO1xuICB9O1xuXG4gIHZhciBnb0ZvcndhcmQgPSBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgcmV0dXJuIGdvKDEpO1xuICB9O1xuXG4gIHZhciBsaXN0ZW5lckNvdW50ID0gMDtcblxuICB2YXIgY2hlY2tET01MaXN0ZW5lcnMgPSBmdW5jdGlvbiBjaGVja0RPTUxpc3RlbmVycyhkZWx0YSkge1xuICAgIGxpc3RlbmVyQ291bnQgKz0gZGVsdGE7XG5cbiAgICBpZiAobGlzdGVuZXJDb3VudCA9PT0gMSkge1xuICAgICAgKDAsIF9ET01VdGlscy5hZGRFdmVudExpc3RlbmVyKSh3aW5kb3csIEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfSBlbHNlIGlmIChsaXN0ZW5lckNvdW50ID09PSAwKSB7XG4gICAgICAoMCwgX0RPTVV0aWxzLnJlbW92ZUV2ZW50TGlzdGVuZXIpKHdpbmRvdywgSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGlzQmxvY2tlZCA9IGZhbHNlO1xuXG4gIHZhciBibG9jayA9IGZ1bmN0aW9uIGJsb2NrKCkge1xuICAgIHZhciBwcm9tcHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuXG4gICAgdmFyIHVuYmxvY2sgPSB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcblxuICAgIGlmICghaXNCbG9ja2VkKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICAgIGlzQmxvY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgICAgaXNCbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuYmxvY2soKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBsaXN0ZW4gPSBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICB2YXIgdW5saXN0ZW4gPSB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgdW5saXN0ZW4oKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZ2xvYmFsSGlzdG9yeS5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogaW5pdGlhbExvY2F0aW9uLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcblxuICByZXR1cm4gaGlzdG9yeTtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZUhhc2hIaXN0b3J5OyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX3dhcm5pbmcgPSByZXF1aXJlKCd3YXJuaW5nJyk7XG5cbnZhciBfd2FybmluZzIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93YXJuaW5nKTtcblxudmFyIF9pbnZhcmlhbnQgPSByZXF1aXJlKCdpbnZhcmlhbnQnKTtcblxudmFyIF9pbnZhcmlhbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW52YXJpYW50KTtcblxudmFyIF9Mb2NhdGlvblV0aWxzID0gcmVxdWlyZSgnLi9Mb2NhdGlvblV0aWxzJyk7XG5cbnZhciBfUGF0aFV0aWxzID0gcmVxdWlyZSgnLi9QYXRoVXRpbHMnKTtcblxudmFyIF9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlciA9IHJlcXVpcmUoJy4vY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXInKTtcblxudmFyIF9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcik7XG5cbnZhciBfRE9NVXRpbHMgPSByZXF1aXJlKCcuL0RPTVV0aWxzJyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBQb3BTdGF0ZUV2ZW50ID0gJ3BvcHN0YXRlJztcbnZhciBIYXNoQ2hhbmdlRXZlbnQgPSAnaGFzaGNoYW5nZSc7XG5cbnZhciBnZXRIaXN0b3J5U3RhdGUgPSBmdW5jdGlvbiBnZXRIaXN0b3J5U3RhdGUoKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIHdpbmRvdy5oaXN0b3J5LnN0YXRlIHx8IHt9O1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gSUUgMTEgc29tZXRpbWVzIHRocm93cyB3aGVuIGFjY2Vzc2luZyB3aW5kb3cuaGlzdG9yeS5zdGF0ZVxuICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vUmVhY3RUcmFpbmluZy9oaXN0b3J5L3B1bGwvMjg5XG4gICAgcmV0dXJuIHt9O1xuICB9XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBoaXN0b3J5IG9iamVjdCB0aGF0IHVzZXMgdGhlIEhUTUw1IGhpc3RvcnkgQVBJIGluY2x1ZGluZ1xuICogcHVzaFN0YXRlLCByZXBsYWNlU3RhdGUsIGFuZCB0aGUgcG9wc3RhdGUgZXZlbnQuXG4gKi9cbnZhciBjcmVhdGVCcm93c2VySGlzdG9yeSA9IGZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJIaXN0b3J5KCkge1xuICB2YXIgcHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gICgwLCBfaW52YXJpYW50Mi5kZWZhdWx0KShfRE9NVXRpbHMuY2FuVXNlRE9NLCAnQnJvd3NlciBoaXN0b3J5IG5lZWRzIGEgRE9NJyk7XG5cbiAgdmFyIGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdmFyIGNhblVzZUhpc3RvcnkgPSAoMCwgX0RPTVV0aWxzLnN1cHBvcnRzSGlzdG9yeSkoKTtcbiAgdmFyIG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyID0gISgwLCBfRE9NVXRpbHMuc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSkoKTtcblxuICB2YXIgX3Byb3BzJGZvcmNlUmVmcmVzaCA9IHByb3BzLmZvcmNlUmVmcmVzaCxcbiAgICAgIGZvcmNlUmVmcmVzaCA9IF9wcm9wcyRmb3JjZVJlZnJlc2ggPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogX3Byb3BzJGZvcmNlUmVmcmVzaCxcbiAgICAgIF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9IHByb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzJGdldFVzZXJDb25maXJtID09PSB1bmRlZmluZWQgPyBfRE9NVXRpbHMuZ2V0Q29uZmlybWF0aW9uIDogX3Byb3BzJGdldFVzZXJDb25maXJtLFxuICAgICAgX3Byb3BzJGtleUxlbmd0aCA9IHByb3BzLmtleUxlbmd0aCxcbiAgICAgIGtleUxlbmd0aCA9IF9wcm9wcyRrZXlMZW5ndGggPT09IHVuZGVmaW5lZCA/IDYgOiBfcHJvcHMka2V5TGVuZ3RoO1xuXG4gIHZhciBiYXNlbmFtZSA9IHByb3BzLmJhc2VuYW1lID8gKDAsIF9QYXRoVXRpbHMuc3RyaXBUcmFpbGluZ1NsYXNoKSgoMCwgX1BhdGhVdGlscy5hZGRMZWFkaW5nU2xhc2gpKHByb3BzLmJhc2VuYW1lKSkgOiAnJztcblxuICB2YXIgZ2V0RE9NTG9jYXRpb24gPSBmdW5jdGlvbiBnZXRET01Mb2NhdGlvbihoaXN0b3J5U3RhdGUpIHtcbiAgICB2YXIgX3JlZiA9IGhpc3RvcnlTdGF0ZSB8fCB7fSxcbiAgICAgICAga2V5ID0gX3JlZi5rZXksXG4gICAgICAgIHN0YXRlID0gX3JlZi5zdGF0ZTtcblxuICAgIHZhciBfd2luZG93JGxvY2F0aW9uID0gd2luZG93LmxvY2F0aW9uLFxuICAgICAgICBwYXRobmFtZSA9IF93aW5kb3ckbG9jYXRpb24ucGF0aG5hbWUsXG4gICAgICAgIHNlYXJjaCA9IF93aW5kb3ckbG9jYXRpb24uc2VhcmNoLFxuICAgICAgICBoYXNoID0gX3dpbmRvdyRsb2NhdGlvbi5oYXNoO1xuXG5cbiAgICB2YXIgcGF0aCA9IHBhdGhuYW1lICsgc2VhcmNoICsgaGFzaDtcblxuICAgICgwLCBfd2FybmluZzIuZGVmYXVsdCkoIWJhc2VuYW1lIHx8ICgwLCBfUGF0aFV0aWxzLmhhc0Jhc2VuYW1lKShwYXRoLCBiYXNlbmFtZSksICdZb3UgYXJlIGF0dGVtcHRpbmcgdG8gdXNlIGEgYmFzZW5hbWUgb24gYSBwYWdlIHdob3NlIFVSTCBwYXRoIGRvZXMgbm90IGJlZ2luICcgKyAnd2l0aCB0aGUgYmFzZW5hbWUuIEV4cGVjdGVkIHBhdGggXCInICsgcGF0aCArICdcIiB0byBiZWdpbiB3aXRoIFwiJyArIGJhc2VuYW1lICsgJ1wiLicpO1xuXG4gICAgaWYgKGJhc2VuYW1lKSBwYXRoID0gKDAsIF9QYXRoVXRpbHMuc3RyaXBCYXNlbmFtZSkocGF0aCwgYmFzZW5hbWUpO1xuXG4gICAgcmV0dXJuICgwLCBfTG9jYXRpb25VdGlscy5jcmVhdGVMb2NhdGlvbikocGF0aCwgc3RhdGUsIGtleSk7XG4gIH07XG5cbiAgdmFyIGNyZWF0ZUtleSA9IGZ1bmN0aW9uIGNyZWF0ZUtleSgpIHtcbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIGtleUxlbmd0aCk7XG4gIH07XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gKDAsIF9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcjIuZGVmYXVsdCkoKTtcblxuICB2YXIgc2V0U3RhdGUgPSBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH07XG5cbiAgdmFyIGhhbmRsZVBvcFN0YXRlID0gZnVuY3Rpb24gaGFuZGxlUG9wU3RhdGUoZXZlbnQpIHtcbiAgICAvLyBJZ25vcmUgZXh0cmFuZW91cyBwb3BzdGF0ZSBldmVudHMgaW4gV2ViS2l0LlxuICAgIGlmICgoMCwgX0RPTVV0aWxzLmlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQpKGV2ZW50KSkgcmV0dXJuO1xuXG4gICAgaGFuZGxlUG9wKGdldERPTUxvY2F0aW9uKGV2ZW50LnN0YXRlKSk7XG4gIH07XG5cbiAgdmFyIGhhbmRsZUhhc2hDaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVIYXNoQ2hhbmdlKCkge1xuICAgIGhhbmRsZVBvcChnZXRET01Mb2NhdGlvbihnZXRIaXN0b3J5U3RhdGUoKSkpO1xuICB9O1xuXG4gIHZhciBmb3JjZU5leHRQb3AgPSBmYWxzZTtcblxuICB2YXIgaGFuZGxlUG9wID0gZnVuY3Rpb24gaGFuZGxlUG9wKGxvY2F0aW9uKSB7XG4gICAgaWYgKGZvcmNlTmV4dFBvcCkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gICAgICBzZXRTdGF0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG5cbiAgICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICAgIGlmIChvaykge1xuICAgICAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXZlcnRQb3AobG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIHJldmVydFBvcCA9IGZ1bmN0aW9uIHJldmVydFBvcChmcm9tTG9jYXRpb24pIHtcbiAgICB2YXIgdG9Mb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247XG5cbiAgICAvLyBUT0RPOiBXZSBjb3VsZCBwcm9iYWJseSBtYWtlIHRoaXMgbW9yZSByZWxpYWJsZSBieVxuICAgIC8vIGtlZXBpbmcgYSBsaXN0IG9mIGtleXMgd2UndmUgc2VlbiBpbiBzZXNzaW9uU3RvcmFnZS5cbiAgICAvLyBJbnN0ZWFkLCB3ZSBqdXN0IGRlZmF1bHQgdG8gMCBmb3Iga2V5cyB3ZSBkb24ndCBrbm93LlxuXG4gICAgdmFyIHRvSW5kZXggPSBhbGxLZXlzLmluZGV4T2YodG9Mb2NhdGlvbi5rZXkpO1xuXG4gICAgaWYgKHRvSW5kZXggPT09IC0xKSB0b0luZGV4ID0gMDtcblxuICAgIHZhciBmcm9tSW5kZXggPSBhbGxLZXlzLmluZGV4T2YoZnJvbUxvY2F0aW9uLmtleSk7XG5cbiAgICBpZiAoZnJvbUluZGV4ID09PSAtMSkgZnJvbUluZGV4ID0gMDtcblxuICAgIHZhciBkZWx0YSA9IHRvSW5kZXggLSBmcm9tSW5kZXg7XG5cbiAgICBpZiAoZGVsdGEpIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IHRydWU7XG4gICAgICBnbyhkZWx0YSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBpbml0aWFsTG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbihnZXRIaXN0b3J5U3RhdGUoKSk7XG4gIHZhciBhbGxLZXlzID0gW2luaXRpYWxMb2NhdGlvbi5rZXldO1xuXG4gIC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICB2YXIgY3JlYXRlSHJlZiA9IGZ1bmN0aW9uIGNyZWF0ZUhyZWYobG9jYXRpb24pIHtcbiAgICByZXR1cm4gYmFzZW5hbWUgKyAoMCwgX1BhdGhVdGlscy5jcmVhdGVQYXRoKShsb2NhdGlvbik7XG4gIH07XG5cbiAgdmFyIHB1c2ggPSBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KSghKCh0eXBlb2YgcGF0aCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YocGF0aCkpID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byBwdXNoIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSAoMCwgX0xvY2F0aW9uVXRpbHMuY3JlYXRlTG9jYXRpb24pKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuXG4gICAgICB2YXIgaHJlZiA9IGNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgICAgdmFyIGtleSA9IGxvY2F0aW9uLmtleSxcbiAgICAgICAgICBzdGF0ZSA9IGxvY2F0aW9uLnN0YXRlO1xuXG5cbiAgICAgIGlmIChjYW5Vc2VIaXN0b3J5KSB7XG4gICAgICAgIGdsb2JhbEhpc3RvcnkucHVzaFN0YXRlKHsga2V5OiBrZXksIHN0YXRlOiBzdGF0ZSB9LCBudWxsLCBocmVmKTtcblxuICAgICAgICBpZiAoZm9yY2VSZWZyZXNoKSB7XG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBocmVmO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxLZXlzLmluZGV4T2YoaGlzdG9yeS5sb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIHZhciBuZXh0S2V5cyA9IGFsbEtleXMuc2xpY2UoMCwgcHJldkluZGV4ID09PSAtMSA/IDAgOiBwcmV2SW5kZXggKyAxKTtcblxuICAgICAgICAgIG5leHRLZXlzLnB1c2gobG9jYXRpb24ua2V5KTtcbiAgICAgICAgICBhbGxLZXlzID0gbmV4dEtleXM7XG5cbiAgICAgICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICgwLCBfd2FybmluZzIuZGVmYXVsdCkoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0Jyb3dzZXIgaGlzdG9yeSBjYW5ub3QgcHVzaCBzdGF0ZSBpbiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IEhUTUw1IGhpc3RvcnknKTtcblxuICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGhyZWY7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIHJlcGxhY2UgPSBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KSghKCh0eXBlb2YgcGF0aCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YocGF0aCkpID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byByZXBsYWNlIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSAoMCwgX0xvY2F0aW9uVXRpbHMuY3JlYXRlTG9jYXRpb24pKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuXG4gICAgICB2YXIgaHJlZiA9IGNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgICAgdmFyIGtleSA9IGxvY2F0aW9uLmtleSxcbiAgICAgICAgICBzdGF0ZSA9IGxvY2F0aW9uLnN0YXRlO1xuXG5cbiAgICAgIGlmIChjYW5Vc2VIaXN0b3J5KSB7XG4gICAgICAgIGdsb2JhbEhpc3RvcnkucmVwbGFjZVN0YXRlKHsga2V5OiBrZXksIHN0YXRlOiBzdGF0ZSB9LCBudWxsLCBocmVmKTtcblxuICAgICAgICBpZiAoZm9yY2VSZWZyZXNoKSB7XG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoaHJlZik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbEtleXMuaW5kZXhPZihoaXN0b3J5LmxvY2F0aW9uLmtleSk7XG5cbiAgICAgICAgICBpZiAocHJldkluZGV4ICE9PSAtMSkgYWxsS2V5c1twcmV2SW5kZXhdID0gbG9jYXRpb24ua2V5O1xuXG4gICAgICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKHN0YXRlID09PSB1bmRlZmluZWQsICdCcm93c2VyIGhpc3RvcnkgY2Fubm90IHJlcGxhY2Ugc3RhdGUgaW4gYnJvd3NlcnMgdGhhdCBkbyBub3Qgc3VwcG9ydCBIVE1MNSBoaXN0b3J5Jyk7XG5cbiAgICAgICAgd2luZG93LmxvY2F0aW9uLnJlcGxhY2UoaHJlZik7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIGdvID0gZnVuY3Rpb24gZ28obikge1xuICAgIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gIH07XG5cbiAgdmFyIGdvQmFjayA9IGZ1bmN0aW9uIGdvQmFjaygpIHtcbiAgICByZXR1cm4gZ28oLTEpO1xuICB9O1xuXG4gIHZhciBnb0ZvcndhcmQgPSBmdW5jdGlvbiBnb0ZvcndhcmQoKSB7XG4gICAgcmV0dXJuIGdvKDEpO1xuICB9O1xuXG4gIHZhciBsaXN0ZW5lckNvdW50ID0gMDtcblxuICB2YXIgY2hlY2tET01MaXN0ZW5lcnMgPSBmdW5jdGlvbiBjaGVja0RPTUxpc3RlbmVycyhkZWx0YSkge1xuICAgIGxpc3RlbmVyQ291bnQgKz0gZGVsdGE7XG5cbiAgICBpZiAobGlzdGVuZXJDb3VudCA9PT0gMSkge1xuICAgICAgKDAsIF9ET01VdGlscy5hZGRFdmVudExpc3RlbmVyKSh3aW5kb3csIFBvcFN0YXRlRXZlbnQsIGhhbmRsZVBvcFN0YXRlKTtcblxuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSAoMCwgX0RPTVV0aWxzLmFkZEV2ZW50TGlzdGVuZXIpKHdpbmRvdywgSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9IGVsc2UgaWYgKGxpc3RlbmVyQ291bnQgPT09IDApIHtcbiAgICAgICgwLCBfRE9NVXRpbHMucmVtb3ZlRXZlbnRMaXN0ZW5lcikod2luZG93LCBQb3BTdGF0ZUV2ZW50LCBoYW5kbGVQb3BTdGF0ZSk7XG5cbiAgICAgIGlmIChuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lcikgKDAsIF9ET01VdGlscy5yZW1vdmVFdmVudExpc3RlbmVyKSh3aW5kb3csIEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBpc0Jsb2NrZWQgPSBmYWxzZTtcblxuICB2YXIgYmxvY2sgPSBmdW5jdGlvbiBibG9jaygpIHtcbiAgICB2YXIgcHJvbXB0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBmYWxzZTtcblxuICAgIHZhciB1bmJsb2NrID0gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG5cbiAgICBpZiAoIWlzQmxvY2tlZCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgICBpc0Jsb2NrZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaXNCbG9ja2VkKSB7XG4gICAgICAgIGlzQmxvY2tlZCA9IGZhbHNlO1xuICAgICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1bmJsb2NrKCk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgbGlzdGVuID0gZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgdmFyIHVubGlzdGVuID0gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIHVubGlzdGVuKCk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGdsb2JhbEhpc3RvcnkubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGluaXRpYWxMb2NhdGlvbixcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG5cbiAgcmV0dXJuIGhpc3Rvcnk7XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBjcmVhdGVCcm93c2VySGlzdG9yeTsiLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHViU3ViIGZyb20gXCJwdWJzdWItanNcIjtcblxuaW1wb3J0IFV0aWxzIGZyb20gXCIuLi8uLi9zZXJ2aWNlcy91dGlsXCI7XG5pbXBvcnQgc3R5bGVzIGZyb20gXCIuL3NvdXJjZUxpc3QuY3NzXCI7XG5pbXBvcnQgeyBTT1VSQ0VfTElTVF9JVEVNX0VWRU5UIH0gZnJvbSBcIi4vc291cmNlcy5wcm9wc1wiO1xuXG5jb25zdCBEUk9QX0RPV05fTUVOVV9JRCA9IFwiZHJvcGRvd25NZW51QnV0dG9uX1wiICsgVXRpbHMuZ2VuZXJhdGVSYW5kb21TdHJpbmcoNSk7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNvdXJjZUxpc3QgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge307XG4gICAgdGhpcy5zb3VyY2VMaXN0SXRlbUNsaWNrZWQgPSB0aGlzLnNvdXJjZUxpc3RJdGVtQ2xpY2tlZC5iaW5kKHRoaXMpO1xuICB9XG5cbiAgc291cmNlTGlzdEl0ZW1DbGlja2VkKGV2ZW50LCB7IGRhdGFLZXkgfSkge1xuICAgIFB1YlN1Yi5wdWJsaXNoKFNPVVJDRV9MSVNUX0lURU1fRVZFTlQsIHsgY29kZTogZGF0YUtleSB9KTtcbiAgfVxuXG4gIGdldE5ld3NTb3VyY2VFbGVtZW50cyhTT1VSQ0VfTElTVCkge1xuICAgIGxldCBzb3VyY2VFbGVtZW50TGlzdCA9IE9iamVjdC5rZXlzKFNPVVJDRV9MSVNUKS5tYXAoc291cmNlTmFtZSA9PiB7XG4gICAgICBsZXQgc291cmNlT2JqID0gU09VUkNFX0xJU1Rbc291cmNlTmFtZV07XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8bGkgb25DbGljaz17ZSA9PiB0aGlzLnNvdXJjZUxpc3RJdGVtQ2xpY2tlZChlLCB7IGRhdGFLZXk6IHNvdXJjZU9iai5TT1VSQ0VfSUQgfSl9PlxuICAgICAgICAgIDxhIGNsYXNzTmFtZT1cImRyb3Bkb3duLWl0ZW1cIiBocmVmPVwiI1wiIGtleT17c291cmNlT2JqLktFWX0gZGF0YS1rZXk9e3NvdXJjZU9iai5TT1VSQ0VfSUR9PlxuICAgICAgICAgICAge3NvdXJjZU9iai5TT1VSQ0VfTkFNRX1cbiAgICAgICAgICA8L2E+XG4gICAgICAgIDwvbGk+XG4gICAgICApO1xuICAgIH0pO1xuICAgIHJldHVybiBzb3VyY2VFbGVtZW50TGlzdDtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzcz1cImJ0bi1ncm91cCBjb250YWluZXItZmx1aWRcIj5cbiAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLWRlZmF1bHQgZHJvcGRvd24tdG9nZ2xlIGNvbnRhaW5lci1mbHVpZFwiIGRhdGEtdG9nZ2xlPVwiZHJvcGRvd25cIj57dGhpcy5wcm9wcy50aXRsZX08c3BhbiBjbGFzcz1cImNhcmV0XCI+PC9zcGFuPjwvYnV0dG9uPlxuICAgICAgICA8dWwgY2xhc3NOYW1lPXtcImRyb3Bkb3duLW1lbnUgY29udGFpbmVyLWZsdWlkIFwiICsgc3R5bGVzLnNjcm9sbGFibGVfbWVudX0gcm9sZT1cIm1lbnVcIj5cbiAgICAgICAgICB7dGhpcy5nZXROZXdzU291cmNlRWxlbWVudHModGhpcy5wcm9wcy5saXN0KX1cbiAgICAgICAgPC91bD5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn0iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHViU3ViIGZyb20gXCJwdWJzdWItanNcIjtcblxuaW1wb3J0IE5ld3NQYW5lbCBmcm9tIFwiLi4vbmV3cy1wYW5lbC9uZXdzUGFuZWwuY29tcG9uZW50XCI7XG5pbXBvcnQgeyBTT1VSQ0VTX0xJU1QsIFNPVVJDRV9MSVNUX0lURU1fRVZFTlQsIFNPVVJDRVNfRFJPUERPV05fVElUTEUgfSBmcm9tIFwiLi9zb3VyY2VzLnByb3BzXCI7XG5pbXBvcnQgU291cmNlTGlzdCBmcm9tIFwiLi9zb3VyY2VMaXN0LmNvbXBvbmVudFwiO1xuaW1wb3J0IE5ld3NTZXJ2aWNlIGZyb20gXCIuLi8uLi9zZXJ2aWNlcy9uZXdzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNvdXJjZVBhZ2UgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgbmV3c0RhdGE6IFtdLFxuICAgICAgc2hvd05ld3NQYW5lbDogZmFsc2UsXG4gICAgICBuZXdzUGFuZWxMb2FkaW5nOiB0cnVlLFxuICAgICAgc291cmNlTGlzdDogU09VUkNFU19MSVNUXG4gICAgfTtcbiAgICB0aGlzLnNvdXJjZUxpc3RTdWJzY3JpcHRpb24gPSBudWxsO1xuICAgIHRoaXMubmV3c1NlcnZpY2UgPSBuZXcgTmV3c1NlcnZpY2UoKTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMuc291cmNlTGlzdFN1YnNjcmlwdGlvbiA9IFB1YlN1Yi5zdWJzY3JpYmUoU09VUkNFX0xJU1RfSVRFTV9FVkVOVCwgdGhpcy5zb3VyY2VMaXN0SXRlbUNsaWNrZWQuYmluZCh0aGlzKSk7XG5cbiAgICB0aGlzLm5ld3NTZXJ2aWNlLmZldGNoTmV3c1NvdXJjZXMoKVxuICAgICAgLnRoZW4oc291cmNlRGF0YSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKFwiKioqKiBzb3VyY2VEYXRhXCIsIHNvdXJjZURhdGEpXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBzb3VyY2VMaXN0OiBzb3VyY2VEYXRhIH0pO1xuICAgICAgfSk7XG4gIH1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBpZiAodGhpcy5zb3VyY2VMaXN0U3Vic2NyaXB0aW9uKSB7XG4gICAgICBQdWJTdWIudW5zdWJzY3JpYmUodGhpcy5zb3VyY2VMaXN0U3Vic2NyaXB0aW9uKTtcbiAgICB9XG4gICAgdGhpcy5uZXdzU2VydmljZSA9IG51bGw7XG4gIH1cblxuICBzb3VyY2VMaXN0SXRlbUNsaWNrZWQobXNnLCBkYXRhKSB7XG4gICAgaWYgKGRhdGEuY29kZSkge1xuICAgICAgdGhpcy5mZXRjaEhlYWRsaW5lc0FuZFJlbmRlcih7IHNvdXJjZXM6IGRhdGEuY29kZSB9KTtcbiAgICB9XG4gIH1cblxuICBmZXRjaEhlYWRsaW5lc0FuZFJlbmRlcihvcHRpb25zKSB7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IHNob3dOZXdzUGFuZWw6IHRydWUgfSk7XG5cbiAgICB0aGlzLm5ld3NTZXJ2aWNlLmZldGNoVG9wSGVhZGxpbmVzKG9wdGlvbnMpXG4gICAgICAudGhlbihuZXdzID0+IHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgbmV3c0RhdGE6IG5ld3MsXG4gICAgICAgICAgbmV3c1BhbmVsTG9hZGluZzogZmFsc2VcbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9J2NvbnRhaW5lcic+XG4gICAgICAgIDxTb3VyY2VMaXN0IGxpc3Q9e3RoaXMuc3RhdGUuc291cmNlTGlzdH0gdGl0bGU9e1NPVVJDRVNfRFJPUERPV05fVElUTEV9IC8+XG4gICAgICAgIHt0aGlzLnN0YXRlLnNob3dOZXdzUGFuZWwgPyA8TmV3c1BhbmVsIG5ld3NEYXRhPXt0aGlzLnN0YXRlLm5ld3NEYXRhfSBpc0xvYWRpbmc9e3RoaXMuc3RhdGUubmV3c1BhbmVsTG9hZGluZ30gLz4gOiBudWxsfVxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufSIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQdWJTdWIgZnJvbSBcInB1YnN1Yi1qc1wiO1xuXG5pbXBvcnQgVXRpbHMgZnJvbSBcIi4uLy4uL3NlcnZpY2VzL3V0aWxcIjtcbmltcG9ydCB7IEtFWUNPREVTLCBFVkVOVFMgfSBmcm9tIFwiLi4vLi4vY29uZmlnL2NvbnN0YW50c1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTZWFyY2hCYXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge307XG4gICAgdGhpcy5zZWFyY2hLZXkgPSBwcm9wcy5zZWFyY2hLZXk7XG4gICAgdGhpcy5TRUFSQ0hfVE9QSUMgPSAnU0VBUkNIX0JBUl9DTElDS0VEXycgKyAocHJvcHMuc2VhcmNoS2V5ID8gcHJvcHMuc2VhcmNoS2V5IDogJycpO1xuICAgIHRoaXMuc2VhcmNoQ2xpY2tlZCA9IHRoaXMuc2VhcmNoQ2xpY2tlZC5iaW5kKHRoaXMpO1xuICB9XG5cbiAgc2VhcmNoQ2xpY2tlZChldmVudCkge1xuICAgIC8vIFNFQVJDSCBpZiBlbnRlciBwcmVzc2VkXG4gICAgaWYgKGV2ZW50LnR5cGUgPT0gRVZFTlRTLktFWVVQLm5hbWUgJiYgZXZlbnQua2V5Q29kZSAhPSBLRVlDT0RFUy5FTlRFUikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBsZXQgc2VhcmNoSW5wdXRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NlYXJjaF8nICsgdGhpcy5zZWFyY2hLZXkpO1xuICAgIGxldCBzZWFyY2hUZXh0ID0gc2VhcmNoSW5wdXRFbGVtZW50LnZhbHVlO1xuICAgIGlmIChzZWFyY2hUZXh0ICYmIHNlYXJjaFRleHQubGVuZ3RoID4gMCkge1xuICAgICAgUHViU3ViLnB1Ymxpc2godGhpcy5TRUFSQ0hfVE9QSUMsIHsgdGV4dDogc2VhcmNoVGV4dCB9KVxuICAgIH1cbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9J2lucHV0LWdyb3VwIG1kLWZvcm0gZm9ybS1zbSBmb3JtLTIgcGwtMCc+XG4gICAgICAgIDxpbnB1dCBjbGFzc05hbWU9J2Zvcm0tY29udHJvbCBteS0wIHB5LTEgYW1iZXItYm9yZGVyJyBpZD17J3NlYXJjaF8nICsgdGhpcy5zZWFyY2hLZXl9IHR5cGU9XCJ0ZXh0XCIgcGxhY2Vob2xkZXI9XCJTZWFyY2hcIiBhcmlhLWxhYmVsPVwiU2VhcmNoXCIgb25LZXlVcD17dGhpcy5zZWFyY2hDbGlja2VkfSAvPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT0naW5wdXQtZ3JvdXAtYXBwZW5kJz5cbiAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9J2lucHV0LWdyb3VwLXRleHQgYW1iZXIgbGlnaHRlbi0zJyBpZD1cImJhc2ljLXRleHQxXCIgb25DbGljaz17dGhpcy5zZWFyY2hDbGlja2VkfT5cbiAgICAgICAgICAgIDxpIGNsYXNzTmFtZT0nZmEgZmEtc2VhcmNoIHRleHQtZ3JleScgYXJpYS1oaWRkZW49XCJ0cnVlXCI+PC9pPlxuICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG5cbn0iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHViU3ViIGZyb20gXCJwdWJzdWItanNcIjtcblxuaW1wb3J0IFNlYXJjaEJhciBmcm9tIFwiLi9zZWFyY2hiYXIuY29tcG9uZW50XCI7XG5pbXBvcnQgTmV3c1BhbmVsIGZyb20gXCIuLi9uZXdzLXBhbmVsL25ld3NQYW5lbC5jb21wb25lbnRcIjtcbmltcG9ydCBVdGlscyBmcm9tIFwiLi4vLi4vc2VydmljZXMvdXRpbFwiO1xuaW1wb3J0IE5ld3NTZXJ2aWNlIGZyb20gXCIuLi8uLi9zZXJ2aWNlcy9uZXdzXCI7XG5pbXBvcnQgeyBQQUdFX1NDUk9MTEVEX0JPVFRPTV9FVkVOVCB9IGZyb20gXCIuLi9wYWdlLWJvZHkvcGFnZUJvZHkucHJvcHNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTmV3c1NlYXJjaCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBzZWFyY2hSZXN1bHRzOiBbXSxcbiAgICAgIHNob3dOZXdzUGFuZWw6IGZhbHNlLFxuICAgICAgbmV3c1BhbmVsTG9hZGluZzogdHJ1ZSxcbiAgICAgIG5ld3NQYW5lbFNjcm9sbGVkRG93bjogZmFsc2VcbiAgICB9O1xuICAgIHRoaXMuc2VhcmNoQmFySWQgPSBVdGlscy5nZW5lcmF0ZVJhbmRvbVN0cmluZyg1KTtcbiAgICB0aGlzLlNFQVJDSF9UT1BJQyA9ICdTRUFSQ0hfQkFSX0NMSUNLRURfJyArIHRoaXMuc2VhcmNoQmFySWQ7XG4gICAgdGhpcy5zZWFyY2hQYWdlID0gMTtcbiAgICB0aGlzLm5ld3NTZXJ2aWNlID0gbmV3IE5ld3NTZXJ2aWNlKCk7XG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLnNlYXJjaEJhclN1YnNjcmlwdGlvbiA9IFB1YlN1Yi5zdWJzY3JpYmUodGhpcy5TRUFSQ0hfVE9QSUMsIHRoaXMuc2VhcmNoQmFyQ2xpY2tlZC5iaW5kKHRoaXMpKTtcbiAgICB0aGlzLnNjcm9sbGVkRG93blN1YnNjcmlwdGlvbiA9IFB1YlN1Yi5zdWJzY3JpYmUoUEFHRV9TQ1JPTExFRF9CT1RUT01fRVZFTlQsIHRoaXMucGFnZVNjcm9sbGVkRG93bi5iaW5kKHRoaXMpKTtcbiAgfVxuXG4gIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgIGlmKHRoaXMuc2Nyb2xsZWREb3duU3Vic2NyaXB0aW9uKSB7XG4gICAgICBQdWJTdWIudW5zdWJzY3JpYmUodGhpcy5zY3JvbGxlZERvd25TdWJzY3JpcHRpb24pO1xuICAgIH1cblxuICAgIGlmKHRoaXMuc2VhcmNoQmFyU3Vic2NyaXB0aW9uKSB7XG4gICAgICBQdWJTdWIudW5zdWJzY3JpYmUodGhpcy5zZWFyY2hCYXJTdWJzY3JpcHRpb24pO1xuICAgIH1cbiAgfVxuXG4gIHBhZ2VTY3JvbGxlZERvd24obWVzc2FnZSwgZGF0YSkge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBuZXdzUGFuZWxTY3JvbGxlZERvd246IHRydWUgfSk7XG4gICAgdGhpcy5mZXRjaFNlYXJjaERhdGEoe30sIHsgbG9hZE1vcmVEYXRhOiB0cnVlIH0pO1xuICB9XG5cbiAgc2VhcmNoQmFyQ2xpY2tlZChtc2csIGRhdGEpIHtcbiAgICB0aGlzLnNldFN0YXRlKHsgc2hvd05ld3NQYW5lbDogdHJ1ZSB9KTtcbiAgICB0aGlzLmZldGNoU2VhcmNoRGF0YSh7IHE6IGRhdGEudGV4dCB9KTtcbiAgfVxuXG4gIGZldGNoU2VhcmNoRGF0YShvcHRpb25zID0ge30sIGFkZGl0aW9uYWxPcHRpb25zID0ge30pIHtcbiAgICB0aGlzLm5ld3NTZXJ2aWNlLnNlYXJjaE5ld3Mob3B0aW9ucywgeyBsb2FkTW9yZURhdGE6IGFkZGl0aW9uYWxPcHRpb25zLmxvYWRNb3JlRGF0YSB8fCBmYWxzZSB9KVxuICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsgXG4gICAgICAgICAgc2VhcmNoUmVzdWx0czogcmVzcG9uc2UsIFxuICAgICAgICAgIG5ld3NQYW5lbExvYWRpbmc6IGZhbHNlLFxuICAgICAgICAgIG5ld3NQYW5lbFNjcm9sbGVkRG93bjogZmFsc2VcbiAgICAgICAgIH0pO1xuICAgICAgfSk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udGFpbmVyXCI+XG4gICAgICAgIDxTZWFyY2hCYXIgc2VhcmNoS2V5PXt0aGlzLnNlYXJjaEJhcklkfSAvPlxuICAgICAgICB7dGhpcy5zdGF0ZS5zaG93TmV3c1BhbmVsID8gPE5ld3NQYW5lbCBzY3JvbGxTdXBwb3J0PXt0cnVlfSBuZXdzRGF0YT17dGhpcy5zdGF0ZS5zZWFyY2hSZXN1bHRzfSBpc0xvYWRpbmc9e3RoaXMuc3RhdGUubmV3c1BhbmVsTG9hZGluZ30gaXNTY3JvbGxlZERvd249e3RoaXMuc3RhdGUubmV3c1BhbmVsU2Nyb2xsZWREb3dufS8+IDogbnVsbH1cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn0iLCJjb25zdCBTRVJWSUNFUyA9IHtcbiAgSE9TVFM6IHtcbiAgICBORVdTOiAnaHR0cHM6Ly9uZXdzYXBpLm9yZydcbiAgfSxcbiAgQVBJUzoge1xuICAgIE5FV1M6IHtcbiAgICAgIEhFQURMSU5FUzogJy92Mi90b3AtaGVhZGxpbmVzJyxcbiAgICAgIFNFQVJDSDogJy92Mi9ldmVyeXRoaW5nJyxcbiAgICAgIFNPVVJDRVM6ICcvdjIvc291cmNlcydcbiAgICB9XG4gIH1cbn07XG5cbi8vIFV0aWxpdHlcbmNvbnN0IExPQURFRF9BUElTID0gKGZ1bmN0aW9uKCkge1xuICBjb25zdCBBUElTID0ge307XG4gIE9iamVjdC5rZXlzKFNFUlZJQ0VTLkhPU1RTKS5mb3JFYWNoKGhvc3QgPT4ge1xuICAgIEFQSVNbaG9zdF0gPSB7fTtcbiAgICBPYmplY3Qua2V5cyhTRVJWSUNFUy5BUElTW2hvc3RdKS5mb3JFYWNoKGFwaSA9PiB7XG4gICAgICBsZXQgSE9TVF9VUkwgPSBuZXcgVVJMKFNFUlZJQ0VTLkhPU1RTW2hvc3RdKTtcbiAgICAgIGxldCBBUElfVVJMID0gKG5ldyBVUkwoU0VSVklDRVMuQVBJU1tob3N0XVthcGldLCBIT1NUX1VSTCkpLmhyZWY7XG4gICAgICBBUElTW2hvc3RdW2FwaV0gPSBBUElfVVJMO1xuICAgIH0pO1xuICB9KTtcbiAgcmV0dXJuIEFQSVM7XG59KSgpO1xuXG5leHBvcnQgZGVmYXVsdCBMT0FERURfQVBJUzsiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU3ludGFjdGljIHN1Z2FyIGZvciBpbnZva2luZyBhIGZ1bmN0aW9uIGFuZCBleHBhbmRpbmcgYW4gYXJyYXkgZm9yIGFyZ3VtZW50cy5cbiAqXG4gKiBDb21tb24gdXNlIGNhc2Ugd291bGQgYmUgdG8gdXNlIGBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHlgLlxuICpcbiAqICBgYGBqc1xuICogIGZ1bmN0aW9uIGYoeCwgeSwgeikge31cbiAqICB2YXIgYXJncyA9IFsxLCAyLCAzXTtcbiAqICBmLmFwcGx5KG51bGwsIGFyZ3MpO1xuICogIGBgYFxuICpcbiAqIFdpdGggYHNwcmVhZGAgdGhpcyBleGFtcGxlIGNhbiBiZSByZS13cml0dGVuLlxuICpcbiAqICBgYGBqc1xuICogIHNwcmVhZChmdW5jdGlvbih4LCB5LCB6KSB7fSkoWzEsIDIsIDNdKTtcbiAqICBgYGBcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFja1xuICogQHJldHVybnMge0Z1bmN0aW9ufVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNwcmVhZChjYWxsYmFjaykge1xuICByZXR1cm4gZnVuY3Rpb24gd3JhcChhcnIpIHtcbiAgICByZXR1cm4gY2FsbGJhY2suYXBwbHkobnVsbCwgYXJyKTtcbiAgfTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBDYW5jZWwgPSByZXF1aXJlKCcuL0NhbmNlbCcpO1xuXG4vKipcbiAqIEEgYENhbmNlbFRva2VuYCBpcyBhbiBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCB0byByZXF1ZXN0IGNhbmNlbGxhdGlvbiBvZiBhbiBvcGVyYXRpb24uXG4gKlxuICogQGNsYXNzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBleGVjdXRvciBUaGUgZXhlY3V0b3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIENhbmNlbFRva2VuKGV4ZWN1dG9yKSB7XG4gIGlmICh0eXBlb2YgZXhlY3V0b3IgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdleGVjdXRvciBtdXN0IGJlIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICB2YXIgcmVzb2x2ZVByb21pc2U7XG4gIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIHByb21pc2VFeGVjdXRvcihyZXNvbHZlKSB7XG4gICAgcmVzb2x2ZVByb21pc2UgPSByZXNvbHZlO1xuICB9KTtcblxuICB2YXIgdG9rZW4gPSB0aGlzO1xuICBleGVjdXRvcihmdW5jdGlvbiBjYW5jZWwobWVzc2FnZSkge1xuICAgIGlmICh0b2tlbi5yZWFzb24pIHtcbiAgICAgIC8vIENhbmNlbGxhdGlvbiBoYXMgYWxyZWFkeSBiZWVuIHJlcXVlc3RlZFxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRva2VuLnJlYXNvbiA9IG5ldyBDYW5jZWwobWVzc2FnZSk7XG4gICAgcmVzb2x2ZVByb21pc2UodG9rZW4ucmVhc29uKTtcbiAgfSk7XG59XG5cbi8qKlxuICogVGhyb3dzIGEgYENhbmNlbGAgaWYgY2FuY2VsbGF0aW9uIGhhcyBiZWVuIHJlcXVlc3RlZC5cbiAqL1xuQ2FuY2VsVG9rZW4ucHJvdG90eXBlLnRocm93SWZSZXF1ZXN0ZWQgPSBmdW5jdGlvbiB0aHJvd0lmUmVxdWVzdGVkKCkge1xuICBpZiAodGhpcy5yZWFzb24pIHtcbiAgICB0aHJvdyB0aGlzLnJlYXNvbjtcbiAgfVxufTtcblxuLyoqXG4gKiBSZXR1cm5zIGFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIGEgbmV3IGBDYW5jZWxUb2tlbmAgYW5kIGEgZnVuY3Rpb24gdGhhdCwgd2hlbiBjYWxsZWQsXG4gKiBjYW5jZWxzIHRoZSBgQ2FuY2VsVG9rZW5gLlxuICovXG5DYW5jZWxUb2tlbi5zb3VyY2UgPSBmdW5jdGlvbiBzb3VyY2UoKSB7XG4gIHZhciBjYW5jZWw7XG4gIHZhciB0b2tlbiA9IG5ldyBDYW5jZWxUb2tlbihmdW5jdGlvbiBleGVjdXRvcihjKSB7XG4gICAgY2FuY2VsID0gYztcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgdG9rZW46IHRva2VuLFxuICAgIGNhbmNlbDogY2FuY2VsXG4gIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IENhbmNlbFRva2VuO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBuZXcgVVJMIGJ5IGNvbWJpbmluZyB0aGUgc3BlY2lmaWVkIFVSTHNcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWxhdGl2ZVVSTCBUaGUgcmVsYXRpdmUgVVJMXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgVVJMXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVsYXRpdmVVUkwpIHtcbiAgcmV0dXJuIHJlbGF0aXZlVVJMXG4gICAgPyBiYXNlVVJMLnJlcGxhY2UoL1xcLyskLywgJycpICsgJy8nICsgcmVsYXRpdmVVUkwucmVwbGFjZSgvXlxcLysvLCAnJylcbiAgICA6IGJhc2VVUkw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIFVSTCB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaXNBYnNvbHV0ZVVSTCh1cmwpIHtcbiAgLy8gQSBVUkwgaXMgY29uc2lkZXJlZCBhYnNvbHV0ZSBpZiBpdCBiZWdpbnMgd2l0aCBcIjxzY2hlbWU+Oi8vXCIgb3IgXCIvL1wiIChwcm90b2NvbC1yZWxhdGl2ZSBVUkwpLlxuICAvLyBSRkMgMzk4NiBkZWZpbmVzIHNjaGVtZSBuYW1lIGFzIGEgc2VxdWVuY2Ugb2YgY2hhcmFjdGVycyBiZWdpbm5pbmcgd2l0aCBhIGxldHRlciBhbmQgZm9sbG93ZWRcbiAgLy8gYnkgYW55IGNvbWJpbmF0aW9uIG9mIGxldHRlcnMsIGRpZ2l0cywgcGx1cywgcGVyaW9kLCBvciBoeXBoZW4uXG4gIHJldHVybiAvXihbYS16XVthLXpcXGRcXCtcXC1cXC5dKjopP1xcL1xcLy9pLnRlc3QodXJsKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuLyoqXG4gKiBUcmFuc2Zvcm0gdGhlIGRhdGEgZm9yIGEgcmVxdWVzdCBvciBhIHJlc3BvbnNlXG4gKlxuICogQHBhcmFtIHtPYmplY3R8U3RyaW5nfSBkYXRhIFRoZSBkYXRhIHRvIGJlIHRyYW5zZm9ybWVkXG4gKiBAcGFyYW0ge0FycmF5fSBoZWFkZXJzIFRoZSBoZWFkZXJzIGZvciB0aGUgcmVxdWVzdCBvciByZXNwb25zZVxuICogQHBhcmFtIHtBcnJheXxGdW5jdGlvbn0gZm5zIEEgc2luZ2xlIGZ1bmN0aW9uIG9yIEFycmF5IG9mIGZ1bmN0aW9uc1xuICogQHJldHVybnMgeyp9IFRoZSByZXN1bHRpbmcgdHJhbnNmb3JtZWQgZGF0YVxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHRyYW5zZm9ybURhdGEoZGF0YSwgaGVhZGVycywgZm5zKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICB1dGlscy5mb3JFYWNoKGZucywgZnVuY3Rpb24gdHJhbnNmb3JtKGZuKSB7XG4gICAgZGF0YSA9IGZuKGRhdGEsIGhlYWRlcnMpO1xuICB9KTtcblxuICByZXR1cm4gZGF0YTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciB0cmFuc2Zvcm1EYXRhID0gcmVxdWlyZSgnLi90cmFuc2Zvcm1EYXRhJyk7XG52YXIgaXNDYW5jZWwgPSByZXF1aXJlKCcuLi9jYW5jZWwvaXNDYW5jZWwnKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4uL2RlZmF1bHRzJyk7XG52YXIgaXNBYnNvbHV0ZVVSTCA9IHJlcXVpcmUoJy4vLi4vaGVscGVycy9pc0Fic29sdXRlVVJMJyk7XG52YXIgY29tYmluZVVSTHMgPSByZXF1aXJlKCcuLy4uL2hlbHBlcnMvY29tYmluZVVSTHMnKTtcblxuLyoqXG4gKiBUaHJvd3MgYSBgQ2FuY2VsYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICovXG5mdW5jdGlvbiB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZykge1xuICBpZiAoY29uZmlnLmNhbmNlbFRva2VuKSB7XG4gICAgY29uZmlnLmNhbmNlbFRva2VuLnRocm93SWZSZXF1ZXN0ZWQoKTtcbiAgfVxufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdCB0byB0aGUgc2VydmVyIHVzaW5nIHRoZSBjb25maWd1cmVkIGFkYXB0ZXIuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHRoYXQgaXMgdG8gYmUgdXNlZCBmb3IgdGhlIHJlcXVlc3RcbiAqIEByZXR1cm5zIHtQcm9taXNlfSBUaGUgUHJvbWlzZSB0byBiZSBmdWxmaWxsZWRcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkaXNwYXRjaFJlcXVlc3QoY29uZmlnKSB7XG4gIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAvLyBTdXBwb3J0IGJhc2VVUkwgY29uZmlnXG4gIGlmIChjb25maWcuYmFzZVVSTCAmJiAhaXNBYnNvbHV0ZVVSTChjb25maWcudXJsKSkge1xuICAgIGNvbmZpZy51cmwgPSBjb21iaW5lVVJMcyhjb25maWcuYmFzZVVSTCwgY29uZmlnLnVybCk7XG4gIH1cblxuICAvLyBFbnN1cmUgaGVhZGVycyBleGlzdFxuICBjb25maWcuaGVhZGVycyA9IGNvbmZpZy5oZWFkZXJzIHx8IHt9O1xuXG4gIC8vIFRyYW5zZm9ybSByZXF1ZXN0IGRhdGFcbiAgY29uZmlnLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgIGNvbmZpZy5kYXRhLFxuICAgIGNvbmZpZy5oZWFkZXJzLFxuICAgIGNvbmZpZy50cmFuc2Zvcm1SZXF1ZXN0XG4gICk7XG5cbiAgLy8gRmxhdHRlbiBoZWFkZXJzXG4gIGNvbmZpZy5oZWFkZXJzID0gdXRpbHMubWVyZ2UoXG4gICAgY29uZmlnLmhlYWRlcnMuY29tbW9uIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzW2NvbmZpZy5tZXRob2RdIHx8IHt9LFxuICAgIGNvbmZpZy5oZWFkZXJzIHx8IHt9XG4gICk7XG5cbiAgdXRpbHMuZm9yRWFjaChcbiAgICBbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdwb3N0JywgJ3B1dCcsICdwYXRjaCcsICdjb21tb24nXSxcbiAgICBmdW5jdGlvbiBjbGVhbkhlYWRlckNvbmZpZyhtZXRob2QpIHtcbiAgICAgIGRlbGV0ZSBjb25maWcuaGVhZGVyc1ttZXRob2RdO1xuICAgIH1cbiAgKTtcblxuICB2YXIgYWRhcHRlciA9IGNvbmZpZy5hZGFwdGVyIHx8IGRlZmF1bHRzLmFkYXB0ZXI7XG5cbiAgcmV0dXJuIGFkYXB0ZXIoY29uZmlnKS50aGVuKGZ1bmN0aW9uIG9uQWRhcHRlclJlc29sdXRpb24ocmVzcG9uc2UpIHtcbiAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgIHJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhKFxuICAgICAgcmVzcG9uc2UuZGF0YSxcbiAgICAgIHJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICBjb25maWcudHJhbnNmb3JtUmVzcG9uc2VcbiAgICApO1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9LCBmdW5jdGlvbiBvbkFkYXB0ZXJSZWplY3Rpb24ocmVhc29uKSB7XG4gICAgaWYgKCFpc0NhbmNlbChyZWFzb24pKSB7XG4gICAgICB0aHJvd0lmQ2FuY2VsbGF0aW9uUmVxdWVzdGVkKGNvbmZpZyk7XG5cbiAgICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgICBpZiAocmVhc29uICYmIHJlYXNvbi5yZXNwb25zZSkge1xuICAgICAgICByZWFzb24ucmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEoXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEsXG4gICAgICAgICAgcmVhc29uLnJlc3BvbnNlLmhlYWRlcnMsXG4gICAgICAgICAgY29uZmlnLnRyYW5zZm9ybVJlc3BvbnNlXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHJlYXNvbik7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG5mdW5jdGlvbiBJbnRlcmNlcHRvck1hbmFnZXIoKSB7XG4gIHRoaXMuaGFuZGxlcnMgPSBbXTtcbn1cblxuLyoqXG4gKiBBZGQgYSBuZXcgaW50ZXJjZXB0b3IgdG8gdGhlIHN0YWNrXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVsZmlsbGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHRoZW5gIGZvciBhIGBQcm9taXNlYFxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0ZWQgVGhlIGZ1bmN0aW9uIHRvIGhhbmRsZSBgcmVqZWN0YCBmb3IgYSBgUHJvbWlzZWBcbiAqXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IEFuIElEIHVzZWQgdG8gcmVtb3ZlIGludGVyY2VwdG9yIGxhdGVyXG4gKi9cbkludGVyY2VwdG9yTWFuYWdlci5wcm90b3R5cGUudXNlID0gZnVuY3Rpb24gdXNlKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpIHtcbiAgdGhpcy5oYW5kbGVycy5wdXNoKHtcbiAgICBmdWxmaWxsZWQ6IGZ1bGZpbGxlZCxcbiAgICByZWplY3RlZDogcmVqZWN0ZWRcbiAgfSk7XG4gIHJldHVybiB0aGlzLmhhbmRsZXJzLmxlbmd0aCAtIDE7XG59O1xuXG4vKipcbiAqIFJlbW92ZSBhbiBpbnRlcmNlcHRvciBmcm9tIHRoZSBzdGFja1xuICpcbiAqIEBwYXJhbSB7TnVtYmVyfSBpZCBUaGUgSUQgdGhhdCB3YXMgcmV0dXJuZWQgYnkgYHVzZWBcbiAqL1xuSW50ZXJjZXB0b3JNYW5hZ2VyLnByb3RvdHlwZS5lamVjdCA9IGZ1bmN0aW9uIGVqZWN0KGlkKSB7XG4gIGlmICh0aGlzLmhhbmRsZXJzW2lkXSkge1xuICAgIHRoaXMuaGFuZGxlcnNbaWRdID0gbnVsbDtcbiAgfVxufTtcblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYWxsIHRoZSByZWdpc3RlcmVkIGludGVyY2VwdG9yc1xuICpcbiAqIFRoaXMgbWV0aG9kIGlzIHBhcnRpY3VsYXJseSB1c2VmdWwgZm9yIHNraXBwaW5nIG92ZXIgYW55XG4gKiBpbnRlcmNlcHRvcnMgdGhhdCBtYXkgaGF2ZSBiZWNvbWUgYG51bGxgIGNhbGxpbmcgYGVqZWN0YC5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gY2FsbCBmb3IgZWFjaCBpbnRlcmNlcHRvclxuICovXG5JbnRlcmNlcHRvck1hbmFnZXIucHJvdG90eXBlLmZvckVhY2ggPSBmdW5jdGlvbiBmb3JFYWNoKGZuKSB7XG4gIHV0aWxzLmZvckVhY2godGhpcy5oYW5kbGVycywgZnVuY3Rpb24gZm9yRWFjaEhhbmRsZXIoaCkge1xuICAgIGlmIChoICE9PSBudWxsKSB7XG4gICAgICBmbihoKTtcbiAgICB9XG4gIH0pO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBJbnRlcmNlcHRvck1hbmFnZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAoXG4gIHV0aWxzLmlzU3RhbmRhcmRCcm93c2VyRW52KCkgP1xuXG4gIC8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBzdXBwb3J0IGRvY3VtZW50LmNvb2tpZVxuICAoZnVuY3Rpb24gc3RhbmRhcmRCcm93c2VyRW52KCkge1xuICAgIHJldHVybiB7XG4gICAgICB3cml0ZTogZnVuY3Rpb24gd3JpdGUobmFtZSwgdmFsdWUsIGV4cGlyZXMsIHBhdGgsIGRvbWFpbiwgc2VjdXJlKSB7XG4gICAgICAgIHZhciBjb29raWUgPSBbXTtcbiAgICAgICAgY29va2llLnB1c2gobmFtZSArICc9JyArIGVuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSkpO1xuXG4gICAgICAgIGlmICh1dGlscy5pc051bWJlcihleHBpcmVzKSkge1xuICAgICAgICAgIGNvb2tpZS5wdXNoKCdleHBpcmVzPScgKyBuZXcgRGF0ZShleHBpcmVzKS50b0dNVFN0cmluZygpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhwYXRoKSkge1xuICAgICAgICAgIGNvb2tpZS5wdXNoKCdwYXRoPScgKyBwYXRoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh1dGlscy5pc1N0cmluZyhkb21haW4pKSB7XG4gICAgICAgICAgY29va2llLnB1c2goJ2RvbWFpbj0nICsgZG9tYWluKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzZWN1cmUgPT09IHRydWUpIHtcbiAgICAgICAgICBjb29raWUucHVzaCgnc2VjdXJlJyk7XG4gICAgICAgIH1cblxuICAgICAgICBkb2N1bWVudC5jb29raWUgPSBjb29raWUuam9pbignOyAnKTtcbiAgICAgIH0sXG5cbiAgICAgIHJlYWQ6IGZ1bmN0aW9uIHJlYWQobmFtZSkge1xuICAgICAgICB2YXIgbWF0Y2ggPSBkb2N1bWVudC5jb29raWUubWF0Y2gobmV3IFJlZ0V4cCgnKF58O1xcXFxzKikoJyArIG5hbWUgKyAnKT0oW147XSopJykpO1xuICAgICAgICByZXR1cm4gKG1hdGNoID8gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoWzNdKSA6IG51bGwpO1xuICAgICAgfSxcblxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUobmFtZSkge1xuICAgICAgICB0aGlzLndyaXRlKG5hbWUsICcnLCBEYXRlLm5vdygpIC0gODY0MDAwMDApO1xuICAgICAgfVxuICAgIH07XG4gIH0pKCkgOlxuXG4gIC8vIE5vbiBzdGFuZGFyZCBicm93c2VyIGVudiAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgd3JpdGU6IGZ1bmN0aW9uIHdyaXRlKCkge30sXG4gICAgICByZWFkOiBmdW5jdGlvbiByZWFkKCkgeyByZXR1cm4gbnVsbDsgfSxcbiAgICAgIHJlbW92ZTogZnVuY3Rpb24gcmVtb3ZlKCkge31cbiAgICB9O1xuICB9KSgpXG4pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vLyBidG9hIHBvbHlmaWxsIGZvciBJRTwxMCBjb3VydGVzeSBodHRwczovL2dpdGh1Yi5jb20vZGF2aWRjaGFtYmVycy9CYXNlNjQuanNcblxudmFyIGNoYXJzID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5Ky89JztcblxuZnVuY3Rpb24gRSgpIHtcbiAgdGhpcy5tZXNzYWdlID0gJ1N0cmluZyBjb250YWlucyBhbiBpbnZhbGlkIGNoYXJhY3Rlcic7XG59XG5FLnByb3RvdHlwZSA9IG5ldyBFcnJvcjtcbkUucHJvdG90eXBlLmNvZGUgPSA1O1xuRS5wcm90b3R5cGUubmFtZSA9ICdJbnZhbGlkQ2hhcmFjdGVyRXJyb3InO1xuXG5mdW5jdGlvbiBidG9hKGlucHV0KSB7XG4gIHZhciBzdHIgPSBTdHJpbmcoaW5wdXQpO1xuICB2YXIgb3V0cHV0ID0gJyc7XG4gIGZvciAoXG4gICAgLy8gaW5pdGlhbGl6ZSByZXN1bHQgYW5kIGNvdW50ZXJcbiAgICB2YXIgYmxvY2ssIGNoYXJDb2RlLCBpZHggPSAwLCBtYXAgPSBjaGFycztcbiAgICAvLyBpZiB0aGUgbmV4dCBzdHIgaW5kZXggZG9lcyBub3QgZXhpc3Q6XG4gICAgLy8gICBjaGFuZ2UgdGhlIG1hcHBpbmcgdGFibGUgdG8gXCI9XCJcbiAgICAvLyAgIGNoZWNrIGlmIGQgaGFzIG5vIGZyYWN0aW9uYWwgZGlnaXRzXG4gICAgc3RyLmNoYXJBdChpZHggfCAwKSB8fCAobWFwID0gJz0nLCBpZHggJSAxKTtcbiAgICAvLyBcIjggLSBpZHggJSAxICogOFwiIGdlbmVyYXRlcyB0aGUgc2VxdWVuY2UgMiwgNCwgNiwgOFxuICAgIG91dHB1dCArPSBtYXAuY2hhckF0KDYzICYgYmxvY2sgPj4gOCAtIGlkeCAlIDEgKiA4KVxuICApIHtcbiAgICBjaGFyQ29kZSA9IHN0ci5jaGFyQ29kZUF0KGlkeCArPSAzIC8gNCk7XG4gICAgaWYgKGNoYXJDb2RlID4gMHhGRikge1xuICAgICAgdGhyb3cgbmV3IEUoKTtcbiAgICB9XG4gICAgYmxvY2sgPSBibG9jayA8PCA4IHwgY2hhckNvZGU7XG4gIH1cbiAgcmV0dXJuIG91dHB1dDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBidG9hO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbHMgPSByZXF1aXJlKCcuLy4uL3V0aWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gKFxuICB1dGlscy5pc1N0YW5kYXJkQnJvd3NlckVudigpID9cblxuICAvLyBTdGFuZGFyZCBicm93c2VyIGVudnMgaGF2ZSBmdWxsIHN1cHBvcnQgb2YgdGhlIEFQSXMgbmVlZGVkIHRvIHRlc3RcbiAgLy8gd2hldGhlciB0aGUgcmVxdWVzdCBVUkwgaXMgb2YgdGhlIHNhbWUgb3JpZ2luIGFzIGN1cnJlbnQgbG9jYXRpb24uXG4gIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgdmFyIG1zaWUgPSAvKG1zaWV8dHJpZGVudCkvaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuICAgIHZhciB1cmxQYXJzaW5nTm9kZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcbiAgICB2YXIgb3JpZ2luVVJMO1xuXG4gICAgLyoqXG4gICAgKiBQYXJzZSBhIFVSTCB0byBkaXNjb3ZlciBpdCdzIGNvbXBvbmVudHNcbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gdXJsIFRoZSBVUkwgdG8gYmUgcGFyc2VkXG4gICAgKiBAcmV0dXJucyB7T2JqZWN0fVxuICAgICovXG4gICAgZnVuY3Rpb24gcmVzb2x2ZVVSTCh1cmwpIHtcbiAgICAgIHZhciBocmVmID0gdXJsO1xuXG4gICAgICBpZiAobXNpZSkge1xuICAgICAgICAvLyBJRSBuZWVkcyBhdHRyaWJ1dGUgc2V0IHR3aWNlIHRvIG5vcm1hbGl6ZSBwcm9wZXJ0aWVzXG4gICAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuICAgICAgICBocmVmID0gdXJsUGFyc2luZ05vZGUuaHJlZjtcbiAgICAgIH1cblxuICAgICAgdXJsUGFyc2luZ05vZGUuc2V0QXR0cmlidXRlKCdocmVmJywgaHJlZik7XG5cbiAgICAgIC8vIHVybFBhcnNpbmdOb2RlIHByb3ZpZGVzIHRoZSBVcmxVdGlscyBpbnRlcmZhY2UgLSBodHRwOi8vdXJsLnNwZWMud2hhdHdnLm9yZy8jdXJsdXRpbHNcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGhyZWY6IHVybFBhcnNpbmdOb2RlLmhyZWYsXG4gICAgICAgIHByb3RvY29sOiB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbCA/IHVybFBhcnNpbmdOb2RlLnByb3RvY29sLnJlcGxhY2UoLzokLywgJycpIDogJycsXG4gICAgICAgIGhvc3Q6IHVybFBhcnNpbmdOb2RlLmhvc3QsXG4gICAgICAgIHNlYXJjaDogdXJsUGFyc2luZ05vZGUuc2VhcmNoID8gdXJsUGFyc2luZ05vZGUuc2VhcmNoLnJlcGxhY2UoL15cXD8vLCAnJykgOiAnJyxcbiAgICAgICAgaGFzaDogdXJsUGFyc2luZ05vZGUuaGFzaCA/IHVybFBhcnNpbmdOb2RlLmhhc2gucmVwbGFjZSgvXiMvLCAnJykgOiAnJyxcbiAgICAgICAgaG9zdG5hbWU6IHVybFBhcnNpbmdOb2RlLmhvc3RuYW1lLFxuICAgICAgICBwb3J0OiB1cmxQYXJzaW5nTm9kZS5wb3J0LFxuICAgICAgICBwYXRobmFtZTogKHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gJy8nKSA/XG4gICAgICAgICAgICAgICAgICB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZSA6XG4gICAgICAgICAgICAgICAgICAnLycgKyB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBvcmlnaW5VUkwgPSByZXNvbHZlVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcblxuICAgIC8qKlxuICAgICogRGV0ZXJtaW5lIGlmIGEgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4gYXMgdGhlIGN1cnJlbnQgbG9jYXRpb25cbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdFVSTCBUaGUgVVJMIHRvIHRlc3RcbiAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luLCBvdGhlcndpc2UgZmFsc2VcbiAgICAqL1xuICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4ocmVxdWVzdFVSTCkge1xuICAgICAgdmFyIHBhcnNlZCA9ICh1dGlscy5pc1N0cmluZyhyZXF1ZXN0VVJMKSkgPyByZXNvbHZlVVJMKHJlcXVlc3RVUkwpIDogcmVxdWVzdFVSTDtcbiAgICAgIHJldHVybiAocGFyc2VkLnByb3RvY29sID09PSBvcmlnaW5VUkwucHJvdG9jb2wgJiZcbiAgICAgICAgICAgIHBhcnNlZC5ob3N0ID09PSBvcmlnaW5VUkwuaG9zdCk7XG4gICAgfTtcbiAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52cyAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbiAgfSkoKVxuKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi8uLi91dGlscycpO1xuXG4vLyBIZWFkZXJzIHdob3NlIGR1cGxpY2F0ZXMgYXJlIGlnbm9yZWQgYnkgbm9kZVxuLy8gYy5mLiBodHRwczovL25vZGVqcy5vcmcvYXBpL2h0dHAuaHRtbCNodHRwX21lc3NhZ2VfaGVhZGVyc1xudmFyIGlnbm9yZUR1cGxpY2F0ZU9mID0gW1xuICAnYWdlJywgJ2F1dGhvcml6YXRpb24nLCAnY29udGVudC1sZW5ndGgnLCAnY29udGVudC10eXBlJywgJ2V0YWcnLFxuICAnZXhwaXJlcycsICdmcm9tJywgJ2hvc3QnLCAnaWYtbW9kaWZpZWQtc2luY2UnLCAnaWYtdW5tb2RpZmllZC1zaW5jZScsXG4gICdsYXN0LW1vZGlmaWVkJywgJ2xvY2F0aW9uJywgJ21heC1mb3J3YXJkcycsICdwcm94eS1hdXRob3JpemF0aW9uJyxcbiAgJ3JlZmVyZXInLCAncmV0cnktYWZ0ZXInLCAndXNlci1hZ2VudCdcbl07XG5cbi8qKlxuICogUGFyc2UgaGVhZGVycyBpbnRvIGFuIG9iamVjdFxuICpcbiAqIGBgYFxuICogRGF0ZTogV2VkLCAyNyBBdWcgMjAxNCAwODo1ODo0OSBHTVRcbiAqIENvbnRlbnQtVHlwZTogYXBwbGljYXRpb24vanNvblxuICogQ29ubmVjdGlvbjoga2VlcC1hbGl2ZVxuICogVHJhbnNmZXItRW5jb2Rpbmc6IGNodW5rZWRcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBoZWFkZXJzIEhlYWRlcnMgbmVlZGluZyB0byBiZSBwYXJzZWRcbiAqIEByZXR1cm5zIHtPYmplY3R9IEhlYWRlcnMgcGFyc2VkIGludG8gYW4gb2JqZWN0XG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcGFyc2VIZWFkZXJzKGhlYWRlcnMpIHtcbiAgdmFyIHBhcnNlZCA9IHt9O1xuICB2YXIga2V5O1xuICB2YXIgdmFsO1xuICB2YXIgaTtcblxuICBpZiAoIWhlYWRlcnMpIHsgcmV0dXJuIHBhcnNlZDsgfVxuXG4gIHV0aWxzLmZvckVhY2goaGVhZGVycy5zcGxpdCgnXFxuJyksIGZ1bmN0aW9uIHBhcnNlcihsaW5lKSB7XG4gICAgaSA9IGxpbmUuaW5kZXhPZignOicpO1xuICAgIGtleSA9IHV0aWxzLnRyaW0obGluZS5zdWJzdHIoMCwgaSkpLnRvTG93ZXJDYXNlKCk7XG4gICAgdmFsID0gdXRpbHMudHJpbShsaW5lLnN1YnN0cihpICsgMSkpO1xuXG4gICAgaWYgKGtleSkge1xuICAgICAgaWYgKHBhcnNlZFtrZXldICYmIGlnbm9yZUR1cGxpY2F0ZU9mLmluZGV4T2Yoa2V5KSA+PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGlmIChrZXkgPT09ICdzZXQtY29va2llJykge1xuICAgICAgICBwYXJzZWRba2V5XSA9IChwYXJzZWRba2V5XSA/IHBhcnNlZFtrZXldIDogW10pLmNvbmNhdChbdmFsXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJzZWRba2V5XSA9IHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gKyAnLCAnICsgdmFsIDogdmFsO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHBhcnNlZDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcblxuZnVuY3Rpb24gZW5jb2RlKHZhbCkge1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHZhbCkuXG4gICAgcmVwbGFjZSgvJTQwL2dpLCAnQCcpLlxuICAgIHJlcGxhY2UoLyUzQS9naSwgJzonKS5cbiAgICByZXBsYWNlKC8lMjQvZywgJyQnKS5cbiAgICByZXBsYWNlKC8lMkMvZ2ksICcsJykuXG4gICAgcmVwbGFjZSgvJTIwL2csICcrJykuXG4gICAgcmVwbGFjZSgvJTVCL2dpLCAnWycpLlxuICAgIHJlcGxhY2UoLyU1RC9naSwgJ10nKTtcbn1cblxuLyoqXG4gKiBCdWlsZCBhIFVSTCBieSBhcHBlbmRpbmcgcGFyYW1zIHRvIHRoZSBlbmRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBiYXNlIG9mIHRoZSB1cmwgKGUuZy4sIGh0dHA6Ly93d3cuZ29vZ2xlLmNvbSlcbiAqIEBwYXJhbSB7b2JqZWN0fSBbcGFyYW1zXSBUaGUgcGFyYW1zIHRvIGJlIGFwcGVuZGVkXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZm9ybWF0dGVkIHVybFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGJ1aWxkVVJMKHVybCwgcGFyYW1zLCBwYXJhbXNTZXJpYWxpemVyKSB7XG4gIC8qZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOjAqL1xuICBpZiAoIXBhcmFtcykge1xuICAgIHJldHVybiB1cmw7XG4gIH1cblxuICB2YXIgc2VyaWFsaXplZFBhcmFtcztcbiAgaWYgKHBhcmFtc1NlcmlhbGl6ZXIpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zU2VyaWFsaXplcihwYXJhbXMpO1xuICB9IGVsc2UgaWYgKHV0aWxzLmlzVVJMU2VhcmNoUGFyYW1zKHBhcmFtcykpIHtcbiAgICBzZXJpYWxpemVkUGFyYW1zID0gcGFyYW1zLnRvU3RyaW5nKCk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIHBhcnRzID0gW107XG5cbiAgICB1dGlscy5mb3JFYWNoKHBhcmFtcywgZnVuY3Rpb24gc2VyaWFsaXplKHZhbCwga2V5KSB7XG4gICAgICBpZiAodmFsID09PSBudWxsIHx8IHR5cGVvZiB2YWwgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgaWYgKHV0aWxzLmlzQXJyYXkodmFsKSkge1xuICAgICAgICBrZXkgPSBrZXkgKyAnW10nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFsID0gW3ZhbF07XG4gICAgICB9XG5cbiAgICAgIHV0aWxzLmZvckVhY2godmFsLCBmdW5jdGlvbiBwYXJzZVZhbHVlKHYpIHtcbiAgICAgICAgaWYgKHV0aWxzLmlzRGF0ZSh2KSkge1xuICAgICAgICAgIHYgPSB2LnRvSVNPU3RyaW5nKCk7XG4gICAgICAgIH0gZWxzZSBpZiAodXRpbHMuaXNPYmplY3QodikpIHtcbiAgICAgICAgICB2ID0gSlNPTi5zdHJpbmdpZnkodik7XG4gICAgICAgIH1cbiAgICAgICAgcGFydHMucHVzaChlbmNvZGUoa2V5KSArICc9JyArIGVuY29kZSh2KSk7XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBwYXJ0cy5qb2luKCcmJyk7XG4gIH1cblxuICBpZiAoc2VyaWFsaXplZFBhcmFtcykge1xuICAgIHVybCArPSAodXJsLmluZGV4T2YoJz8nKSA9PT0gLTEgPyAnPycgOiAnJicpICsgc2VyaWFsaXplZFBhcmFtcztcbiAgfVxuXG4gIHJldHVybiB1cmw7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVwZGF0ZSBhbiBFcnJvciB3aXRoIHRoZSBzcGVjaWZpZWQgY29uZmlnLCBlcnJvciBjb2RlLCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtFcnJvcn0gZXJyb3IgVGhlIGVycm9yIHRvIHVwZGF0ZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbY29kZV0gVGhlIGVycm9yIGNvZGUgKGZvciBleGFtcGxlLCAnRUNPTk5BQk9SVEVEJykuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICogQHJldHVybnMge0Vycm9yfSBUaGUgZXJyb3IuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZW5oYW5jZUVycm9yKGVycm9yLCBjb25maWcsIGNvZGUsIHJlcXVlc3QsIHJlc3BvbnNlKSB7XG4gIGVycm9yLmNvbmZpZyA9IGNvbmZpZztcbiAgaWYgKGNvZGUpIHtcbiAgICBlcnJvci5jb2RlID0gY29kZTtcbiAgfVxuICBlcnJvci5yZXF1ZXN0ID0gcmVxdWVzdDtcbiAgZXJyb3IucmVzcG9uc2UgPSByZXNwb25zZTtcbiAgcmV0dXJuIGVycm9yO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGNyZWF0ZUVycm9yID0gcmVxdWlyZSgnLi9jcmVhdGVFcnJvcicpO1xuXG4vKipcbiAqIFJlc29sdmUgb3IgcmVqZWN0IGEgUHJvbWlzZSBiYXNlZCBvbiByZXNwb25zZSBzdGF0dXMuXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVzb2x2ZSBBIGZ1bmN0aW9uIHRoYXQgcmVzb2x2ZXMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3QgQSBmdW5jdGlvbiB0aGF0IHJlamVjdHMgdGhlIHByb21pc2UuXG4gKiBAcGFyYW0ge29iamVjdH0gcmVzcG9uc2UgVGhlIHJlc3BvbnNlLlxuICovXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKSB7XG4gIHZhciB2YWxpZGF0ZVN0YXR1cyA9IHJlc3BvbnNlLmNvbmZpZy52YWxpZGF0ZVN0YXR1cztcbiAgLy8gTm90ZTogc3RhdHVzIGlzIG5vdCBleHBvc2VkIGJ5IFhEb21haW5SZXF1ZXN0XG4gIGlmICghcmVzcG9uc2Uuc3RhdHVzIHx8ICF2YWxpZGF0ZVN0YXR1cyB8fCB2YWxpZGF0ZVN0YXR1cyhyZXNwb25zZS5zdGF0dXMpKSB7XG4gICAgcmVzb2x2ZShyZXNwb25zZSk7XG4gIH0gZWxzZSB7XG4gICAgcmVqZWN0KGNyZWF0ZUVycm9yKFxuICAgICAgJ1JlcXVlc3QgZmFpbGVkIHdpdGggc3RhdHVzIGNvZGUgJyArIHJlc3BvbnNlLnN0YXR1cyxcbiAgICAgIHJlc3BvbnNlLmNvbmZpZyxcbiAgICAgIG51bGwsXG4gICAgICByZXNwb25zZS5yZXF1ZXN0LFxuICAgICAgcmVzcG9uc2VcbiAgICApKTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi4vdXRpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBub3JtYWxpemVIZWFkZXJOYW1lKGhlYWRlcnMsIG5vcm1hbGl6ZWROYW1lKSB7XG4gIHV0aWxzLmZvckVhY2goaGVhZGVycywgZnVuY3Rpb24gcHJvY2Vzc0hlYWRlcih2YWx1ZSwgbmFtZSkge1xuICAgIGlmIChuYW1lICE9PSBub3JtYWxpemVkTmFtZSAmJiBuYW1lLnRvVXBwZXJDYXNlKCkgPT09IG5vcm1hbGl6ZWROYW1lLnRvVXBwZXJDYXNlKCkpIHtcbiAgICAgIGhlYWRlcnNbbm9ybWFsaXplZE5hbWVdID0gdmFsdWU7XG4gICAgICBkZWxldGUgaGVhZGVyc1tuYW1lXTtcbiAgICB9XG4gIH0pO1xufTtcbiIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4vLi4vZGVmYXVsdHMnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vLi4vdXRpbHMnKTtcbnZhciBJbnRlcmNlcHRvck1hbmFnZXIgPSByZXF1aXJlKCcuL0ludGVyY2VwdG9yTWFuYWdlcicpO1xudmFyIGRpc3BhdGNoUmVxdWVzdCA9IHJlcXVpcmUoJy4vZGlzcGF0Y2hSZXF1ZXN0Jyk7XG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIEF4aW9zXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGluc3RhbmNlQ29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKi9cbmZ1bmN0aW9uIEF4aW9zKGluc3RhbmNlQ29uZmlnKSB7XG4gIHRoaXMuZGVmYXVsdHMgPSBpbnN0YW5jZUNvbmZpZztcbiAgdGhpcy5pbnRlcmNlcHRvcnMgPSB7XG4gICAgcmVxdWVzdDogbmV3IEludGVyY2VwdG9yTWFuYWdlcigpLFxuICAgIHJlc3BvbnNlOiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKClcbiAgfTtcbn1cblxuLyoqXG4gKiBEaXNwYXRjaCBhIHJlcXVlc3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnIFRoZSBjb25maWcgc3BlY2lmaWMgZm9yIHRoaXMgcmVxdWVzdCAobWVyZ2VkIHdpdGggdGhpcy5kZWZhdWx0cylcbiAqL1xuQXhpb3MucHJvdG90eXBlLnJlcXVlc3QgPSBmdW5jdGlvbiByZXF1ZXN0KGNvbmZpZykge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgLy8gQWxsb3cgZm9yIGF4aW9zKCdleGFtcGxlL3VybCdbLCBjb25maWddKSBhIGxhIGZldGNoIEFQSVxuICBpZiAodHlwZW9mIGNvbmZpZyA9PT0gJ3N0cmluZycpIHtcbiAgICBjb25maWcgPSB1dGlscy5tZXJnZSh7XG4gICAgICB1cmw6IGFyZ3VtZW50c1swXVxuICAgIH0sIGFyZ3VtZW50c1sxXSk7XG4gIH1cblxuICBjb25maWcgPSB1dGlscy5tZXJnZShkZWZhdWx0cywge21ldGhvZDogJ2dldCd9LCB0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuICBjb25maWcubWV0aG9kID0gY29uZmlnLm1ldGhvZC50b0xvd2VyQ2FzZSgpO1xuXG4gIC8vIEhvb2sgdXAgaW50ZXJjZXB0b3JzIG1pZGRsZXdhcmVcbiAgdmFyIGNoYWluID0gW2Rpc3BhdGNoUmVxdWVzdCwgdW5kZWZpbmVkXTtcbiAgdmFyIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoY29uZmlnKTtcblxuICB0aGlzLmludGVyY2VwdG9ycy5yZXF1ZXN0LmZvckVhY2goZnVuY3Rpb24gdW5zaGlmdFJlcXVlc3RJbnRlcmNlcHRvcnMoaW50ZXJjZXB0b3IpIHtcbiAgICBjaGFpbi51bnNoaWZ0KGludGVyY2VwdG9yLmZ1bGZpbGxlZCwgaW50ZXJjZXB0b3IucmVqZWN0ZWQpO1xuICB9KTtcblxuICB0aGlzLmludGVyY2VwdG9ycy5yZXNwb25zZS5mb3JFYWNoKGZ1bmN0aW9uIHB1c2hSZXNwb25zZUludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgIGNoYWluLnB1c2goaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gIH0pO1xuXG4gIHdoaWxlIChjaGFpbi5sZW5ndGgpIHtcbiAgICBwcm9taXNlID0gcHJvbWlzZS50aGVuKGNoYWluLnNoaWZ0KCksIGNoYWluLnNoaWZ0KCkpO1xuICB9XG5cbiAgcmV0dXJuIHByb21pc2U7XG59O1xuXG4vLyBQcm92aWRlIGFsaWFzZXMgZm9yIHN1cHBvcnRlZCByZXF1ZXN0IG1ldGhvZHNcbnV0aWxzLmZvckVhY2goWydkZWxldGUnLCAnZ2V0JywgJ2hlYWQnLCAnb3B0aW9ucyddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICAvKmVzbGludCBmdW5jLW5hbWVzOjAqL1xuICBBeGlvcy5wcm90b3R5cGVbbWV0aG9kXSA9IGZ1bmN0aW9uKHVybCwgY29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdCh1dGlscy5tZXJnZShjb25maWcgfHwge30sIHtcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgdXJsOiB1cmxcbiAgICB9KSk7XG4gIH07XG59KTtcblxudXRpbHMuZm9yRWFjaChbJ3Bvc3QnLCAncHV0JywgJ3BhdGNoJ10sIGZ1bmN0aW9uIGZvckVhY2hNZXRob2RXaXRoRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGRhdGEsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QodXRpbHMubWVyZ2UoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHVybDogdXJsLFxuICAgICAgZGF0YTogZGF0YVxuICAgIH0pKTtcbiAgfTtcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEF4aW9zO1xuIiwiLyohXG4gKiBEZXRlcm1pbmUgaWYgYW4gb2JqZWN0IGlzIGEgQnVmZmVyXG4gKlxuICogQGF1dGhvciAgIEZlcm9zcyBBYm91a2hhZGlqZWggPGh0dHBzOi8vZmVyb3NzLm9yZz5cbiAqIEBsaWNlbnNlICBNSVRcbiAqL1xuXG4vLyBUaGUgX2lzQnVmZmVyIGNoZWNrIGlzIGZvciBTYWZhcmkgNS03IHN1cHBvcnQsIGJlY2F1c2UgaXQncyBtaXNzaW5nXG4vLyBPYmplY3QucHJvdG90eXBlLmNvbnN0cnVjdG9yLiBSZW1vdmUgdGhpcyBldmVudHVhbGx5XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIG9iaiAhPSBudWxsICYmIChpc0J1ZmZlcihvYmopIHx8IGlzU2xvd0J1ZmZlcihvYmopIHx8ICEhb2JqLl9pc0J1ZmZlcilcbn1cblxuZnVuY3Rpb24gaXNCdWZmZXIgKG9iaikge1xuICByZXR1cm4gISFvYmouY29uc3RydWN0b3IgJiYgdHlwZW9mIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIob2JqKVxufVxuXG4vLyBGb3IgTm9kZSB2MC4xMCBzdXBwb3J0LiBSZW1vdmUgdGhpcyBldmVudHVhbGx5LlxuZnVuY3Rpb24gaXNTbG93QnVmZmVyIChvYmopIHtcbiAgcmV0dXJuIHR5cGVvZiBvYmoucmVhZEZsb2F0TEUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIG9iai5zbGljZSA9PT0gJ2Z1bmN0aW9uJyAmJiBpc0J1ZmZlcihvYmouc2xpY2UoMCwgMCkpXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBiaW5kID0gcmVxdWlyZSgnLi9oZWxwZXJzL2JpbmQnKTtcbnZhciBBeGlvcyA9IHJlcXVpcmUoJy4vY29yZS9BeGlvcycpO1xudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi9kZWZhdWx0cycpO1xuXG4vKipcbiAqIENyZWF0ZSBhbiBpbnN0YW5jZSBvZiBBeGlvc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBkZWZhdWx0Q29uZmlnIFRoZSBkZWZhdWx0IGNvbmZpZyBmb3IgdGhlIGluc3RhbmNlXG4gKiBAcmV0dXJuIHtBeGlvc30gQSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdENvbmZpZykge1xuICB2YXIgY29udGV4dCA9IG5ldyBBeGlvcyhkZWZhdWx0Q29uZmlnKTtcbiAgdmFyIGluc3RhbmNlID0gYmluZChBeGlvcy5wcm90b3R5cGUucmVxdWVzdCwgY29udGV4dCk7XG5cbiAgLy8gQ29weSBheGlvcy5wcm90b3R5cGUgdG8gaW5zdGFuY2VcbiAgdXRpbHMuZXh0ZW5kKGluc3RhbmNlLCBBeGlvcy5wcm90b3R5cGUsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgY29udGV4dCB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIGNvbnRleHQpO1xuXG4gIHJldHVybiBpbnN0YW5jZTtcbn1cblxuLy8gQ3JlYXRlIHRoZSBkZWZhdWx0IGluc3RhbmNlIHRvIGJlIGV4cG9ydGVkXG52YXIgYXhpb3MgPSBjcmVhdGVJbnN0YW5jZShkZWZhdWx0cyk7XG5cbi8vIEV4cG9zZSBBeGlvcyBjbGFzcyB0byBhbGxvdyBjbGFzcyBpbmhlcml0YW5jZVxuYXhpb3MuQXhpb3MgPSBBeGlvcztcblxuLy8gRmFjdG9yeSBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlc1xuYXhpb3MuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKGluc3RhbmNlQ29uZmlnKSB7XG4gIHJldHVybiBjcmVhdGVJbnN0YW5jZSh1dGlscy5tZXJnZShkZWZhdWx0cywgaW5zdGFuY2VDb25maWcpKTtcbn07XG5cbi8vIEV4cG9zZSBDYW5jZWwgJiBDYW5jZWxUb2tlblxuYXhpb3MuQ2FuY2VsID0gcmVxdWlyZSgnLi9jYW5jZWwvQ2FuY2VsJyk7XG5heGlvcy5DYW5jZWxUb2tlbiA9IHJlcXVpcmUoJy4vY2FuY2VsL0NhbmNlbFRva2VuJyk7XG5heGlvcy5pc0NhbmNlbCA9IHJlcXVpcmUoJy4vY2FuY2VsL2lzQ2FuY2VsJyk7XG5cbi8vIEV4cG9zZSBhbGwvc3ByZWFkXG5heGlvcy5hbGwgPSBmdW5jdGlvbiBhbGwocHJvbWlzZXMpIHtcbiAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcbn07XG5heGlvcy5zcHJlYWQgPSByZXF1aXJlKCcuL2hlbHBlcnMvc3ByZWFkJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gYXhpb3M7XG5cbi8vIEFsbG93IHVzZSBvZiBkZWZhdWx0IGltcG9ydCBzeW50YXggaW4gVHlwZVNjcmlwdFxubW9kdWxlLmV4cG9ydHMuZGVmYXVsdCA9IGF4aW9zO1xuIiwibW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYi9heGlvcycpOyIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQdWJTdWIgZnJvbSBcInB1YnN1Yi1qc1wiO1xuXG5pbXBvcnQgVXRpbHMgZnJvbSBcIi4uLy4uL3NlcnZpY2VzL3V0aWxcIjtcbmltcG9ydCBzdHlsZXMgZnJvbSBcIi4vc2lkZWJhci5jc3NcIjtcbmltcG9ydCB7IExJTktfRVZFTlRfTkFNRSwgU0lERUJBUl9MSU5LUyB9IGZyb20gXCIuL3NpZGViYXIucHJvcHNcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2lkZWJhciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBhY3RpdmVMaW5rczoge31cbiAgICB9O1xuICAgIHRoaXMubGlua0NsaWNrZWQgPSB0aGlzLmxpbmtDbGlja2VkLmJpbmQodGhpcyk7XG4gIH1cblxuICBsaW5rQ2xpY2tlZChldmVudCwgeyBncm91cCwgZWxlbWVudCwgZGF0YUtleSB9KSB7XG4gICAgbGV0IGdyb3VwTmFtZSA9IGdyb3VwO1xuICAgIGxldCBlbGVtZW50TmFtZSA9IGVsZW1lbnQ7XG4gICAgbGV0IHVuaXF1ZUtleSA9IGRhdGFLZXkgO1xuXG4gICAgbGV0IGdyb3Vwc09iaiA9IFNJREVCQVJfTElOS1MuR1JPVVBTO1xuICAgIGxldCBzdGF0ZU9iaiA9IHtcbiAgICAgIGFjdGl2ZUxpbmtzOiB0aGlzLnN0YXRlLmFjdGl2ZUxpbmtzXG4gICAgfVxuXG4gICAgaWYgKHN0YXRlT2JqLmFjdGl2ZUxpbmtzW2dyb3VwTmFtZV0gJiYgc3RhdGVPYmouYWN0aXZlTGlua3NbZ3JvdXBOYW1lXS5kYXRhS2V5ID09IHVuaXF1ZUtleSkge1xuICAgICAgLy8gVW5zZWxlY3QgbGluayBpZiBpdCB3YXMgYWxyZWFkeSBzZWxlY3RlZFxuICAgICAgc3RhdGVPYmouYWN0aXZlTGlua3NbZ3JvdXBOYW1lXSA9IG51bGw7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFNlbGVjdCBsaW5rIGlmIG5vdCBzZWxlY3RlZFxuICAgICAgc3RhdGVPYmouYWN0aXZlTGlua3NbZ3JvdXBOYW1lXSA9IHtcbiAgICAgICAgZGF0YUtleTogdW5pcXVlS2V5LFxuICAgICAgICBjb2RlOiBncm91cHNPYmpbZ3JvdXBOYW1lXS5FTEVNRU5UU1tlbGVtZW50TmFtZV0uY29kZVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBsZXQgZGF0YSA9IHt9O1xuXG4gICAgT2JqZWN0LmtleXMoZ3JvdXBzT2JqKS5mb3JFYWNoKGdyb3VwID0+IHtcbiAgICAgIGlmIChzdGF0ZU9iai5hY3RpdmVMaW5rc1tncm91cF0pIHtcbiAgICAgICAgZGF0YVtncm91cHNPYmpbZ3JvdXBdLkFQSV9GSUVMRF0gPSBzdGF0ZU9iai5hY3RpdmVMaW5rc1tncm91cF0uY29kZTtcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgUHViU3ViLnB1Ymxpc2goTElOS19FVkVOVF9OQU1FLCBkYXRhKTtcbiAgICB0aGlzLnNldFN0YXRlKHN0YXRlT2JqKTtcbiAgfVxuXG4gIGdldFNpZGVCYXIoKSB7XG4gICAgbGV0IHNpZGVCYXJkRWxlbWVudHMgPSBbXTtcbiAgICBPYmplY3Qua2V5cyhTSURFQkFSX0xJTktTLkdST1VQUykuZm9yRWFjaChncm91cCA9PiB7XG4gICAgICBsZXQgZ3JvdXBPYmogPSBTSURFQkFSX0xJTktTLkdST1VQU1tncm91cF07XG5cbiAgICAgIGxldCBncm91cEVsZW1lbnQgPSAoXG4gICAgICAgIDxsaSBjbGFzc05hbWU9XCJuYXYtaGVhZGVyXCIga2V5PXsnR3JvdXBfJyArIGdyb3VwT2JqLmtleX0+e2dyb3VwT2JqLmRpc3BsYXl9PC9saT5cbiAgICAgICk7XG4gICAgICBzaWRlQmFyZEVsZW1lbnRzLnB1c2goZ3JvdXBFbGVtZW50KTtcblxuICAgICAgT2JqZWN0LmtleXMoZ3JvdXBPYmouRUxFTUVOVFMpLmZvckVhY2goZWxlbWVudCA9PiB7XG4gICAgICAgIGxldCBlbGVtZW50T2JqID0gZ3JvdXBPYmouRUxFTUVOVFNbZWxlbWVudF07XG5cbiAgICAgICAgbGV0IGxpbmtFbGVtZW50ID0gKFxuICAgICAgICAgIDxsaSBjbGFzc05hbWU9eyduYXYtaXRlbSAnICsgKHRoaXMuc3RhdGUuYWN0aXZlTGlua3NbZ3JvdXBdICYmICh0aGlzLnN0YXRlLmFjdGl2ZUxpbmtzW2dyb3VwXS5kYXRhS2V5ID09IGVsZW1lbnRPYmouZGF0YUtleSkgPyBzdHlsZXMuYWN0aXZlIDogJycpfSBvbkNsaWNrPXtlID0+IHRoaXMubGlua0NsaWNrZWQoZSwgeyBncm91cCwgZWxlbWVudCwgZGF0YUtleTogZWxlbWVudE9iai5kYXRhS2V5IH0pfSBrZXk9eydTaWRlRWxlXycgKyBlbGVtZW50T2JqLmNvZGV9PlxuICAgICAgICAgICAgPGEgY2xhc3M9XCJuYXYtbGlua1wiIGhyZWY9XCIjXCI+e2VsZW1lbnRPYmouZGlzcGxheX08L2E+XG4gICAgICAgICAgPC9saT5cbiAgICAgICAgKTtcbiAgICAgICAgc2lkZUJhcmRFbGVtZW50cy5wdXNoKGxpbmtFbGVtZW50KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiBzaWRlQmFyZEVsZW1lbnRzO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT17J2NvbnRhaW5lciAnICsgc3R5bGVzLnNpZGViYXJfY29tcG9uZW50fT5cbiAgICAgICAgPHVsIGNsYXNzPVwibmF2IG5hdi1saXN0IGZsZXgtY29sdW1uXCI+XG4gICAgICAgICAge3RoaXMuZ2V0U2lkZUJhcigpfVxuICAgICAgICA8L3VsPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufSIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuaW1wb3J0IHN0eWxlcyBmcm9tIFwiLi9sb2FkZXIuY3NzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExvYWRlciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5zcGlubmVyfT5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5yZWN0MX0+PC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMucmVjdDJ9PjwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17c3R5bGVzLnJlY3QzfT48L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e3N0eWxlcy5yZWN0NH0+PC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMucmVjdDV9PjwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufSIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTm9SZXN1bHRGb3VuZCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250YWluZXIgdGV4dC1jZW50ZXJcIj5cbiAgICAgICAgPGltZyBzcmM9XCIvYXNzZXRzL05vLXJlc3VsdHMtZm91bmQuanBnXCIgLz5cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH1cbn0iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgc3R5bGVzIGZyb20gXCIuL25ld3NDYXJkLmNzc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBOZXdzQ2FyZCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIC8qKlxuICAgKiBDcmVhdGVzIGFuIGluc3RhbmNlIG9mIE5ld3NDYXJkLlxuICAgKiBAcGFyYW0ge3t0aXRsZTogc3RyaW5nLCBkYXRlVGltZTogc3RyaW5nLCBhdXRob3I6IHN0cmluZywgaW1hZ2VVcmw6IHN0cmluZywgY29udGVudDogc3RyaW5nLCBuZXdzTGluazogc3RyaW5nLCBpc0xvYWRpbmc6IGJvb2xlYW59fSBwcm9wcyBcbiAgICogQG1lbWJlcm9mIE5ld3NDYXJkXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge307XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtzdHlsZXMubmV3c19jYXJkfT5cbiAgICAgICAgPGEgaHJlZj17dGhpcy5wcm9wcy5uZXdzTGlua30+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjYXJkXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNhcmQtYm9keVwiPlxuICAgICAgICAgICAgICA8aDUgY2xhc3NOYW1lPVwiY2FyZC10aXRsZVwiPnt0aGlzLnByb3BzLnRpdGxlfTwvaDU+XG4gICAgICAgICAgICAgIDxwIGNsYXNzTmFtZT1cImNhcmQtdGV4dFwiPnt0aGlzLnByb3BzLmNvbnRlbnR9PC9wPlxuICAgICAgICAgICAgICA8cCBjbGFzc05hbWU9XCJjYXJkLXRleHRcIj48c21hbGwgY2xhc3NOYW1lPVwidGV4dC1tdXRlZFwiPnt0aGlzLnByb3BzLmF1dGhvcn08L3NtYWxsPjwvcD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgeyB0aGlzLnByb3BzLmltYWdlVXJsID8gPGltZyBjbGFzc05hbWU9XCJjYXJkLWltZy1ib3R0b21cIiBzcmM9e3RoaXMucHJvcHMuaW1hZ2VVcmx9IC8+IDogbnVsbH1cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9hPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufSIsIiFmdW5jdGlvbihyb290LGZhY3Rvcnkpe1wib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzJiZcIm9iamVjdFwiPT10eXBlb2YgbW9kdWxlP21vZHVsZS5leHBvcnRzPWZhY3RvcnkoKTpcImZ1bmN0aW9uXCI9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKFtdLGZhY3RvcnkpOlwib2JqZWN0XCI9PXR5cGVvZiBleHBvcnRzP2V4cG9ydHMuQ2xvY2tXaWRnZXQ9ZmFjdG9yeSgpOnJvb3QuQ2xvY2tXaWRnZXQ9ZmFjdG9yeSgpfShcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZj9zZWxmOnRoaXMsZnVuY3Rpb24oKXtyZXR1cm4gZnVuY3Rpb24obW9kdWxlcyl7ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCl7aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pcmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7dmFyIG1vZHVsZT1pbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXT17aTptb2R1bGVJZCxsOiExLGV4cG9ydHM6e319O3JldHVybiBtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLG1vZHVsZSxtb2R1bGUuZXhwb3J0cyxfX3dlYnBhY2tfcmVxdWlyZV9fKSxtb2R1bGUubD0hMCxtb2R1bGUuZXhwb3J0c312YXIgaW5zdGFsbGVkTW9kdWxlcz17fTtyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXy5tPW1vZHVsZXMsX193ZWJwYWNrX3JlcXVpcmVfXy5jPWluc3RhbGxlZE1vZHVsZXMsX193ZWJwYWNrX3JlcXVpcmVfXy5kPWZ1bmN0aW9uKGV4cG9ydHMsbmFtZSxnZXR0ZXIpe19fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLG5hbWUpfHxPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxuYW1lLHtjb25maWd1cmFibGU6ITEsZW51bWVyYWJsZTohMCxnZXQ6Z2V0dGVyfSl9LF9fd2VicGFja19yZXF1aXJlX18ubj1mdW5jdGlvbihtb2R1bGUpe3ZhciBnZXR0ZXI9bW9kdWxlJiZtb2R1bGUuX19lc01vZHVsZT9mdW5jdGlvbigpe3JldHVybiBtb2R1bGUuZGVmYXVsdH06ZnVuY3Rpb24oKXtyZXR1cm4gbW9kdWxlfTtyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlcixcImFcIixnZXR0ZXIpLGdldHRlcn0sX193ZWJwYWNrX3JlcXVpcmVfXy5vPWZ1bmN0aW9uKG9iamVjdCxwcm9wZXJ0eSl7cmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QscHJvcGVydHkpfSxfX3dlYnBhY2tfcmVxdWlyZV9fLnA9XCJcIixfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucz0yKX0oW2Z1bmN0aW9uKG1vZHVsZSxleHBvcnRzLF9fd2VicGFja19yZXF1aXJlX18pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSxDb25zdHJ1Y3Rvcil7aWYoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfU9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBfY3JlYXRlQ2xhc3M9ZnVuY3Rpb24oKXtmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCxwcm9wcyl7Zm9yKHZhciBpPTA7aTxwcm9wcy5sZW5ndGg7aSsrKXt2YXIgZGVzY3JpcHRvcj1wcm9wc1tpXTtkZXNjcmlwdG9yLmVudW1lcmFibGU9ZGVzY3JpcHRvci5lbnVtZXJhYmxlfHwhMSxkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBkZXNjcmlwdG9yJiYoZGVzY3JpcHRvci53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCxkZXNjcmlwdG9yLmtleSxkZXNjcmlwdG9yKX19cmV0dXJuIGZ1bmN0aW9uKENvbnN0cnVjdG9yLHByb3RvUHJvcHMsc3RhdGljUHJvcHMpe3JldHVybiBwcm90b1Byb3BzJiZkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSxwcm90b1Byb3BzKSxzdGF0aWNQcm9wcyYmZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3RvcixzdGF0aWNQcm9wcyksQ29uc3RydWN0b3J9fSgpO2V4cG9ydHMuQ2lyY2xlPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gQ2lyY2xlKGNvbnRleHQseENlbnRlcix5Q2VudGVyLHJhZGl1cyl7dmFyIGZpbGxDb2xvcj1hcmd1bWVudHMubGVuZ3RoPjQmJnZvaWQgMCE9PWFyZ3VtZW50c1s0XT9hcmd1bWVudHNbNF06XCJ3aGl0ZVwiO19jbGFzc0NhbGxDaGVjayh0aGlzLENpcmNsZSksdGhpcy5fY29udGV4dD1jb250ZXh0LHRoaXMuX3hDZW50ZXI9eENlbnRlcix0aGlzLl95Q2VudGVyPXlDZW50ZXIsdGhpcy5fcmFkaXVzPXJhZGl1cyx0aGlzLl9maWxsU3R5bGU9ZmlsbENvbG9yfXJldHVybiBfY3JlYXRlQ2xhc3MoQ2lyY2xlLFt7a2V5OlwicmVuZGVyXCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLl9jb250ZXh0LmJlZ2luUGF0aCgpLHRoaXMuX2NvbnRleHQuYXJjKHRoaXMueENlbnRlcix0aGlzLnlDZW50ZXIsdGhpcy5yYWRpdXMsMCwyKk1hdGguUEkpLHRoaXMuX2NvbnRleHQuZmlsbFN0eWxlPXRoaXMuX2ZpbGxTdHlsZSx0aGlzLl9jb250ZXh0LmZpbGwoKX19LHtrZXk6XCJ4Q2VudGVyXCIsc2V0OmZ1bmN0aW9uKHhDZW50ZXIpe3RoaXMuX3hDZW50ZXI9eENlbnRlcix0aGlzLnJlbmRlcigpfSxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5feENlbnRlcn19LHtrZXk6XCJ5Q2VudGVyXCIsc2V0OmZ1bmN0aW9uKHlDZW50ZXIpe3RoaXMueUNlbnRlcj15Q2VudGVyLHRoaXMucmVuZGVyKCl9LGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl95Q2VudGVyfX0se2tleTpcInJhZGl1c1wiLHNldDpmdW5jdGlvbihyYWRpdXMpe3RoaXMuX3JhZGl1cz1yYWRpdXMsdGhpcy5yZW5kZXIoKX0sZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3JhZGl1c319XSksQ2lyY2xlfSgpfSxmdW5jdGlvbihtb2R1bGUsZXhwb3J0cyxfX3dlYnBhY2tfcmVxdWlyZV9fKXtcInVzZSBzdHJpY3RcIjtPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTtleHBvcnRzLkRFRkFVTFRfUFJPUEVSVElFUz17d2lkdGg6MzAwLGhlaWdodDozMDAsZmlsbENvbG9yOlwiI0ZGRkZGRlwiLGlzQm9yZGVyRmlsbGVkOiEwLHdhdGNoRmFjZTpcIkZBQ0VfMVwiLGRpc3BsYXlUaW1lOm5ldyBEYXRlLGRpc3BsYXlDb25zdGFudFRpbWU6ITEsaGluZ2VDb2xvcjpcIiMzMzNcIixoYW5kQ29sb3I6XCIjMzMzXCIsZnJhbWVHcmFkaWVudENvbG9yTGlzdDpbXCIjMzMzXCIsXCIjRkZGRkZGXCIsXCIjMzMzXCJdfX0sZnVuY3Rpb24obW9kdWxlLGV4cG9ydHMsX193ZWJwYWNrX3JlcXVpcmVfXyl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLENvbnN0cnVjdG9yKXtpZighKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIil9T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsXCJfX2VzTW9kdWxlXCIse3ZhbHVlOiEwfSksZXhwb3J0cy5DbG9ja0FwcD12b2lkIDA7dmFyIF9jcmVhdGVDbGFzcz1mdW5jdGlvbigpe2Z1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LHByb3BzKXtmb3IodmFyIGk9MDtpPHByb3BzLmxlbmd0aDtpKyspe3ZhciBkZXNjcmlwdG9yPXByb3BzW2ldO2Rlc2NyaXB0b3IuZW51bWVyYWJsZT1kZXNjcmlwdG9yLmVudW1lcmFibGV8fCExLGRlc2NyaXB0b3IuY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIGRlc2NyaXB0b3ImJihkZXNjcmlwdG9yLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LGRlc2NyaXB0b3Iua2V5LGRlc2NyaXB0b3IpfX1yZXR1cm4gZnVuY3Rpb24oQ29uc3RydWN0b3IscHJvdG9Qcm9wcyxzdGF0aWNQcm9wcyl7cmV0dXJuIHByb3RvUHJvcHMmJmRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLHByb3RvUHJvcHMpLHN0YXRpY1Byb3BzJiZkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLHN0YXRpY1Byb3BzKSxDb25zdHJ1Y3Rvcn19KCksX2pxdWVyeT1fX3dlYnBhY2tfcmVxdWlyZV9fKDMpLF9qcXVlcnkyPWZ1bmN0aW9uKG9iail7cmV0dXJuIG9iaiYmb2JqLl9fZXNNb2R1bGU/b2JqOntkZWZhdWx0Om9ian19KF9qcXVlcnkpLF9zaW1wbGVGYWNlPV9fd2VicGFja19yZXF1aXJlX18oNCksX2NvbmZpZz1fX3dlYnBhY2tfcmVxdWlyZV9fKDcpLF9kZWZhdWx0UHJvcGVydGllcz1fX3dlYnBhY2tfcmVxdWlyZV9fKDEpO2V4cG9ydHMuQ2xvY2tBcHA9ZnVuY3Rpb24oKXtmdW5jdGlvbiBDbG9ja0FwcChyb290RWxlbWVudCl7dmFyIG9wdGlvbnM9YXJndW1lbnRzLmxlbmd0aD4xJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOnt9O19jbGFzc0NhbGxDaGVjayh0aGlzLENsb2NrQXBwKSx0aGlzLl9yb290RWxlbWVudD1yb290RWxlbWVudCx0aGlzLl9zZXRDb25maWd1cmF0aW9ucyhvcHRpb25zKSx0aGlzLl9pbml0Q2xvY2tTdHJ1Y3R1cmUoKSx0aGlzLl9pbml0Q2xvY2tVaSgpLHRoaXMucmVuZGVyKCksdGhpcy5faW5pdFRpbWVyKCl9cmV0dXJuIF9jcmVhdGVDbGFzcyhDbG9ja0FwcCxbe2tleTpcImNvbmZpZ3VyZVwiLHZhbHVlOmZ1bmN0aW9uKG9wdGlvbnMpe3RoaXMuX3Jlc2V0Q2FudmFzRGltZW5zaW9uc1NhZmUob3B0aW9ucyksdGhpcy5fc2V0Q29uZmlndXJhdGlvbnMob3B0aW9ucyksdGhpcy5faW5pdENsb2NrVWkoKSx0aGlzLnJlbmRlcigpfX0se2tleTpcInJlbmRlclwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5fc2ltcGxlRmFjZS5yZW5kZXIoKSx0aGlzLl9yZW5kZXJUaW1lKCl9fSx7a2V5OlwiX3JlbmRlclRpbWVcIix2YWx1ZTpmdW5jdGlvbigpe3RoaXMuX2Rpc3BsYXlDb25zdGFudFRpbWV8fCh0aGlzLl9kaXNwbGF5VGltZT1uZXcgRGF0ZSk7dmFyIF9nZXRUaW1lSHJNbVNzMj10aGlzLl9nZXRUaW1lSHJNbVNzKHRoaXMuX2Rpc3BsYXlUaW1lKSxob3VyPV9nZXRUaW1lSHJNbVNzMi5ob3VyLG1pbnV0ZT1fZ2V0VGltZUhyTW1TczIubWludXRlLHNlY29uZD1fZ2V0VGltZUhyTW1TczIuc2Vjb25kO3RoaXMuX3NpbXBsZUZhY2UuaG91ckhhbmQucG9zaXRpb249aG91cix0aGlzLl9zaW1wbGVGYWNlLm1pbnV0ZUhhbmQucG9zaXRpb249bWludXRlLHRoaXMuX3NpbXBsZUZhY2Uuc2Vjb25kSGFuZC5wb3NpdGlvbj1zZWNvbmR9fSx7a2V5OlwiX2luaXRDbG9ja1N0cnVjdHVyZVwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5fY2xvY2tDb250YWluZXJFbGU9dGhpcy5fZ2V0Q2xvY2tDb250YWluZXJFbGUoKSx0aGlzLl9jbG9ja0NhbnZhc0VsZT10aGlzLl9nZXRDYW52YXModGhpcy5fY2FudmFzV2lkdGgsdGhpcy5fY2FudmFzSGVpZ2h0KSx0aGlzLl9jbG9ja0NhbnZhcz10aGlzLl9jbG9ja0NhbnZhc0VsZVswXSwoMCxfanF1ZXJ5Mi5kZWZhdWx0KSh0aGlzLl9yb290RWxlbWVudCkuYXBwZW5kKHRoaXMuX2Nsb2NrQ29udGFpbmVyRWxlKS5hcHBlbmQodGhpcy5fY2xvY2tDYW52YXNFbGUpfX0se2tleTpcIl9pbml0Q2xvY2tVaVwiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIGN0eD10aGlzLl9jbG9ja0NhbnZhcy5nZXRDb250ZXh0KFwiMmRcIik7Y3R4LnJlc2V0VHJhbnNmb3JtKCksY3R4LmNsZWFyUmVjdCgwLDAsdGhpcy5fY2FudmFzV2lkdGgsdGhpcy5fY2FudmFzSGVpZ2h0KSxjdHgudHJhbnNsYXRlKHRoaXMuX2NhbnZhc1dpZHRoLzIsdGhpcy5fY2FudmFzSGVpZ2h0LzIpLHRoaXMuX3NpbXBsZUZhY2U9bmV3IF9zaW1wbGVGYWNlLlNpbXBsZUZhY2UoY3R4LDAsMCx0aGlzLl9jbG9ja1JhZGl1cyx0aGlzLl9jdXJyZW50RmFjZUNvbmZpZyl9fSx7a2V5OlwiX2luaXRUaW1lclwiLHZhbHVlOmZ1bmN0aW9uKCl7dGhpcy5fZGlzcGxheUNvbnN0YW50VGltZXx8KHRoaXMuaW50ZXJ2YWxJZCYmY2xlYXJJbnRlcnZhbCh0aGlzLmludGVydmFsSWQpLHRoaXMuaW50ZXJ2YWxJZD1zZXRJbnRlcnZhbCh0aGlzLnJlbmRlci5iaW5kKHRoaXMpLDFlMykpfX0se2tleTpcIl9zZXRDb25maWd1cmF0aW9uc1wiLHZhbHVlOmZ1bmN0aW9uKCl7dmFyIG9wdGlvbnM9YXJndW1lbnRzLmxlbmd0aD4wJiZ2b2lkIDAhPT1hcmd1bWVudHNbMF0/YXJndW1lbnRzWzBdOnt9O3RoaXMuX2NhbnZhc1dpZHRoPW9wdGlvbnMud2lkdGh8fHRoaXMuX2NhbnZhc1dpZHRofHxfZGVmYXVsdFByb3BlcnRpZXMuREVGQVVMVF9QUk9QRVJUSUVTLndpZHRoLHRoaXMuX2NhbnZhc0hlaWdodD1vcHRpb25zLmhlaWdodHx8dGhpcy5fY2FudmFzSGVpZ2h0fHxfZGVmYXVsdFByb3BlcnRpZXMuREVGQVVMVF9QUk9QRVJUSUVTLmhlaWdodCx0aGlzLl9jbG9ja1JhZGl1cz1vcHRpb25zLnJhZGl1c3x8dGhpcy5fY2xvY2tSYWRpdXN8fE1hdGgubWluKHRoaXMuX2NhbnZhc1dpZHRoLHRoaXMuX2NhbnZhc0hlaWdodCkvMi0xMCx0aGlzLl93YXRjaEZhY2U9b3B0aW9ucy53YXRjaEZhY2V8fHRoaXMuX3dhdGNoRmFjZXx8X2RlZmF1bHRQcm9wZXJ0aWVzLkRFRkFVTFRfUFJPUEVSVElFUy53YXRjaEZhY2UsdGhpcy5fY3VycmVudEZhY2VDb25maWc9b3B0aW9ucy5mYWNlQ29uZmlnfHxfY29uZmlnLmZhY2VDb25maWdbb3B0aW9ucy53YXRjaEZhY2VdfHx0aGlzLl9jdXJyZW50RmFjZUNvbmZpZ3x8X2NvbmZpZy5mYWNlQ29uZmlnW3RoaXMuX3dhdGNoRmFjZV18fHt9LHRoaXMuX2Rpc3BsYXlUaW1lPW9wdGlvbnMuZGlzcGxheVRpbWV8fHRoaXMuX2Rpc3BsYXlUaW1lfHxfZGVmYXVsdFByb3BlcnRpZXMuREVGQVVMVF9QUk9QRVJUSUVTLmRpc3BsYXlUaW1lLHRoaXMuX2Rpc3BsYXlDb25zdGFudFRpbWU9b3B0aW9ucy5kaXNwbGF5Q29uc3RhbnRUaW1lfHx0aGlzLl9kaXNwbGF5Q29uc3RhbnRUaW1lfHxfZGVmYXVsdFByb3BlcnRpZXMuREVGQVVMVF9QUk9QRVJUSUVTLmRpc3BsYXlDb25zdGFudFRpbWV9fSx7a2V5OlwiX3Jlc2V0Q2FudmFzRGltZW5zaW9uc1NhZmVcIix2YWx1ZTpmdW5jdGlvbihfcmVmKXt2YXIgd2lkdGg9X3JlZi53aWR0aCxoZWlnaHQ9X3JlZi5oZWlnaHQ7aWYoKHdpZHRofHxoZWlnaHQpJiYod2lkdGghPXRoaXMuX2NhbnZhc1dpZHRofHxoZWlnaHQhPXRoaXMuX2NhbnZhc0hlaWdodCkpe3ZhciBjdHg9dGhpcy5fY2xvY2tDYW52YXMuZ2V0Q29udGV4dChcIjJkXCIpO2N0eC5jYW52YXMud2lkdGg9d2lkdGgsY3R4LmNhbnZhcy5oZWlnaHQ9aGVpZ2h0fX19LHtrZXk6XCJfZ2V0Q2FudmFzXCIsdmFsdWU6ZnVuY3Rpb24oY2FudmFzV2lkdGgsY2FudmFzSGVpZ2h0KXtyZXR1cm4oMCxfanF1ZXJ5Mi5kZWZhdWx0KSgnPGNhbnZhcyB3aWR0aD1cIicrY2FudmFzV2lkdGgrJ1wiIGhlaWdodD1cIicrY2FudmFzSGVpZ2h0KydcIj48L2NhbnZhcz4nKX19LHtrZXk6XCJfZ2V0Q2xvY2tDb250YWluZXJFbGVcIix2YWx1ZTpmdW5jdGlvbigpe3JldHVybigwLF9qcXVlcnkyLmRlZmF1bHQpKCc8ZGl2IGNsYXNzPVwianEtY2xvY2tcIj48L2Rpdj4nKX19LHtrZXk6XCJfZ2V0VGltZUhyTW1Tc1wiLHZhbHVlOmZ1bmN0aW9uKGRhdGUpe3ZhciBob3VyPWRhdGUuZ2V0SG91cnMoKSxtaW51dGU9ZGF0ZS5nZXRNaW51dGVzKCksc2Vjb25kPWRhdGUuZ2V0U2Vjb25kcygpO3JldHVybiBob3VyJT0xMixob3VyPWhvdXIqTWF0aC5QSS82K21pbnV0ZSpNYXRoLlBJLzM2MCtzZWNvbmQqTWF0aC5QSS8yMTYwMCxtaW51dGU9bWludXRlKk1hdGguUEkvMzArc2Vjb25kKk1hdGguUEkvMTgwMCxzZWNvbmQ9c2Vjb25kKk1hdGguUEkvMzAse2hvdXI6aG91cixtaW51dGU6bWludXRlLHNlY29uZDpzZWNvbmR9fX1dKSxDbG9ja0FwcH0oKX0sZnVuY3Rpb24obW9kdWxlLGV4cG9ydHMsX193ZWJwYWNrX3JlcXVpcmVfXyl7dmFyIF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX18sX19XRUJQQUNLX0FNRF9ERUZJTkVfUkVTVUxUX187LyohXG4gKiBqUXVlcnkgSmF2YVNjcmlwdCBMaWJyYXJ5IHYzLjQuMVxuICogaHR0cHM6Ly9qcXVlcnkuY29tL1xuICpcbiAqIEluY2x1ZGVzIFNpenpsZS5qc1xuICogaHR0cHM6Ly9zaXp6bGVqcy5jb20vXG4gKlxuICogQ29weXJpZ2h0IEpTIEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwczovL2pxdWVyeS5vcmcvbGljZW5zZVxuICpcbiAqIERhdGU6IDIwMTktMDUtMDFUMjE6MDRaXG4gKi9cbiFmdW5jdGlvbihnbG9iYWwsZmFjdG9yeSl7XCJ1c2Ugc3RyaWN0XCI7XCJvYmplY3RcIj09dHlwZW9mIG1vZHVsZSYmXCJvYmplY3RcIj09dHlwZW9mIG1vZHVsZS5leHBvcnRzP21vZHVsZS5leHBvcnRzPWdsb2JhbC5kb2N1bWVudD9mYWN0b3J5KGdsb2JhbCwhMCk6ZnVuY3Rpb24odyl7aWYoIXcuZG9jdW1lbnQpdGhyb3cgbmV3IEVycm9yKFwialF1ZXJ5IHJlcXVpcmVzIGEgd2luZG93IHdpdGggYSBkb2N1bWVudFwiKTtyZXR1cm4gZmFjdG9yeSh3KX06ZmFjdG9yeShnbG9iYWwpfShcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdzp0aGlzLGZ1bmN0aW9uKHdpbmRvdyxub0dsb2JhbCl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gRE9NRXZhbChjb2RlLG5vZGUsZG9jKXtkb2M9ZG9jfHxkb2N1bWVudDt2YXIgaSx2YWwsc2NyaXB0PWRvYy5jcmVhdGVFbGVtZW50KFwic2NyaXB0XCIpO2lmKHNjcmlwdC50ZXh0PWNvZGUsbm9kZSlmb3IoaSBpbiBwcmVzZXJ2ZWRTY3JpcHRBdHRyaWJ1dGVzKSh2YWw9bm9kZVtpXXx8bm9kZS5nZXRBdHRyaWJ1dGUmJm5vZGUuZ2V0QXR0cmlidXRlKGkpKSYmc2NyaXB0LnNldEF0dHJpYnV0ZShpLHZhbCk7ZG9jLmhlYWQuYXBwZW5kQ2hpbGQoc2NyaXB0KS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHNjcmlwdCl9ZnVuY3Rpb24gdG9UeXBlKG9iail7cmV0dXJuIG51bGw9PW9iaj9vYmorXCJcIjpcIm9iamVjdFwiPT10eXBlb2Ygb2JqfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBvYmo/Y2xhc3MydHlwZVt0b1N0cmluZy5jYWxsKG9iaildfHxcIm9iamVjdFwiOnR5cGVvZiBvYmp9ZnVuY3Rpb24gaXNBcnJheUxpa2Uob2JqKXt2YXIgbGVuZ3RoPSEhb2JqJiZcImxlbmd0aFwiaW4gb2JqJiZvYmoubGVuZ3RoLHR5cGU9dG9UeXBlKG9iaik7cmV0dXJuIWlzRnVuY3Rpb24ob2JqKSYmIWlzV2luZG93KG9iaikmJihcImFycmF5XCI9PT10eXBlfHwwPT09bGVuZ3RofHxcIm51bWJlclwiPT10eXBlb2YgbGVuZ3RoJiZsZW5ndGg+MCYmbGVuZ3RoLTEgaW4gb2JqKX1mdW5jdGlvbiBub2RlTmFtZShlbGVtLG5hbWUpe3JldHVybiBlbGVtLm5vZGVOYW1lJiZlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk9PT1uYW1lLnRvTG93ZXJDYXNlKCl9ZnVuY3Rpb24gd2lubm93KGVsZW1lbnRzLHF1YWxpZmllcixub3Qpe3JldHVybiBpc0Z1bmN0aW9uKHF1YWxpZmllcik/alF1ZXJ5LmdyZXAoZWxlbWVudHMsZnVuY3Rpb24oZWxlbSxpKXtyZXR1cm4hIXF1YWxpZmllci5jYWxsKGVsZW0saSxlbGVtKSE9PW5vdH0pOnF1YWxpZmllci5ub2RlVHlwZT9qUXVlcnkuZ3JlcChlbGVtZW50cyxmdW5jdGlvbihlbGVtKXtyZXR1cm4gZWxlbT09PXF1YWxpZmllciE9PW5vdH0pOlwic3RyaW5nXCIhPXR5cGVvZiBxdWFsaWZpZXI/alF1ZXJ5LmdyZXAoZWxlbWVudHMsZnVuY3Rpb24oZWxlbSl7cmV0dXJuIGluZGV4T2YuY2FsbChxdWFsaWZpZXIsZWxlbSk+LTEhPT1ub3R9KTpqUXVlcnkuZmlsdGVyKHF1YWxpZmllcixlbGVtZW50cyxub3QpfWZ1bmN0aW9uIHNpYmxpbmcoY3VyLGRpcil7Zm9yKDsoY3VyPWN1cltkaXJdKSYmMSE9PWN1ci5ub2RlVHlwZTspO3JldHVybiBjdXJ9ZnVuY3Rpb24gY3JlYXRlT3B0aW9ucyhvcHRpb25zKXt2YXIgb2JqZWN0PXt9O3JldHVybiBqUXVlcnkuZWFjaChvcHRpb25zLm1hdGNoKHJub3RodG1sd2hpdGUpfHxbXSxmdW5jdGlvbihfLGZsYWcpe29iamVjdFtmbGFnXT0hMH0pLG9iamVjdH1mdW5jdGlvbiBJZGVudGl0eSh2KXtyZXR1cm4gdn1mdW5jdGlvbiBUaHJvd2VyKGV4KXt0aHJvdyBleH1mdW5jdGlvbiBhZG9wdFZhbHVlKHZhbHVlLHJlc29sdmUscmVqZWN0LG5vVmFsdWUpe3ZhciBtZXRob2Q7dHJ5e3ZhbHVlJiZpc0Z1bmN0aW9uKG1ldGhvZD12YWx1ZS5wcm9taXNlKT9tZXRob2QuY2FsbCh2YWx1ZSkuZG9uZShyZXNvbHZlKS5mYWlsKHJlamVjdCk6dmFsdWUmJmlzRnVuY3Rpb24obWV0aG9kPXZhbHVlLnRoZW4pP21ldGhvZC5jYWxsKHZhbHVlLHJlc29sdmUscmVqZWN0KTpyZXNvbHZlLmFwcGx5KHZvaWQgMCxbdmFsdWVdLnNsaWNlKG5vVmFsdWUpKX1jYXRjaCh2YWx1ZSl7cmVqZWN0LmFwcGx5KHZvaWQgMCxbdmFsdWVdKX19ZnVuY3Rpb24gY29tcGxldGVkKCl7ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIkRPTUNvbnRlbnRMb2FkZWRcIixjb21wbGV0ZWQpLHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwibG9hZFwiLGNvbXBsZXRlZCksalF1ZXJ5LnJlYWR5KCl9ZnVuY3Rpb24gZmNhbWVsQ2FzZShhbGwsbGV0dGVyKXtyZXR1cm4gbGV0dGVyLnRvVXBwZXJDYXNlKCl9ZnVuY3Rpb24gY2FtZWxDYXNlKHN0cmluZyl7cmV0dXJuIHN0cmluZy5yZXBsYWNlKHJtc1ByZWZpeCxcIm1zLVwiKS5yZXBsYWNlKHJkYXNoQWxwaGEsZmNhbWVsQ2FzZSl9ZnVuY3Rpb24gRGF0YSgpe3RoaXMuZXhwYW5kbz1qUXVlcnkuZXhwYW5kbytEYXRhLnVpZCsrfWZ1bmN0aW9uIGdldERhdGEoZGF0YSl7cmV0dXJuXCJ0cnVlXCI9PT1kYXRhfHxcImZhbHNlXCIhPT1kYXRhJiYoXCJudWxsXCI9PT1kYXRhP251bGw6ZGF0YT09PStkYXRhK1wiXCI/K2RhdGE6cmJyYWNlLnRlc3QoZGF0YSk/SlNPTi5wYXJzZShkYXRhKTpkYXRhKX1mdW5jdGlvbiBkYXRhQXR0cihlbGVtLGtleSxkYXRhKXt2YXIgbmFtZTtpZih2b2lkIDA9PT1kYXRhJiYxPT09ZWxlbS5ub2RlVHlwZSlpZihuYW1lPVwiZGF0YS1cIitrZXkucmVwbGFjZShybXVsdGlEYXNoLFwiLSQmXCIpLnRvTG93ZXJDYXNlKCksXCJzdHJpbmdcIj09dHlwZW9mKGRhdGE9ZWxlbS5nZXRBdHRyaWJ1dGUobmFtZSkpKXt0cnl7ZGF0YT1nZXREYXRhKGRhdGEpfWNhdGNoKGUpe31kYXRhVXNlci5zZXQoZWxlbSxrZXksZGF0YSl9ZWxzZSBkYXRhPXZvaWQgMDtyZXR1cm4gZGF0YX1mdW5jdGlvbiBhZGp1c3RDU1MoZWxlbSxwcm9wLHZhbHVlUGFydHMsdHdlZW4pe3ZhciBhZGp1c3RlZCxzY2FsZSxtYXhJdGVyYXRpb25zPTIwLGN1cnJlbnRWYWx1ZT10d2Vlbj9mdW5jdGlvbigpe3JldHVybiB0d2Vlbi5jdXIoKX06ZnVuY3Rpb24oKXtyZXR1cm4galF1ZXJ5LmNzcyhlbGVtLHByb3AsXCJcIil9LGluaXRpYWw9Y3VycmVudFZhbHVlKCksdW5pdD12YWx1ZVBhcnRzJiZ2YWx1ZVBhcnRzWzNdfHwoalF1ZXJ5LmNzc051bWJlcltwcm9wXT9cIlwiOlwicHhcIiksaW5pdGlhbEluVW5pdD1lbGVtLm5vZGVUeXBlJiYoalF1ZXJ5LmNzc051bWJlcltwcm9wXXx8XCJweFwiIT09dW5pdCYmK2luaXRpYWwpJiZyY3NzTnVtLmV4ZWMoalF1ZXJ5LmNzcyhlbGVtLHByb3ApKTtpZihpbml0aWFsSW5Vbml0JiZpbml0aWFsSW5Vbml0WzNdIT09dW5pdCl7Zm9yKGluaXRpYWwvPTIsdW5pdD11bml0fHxpbml0aWFsSW5Vbml0WzNdLGluaXRpYWxJblVuaXQ9K2luaXRpYWx8fDE7bWF4SXRlcmF0aW9ucy0tOylqUXVlcnkuc3R5bGUoZWxlbSxwcm9wLGluaXRpYWxJblVuaXQrdW5pdCksKDEtc2NhbGUpKigxLShzY2FsZT1jdXJyZW50VmFsdWUoKS9pbml0aWFsfHwuNSkpPD0wJiYobWF4SXRlcmF0aW9ucz0wKSxpbml0aWFsSW5Vbml0Lz1zY2FsZTtpbml0aWFsSW5Vbml0Kj0yLGpRdWVyeS5zdHlsZShlbGVtLHByb3AsaW5pdGlhbEluVW5pdCt1bml0KSx2YWx1ZVBhcnRzPXZhbHVlUGFydHN8fFtdfXJldHVybiB2YWx1ZVBhcnRzJiYoaW5pdGlhbEluVW5pdD0raW5pdGlhbEluVW5pdHx8K2luaXRpYWx8fDAsYWRqdXN0ZWQ9dmFsdWVQYXJ0c1sxXT9pbml0aWFsSW5Vbml0Kyh2YWx1ZVBhcnRzWzFdKzEpKnZhbHVlUGFydHNbMl06K3ZhbHVlUGFydHNbMl0sdHdlZW4mJih0d2Vlbi51bml0PXVuaXQsdHdlZW4uc3RhcnQ9aW5pdGlhbEluVW5pdCx0d2Vlbi5lbmQ9YWRqdXN0ZWQpKSxhZGp1c3RlZH1mdW5jdGlvbiBnZXREZWZhdWx0RGlzcGxheShlbGVtKXt2YXIgdGVtcCxkb2M9ZWxlbS5vd25lckRvY3VtZW50LG5vZGVOYW1lPWVsZW0ubm9kZU5hbWUsZGlzcGxheT1kZWZhdWx0RGlzcGxheU1hcFtub2RlTmFtZV07cmV0dXJuIGRpc3BsYXl8fCh0ZW1wPWRvYy5ib2R5LmFwcGVuZENoaWxkKGRvYy5jcmVhdGVFbGVtZW50KG5vZGVOYW1lKSksZGlzcGxheT1qUXVlcnkuY3NzKHRlbXAsXCJkaXNwbGF5XCIpLHRlbXAucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0ZW1wKSxcIm5vbmVcIj09PWRpc3BsYXkmJihkaXNwbGF5PVwiYmxvY2tcIiksZGVmYXVsdERpc3BsYXlNYXBbbm9kZU5hbWVdPWRpc3BsYXksZGlzcGxheSl9ZnVuY3Rpb24gc2hvd0hpZGUoZWxlbWVudHMsc2hvdyl7Zm9yKHZhciBkaXNwbGF5LGVsZW0sdmFsdWVzPVtdLGluZGV4PTAsbGVuZ3RoPWVsZW1lbnRzLmxlbmd0aDtpbmRleDxsZW5ndGg7aW5kZXgrKyllbGVtPWVsZW1lbnRzW2luZGV4XSxlbGVtLnN0eWxlJiYoZGlzcGxheT1lbGVtLnN0eWxlLmRpc3BsYXksc2hvdz8oXCJub25lXCI9PT1kaXNwbGF5JiYodmFsdWVzW2luZGV4XT1kYXRhUHJpdi5nZXQoZWxlbSxcImRpc3BsYXlcIil8fG51bGwsdmFsdWVzW2luZGV4XXx8KGVsZW0uc3R5bGUuZGlzcGxheT1cIlwiKSksXCJcIj09PWVsZW0uc3R5bGUuZGlzcGxheSYmaXNIaWRkZW5XaXRoaW5UcmVlKGVsZW0pJiYodmFsdWVzW2luZGV4XT1nZXREZWZhdWx0RGlzcGxheShlbGVtKSkpOlwibm9uZVwiIT09ZGlzcGxheSYmKHZhbHVlc1tpbmRleF09XCJub25lXCIsZGF0YVByaXYuc2V0KGVsZW0sXCJkaXNwbGF5XCIsZGlzcGxheSkpKTtmb3IoaW5kZXg9MDtpbmRleDxsZW5ndGg7aW5kZXgrKyludWxsIT12YWx1ZXNbaW5kZXhdJiYoZWxlbWVudHNbaW5kZXhdLnN0eWxlLmRpc3BsYXk9dmFsdWVzW2luZGV4XSk7cmV0dXJuIGVsZW1lbnRzfWZ1bmN0aW9uIGdldEFsbChjb250ZXh0LHRhZyl7dmFyIHJldDtyZXR1cm4gcmV0PXZvaWQgMCE9PWNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWU/Y29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSh0YWd8fFwiKlwiKTp2b2lkIDAhPT1jb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGw/Y29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKHRhZ3x8XCIqXCIpOltdLHZvaWQgMD09PXRhZ3x8dGFnJiZub2RlTmFtZShjb250ZXh0LHRhZyk/alF1ZXJ5Lm1lcmdlKFtjb250ZXh0XSxyZXQpOnJldH1mdW5jdGlvbiBzZXRHbG9iYWxFdmFsKGVsZW1zLHJlZkVsZW1lbnRzKXtmb3IodmFyIGk9MCxsPWVsZW1zLmxlbmd0aDtpPGw7aSsrKWRhdGFQcml2LnNldChlbGVtc1tpXSxcImdsb2JhbEV2YWxcIiwhcmVmRWxlbWVudHN8fGRhdGFQcml2LmdldChyZWZFbGVtZW50c1tpXSxcImdsb2JhbEV2YWxcIikpfWZ1bmN0aW9uIGJ1aWxkRnJhZ21lbnQoZWxlbXMsY29udGV4dCxzY3JpcHRzLHNlbGVjdGlvbixpZ25vcmVkKXtmb3IodmFyIGVsZW0sdG1wLHRhZyx3cmFwLGF0dGFjaGVkLGosZnJhZ21lbnQ9Y29udGV4dC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksbm9kZXM9W10saT0wLGw9ZWxlbXMubGVuZ3RoO2k8bDtpKyspaWYoKGVsZW09ZWxlbXNbaV0pfHwwPT09ZWxlbSlpZihcIm9iamVjdFwiPT09dG9UeXBlKGVsZW0pKWpRdWVyeS5tZXJnZShub2RlcyxlbGVtLm5vZGVUeXBlP1tlbGVtXTplbGVtKTtlbHNlIGlmKHJodG1sLnRlc3QoZWxlbSkpe2Zvcih0bXA9dG1wfHxmcmFnbWVudC5hcHBlbmRDaGlsZChjb250ZXh0LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikpLHRhZz0ocnRhZ05hbWUuZXhlYyhlbGVtKXx8W1wiXCIsXCJcIl0pWzFdLnRvTG93ZXJDYXNlKCksd3JhcD13cmFwTWFwW3RhZ118fHdyYXBNYXAuX2RlZmF1bHQsdG1wLmlubmVySFRNTD13cmFwWzFdK2pRdWVyeS5odG1sUHJlZmlsdGVyKGVsZW0pK3dyYXBbMl0saj13cmFwWzBdO2otLTspdG1wPXRtcC5sYXN0Q2hpbGQ7alF1ZXJ5Lm1lcmdlKG5vZGVzLHRtcC5jaGlsZE5vZGVzKSx0bXA9ZnJhZ21lbnQuZmlyc3RDaGlsZCx0bXAudGV4dENvbnRlbnQ9XCJcIn1lbHNlIG5vZGVzLnB1c2goY29udGV4dC5jcmVhdGVUZXh0Tm9kZShlbGVtKSk7Zm9yKGZyYWdtZW50LnRleHRDb250ZW50PVwiXCIsaT0wO2VsZW09bm9kZXNbaSsrXTspaWYoc2VsZWN0aW9uJiZqUXVlcnkuaW5BcnJheShlbGVtLHNlbGVjdGlvbik+LTEpaWdub3JlZCYmaWdub3JlZC5wdXNoKGVsZW0pO2Vsc2UgaWYoYXR0YWNoZWQ9aXNBdHRhY2hlZChlbGVtKSx0bXA9Z2V0QWxsKGZyYWdtZW50LmFwcGVuZENoaWxkKGVsZW0pLFwic2NyaXB0XCIpLGF0dGFjaGVkJiZzZXRHbG9iYWxFdmFsKHRtcCksc2NyaXB0cylmb3Ioaj0wO2VsZW09dG1wW2orK107KXJzY3JpcHRUeXBlLnRlc3QoZWxlbS50eXBlfHxcIlwiKSYmc2NyaXB0cy5wdXNoKGVsZW0pO3JldHVybiBmcmFnbWVudH1mdW5jdGlvbiByZXR1cm5UcnVlKCl7cmV0dXJuITB9ZnVuY3Rpb24gcmV0dXJuRmFsc2UoKXtyZXR1cm4hMX1mdW5jdGlvbiBleHBlY3RTeW5jKGVsZW0sdHlwZSl7cmV0dXJuIGVsZW09PT1zYWZlQWN0aXZlRWxlbWVudCgpPT0oXCJmb2N1c1wiPT09dHlwZSl9ZnVuY3Rpb24gc2FmZUFjdGl2ZUVsZW1lbnQoKXt0cnl7cmV0dXJuIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnR9Y2F0Y2goZXJyKXt9fWZ1bmN0aW9uIG9uKGVsZW0sdHlwZXMsc2VsZWN0b3IsZGF0YSxmbixvbmUpe3ZhciBvcmlnRm4sdHlwZTtpZihcIm9iamVjdFwiPT10eXBlb2YgdHlwZXMpe1wic3RyaW5nXCIhPXR5cGVvZiBzZWxlY3RvciYmKGRhdGE9ZGF0YXx8c2VsZWN0b3Isc2VsZWN0b3I9dm9pZCAwKTtmb3IodHlwZSBpbiB0eXBlcylvbihlbGVtLHR5cGUsc2VsZWN0b3IsZGF0YSx0eXBlc1t0eXBlXSxvbmUpO3JldHVybiBlbGVtfWlmKG51bGw9PWRhdGEmJm51bGw9PWZuPyhmbj1zZWxlY3RvcixkYXRhPXNlbGVjdG9yPXZvaWQgMCk6bnVsbD09Zm4mJihcInN0cmluZ1wiPT10eXBlb2Ygc2VsZWN0b3I/KGZuPWRhdGEsZGF0YT12b2lkIDApOihmbj1kYXRhLGRhdGE9c2VsZWN0b3Isc2VsZWN0b3I9dm9pZCAwKSksITE9PT1mbilmbj1yZXR1cm5GYWxzZTtlbHNlIGlmKCFmbilyZXR1cm4gZWxlbTtyZXR1cm4gMT09PW9uZSYmKG9yaWdGbj1mbixmbj1mdW5jdGlvbihldmVudCl7cmV0dXJuIGpRdWVyeSgpLm9mZihldmVudCksb3JpZ0ZuLmFwcGx5KHRoaXMsYXJndW1lbnRzKX0sZm4uZ3VpZD1vcmlnRm4uZ3VpZHx8KG9yaWdGbi5ndWlkPWpRdWVyeS5ndWlkKyspKSxlbGVtLmVhY2goZnVuY3Rpb24oKXtqUXVlcnkuZXZlbnQuYWRkKHRoaXMsdHlwZXMsZm4sZGF0YSxzZWxlY3Rvcil9KX1mdW5jdGlvbiBsZXZlcmFnZU5hdGl2ZShlbCx0eXBlLGV4cGVjdFN5bmMpe2lmKCFleHBlY3RTeW5jKXJldHVybiB2b2lkKHZvaWQgMD09PWRhdGFQcml2LmdldChlbCx0eXBlKSYmalF1ZXJ5LmV2ZW50LmFkZChlbCx0eXBlLHJldHVyblRydWUpKTtkYXRhUHJpdi5zZXQoZWwsdHlwZSwhMSksalF1ZXJ5LmV2ZW50LmFkZChlbCx0eXBlLHtuYW1lc3BhY2U6ITEsaGFuZGxlcjpmdW5jdGlvbihldmVudCl7dmFyIG5vdEFzeW5jLHJlc3VsdCxzYXZlZD1kYXRhUHJpdi5nZXQodGhpcyx0eXBlKTtpZigxJmV2ZW50LmlzVHJpZ2dlciYmdGhpc1t0eXBlXSl7aWYoc2F2ZWQubGVuZ3RoKShqUXVlcnkuZXZlbnQuc3BlY2lhbFt0eXBlXXx8e30pLmRlbGVnYXRlVHlwZSYmZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7ZWxzZSBpZihzYXZlZD1zbGljZS5jYWxsKGFyZ3VtZW50cyksZGF0YVByaXYuc2V0KHRoaXMsdHlwZSxzYXZlZCksbm90QXN5bmM9ZXhwZWN0U3luYyh0aGlzLHR5cGUpLHRoaXNbdHlwZV0oKSxyZXN1bHQ9ZGF0YVByaXYuZ2V0KHRoaXMsdHlwZSksc2F2ZWQhPT1yZXN1bHR8fG5vdEFzeW5jP2RhdGFQcml2LnNldCh0aGlzLHR5cGUsITEpOnJlc3VsdD17fSxzYXZlZCE9PXJlc3VsdClyZXR1cm4gZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCksZXZlbnQucHJldmVudERlZmF1bHQoKSxyZXN1bHQudmFsdWV9ZWxzZSBzYXZlZC5sZW5ndGgmJihkYXRhUHJpdi5zZXQodGhpcyx0eXBlLHt2YWx1ZTpqUXVlcnkuZXZlbnQudHJpZ2dlcihqUXVlcnkuZXh0ZW5kKHNhdmVkWzBdLGpRdWVyeS5FdmVudC5wcm90b3R5cGUpLHNhdmVkLnNsaWNlKDEpLHRoaXMpfSksZXZlbnQuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCkpfX0pfWZ1bmN0aW9uIG1hbmlwdWxhdGlvblRhcmdldChlbGVtLGNvbnRlbnQpe3JldHVybiBub2RlTmFtZShlbGVtLFwidGFibGVcIikmJm5vZGVOYW1lKDExIT09Y29udGVudC5ub2RlVHlwZT9jb250ZW50OmNvbnRlbnQuZmlyc3RDaGlsZCxcInRyXCIpP2pRdWVyeShlbGVtKS5jaGlsZHJlbihcInRib2R5XCIpWzBdfHxlbGVtOmVsZW19ZnVuY3Rpb24gZGlzYWJsZVNjcmlwdChlbGVtKXtyZXR1cm4gZWxlbS50eXBlPShudWxsIT09ZWxlbS5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpKStcIi9cIitlbGVtLnR5cGUsZWxlbX1mdW5jdGlvbiByZXN0b3JlU2NyaXB0KGVsZW0pe3JldHVyblwidHJ1ZS9cIj09PShlbGVtLnR5cGV8fFwiXCIpLnNsaWNlKDAsNSk/ZWxlbS50eXBlPWVsZW0udHlwZS5zbGljZSg1KTplbGVtLnJlbW92ZUF0dHJpYnV0ZShcInR5cGVcIiksZWxlbX1mdW5jdGlvbiBjbG9uZUNvcHlFdmVudChzcmMsZGVzdCl7dmFyIGksbCx0eXBlLHBkYXRhT2xkLHBkYXRhQ3VyLHVkYXRhT2xkLHVkYXRhQ3VyLGV2ZW50cztpZigxPT09ZGVzdC5ub2RlVHlwZSl7aWYoZGF0YVByaXYuaGFzRGF0YShzcmMpJiYocGRhdGFPbGQ9ZGF0YVByaXYuYWNjZXNzKHNyYykscGRhdGFDdXI9ZGF0YVByaXYuc2V0KGRlc3QscGRhdGFPbGQpLGV2ZW50cz1wZGF0YU9sZC5ldmVudHMpKXtkZWxldGUgcGRhdGFDdXIuaGFuZGxlLHBkYXRhQ3VyLmV2ZW50cz17fTtmb3IodHlwZSBpbiBldmVudHMpZm9yKGk9MCxsPWV2ZW50c1t0eXBlXS5sZW5ndGg7aTxsO2krKylqUXVlcnkuZXZlbnQuYWRkKGRlc3QsdHlwZSxldmVudHNbdHlwZV1baV0pfWRhdGFVc2VyLmhhc0RhdGEoc3JjKSYmKHVkYXRhT2xkPWRhdGFVc2VyLmFjY2VzcyhzcmMpLHVkYXRhQ3VyPWpRdWVyeS5leHRlbmQoe30sdWRhdGFPbGQpLGRhdGFVc2VyLnNldChkZXN0LHVkYXRhQ3VyKSl9fWZ1bmN0aW9uIGZpeElucHV0KHNyYyxkZXN0KXt2YXIgbm9kZU5hbWU9ZGVzdC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1wiaW5wdXRcIj09PW5vZGVOYW1lJiZyY2hlY2thYmxlVHlwZS50ZXN0KHNyYy50eXBlKT9kZXN0LmNoZWNrZWQ9c3JjLmNoZWNrZWQ6XCJpbnB1dFwiIT09bm9kZU5hbWUmJlwidGV4dGFyZWFcIiE9PW5vZGVOYW1lfHwoZGVzdC5kZWZhdWx0VmFsdWU9c3JjLmRlZmF1bHRWYWx1ZSl9ZnVuY3Rpb24gZG9tTWFuaXAoY29sbGVjdGlvbixhcmdzLGNhbGxiYWNrLGlnbm9yZWQpe2FyZ3M9Y29uY2F0LmFwcGx5KFtdLGFyZ3MpO3ZhciBmcmFnbWVudCxmaXJzdCxzY3JpcHRzLGhhc1NjcmlwdHMsbm9kZSxkb2MsaT0wLGw9Y29sbGVjdGlvbi5sZW5ndGgsaU5vQ2xvbmU9bC0xLHZhbHVlPWFyZ3NbMF0sdmFsdWVJc0Z1bmN0aW9uPWlzRnVuY3Rpb24odmFsdWUpO2lmKHZhbHVlSXNGdW5jdGlvbnx8bD4xJiZcInN0cmluZ1wiPT10eXBlb2YgdmFsdWUmJiFzdXBwb3J0LmNoZWNrQ2xvbmUmJnJjaGVja2VkLnRlc3QodmFsdWUpKXJldHVybiBjb2xsZWN0aW9uLmVhY2goZnVuY3Rpb24oaW5kZXgpe3ZhciBzZWxmPWNvbGxlY3Rpb24uZXEoaW5kZXgpO3ZhbHVlSXNGdW5jdGlvbiYmKGFyZ3NbMF09dmFsdWUuY2FsbCh0aGlzLGluZGV4LHNlbGYuaHRtbCgpKSksZG9tTWFuaXAoc2VsZixhcmdzLGNhbGxiYWNrLGlnbm9yZWQpfSk7aWYobCYmKGZyYWdtZW50PWJ1aWxkRnJhZ21lbnQoYXJncyxjb2xsZWN0aW9uWzBdLm93bmVyRG9jdW1lbnQsITEsY29sbGVjdGlvbixpZ25vcmVkKSxmaXJzdD1mcmFnbWVudC5maXJzdENoaWxkLDE9PT1mcmFnbWVudC5jaGlsZE5vZGVzLmxlbmd0aCYmKGZyYWdtZW50PWZpcnN0KSxmaXJzdHx8aWdub3JlZCkpe2ZvcihzY3JpcHRzPWpRdWVyeS5tYXAoZ2V0QWxsKGZyYWdtZW50LFwic2NyaXB0XCIpLGRpc2FibGVTY3JpcHQpLGhhc1NjcmlwdHM9c2NyaXB0cy5sZW5ndGg7aTxsO2krKylub2RlPWZyYWdtZW50LGkhPT1pTm9DbG9uZSYmKG5vZGU9alF1ZXJ5LmNsb25lKG5vZGUsITAsITApLGhhc1NjcmlwdHMmJmpRdWVyeS5tZXJnZShzY3JpcHRzLGdldEFsbChub2RlLFwic2NyaXB0XCIpKSksY2FsbGJhY2suY2FsbChjb2xsZWN0aW9uW2ldLG5vZGUsaSk7aWYoaGFzU2NyaXB0cylmb3IoZG9jPXNjcmlwdHNbc2NyaXB0cy5sZW5ndGgtMV0ub3duZXJEb2N1bWVudCxqUXVlcnkubWFwKHNjcmlwdHMscmVzdG9yZVNjcmlwdCksaT0wO2k8aGFzU2NyaXB0cztpKyspbm9kZT1zY3JpcHRzW2ldLHJzY3JpcHRUeXBlLnRlc3Qobm9kZS50eXBlfHxcIlwiKSYmIWRhdGFQcml2LmFjY2Vzcyhub2RlLFwiZ2xvYmFsRXZhbFwiKSYmalF1ZXJ5LmNvbnRhaW5zKGRvYyxub2RlKSYmKG5vZGUuc3JjJiZcIm1vZHVsZVwiIT09KG5vZGUudHlwZXx8XCJcIikudG9Mb3dlckNhc2UoKT9qUXVlcnkuX2V2YWxVcmwmJiFub2RlLm5vTW9kdWxlJiZqUXVlcnkuX2V2YWxVcmwobm9kZS5zcmMse25vbmNlOm5vZGUubm9uY2V8fG5vZGUuZ2V0QXR0cmlidXRlKFwibm9uY2VcIil9KTpET01FdmFsKG5vZGUudGV4dENvbnRlbnQucmVwbGFjZShyY2xlYW5TY3JpcHQsXCJcIiksbm9kZSxkb2MpKX1yZXR1cm4gY29sbGVjdGlvbn1mdW5jdGlvbiByZW1vdmUoZWxlbSxzZWxlY3RvcixrZWVwRGF0YSl7Zm9yKHZhciBub2RlLG5vZGVzPXNlbGVjdG9yP2pRdWVyeS5maWx0ZXIoc2VsZWN0b3IsZWxlbSk6ZWxlbSxpPTA7bnVsbCE9KG5vZGU9bm9kZXNbaV0pO2krKylrZWVwRGF0YXx8MSE9PW5vZGUubm9kZVR5cGV8fGpRdWVyeS5jbGVhbkRhdGEoZ2V0QWxsKG5vZGUpKSxub2RlLnBhcmVudE5vZGUmJihrZWVwRGF0YSYmaXNBdHRhY2hlZChub2RlKSYmc2V0R2xvYmFsRXZhbChnZXRBbGwobm9kZSxcInNjcmlwdFwiKSksbm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG5vZGUpKTtyZXR1cm4gZWxlbX1mdW5jdGlvbiBjdXJDU1MoZWxlbSxuYW1lLGNvbXB1dGVkKXt2YXIgd2lkdGgsbWluV2lkdGgsbWF4V2lkdGgscmV0LHN0eWxlPWVsZW0uc3R5bGU7cmV0dXJuIGNvbXB1dGVkPWNvbXB1dGVkfHxnZXRTdHlsZXMoZWxlbSksY29tcHV0ZWQmJihyZXQ9Y29tcHV0ZWQuZ2V0UHJvcGVydHlWYWx1ZShuYW1lKXx8Y29tcHV0ZWRbbmFtZV0sXCJcIiE9PXJldHx8aXNBdHRhY2hlZChlbGVtKXx8KHJldD1qUXVlcnkuc3R5bGUoZWxlbSxuYW1lKSksIXN1cHBvcnQucGl4ZWxCb3hTdHlsZXMoKSYmcm51bW5vbnB4LnRlc3QocmV0KSYmcmJveFN0eWxlLnRlc3QobmFtZSkmJih3aWR0aD1zdHlsZS53aWR0aCxtaW5XaWR0aD1zdHlsZS5taW5XaWR0aCxtYXhXaWR0aD1zdHlsZS5tYXhXaWR0aCxzdHlsZS5taW5XaWR0aD1zdHlsZS5tYXhXaWR0aD1zdHlsZS53aWR0aD1yZXQscmV0PWNvbXB1dGVkLndpZHRoLHN0eWxlLndpZHRoPXdpZHRoLHN0eWxlLm1pbldpZHRoPW1pbldpZHRoLHN0eWxlLm1heFdpZHRoPW1heFdpZHRoKSksdm9pZCAwIT09cmV0P3JldCtcIlwiOnJldH1mdW5jdGlvbiBhZGRHZXRIb29rSWYoY29uZGl0aW9uRm4saG9va0ZuKXtyZXR1cm57Z2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGNvbmRpdGlvbkZuKCk/dm9pZCBkZWxldGUgdGhpcy5nZXQ6KHRoaXMuZ2V0PWhvb2tGbikuYXBwbHkodGhpcyxhcmd1bWVudHMpfX19ZnVuY3Rpb24gdmVuZG9yUHJvcE5hbWUobmFtZSl7Zm9yKHZhciBjYXBOYW1lPW5hbWVbMF0udG9VcHBlckNhc2UoKStuYW1lLnNsaWNlKDEpLGk9Y3NzUHJlZml4ZXMubGVuZ3RoO2ktLTspaWYoKG5hbWU9Y3NzUHJlZml4ZXNbaV0rY2FwTmFtZSlpbiBlbXB0eVN0eWxlKXJldHVybiBuYW1lfWZ1bmN0aW9uIGZpbmFsUHJvcE5hbWUobmFtZSl7dmFyIGZpbmFsPWpRdWVyeS5jc3NQcm9wc1tuYW1lXXx8dmVuZG9yUHJvcHNbbmFtZV07cmV0dXJuIGZpbmFsfHwobmFtZSBpbiBlbXB0eVN0eWxlP25hbWU6dmVuZG9yUHJvcHNbbmFtZV09dmVuZG9yUHJvcE5hbWUobmFtZSl8fG5hbWUpfWZ1bmN0aW9uIHNldFBvc2l0aXZlTnVtYmVyKGVsZW0sdmFsdWUsc3VidHJhY3Qpe3ZhciBtYXRjaGVzPXJjc3NOdW0uZXhlYyh2YWx1ZSk7cmV0dXJuIG1hdGNoZXM/TWF0aC5tYXgoMCxtYXRjaGVzWzJdLShzdWJ0cmFjdHx8MCkpKyhtYXRjaGVzWzNdfHxcInB4XCIpOnZhbHVlfWZ1bmN0aW9uIGJveE1vZGVsQWRqdXN0bWVudChlbGVtLGRpbWVuc2lvbixib3gsaXNCb3JkZXJCb3gsc3R5bGVzLGNvbXB1dGVkVmFsKXt2YXIgaT1cIndpZHRoXCI9PT1kaW1lbnNpb24/MTowLGV4dHJhPTAsZGVsdGE9MDtpZihib3g9PT0oaXNCb3JkZXJCb3g/XCJib3JkZXJcIjpcImNvbnRlbnRcIikpcmV0dXJuIDA7Zm9yKDtpPDQ7aSs9MilcIm1hcmdpblwiPT09Ym94JiYoZGVsdGErPWpRdWVyeS5jc3MoZWxlbSxib3grY3NzRXhwYW5kW2ldLCEwLHN0eWxlcykpLGlzQm9yZGVyQm94PyhcImNvbnRlbnRcIj09PWJveCYmKGRlbHRhLT1qUXVlcnkuY3NzKGVsZW0sXCJwYWRkaW5nXCIrY3NzRXhwYW5kW2ldLCEwLHN0eWxlcykpLFwibWFyZ2luXCIhPT1ib3gmJihkZWx0YS09alF1ZXJ5LmNzcyhlbGVtLFwiYm9yZGVyXCIrY3NzRXhwYW5kW2ldK1wiV2lkdGhcIiwhMCxzdHlsZXMpKSk6KGRlbHRhKz1qUXVlcnkuY3NzKGVsZW0sXCJwYWRkaW5nXCIrY3NzRXhwYW5kW2ldLCEwLHN0eWxlcyksXCJwYWRkaW5nXCIhPT1ib3g/ZGVsdGErPWpRdWVyeS5jc3MoZWxlbSxcImJvcmRlclwiK2Nzc0V4cGFuZFtpXStcIldpZHRoXCIsITAsc3R5bGVzKTpleHRyYSs9alF1ZXJ5LmNzcyhlbGVtLFwiYm9yZGVyXCIrY3NzRXhwYW5kW2ldK1wiV2lkdGhcIiwhMCxzdHlsZXMpKTtyZXR1cm4haXNCb3JkZXJCb3gmJmNvbXB1dGVkVmFsPj0wJiYoZGVsdGErPU1hdGgubWF4KDAsTWF0aC5jZWlsKGVsZW1bXCJvZmZzZXRcIitkaW1lbnNpb25bMF0udG9VcHBlckNhc2UoKStkaW1lbnNpb24uc2xpY2UoMSldLWNvbXB1dGVkVmFsLWRlbHRhLWV4dHJhLS41KSl8fDApLGRlbHRhfWZ1bmN0aW9uIGdldFdpZHRoT3JIZWlnaHQoZWxlbSxkaW1lbnNpb24sZXh0cmEpe3ZhciBzdHlsZXM9Z2V0U3R5bGVzKGVsZW0pLGJveFNpemluZ05lZWRlZD0hc3VwcG9ydC5ib3hTaXppbmdSZWxpYWJsZSgpfHxleHRyYSxpc0JvcmRlckJveD1ib3hTaXppbmdOZWVkZWQmJlwiYm9yZGVyLWJveFwiPT09alF1ZXJ5LmNzcyhlbGVtLFwiYm94U2l6aW5nXCIsITEsc3R5bGVzKSx2YWx1ZUlzQm9yZGVyQm94PWlzQm9yZGVyQm94LHZhbD1jdXJDU1MoZWxlbSxkaW1lbnNpb24sc3R5bGVzKSxvZmZzZXRQcm9wPVwib2Zmc2V0XCIrZGltZW5zaW9uWzBdLnRvVXBwZXJDYXNlKCkrZGltZW5zaW9uLnNsaWNlKDEpO2lmKHJudW1ub25weC50ZXN0KHZhbCkpe2lmKCFleHRyYSlyZXR1cm4gdmFsO3ZhbD1cImF1dG9cIn1yZXR1cm4oIXN1cHBvcnQuYm94U2l6aW5nUmVsaWFibGUoKSYmaXNCb3JkZXJCb3h8fFwiYXV0b1wiPT09dmFsfHwhcGFyc2VGbG9hdCh2YWwpJiZcImlubGluZVwiPT09alF1ZXJ5LmNzcyhlbGVtLFwiZGlzcGxheVwiLCExLHN0eWxlcykpJiZlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoJiYoaXNCb3JkZXJCb3g9XCJib3JkZXItYm94XCI9PT1qUXVlcnkuY3NzKGVsZW0sXCJib3hTaXppbmdcIiwhMSxzdHlsZXMpLCh2YWx1ZUlzQm9yZGVyQm94PW9mZnNldFByb3AgaW4gZWxlbSkmJih2YWw9ZWxlbVtvZmZzZXRQcm9wXSkpLCh2YWw9cGFyc2VGbG9hdCh2YWwpfHwwKStib3hNb2RlbEFkanVzdG1lbnQoZWxlbSxkaW1lbnNpb24sZXh0cmF8fChpc0JvcmRlckJveD9cImJvcmRlclwiOlwiY29udGVudFwiKSx2YWx1ZUlzQm9yZGVyQm94LHN0eWxlcyx2YWwpK1wicHhcIn1mdW5jdGlvbiBUd2VlbihlbGVtLG9wdGlvbnMscHJvcCxlbmQsZWFzaW5nKXtyZXR1cm4gbmV3IFR3ZWVuLnByb3RvdHlwZS5pbml0KGVsZW0sb3B0aW9ucyxwcm9wLGVuZCxlYXNpbmcpfWZ1bmN0aW9uIHNjaGVkdWxlKCl7aW5Qcm9ncmVzcyYmKCExPT09ZG9jdW1lbnQuaGlkZGVuJiZ3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lP3dpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoc2NoZWR1bGUpOndpbmRvdy5zZXRUaW1lb3V0KHNjaGVkdWxlLGpRdWVyeS5meC5pbnRlcnZhbCksalF1ZXJ5LmZ4LnRpY2soKSl9ZnVuY3Rpb24gY3JlYXRlRnhOb3coKXtyZXR1cm4gd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKXtmeE5vdz12b2lkIDB9KSxmeE5vdz1EYXRlLm5vdygpfWZ1bmN0aW9uIGdlbkZ4KHR5cGUsaW5jbHVkZVdpZHRoKXt2YXIgd2hpY2gsaT0wLGF0dHJzPXtoZWlnaHQ6dHlwZX07Zm9yKGluY2x1ZGVXaWR0aD1pbmNsdWRlV2lkdGg/MTowO2k8NDtpKz0yLWluY2x1ZGVXaWR0aCl3aGljaD1jc3NFeHBhbmRbaV0sYXR0cnNbXCJtYXJnaW5cIit3aGljaF09YXR0cnNbXCJwYWRkaW5nXCIrd2hpY2hdPXR5cGU7cmV0dXJuIGluY2x1ZGVXaWR0aCYmKGF0dHJzLm9wYWNpdHk9YXR0cnMud2lkdGg9dHlwZSksYXR0cnN9ZnVuY3Rpb24gY3JlYXRlVHdlZW4odmFsdWUscHJvcCxhbmltYXRpb24pe2Zvcih2YXIgdHdlZW4sY29sbGVjdGlvbj0oQW5pbWF0aW9uLnR3ZWVuZXJzW3Byb3BdfHxbXSkuY29uY2F0KEFuaW1hdGlvbi50d2VlbmVyc1tcIipcIl0pLGluZGV4PTAsbGVuZ3RoPWNvbGxlY3Rpb24ubGVuZ3RoO2luZGV4PGxlbmd0aDtpbmRleCsrKWlmKHR3ZWVuPWNvbGxlY3Rpb25baW5kZXhdLmNhbGwoYW5pbWF0aW9uLHByb3AsdmFsdWUpKXJldHVybiB0d2Vlbn1mdW5jdGlvbiBkZWZhdWx0UHJlZmlsdGVyKGVsZW0scHJvcHMsb3B0cyl7dmFyIHByb3AsdmFsdWUsdG9nZ2xlLGhvb2tzLG9sZGZpcmUscHJvcFR3ZWVuLHJlc3RvcmVEaXNwbGF5LGRpc3BsYXksaXNCb3g9XCJ3aWR0aFwiaW4gcHJvcHN8fFwiaGVpZ2h0XCJpbiBwcm9wcyxhbmltPXRoaXMsb3JpZz17fSxzdHlsZT1lbGVtLnN0eWxlLGhpZGRlbj1lbGVtLm5vZGVUeXBlJiZpc0hpZGRlbldpdGhpblRyZWUoZWxlbSksZGF0YVNob3c9ZGF0YVByaXYuZ2V0KGVsZW0sXCJmeHNob3dcIik7b3B0cy5xdWV1ZXx8KGhvb2tzPWpRdWVyeS5fcXVldWVIb29rcyhlbGVtLFwiZnhcIiksbnVsbD09aG9va3MudW5xdWV1ZWQmJihob29rcy51bnF1ZXVlZD0wLG9sZGZpcmU9aG9va3MuZW1wdHkuZmlyZSxob29rcy5lbXB0eS5maXJlPWZ1bmN0aW9uKCl7aG9va3MudW5xdWV1ZWR8fG9sZGZpcmUoKX0pLGhvb2tzLnVucXVldWVkKyssYW5pbS5hbHdheXMoZnVuY3Rpb24oKXthbmltLmFsd2F5cyhmdW5jdGlvbigpe2hvb2tzLnVucXVldWVkLS0salF1ZXJ5LnF1ZXVlKGVsZW0sXCJmeFwiKS5sZW5ndGh8fGhvb2tzLmVtcHR5LmZpcmUoKX0pfSkpO2Zvcihwcm9wIGluIHByb3BzKWlmKHZhbHVlPXByb3BzW3Byb3BdLHJmeHR5cGVzLnRlc3QodmFsdWUpKXtpZihkZWxldGUgcHJvcHNbcHJvcF0sdG9nZ2xlPXRvZ2dsZXx8XCJ0b2dnbGVcIj09PXZhbHVlLHZhbHVlPT09KGhpZGRlbj9cImhpZGVcIjpcInNob3dcIikpe2lmKFwic2hvd1wiIT09dmFsdWV8fCFkYXRhU2hvd3x8dm9pZCAwPT09ZGF0YVNob3dbcHJvcF0pY29udGludWU7aGlkZGVuPSEwfW9yaWdbcHJvcF09ZGF0YVNob3cmJmRhdGFTaG93W3Byb3BdfHxqUXVlcnkuc3R5bGUoZWxlbSxwcm9wKX1pZigocHJvcFR3ZWVuPSFqUXVlcnkuaXNFbXB0eU9iamVjdChwcm9wcykpfHwhalF1ZXJ5LmlzRW1wdHlPYmplY3Qob3JpZykpe2lzQm94JiYxPT09ZWxlbS5ub2RlVHlwZSYmKG9wdHMub3ZlcmZsb3c9W3N0eWxlLm92ZXJmbG93LHN0eWxlLm92ZXJmbG93WCxzdHlsZS5vdmVyZmxvd1ldLHJlc3RvcmVEaXNwbGF5PWRhdGFTaG93JiZkYXRhU2hvdy5kaXNwbGF5LG51bGw9PXJlc3RvcmVEaXNwbGF5JiYocmVzdG9yZURpc3BsYXk9ZGF0YVByaXYuZ2V0KGVsZW0sXCJkaXNwbGF5XCIpKSxkaXNwbGF5PWpRdWVyeS5jc3MoZWxlbSxcImRpc3BsYXlcIiksXCJub25lXCI9PT1kaXNwbGF5JiYocmVzdG9yZURpc3BsYXk/ZGlzcGxheT1yZXN0b3JlRGlzcGxheTooc2hvd0hpZGUoW2VsZW1dLCEwKSxyZXN0b3JlRGlzcGxheT1lbGVtLnN0eWxlLmRpc3BsYXl8fHJlc3RvcmVEaXNwbGF5LGRpc3BsYXk9alF1ZXJ5LmNzcyhlbGVtLFwiZGlzcGxheVwiKSxzaG93SGlkZShbZWxlbV0pKSksKFwiaW5saW5lXCI9PT1kaXNwbGF5fHxcImlubGluZS1ibG9ja1wiPT09ZGlzcGxheSYmbnVsbCE9cmVzdG9yZURpc3BsYXkpJiZcIm5vbmVcIj09PWpRdWVyeS5jc3MoZWxlbSxcImZsb2F0XCIpJiYocHJvcFR3ZWVufHwoYW5pbS5kb25lKGZ1bmN0aW9uKCl7c3R5bGUuZGlzcGxheT1yZXN0b3JlRGlzcGxheX0pLG51bGw9PXJlc3RvcmVEaXNwbGF5JiYoZGlzcGxheT1zdHlsZS5kaXNwbGF5LHJlc3RvcmVEaXNwbGF5PVwibm9uZVwiPT09ZGlzcGxheT9cIlwiOmRpc3BsYXkpKSxzdHlsZS5kaXNwbGF5PVwiaW5saW5lLWJsb2NrXCIpKSxvcHRzLm92ZXJmbG93JiYoc3R5bGUub3ZlcmZsb3c9XCJoaWRkZW5cIixhbmltLmFsd2F5cyhmdW5jdGlvbigpe3N0eWxlLm92ZXJmbG93PW9wdHMub3ZlcmZsb3dbMF0sc3R5bGUub3ZlcmZsb3dYPW9wdHMub3ZlcmZsb3dbMV0sc3R5bGUub3ZlcmZsb3dZPW9wdHMub3ZlcmZsb3dbMl19KSkscHJvcFR3ZWVuPSExO2Zvcihwcm9wIGluIG9yaWcpcHJvcFR3ZWVufHwoZGF0YVNob3c/XCJoaWRkZW5cImluIGRhdGFTaG93JiYoaGlkZGVuPWRhdGFTaG93LmhpZGRlbik6ZGF0YVNob3c9ZGF0YVByaXYuYWNjZXNzKGVsZW0sXCJmeHNob3dcIix7ZGlzcGxheTpyZXN0b3JlRGlzcGxheX0pLHRvZ2dsZSYmKGRhdGFTaG93LmhpZGRlbj0haGlkZGVuKSxoaWRkZW4mJnNob3dIaWRlKFtlbGVtXSwhMCksYW5pbS5kb25lKGZ1bmN0aW9uKCl7aGlkZGVufHxzaG93SGlkZShbZWxlbV0pLGRhdGFQcml2LnJlbW92ZShlbGVtLFwiZnhzaG93XCIpO2Zvcihwcm9wIGluIG9yaWcpalF1ZXJ5LnN0eWxlKGVsZW0scHJvcCxvcmlnW3Byb3BdKX0pKSxwcm9wVHdlZW49Y3JlYXRlVHdlZW4oaGlkZGVuP2RhdGFTaG93W3Byb3BdOjAscHJvcCxhbmltKSxwcm9wIGluIGRhdGFTaG93fHwoZGF0YVNob3dbcHJvcF09cHJvcFR3ZWVuLnN0YXJ0LGhpZGRlbiYmKHByb3BUd2Vlbi5lbmQ9cHJvcFR3ZWVuLnN0YXJ0LHByb3BUd2Vlbi5zdGFydD0wKSl9fWZ1bmN0aW9uIHByb3BGaWx0ZXIocHJvcHMsc3BlY2lhbEVhc2luZyl7dmFyIGluZGV4LG5hbWUsZWFzaW5nLHZhbHVlLGhvb2tzO2ZvcihpbmRleCBpbiBwcm9wcylpZihuYW1lPWNhbWVsQ2FzZShpbmRleCksZWFzaW5nPXNwZWNpYWxFYXNpbmdbbmFtZV0sdmFsdWU9cHJvcHNbaW5kZXhdLEFycmF5LmlzQXJyYXkodmFsdWUpJiYoZWFzaW5nPXZhbHVlWzFdLHZhbHVlPXByb3BzW2luZGV4XT12YWx1ZVswXSksaW5kZXghPT1uYW1lJiYocHJvcHNbbmFtZV09dmFsdWUsZGVsZXRlIHByb3BzW2luZGV4XSksKGhvb2tzPWpRdWVyeS5jc3NIb29rc1tuYW1lXSkmJlwiZXhwYW5kXCJpbiBob29rcyl7dmFsdWU9aG9va3MuZXhwYW5kKHZhbHVlKSxkZWxldGUgcHJvcHNbbmFtZV07Zm9yKGluZGV4IGluIHZhbHVlKWluZGV4IGluIHByb3BzfHwocHJvcHNbaW5kZXhdPXZhbHVlW2luZGV4XSxzcGVjaWFsRWFzaW5nW2luZGV4XT1lYXNpbmcpfWVsc2Ugc3BlY2lhbEVhc2luZ1tuYW1lXT1lYXNpbmd9ZnVuY3Rpb24gQW5pbWF0aW9uKGVsZW0scHJvcGVydGllcyxvcHRpb25zKXt2YXIgcmVzdWx0LHN0b3BwZWQsaW5kZXg9MCxsZW5ndGg9QW5pbWF0aW9uLnByZWZpbHRlcnMubGVuZ3RoLGRlZmVycmVkPWpRdWVyeS5EZWZlcnJlZCgpLmFsd2F5cyhmdW5jdGlvbigpe2RlbGV0ZSB0aWNrLmVsZW19KSx0aWNrPWZ1bmN0aW9uKCl7aWYoc3RvcHBlZClyZXR1cm4hMTtmb3IodmFyIGN1cnJlbnRUaW1lPWZ4Tm93fHxjcmVhdGVGeE5vdygpLHJlbWFpbmluZz1NYXRoLm1heCgwLGFuaW1hdGlvbi5zdGFydFRpbWUrYW5pbWF0aW9uLmR1cmF0aW9uLWN1cnJlbnRUaW1lKSx0ZW1wPXJlbWFpbmluZy9hbmltYXRpb24uZHVyYXRpb258fDAscGVyY2VudD0xLXRlbXAsaW5kZXg9MCxsZW5ndGg9YW5pbWF0aW9uLnR3ZWVucy5sZW5ndGg7aW5kZXg8bGVuZ3RoO2luZGV4KyspYW5pbWF0aW9uLnR3ZWVuc1tpbmRleF0ucnVuKHBlcmNlbnQpO3JldHVybiBkZWZlcnJlZC5ub3RpZnlXaXRoKGVsZW0sW2FuaW1hdGlvbixwZXJjZW50LHJlbWFpbmluZ10pLHBlcmNlbnQ8MSYmbGVuZ3RoP3JlbWFpbmluZzoobGVuZ3RofHxkZWZlcnJlZC5ub3RpZnlXaXRoKGVsZW0sW2FuaW1hdGlvbiwxLDBdKSxkZWZlcnJlZC5yZXNvbHZlV2l0aChlbGVtLFthbmltYXRpb25dKSwhMSl9LGFuaW1hdGlvbj1kZWZlcnJlZC5wcm9taXNlKHtlbGVtOmVsZW0scHJvcHM6alF1ZXJ5LmV4dGVuZCh7fSxwcm9wZXJ0aWVzKSxvcHRzOmpRdWVyeS5leHRlbmQoITAse3NwZWNpYWxFYXNpbmc6e30sZWFzaW5nOmpRdWVyeS5lYXNpbmcuX2RlZmF1bHR9LG9wdGlvbnMpLG9yaWdpbmFsUHJvcGVydGllczpwcm9wZXJ0aWVzLG9yaWdpbmFsT3B0aW9uczpvcHRpb25zLHN0YXJ0VGltZTpmeE5vd3x8Y3JlYXRlRnhOb3coKSxkdXJhdGlvbjpvcHRpb25zLmR1cmF0aW9uLHR3ZWVuczpbXSxjcmVhdGVUd2VlbjpmdW5jdGlvbihwcm9wLGVuZCl7dmFyIHR3ZWVuPWpRdWVyeS5Ud2VlbihlbGVtLGFuaW1hdGlvbi5vcHRzLHByb3AsZW5kLGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmdbcHJvcF18fGFuaW1hdGlvbi5vcHRzLmVhc2luZyk7cmV0dXJuIGFuaW1hdGlvbi50d2VlbnMucHVzaCh0d2VlbiksdHdlZW59LHN0b3A6ZnVuY3Rpb24oZ290b0VuZCl7dmFyIGluZGV4PTAsbGVuZ3RoPWdvdG9FbmQ/YW5pbWF0aW9uLnR3ZWVucy5sZW5ndGg6MDtpZihzdG9wcGVkKXJldHVybiB0aGlzO2ZvcihzdG9wcGVkPSEwO2luZGV4PGxlbmd0aDtpbmRleCsrKWFuaW1hdGlvbi50d2VlbnNbaW5kZXhdLnJ1bigxKTtyZXR1cm4gZ290b0VuZD8oZGVmZXJyZWQubm90aWZ5V2l0aChlbGVtLFthbmltYXRpb24sMSwwXSksZGVmZXJyZWQucmVzb2x2ZVdpdGgoZWxlbSxbYW5pbWF0aW9uLGdvdG9FbmRdKSk6ZGVmZXJyZWQucmVqZWN0V2l0aChlbGVtLFthbmltYXRpb24sZ290b0VuZF0pLHRoaXN9fSkscHJvcHM9YW5pbWF0aW9uLnByb3BzO2Zvcihwcm9wRmlsdGVyKHByb3BzLGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmcpO2luZGV4PGxlbmd0aDtpbmRleCsrKWlmKHJlc3VsdD1BbmltYXRpb24ucHJlZmlsdGVyc1tpbmRleF0uY2FsbChhbmltYXRpb24sZWxlbSxwcm9wcyxhbmltYXRpb24ub3B0cykpcmV0dXJuIGlzRnVuY3Rpb24ocmVzdWx0LnN0b3ApJiYoalF1ZXJ5Ll9xdWV1ZUhvb2tzKGFuaW1hdGlvbi5lbGVtLGFuaW1hdGlvbi5vcHRzLnF1ZXVlKS5zdG9wPXJlc3VsdC5zdG9wLmJpbmQocmVzdWx0KSkscmVzdWx0O3JldHVybiBqUXVlcnkubWFwKHByb3BzLGNyZWF0ZVR3ZWVuLGFuaW1hdGlvbiksaXNGdW5jdGlvbihhbmltYXRpb24ub3B0cy5zdGFydCkmJmFuaW1hdGlvbi5vcHRzLnN0YXJ0LmNhbGwoZWxlbSxhbmltYXRpb24pLGFuaW1hdGlvbi5wcm9ncmVzcyhhbmltYXRpb24ub3B0cy5wcm9ncmVzcykuZG9uZShhbmltYXRpb24ub3B0cy5kb25lLGFuaW1hdGlvbi5vcHRzLmNvbXBsZXRlKS5mYWlsKGFuaW1hdGlvbi5vcHRzLmZhaWwpLmFsd2F5cyhhbmltYXRpb24ub3B0cy5hbHdheXMpLGpRdWVyeS5meC50aW1lcihqUXVlcnkuZXh0ZW5kKHRpY2sse2VsZW06ZWxlbSxhbmltOmFuaW1hdGlvbixxdWV1ZTphbmltYXRpb24ub3B0cy5xdWV1ZX0pKSxhbmltYXRpb259ZnVuY3Rpb24gc3RyaXBBbmRDb2xsYXBzZSh2YWx1ZSl7cmV0dXJuKHZhbHVlLm1hdGNoKHJub3RodG1sd2hpdGUpfHxbXSkuam9pbihcIiBcIil9ZnVuY3Rpb24gZ2V0Q2xhc3MoZWxlbSl7cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlJiZlbGVtLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpfHxcIlwifWZ1bmN0aW9uIGNsYXNzZXNUb0FycmF5KHZhbHVlKXtyZXR1cm4gQXJyYXkuaXNBcnJheSh2YWx1ZSk/dmFsdWU6XCJzdHJpbmdcIj09dHlwZW9mIHZhbHVlP3ZhbHVlLm1hdGNoKHJub3RodG1sd2hpdGUpfHxbXTpbXX1mdW5jdGlvbiBidWlsZFBhcmFtcyhwcmVmaXgsb2JqLHRyYWRpdGlvbmFsLGFkZCl7dmFyIG5hbWU7aWYoQXJyYXkuaXNBcnJheShvYmopKWpRdWVyeS5lYWNoKG9iaixmdW5jdGlvbihpLHYpe3RyYWRpdGlvbmFsfHxyYnJhY2tldC50ZXN0KHByZWZpeCk/YWRkKHByZWZpeCx2KTpidWlsZFBhcmFtcyhwcmVmaXgrXCJbXCIrKFwib2JqZWN0XCI9PXR5cGVvZiB2JiZudWxsIT12P2k6XCJcIikrXCJdXCIsdix0cmFkaXRpb25hbCxhZGQpfSk7ZWxzZSBpZih0cmFkaXRpb25hbHx8XCJvYmplY3RcIiE9PXRvVHlwZShvYmopKWFkZChwcmVmaXgsb2JqKTtlbHNlIGZvcihuYW1lIGluIG9iailidWlsZFBhcmFtcyhwcmVmaXgrXCJbXCIrbmFtZStcIl1cIixvYmpbbmFtZV0sdHJhZGl0aW9uYWwsYWRkKX1mdW5jdGlvbiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoc3RydWN0dXJlKXtyZXR1cm4gZnVuY3Rpb24oZGF0YVR5cGVFeHByZXNzaW9uLGZ1bmMpe1wic3RyaW5nXCIhPXR5cGVvZiBkYXRhVHlwZUV4cHJlc3Npb24mJihmdW5jPWRhdGFUeXBlRXhwcmVzc2lvbixkYXRhVHlwZUV4cHJlc3Npb249XCIqXCIpO3ZhciBkYXRhVHlwZSxpPTAsZGF0YVR5cGVzPWRhdGFUeXBlRXhwcmVzc2lvbi50b0xvd2VyQ2FzZSgpLm1hdGNoKHJub3RodG1sd2hpdGUpfHxbXTtpZihpc0Z1bmN0aW9uKGZ1bmMpKWZvcig7ZGF0YVR5cGU9ZGF0YVR5cGVzW2krK107KVwiK1wiPT09ZGF0YVR5cGVbMF0/KGRhdGFUeXBlPWRhdGFUeXBlLnNsaWNlKDEpfHxcIipcIiwoc3RydWN0dXJlW2RhdGFUeXBlXT1zdHJ1Y3R1cmVbZGF0YVR5cGVdfHxbXSkudW5zaGlmdChmdW5jKSk6KHN0cnVjdHVyZVtkYXRhVHlwZV09c3RydWN0dXJlW2RhdGFUeXBlXXx8W10pLnB1c2goZnVuYyl9fWZ1bmN0aW9uIGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKHN0cnVjdHVyZSxvcHRpb25zLG9yaWdpbmFsT3B0aW9ucyxqcVhIUil7ZnVuY3Rpb24gaW5zcGVjdChkYXRhVHlwZSl7dmFyIHNlbGVjdGVkO3JldHVybiBpbnNwZWN0ZWRbZGF0YVR5cGVdPSEwLGpRdWVyeS5lYWNoKHN0cnVjdHVyZVtkYXRhVHlwZV18fFtdLGZ1bmN0aW9uKF8scHJlZmlsdGVyT3JGYWN0b3J5KXt2YXIgZGF0YVR5cGVPclRyYW5zcG9ydD1wcmVmaWx0ZXJPckZhY3Rvcnkob3B0aW9ucyxvcmlnaW5hbE9wdGlvbnMsanFYSFIpO3JldHVyblwic3RyaW5nXCIhPXR5cGVvZiBkYXRhVHlwZU9yVHJhbnNwb3J0fHxzZWVraW5nVHJhbnNwb3J0fHxpbnNwZWN0ZWRbZGF0YVR5cGVPclRyYW5zcG9ydF0/c2Vla2luZ1RyYW5zcG9ydD8hKHNlbGVjdGVkPWRhdGFUeXBlT3JUcmFuc3BvcnQpOnZvaWQgMDoob3B0aW9ucy5kYXRhVHlwZXMudW5zaGlmdChkYXRhVHlwZU9yVHJhbnNwb3J0KSxpbnNwZWN0KGRhdGFUeXBlT3JUcmFuc3BvcnQpLCExKX0pLHNlbGVjdGVkfXZhciBpbnNwZWN0ZWQ9e30sc2Vla2luZ1RyYW5zcG9ydD1zdHJ1Y3R1cmU9PT10cmFuc3BvcnRzO3JldHVybiBpbnNwZWN0KG9wdGlvbnMuZGF0YVR5cGVzWzBdKXx8IWluc3BlY3RlZFtcIipcIl0mJmluc3BlY3QoXCIqXCIpfWZ1bmN0aW9uIGFqYXhFeHRlbmQodGFyZ2V0LHNyYyl7dmFyIGtleSxkZWVwLGZsYXRPcHRpb25zPWpRdWVyeS5hamF4U2V0dGluZ3MuZmxhdE9wdGlvbnN8fHt9O2ZvcihrZXkgaW4gc3JjKXZvaWQgMCE9PXNyY1trZXldJiYoKGZsYXRPcHRpb25zW2tleV0/dGFyZ2V0OmRlZXB8fChkZWVwPXt9KSlba2V5XT1zcmNba2V5XSk7cmV0dXJuIGRlZXAmJmpRdWVyeS5leHRlbmQoITAsdGFyZ2V0LGRlZXApLHRhcmdldH1mdW5jdGlvbiBhamF4SGFuZGxlUmVzcG9uc2VzKHMsanFYSFIscmVzcG9uc2VzKXtmb3IodmFyIGN0LHR5cGUsZmluYWxEYXRhVHlwZSxmaXJzdERhdGFUeXBlLGNvbnRlbnRzPXMuY29udGVudHMsZGF0YVR5cGVzPXMuZGF0YVR5cGVzO1wiKlwiPT09ZGF0YVR5cGVzWzBdOylkYXRhVHlwZXMuc2hpZnQoKSx2b2lkIDA9PT1jdCYmKGN0PXMubWltZVR5cGV8fGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKFwiQ29udGVudC1UeXBlXCIpKTtpZihjdClmb3IodHlwZSBpbiBjb250ZW50cylpZihjb250ZW50c1t0eXBlXSYmY29udGVudHNbdHlwZV0udGVzdChjdCkpe2RhdGFUeXBlcy51bnNoaWZ0KHR5cGUpO2JyZWFrfWlmKGRhdGFUeXBlc1swXWluIHJlc3BvbnNlcylmaW5hbERhdGFUeXBlPWRhdGFUeXBlc1swXTtlbHNle2Zvcih0eXBlIGluIHJlc3BvbnNlcyl7aWYoIWRhdGFUeXBlc1swXXx8cy5jb252ZXJ0ZXJzW3R5cGUrXCIgXCIrZGF0YVR5cGVzWzBdXSl7ZmluYWxEYXRhVHlwZT10eXBlO2JyZWFrfWZpcnN0RGF0YVR5cGV8fChmaXJzdERhdGFUeXBlPXR5cGUpfWZpbmFsRGF0YVR5cGU9ZmluYWxEYXRhVHlwZXx8Zmlyc3REYXRhVHlwZX1pZihmaW5hbERhdGFUeXBlKXJldHVybiBmaW5hbERhdGFUeXBlIT09ZGF0YVR5cGVzWzBdJiZkYXRhVHlwZXMudW5zaGlmdChmaW5hbERhdGFUeXBlKSxyZXNwb25zZXNbZmluYWxEYXRhVHlwZV19ZnVuY3Rpb24gYWpheENvbnZlcnQocyxyZXNwb25zZSxqcVhIUixpc1N1Y2Nlc3Mpe3ZhciBjb252MixjdXJyZW50LGNvbnYsdG1wLHByZXYsY29udmVydGVycz17fSxkYXRhVHlwZXM9cy5kYXRhVHlwZXMuc2xpY2UoKTtpZihkYXRhVHlwZXNbMV0pZm9yKGNvbnYgaW4gcy5jb252ZXJ0ZXJzKWNvbnZlcnRlcnNbY29udi50b0xvd2VyQ2FzZSgpXT1zLmNvbnZlcnRlcnNbY29udl07Zm9yKGN1cnJlbnQ9ZGF0YVR5cGVzLnNoaWZ0KCk7Y3VycmVudDspaWYocy5yZXNwb25zZUZpZWxkc1tjdXJyZW50XSYmKGpxWEhSW3MucmVzcG9uc2VGaWVsZHNbY3VycmVudF1dPXJlc3BvbnNlKSwhcHJldiYmaXNTdWNjZXNzJiZzLmRhdGFGaWx0ZXImJihyZXNwb25zZT1zLmRhdGFGaWx0ZXIocmVzcG9uc2Uscy5kYXRhVHlwZSkpLHByZXY9Y3VycmVudCxjdXJyZW50PWRhdGFUeXBlcy5zaGlmdCgpKWlmKFwiKlwiPT09Y3VycmVudCljdXJyZW50PXByZXY7ZWxzZSBpZihcIipcIiE9PXByZXYmJnByZXYhPT1jdXJyZW50KXtpZighKGNvbnY9Y29udmVydGVyc1twcmV2K1wiIFwiK2N1cnJlbnRdfHxjb252ZXJ0ZXJzW1wiKiBcIitjdXJyZW50XSkpZm9yKGNvbnYyIGluIGNvbnZlcnRlcnMpaWYodG1wPWNvbnYyLnNwbGl0KFwiIFwiKSx0bXBbMV09PT1jdXJyZW50JiYoY29udj1jb252ZXJ0ZXJzW3ByZXYrXCIgXCIrdG1wWzBdXXx8Y29udmVydGVyc1tcIiogXCIrdG1wWzBdXSkpeyEwPT09Y29udj9jb252PWNvbnZlcnRlcnNbY29udjJdOiEwIT09Y29udmVydGVyc1tjb252Ml0mJihjdXJyZW50PXRtcFswXSxkYXRhVHlwZXMudW5zaGlmdCh0bXBbMV0pKTticmVha31pZighMCE9PWNvbnYpaWYoY29udiYmcy50aHJvd3MpcmVzcG9uc2U9Y29udihyZXNwb25zZSk7ZWxzZSB0cnl7cmVzcG9uc2U9Y29udihyZXNwb25zZSl9Y2F0Y2goZSl7cmV0dXJue3N0YXRlOlwicGFyc2VyZXJyb3JcIixlcnJvcjpjb252P2U6XCJObyBjb252ZXJzaW9uIGZyb20gXCIrcHJlditcIiB0byBcIitjdXJyZW50fX19cmV0dXJue3N0YXRlOlwic3VjY2Vzc1wiLGRhdGE6cmVzcG9uc2V9fXZhciBhcnI9W10sZG9jdW1lbnQ9d2luZG93LmRvY3VtZW50LGdldFByb3RvPU9iamVjdC5nZXRQcm90b3R5cGVPZixzbGljZT1hcnIuc2xpY2UsY29uY2F0PWFyci5jb25jYXQscHVzaD1hcnIucHVzaCxpbmRleE9mPWFyci5pbmRleE9mLGNsYXNzMnR5cGU9e30sdG9TdHJpbmc9Y2xhc3MydHlwZS50b1N0cmluZyxoYXNPd249Y2xhc3MydHlwZS5oYXNPd25Qcm9wZXJ0eSxmblRvU3RyaW5nPWhhc093bi50b1N0cmluZyxPYmplY3RGdW5jdGlvblN0cmluZz1mblRvU3RyaW5nLmNhbGwoT2JqZWN0KSxzdXBwb3J0PXt9LGlzRnVuY3Rpb249ZnVuY3Rpb24ob2JqKXtyZXR1cm5cImZ1bmN0aW9uXCI9PXR5cGVvZiBvYmomJlwibnVtYmVyXCIhPXR5cGVvZiBvYmoubm9kZVR5cGV9LGlzV2luZG93PWZ1bmN0aW9uKG9iail7cmV0dXJuIG51bGwhPW9iaiYmb2JqPT09b2JqLndpbmRvd30scHJlc2VydmVkU2NyaXB0QXR0cmlidXRlcz17dHlwZTohMCxzcmM6ITAsbm9uY2U6ITAsbm9Nb2R1bGU6ITB9LGpRdWVyeT1mdW5jdGlvbihzZWxlY3Rvcixjb250ZXh0KXtyZXR1cm4gbmV3IGpRdWVyeS5mbi5pbml0KHNlbGVjdG9yLGNvbnRleHQpfSxydHJpbT0vXltcXHNcXHVGRUZGXFx4QTBdK3xbXFxzXFx1RkVGRlxceEEwXSskL2c7alF1ZXJ5LmZuPWpRdWVyeS5wcm90b3R5cGU9e2pxdWVyeTpcIjMuNC4xXCIsY29uc3RydWN0b3I6alF1ZXJ5LGxlbmd0aDowLHRvQXJyYXk6ZnVuY3Rpb24oKXtyZXR1cm4gc2xpY2UuY2FsbCh0aGlzKX0sZ2V0OmZ1bmN0aW9uKG51bSl7cmV0dXJuIG51bGw9PW51bT9zbGljZS5jYWxsKHRoaXMpOm51bTwwP3RoaXNbbnVtK3RoaXMubGVuZ3RoXTp0aGlzW251bV19LHB1c2hTdGFjazpmdW5jdGlvbihlbGVtcyl7dmFyIHJldD1qUXVlcnkubWVyZ2UodGhpcy5jb25zdHJ1Y3RvcigpLGVsZW1zKTtyZXR1cm4gcmV0LnByZXZPYmplY3Q9dGhpcyxyZXR9LGVhY2g6ZnVuY3Rpb24oY2FsbGJhY2spe3JldHVybiBqUXVlcnkuZWFjaCh0aGlzLGNhbGxiYWNrKX0sbWFwOmZ1bmN0aW9uKGNhbGxiYWNrKXtyZXR1cm4gdGhpcy5wdXNoU3RhY2soalF1ZXJ5Lm1hcCh0aGlzLGZ1bmN0aW9uKGVsZW0saSl7cmV0dXJuIGNhbGxiYWNrLmNhbGwoZWxlbSxpLGVsZW0pfSkpfSxzbGljZTpmdW5jdGlvbigpe3JldHVybiB0aGlzLnB1c2hTdGFjayhzbGljZS5hcHBseSh0aGlzLGFyZ3VtZW50cykpfSxmaXJzdDpmdW5jdGlvbigpe3JldHVybiB0aGlzLmVxKDApfSxsYXN0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZXEoLTEpfSxlcTpmdW5jdGlvbihpKXt2YXIgbGVuPXRoaXMubGVuZ3RoLGo9K2krKGk8MD9sZW46MCk7cmV0dXJuIHRoaXMucHVzaFN0YWNrKGo+PTAmJmo8bGVuP1t0aGlzW2pdXTpbXSl9LGVuZDpmdW5jdGlvbigpe3JldHVybiB0aGlzLnByZXZPYmplY3R8fHRoaXMuY29uc3RydWN0b3IoKX0scHVzaDpwdXNoLHNvcnQ6YXJyLnNvcnQsc3BsaWNlOmFyci5zcGxpY2V9LGpRdWVyeS5leHRlbmQ9alF1ZXJ5LmZuLmV4dGVuZD1mdW5jdGlvbigpe3ZhciBvcHRpb25zLG5hbWUsc3JjLGNvcHksY29weUlzQXJyYXksY2xvbmUsdGFyZ2V0PWFyZ3VtZW50c1swXXx8e30saT0xLGxlbmd0aD1hcmd1bWVudHMubGVuZ3RoLGRlZXA9ITE7Zm9yKFwiYm9vbGVhblwiPT10eXBlb2YgdGFyZ2V0JiYoZGVlcD10YXJnZXQsdGFyZ2V0PWFyZ3VtZW50c1tpXXx8e30saSsrKSxcIm9iamVjdFwiPT10eXBlb2YgdGFyZ2V0fHxpc0Z1bmN0aW9uKHRhcmdldCl8fCh0YXJnZXQ9e30pLGk9PT1sZW5ndGgmJih0YXJnZXQ9dGhpcyxpLS0pO2k8bGVuZ3RoO2krKylpZihudWxsIT0ob3B0aW9ucz1hcmd1bWVudHNbaV0pKWZvcihuYW1lIGluIG9wdGlvbnMpY29weT1vcHRpb25zW25hbWVdLFwiX19wcm90b19fXCIhPT1uYW1lJiZ0YXJnZXQhPT1jb3B5JiYoZGVlcCYmY29weSYmKGpRdWVyeS5pc1BsYWluT2JqZWN0KGNvcHkpfHwoY29weUlzQXJyYXk9QXJyYXkuaXNBcnJheShjb3B5KSkpPyhzcmM9dGFyZ2V0W25hbWVdLGNsb25lPWNvcHlJc0FycmF5JiYhQXJyYXkuaXNBcnJheShzcmMpP1tdOmNvcHlJc0FycmF5fHxqUXVlcnkuaXNQbGFpbk9iamVjdChzcmMpP3NyYzp7fSxjb3B5SXNBcnJheT0hMSx0YXJnZXRbbmFtZV09alF1ZXJ5LmV4dGVuZChkZWVwLGNsb25lLGNvcHkpKTp2b2lkIDAhPT1jb3B5JiYodGFyZ2V0W25hbWVdPWNvcHkpKTtyZXR1cm4gdGFyZ2V0fSxqUXVlcnkuZXh0ZW5kKHtleHBhbmRvOlwialF1ZXJ5XCIrKFwiMy40LjFcIitNYXRoLnJhbmRvbSgpKS5yZXBsYWNlKC9cXEQvZyxcIlwiKSxpc1JlYWR5OiEwLGVycm9yOmZ1bmN0aW9uKG1zZyl7dGhyb3cgbmV3IEVycm9yKG1zZyl9LG5vb3A6ZnVuY3Rpb24oKXt9LGlzUGxhaW5PYmplY3Q6ZnVuY3Rpb24ob2JqKXt2YXIgcHJvdG8sQ3RvcjtyZXR1cm4hKCFvYmp8fFwiW29iamVjdCBPYmplY3RdXCIhPT10b1N0cmluZy5jYWxsKG9iaikpJiYoIShwcm90bz1nZXRQcm90byhvYmopKXx8XCJmdW5jdGlvblwiPT10eXBlb2YoQ3Rvcj1oYXNPd24uY2FsbChwcm90byxcImNvbnN0cnVjdG9yXCIpJiZwcm90by5jb25zdHJ1Y3RvcikmJmZuVG9TdHJpbmcuY2FsbChDdG9yKT09PU9iamVjdEZ1bmN0aW9uU3RyaW5nKX0saXNFbXB0eU9iamVjdDpmdW5jdGlvbihvYmope3ZhciBuYW1lO2ZvcihuYW1lIGluIG9iailyZXR1cm4hMTtyZXR1cm4hMH0sZ2xvYmFsRXZhbDpmdW5jdGlvbihjb2RlLG9wdGlvbnMpe0RPTUV2YWwoY29kZSx7bm9uY2U6b3B0aW9ucyYmb3B0aW9ucy5ub25jZX0pfSxlYWNoOmZ1bmN0aW9uKG9iaixjYWxsYmFjayl7dmFyIGxlbmd0aCxpPTA7aWYoaXNBcnJheUxpa2Uob2JqKSlmb3IobGVuZ3RoPW9iai5sZW5ndGg7aTxsZW5ndGgmJiExIT09Y2FsbGJhY2suY2FsbChvYmpbaV0saSxvYmpbaV0pO2krKyk7ZWxzZSBmb3IoaSBpbiBvYmopaWYoITE9PT1jYWxsYmFjay5jYWxsKG9ialtpXSxpLG9ialtpXSkpYnJlYWs7cmV0dXJuIG9ian0sdHJpbTpmdW5jdGlvbih0ZXh0KXtyZXR1cm4gbnVsbD09dGV4dD9cIlwiOih0ZXh0K1wiXCIpLnJlcGxhY2UocnRyaW0sXCJcIil9LG1ha2VBcnJheTpmdW5jdGlvbihhcnIscmVzdWx0cyl7dmFyIHJldD1yZXN1bHRzfHxbXTtyZXR1cm4gbnVsbCE9YXJyJiYoaXNBcnJheUxpa2UoT2JqZWN0KGFycikpP2pRdWVyeS5tZXJnZShyZXQsXCJzdHJpbmdcIj09dHlwZW9mIGFycj9bYXJyXTphcnIpOnB1c2guY2FsbChyZXQsYXJyKSkscmV0fSxpbkFycmF5OmZ1bmN0aW9uKGVsZW0sYXJyLGkpe3JldHVybiBudWxsPT1hcnI/LTE6aW5kZXhPZi5jYWxsKGFycixlbGVtLGkpfSxtZXJnZTpmdW5jdGlvbihmaXJzdCxzZWNvbmQpe2Zvcih2YXIgbGVuPStzZWNvbmQubGVuZ3RoLGo9MCxpPWZpcnN0Lmxlbmd0aDtqPGxlbjtqKyspZmlyc3RbaSsrXT1zZWNvbmRbal07cmV0dXJuIGZpcnN0Lmxlbmd0aD1pLGZpcnN0fSxncmVwOmZ1bmN0aW9uKGVsZW1zLGNhbGxiYWNrLGludmVydCl7Zm9yKHZhciBtYXRjaGVzPVtdLGk9MCxsZW5ndGg9ZWxlbXMubGVuZ3RoLGNhbGxiYWNrRXhwZWN0PSFpbnZlcnQ7aTxsZW5ndGg7aSsrKSFjYWxsYmFjayhlbGVtc1tpXSxpKSE9PWNhbGxiYWNrRXhwZWN0JiZtYXRjaGVzLnB1c2goZWxlbXNbaV0pO3JldHVybiBtYXRjaGVzfSxtYXA6ZnVuY3Rpb24oZWxlbXMsY2FsbGJhY2ssYXJnKXt2YXIgbGVuZ3RoLHZhbHVlLGk9MCxyZXQ9W107aWYoaXNBcnJheUxpa2UoZWxlbXMpKWZvcihsZW5ndGg9ZWxlbXMubGVuZ3RoO2k8bGVuZ3RoO2krKyludWxsIT0odmFsdWU9Y2FsbGJhY2soZWxlbXNbaV0saSxhcmcpKSYmcmV0LnB1c2godmFsdWUpO2Vsc2UgZm9yKGkgaW4gZWxlbXMpbnVsbCE9KHZhbHVlPWNhbGxiYWNrKGVsZW1zW2ldLGksYXJnKSkmJnJldC5wdXNoKHZhbHVlKTtyZXR1cm4gY29uY2F0LmFwcGx5KFtdLHJldCl9LGd1aWQ6MSxzdXBwb3J0OnN1cHBvcnR9KSxcImZ1bmN0aW9uXCI9PXR5cGVvZiBTeW1ib2wmJihqUXVlcnkuZm5bU3ltYm9sLml0ZXJhdG9yXT1hcnJbU3ltYm9sLml0ZXJhdG9yXSksalF1ZXJ5LmVhY2goXCJCb29sZWFuIE51bWJlciBTdHJpbmcgRnVuY3Rpb24gQXJyYXkgRGF0ZSBSZWdFeHAgT2JqZWN0IEVycm9yIFN5bWJvbFwiLnNwbGl0KFwiIFwiKSxmdW5jdGlvbihpLG5hbWUpe2NsYXNzMnR5cGVbXCJbb2JqZWN0IFwiK25hbWUrXCJdXCJdPW5hbWUudG9Mb3dlckNhc2UoKX0pO3ZhciBTaXp6bGU9LyohXG4gKiBTaXp6bGUgQ1NTIFNlbGVjdG9yIEVuZ2luZSB2Mi4zLjRcbiAqIGh0dHBzOi8vc2l6emxlanMuY29tL1xuICpcbiAqIENvcHlyaWdodCBKUyBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnNcbiAqIFJlbGVhc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZVxuICogaHR0cHM6Ly9qcy5mb3VuZGF0aW9uL1xuICpcbiAqIERhdGU6IDIwMTktMDQtMDhcbiAqL1xuZnVuY3Rpb24od2luZG93KXtmdW5jdGlvbiBTaXp6bGUoc2VsZWN0b3IsY29udGV4dCxyZXN1bHRzLHNlZWQpe3ZhciBtLGksZWxlbSxuaWQsbWF0Y2gsZ3JvdXBzLG5ld1NlbGVjdG9yLG5ld0NvbnRleHQ9Y29udGV4dCYmY29udGV4dC5vd25lckRvY3VtZW50LG5vZGVUeXBlPWNvbnRleHQ/Y29udGV4dC5ub2RlVHlwZTo5O2lmKHJlc3VsdHM9cmVzdWx0c3x8W10sXCJzdHJpbmdcIiE9dHlwZW9mIHNlbGVjdG9yfHwhc2VsZWN0b3J8fDEhPT1ub2RlVHlwZSYmOSE9PW5vZGVUeXBlJiYxMSE9PW5vZGVUeXBlKXJldHVybiByZXN1bHRzO2lmKCFzZWVkJiYoKGNvbnRleHQ/Y29udGV4dC5vd25lckRvY3VtZW50fHxjb250ZXh0OnByZWZlcnJlZERvYykhPT1kb2N1bWVudCYmc2V0RG9jdW1lbnQoY29udGV4dCksY29udGV4dD1jb250ZXh0fHxkb2N1bWVudCxkb2N1bWVudElzSFRNTCkpe2lmKDExIT09bm9kZVR5cGUmJihtYXRjaD1ycXVpY2tFeHByLmV4ZWMoc2VsZWN0b3IpKSlpZihtPW1hdGNoWzFdKXtpZig5PT09bm9kZVR5cGUpe2lmKCEoZWxlbT1jb250ZXh0LmdldEVsZW1lbnRCeUlkKG0pKSlyZXR1cm4gcmVzdWx0cztpZihlbGVtLmlkPT09bSlyZXR1cm4gcmVzdWx0cy5wdXNoKGVsZW0pLHJlc3VsdHN9ZWxzZSBpZihuZXdDb250ZXh0JiYoZWxlbT1uZXdDb250ZXh0LmdldEVsZW1lbnRCeUlkKG0pKSYmY29udGFpbnMoY29udGV4dCxlbGVtKSYmZWxlbS5pZD09PW0pcmV0dXJuIHJlc3VsdHMucHVzaChlbGVtKSxyZXN1bHRzfWVsc2V7aWYobWF0Y2hbMl0pcmV0dXJuIHB1c2guYXBwbHkocmVzdWx0cyxjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKHNlbGVjdG9yKSkscmVzdWx0cztpZigobT1tYXRjaFszXSkmJnN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSYmY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKXJldHVybiBwdXNoLmFwcGx5KHJlc3VsdHMsY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKG0pKSxyZXN1bHRzfWlmKHN1cHBvcnQucXNhJiYhbm9ubmF0aXZlU2VsZWN0b3JDYWNoZVtzZWxlY3RvcitcIiBcIl0mJighcmJ1Z2d5UVNBfHwhcmJ1Z2d5UVNBLnRlc3Qoc2VsZWN0b3IpKSYmKDEhPT1ub2RlVHlwZXx8XCJvYmplY3RcIiE9PWNvbnRleHQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSkpe2lmKG5ld1NlbGVjdG9yPXNlbGVjdG9yLG5ld0NvbnRleHQ9Y29udGV4dCwxPT09bm9kZVR5cGUmJnJkZXNjZW5kLnRlc3Qoc2VsZWN0b3IpKXtmb3IoKG5pZD1jb250ZXh0LmdldEF0dHJpYnV0ZShcImlkXCIpKT9uaWQ9bmlkLnJlcGxhY2UocmNzc2VzY2FwZSxmY3NzZXNjYXBlKTpjb250ZXh0LnNldEF0dHJpYnV0ZShcImlkXCIsbmlkPWV4cGFuZG8pLGdyb3Vwcz10b2tlbml6ZShzZWxlY3RvciksaT1ncm91cHMubGVuZ3RoO2ktLTspZ3JvdXBzW2ldPVwiI1wiK25pZCtcIiBcIit0b1NlbGVjdG9yKGdyb3Vwc1tpXSk7bmV3U2VsZWN0b3I9Z3JvdXBzLmpvaW4oXCIsXCIpLG5ld0NvbnRleHQ9cnNpYmxpbmcudGVzdChzZWxlY3RvcikmJnRlc3RDb250ZXh0KGNvbnRleHQucGFyZW50Tm9kZSl8fGNvbnRleHR9dHJ5e3JldHVybiBwdXNoLmFwcGx5KHJlc3VsdHMsbmV3Q29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKG5ld1NlbGVjdG9yKSkscmVzdWx0c31jYXRjaChxc2FFcnJvcil7bm9ubmF0aXZlU2VsZWN0b3JDYWNoZShzZWxlY3RvciwhMCl9ZmluYWxseXtuaWQ9PT1leHBhbmRvJiZjb250ZXh0LnJlbW92ZUF0dHJpYnV0ZShcImlkXCIpfX19cmV0dXJuIHNlbGVjdChzZWxlY3Rvci5yZXBsYWNlKHJ0cmltLFwiJDFcIiksY29udGV4dCxyZXN1bHRzLHNlZWQpfWZ1bmN0aW9uIGNyZWF0ZUNhY2hlKCl7ZnVuY3Rpb24gY2FjaGUoa2V5LHZhbHVlKXtyZXR1cm4ga2V5cy5wdXNoKGtleStcIiBcIik+RXhwci5jYWNoZUxlbmd0aCYmZGVsZXRlIGNhY2hlW2tleXMuc2hpZnQoKV0sY2FjaGVba2V5K1wiIFwiXT12YWx1ZX12YXIga2V5cz1bXTtyZXR1cm4gY2FjaGV9ZnVuY3Rpb24gbWFya0Z1bmN0aW9uKGZuKXtyZXR1cm4gZm5bZXhwYW5kb109ITAsZm59ZnVuY3Rpb24gYXNzZXJ0KGZuKXt2YXIgZWw9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImZpZWxkc2V0XCIpO3RyeXtyZXR1cm4hIWZuKGVsKX1jYXRjaChlKXtyZXR1cm4hMX1maW5hbGx5e2VsLnBhcmVudE5vZGUmJmVsLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoZWwpLGVsPW51bGx9fWZ1bmN0aW9uIGFkZEhhbmRsZShhdHRycyxoYW5kbGVyKXtmb3IodmFyIGFycj1hdHRycy5zcGxpdChcInxcIiksaT1hcnIubGVuZ3RoO2ktLTspRXhwci5hdHRySGFuZGxlW2FycltpXV09aGFuZGxlcn1mdW5jdGlvbiBzaWJsaW5nQ2hlY2soYSxiKXt2YXIgY3VyPWImJmEsZGlmZj1jdXImJjE9PT1hLm5vZGVUeXBlJiYxPT09Yi5ub2RlVHlwZSYmYS5zb3VyY2VJbmRleC1iLnNvdXJjZUluZGV4O2lmKGRpZmYpcmV0dXJuIGRpZmY7aWYoY3VyKWZvcig7Y3VyPWN1ci5uZXh0U2libGluZzspaWYoY3VyPT09YilyZXR1cm4tMTtyZXR1cm4gYT8xOi0xfWZ1bmN0aW9uIGNyZWF0ZURpc2FibGVkUHNldWRvKGRpc2FibGVkKXtyZXR1cm4gZnVuY3Rpb24oZWxlbSl7cmV0dXJuXCJmb3JtXCJpbiBlbGVtP2VsZW0ucGFyZW50Tm9kZSYmITE9PT1lbGVtLmRpc2FibGVkP1wibGFiZWxcImluIGVsZW0/XCJsYWJlbFwiaW4gZWxlbS5wYXJlbnROb2RlP2VsZW0ucGFyZW50Tm9kZS5kaXNhYmxlZD09PWRpc2FibGVkOmVsZW0uZGlzYWJsZWQ9PT1kaXNhYmxlZDplbGVtLmlzRGlzYWJsZWQ9PT1kaXNhYmxlZHx8ZWxlbS5pc0Rpc2FibGVkIT09IWRpc2FibGVkJiZpbkRpc2FibGVkRmllbGRzZXQoZWxlbSk9PT1kaXNhYmxlZDplbGVtLmRpc2FibGVkPT09ZGlzYWJsZWQ6XCJsYWJlbFwiaW4gZWxlbSYmZWxlbS5kaXNhYmxlZD09PWRpc2FibGVkfX1mdW5jdGlvbiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZuKXtyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKGFyZ3VtZW50KXtyZXR1cm4gYXJndW1lbnQ9K2FyZ3VtZW50LG1hcmtGdW5jdGlvbihmdW5jdGlvbihzZWVkLG1hdGNoZXMpe2Zvcih2YXIgaixtYXRjaEluZGV4ZXM9Zm4oW10sc2VlZC5sZW5ndGgsYXJndW1lbnQpLGk9bWF0Y2hJbmRleGVzLmxlbmd0aDtpLS07KXNlZWRbaj1tYXRjaEluZGV4ZXNbaV1dJiYoc2VlZFtqXT0hKG1hdGNoZXNbal09c2VlZFtqXSkpfSl9KX1mdW5jdGlvbiB0ZXN0Q29udGV4dChjb250ZXh0KXtyZXR1cm4gY29udGV4dCYmdm9pZCAwIT09Y29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSYmY29udGV4dH1mdW5jdGlvbiBzZXRGaWx0ZXJzKCl7fWZ1bmN0aW9uIHRvU2VsZWN0b3IodG9rZW5zKXtmb3IodmFyIGk9MCxsZW49dG9rZW5zLmxlbmd0aCxzZWxlY3Rvcj1cIlwiO2k8bGVuO2krKylzZWxlY3Rvcis9dG9rZW5zW2ldLnZhbHVlO3JldHVybiBzZWxlY3Rvcn1mdW5jdGlvbiBhZGRDb21iaW5hdG9yKG1hdGNoZXIsY29tYmluYXRvcixiYXNlKXt2YXIgZGlyPWNvbWJpbmF0b3IuZGlyLHNraXA9Y29tYmluYXRvci5uZXh0LGtleT1za2lwfHxkaXIsY2hlY2tOb25FbGVtZW50cz1iYXNlJiZcInBhcmVudE5vZGVcIj09PWtleSxkb25lTmFtZT1kb25lKys7cmV0dXJuIGNvbWJpbmF0b3IuZmlyc3Q/ZnVuY3Rpb24oZWxlbSxjb250ZXh0LHhtbCl7Zm9yKDtlbGVtPWVsZW1bZGlyXTspaWYoMT09PWVsZW0ubm9kZVR5cGV8fGNoZWNrTm9uRWxlbWVudHMpcmV0dXJuIG1hdGNoZXIoZWxlbSxjb250ZXh0LHhtbCk7cmV0dXJuITF9OmZ1bmN0aW9uKGVsZW0sY29udGV4dCx4bWwpe3ZhciBvbGRDYWNoZSx1bmlxdWVDYWNoZSxvdXRlckNhY2hlLG5ld0NhY2hlPVtkaXJydW5zLGRvbmVOYW1lXTtpZih4bWwpe2Zvcig7ZWxlbT1lbGVtW2Rpcl07KWlmKCgxPT09ZWxlbS5ub2RlVHlwZXx8Y2hlY2tOb25FbGVtZW50cykmJm1hdGNoZXIoZWxlbSxjb250ZXh0LHhtbCkpcmV0dXJuITB9ZWxzZSBmb3IoO2VsZW09ZWxlbVtkaXJdOylpZigxPT09ZWxlbS5ub2RlVHlwZXx8Y2hlY2tOb25FbGVtZW50cylpZihvdXRlckNhY2hlPWVsZW1bZXhwYW5kb118fChlbGVtW2V4cGFuZG9dPXt9KSx1bmlxdWVDYWNoZT1vdXRlckNhY2hlW2VsZW0udW5pcXVlSURdfHwob3V0ZXJDYWNoZVtlbGVtLnVuaXF1ZUlEXT17fSksc2tpcCYmc2tpcD09PWVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSllbGVtPWVsZW1bZGlyXXx8ZWxlbTtlbHNle2lmKChvbGRDYWNoZT11bmlxdWVDYWNoZVtrZXldKSYmb2xkQ2FjaGVbMF09PT1kaXJydW5zJiZvbGRDYWNoZVsxXT09PWRvbmVOYW1lKXJldHVybiBuZXdDYWNoZVsyXT1vbGRDYWNoZVsyXTtpZih1bmlxdWVDYWNoZVtrZXldPW5ld0NhY2hlLG5ld0NhY2hlWzJdPW1hdGNoZXIoZWxlbSxjb250ZXh0LHhtbCkpcmV0dXJuITB9cmV0dXJuITF9fWZ1bmN0aW9uIGVsZW1lbnRNYXRjaGVyKG1hdGNoZXJzKXtyZXR1cm4gbWF0Y2hlcnMubGVuZ3RoPjE/ZnVuY3Rpb24oZWxlbSxjb250ZXh0LHhtbCl7Zm9yKHZhciBpPW1hdGNoZXJzLmxlbmd0aDtpLS07KWlmKCFtYXRjaGVyc1tpXShlbGVtLGNvbnRleHQseG1sKSlyZXR1cm4hMTtyZXR1cm4hMH06bWF0Y2hlcnNbMF19ZnVuY3Rpb24gbXVsdGlwbGVDb250ZXh0cyhzZWxlY3Rvcixjb250ZXh0cyxyZXN1bHRzKXtmb3IodmFyIGk9MCxsZW49Y29udGV4dHMubGVuZ3RoO2k8bGVuO2krKylTaXp6bGUoc2VsZWN0b3IsY29udGV4dHNbaV0scmVzdWx0cyk7cmV0dXJuIHJlc3VsdHN9ZnVuY3Rpb24gY29uZGVuc2UodW5tYXRjaGVkLG1hcCxmaWx0ZXIsY29udGV4dCx4bWwpe2Zvcih2YXIgZWxlbSxuZXdVbm1hdGNoZWQ9W10saT0wLGxlbj11bm1hdGNoZWQubGVuZ3RoLG1hcHBlZD1udWxsIT1tYXA7aTxsZW47aSsrKShlbGVtPXVubWF0Y2hlZFtpXSkmJihmaWx0ZXImJiFmaWx0ZXIoZWxlbSxjb250ZXh0LHhtbCl8fChuZXdVbm1hdGNoZWQucHVzaChlbGVtKSxtYXBwZWQmJm1hcC5wdXNoKGkpKSk7cmV0dXJuIG5ld1VubWF0Y2hlZH1mdW5jdGlvbiBzZXRNYXRjaGVyKHByZUZpbHRlcixzZWxlY3RvcixtYXRjaGVyLHBvc3RGaWx0ZXIscG9zdEZpbmRlcixwb3N0U2VsZWN0b3Ipe3JldHVybiBwb3N0RmlsdGVyJiYhcG9zdEZpbHRlcltleHBhbmRvXSYmKHBvc3RGaWx0ZXI9c2V0TWF0Y2hlcihwb3N0RmlsdGVyKSkscG9zdEZpbmRlciYmIXBvc3RGaW5kZXJbZXhwYW5kb10mJihwb3N0RmluZGVyPXNldE1hdGNoZXIocG9zdEZpbmRlcixwb3N0U2VsZWN0b3IpKSxtYXJrRnVuY3Rpb24oZnVuY3Rpb24oc2VlZCxyZXN1bHRzLGNvbnRleHQseG1sKXt2YXIgdGVtcCxpLGVsZW0scHJlTWFwPVtdLHBvc3RNYXA9W10scHJlZXhpc3Rpbmc9cmVzdWx0cy5sZW5ndGgsZWxlbXM9c2VlZHx8bXVsdGlwbGVDb250ZXh0cyhzZWxlY3Rvcnx8XCIqXCIsY29udGV4dC5ub2RlVHlwZT9bY29udGV4dF06Y29udGV4dCxbXSksbWF0Y2hlckluPSFwcmVGaWx0ZXJ8fCFzZWVkJiZzZWxlY3Rvcj9lbGVtczpjb25kZW5zZShlbGVtcyxwcmVNYXAscHJlRmlsdGVyLGNvbnRleHQseG1sKSxtYXRjaGVyT3V0PW1hdGNoZXI/cG9zdEZpbmRlcnx8KHNlZWQ/cHJlRmlsdGVyOnByZWV4aXN0aW5nfHxwb3N0RmlsdGVyKT9bXTpyZXN1bHRzOm1hdGNoZXJJbjtpZihtYXRjaGVyJiZtYXRjaGVyKG1hdGNoZXJJbixtYXRjaGVyT3V0LGNvbnRleHQseG1sKSxwb3N0RmlsdGVyKWZvcih0ZW1wPWNvbmRlbnNlKG1hdGNoZXJPdXQscG9zdE1hcCkscG9zdEZpbHRlcih0ZW1wLFtdLGNvbnRleHQseG1sKSxpPXRlbXAubGVuZ3RoO2ktLTspKGVsZW09dGVtcFtpXSkmJihtYXRjaGVyT3V0W3Bvc3RNYXBbaV1dPSEobWF0Y2hlckluW3Bvc3RNYXBbaV1dPWVsZW0pKTtpZihzZWVkKXtpZihwb3N0RmluZGVyfHxwcmVGaWx0ZXIpe2lmKHBvc3RGaW5kZXIpe2Zvcih0ZW1wPVtdLGk9bWF0Y2hlck91dC5sZW5ndGg7aS0tOykoZWxlbT1tYXRjaGVyT3V0W2ldKSYmdGVtcC5wdXNoKG1hdGNoZXJJbltpXT1lbGVtKTtwb3N0RmluZGVyKG51bGwsbWF0Y2hlck91dD1bXSx0ZW1wLHhtbCl9Zm9yKGk9bWF0Y2hlck91dC5sZW5ndGg7aS0tOykoZWxlbT1tYXRjaGVyT3V0W2ldKSYmKHRlbXA9cG9zdEZpbmRlcj9pbmRleE9mKHNlZWQsZWxlbSk6cHJlTWFwW2ldKT4tMSYmKHNlZWRbdGVtcF09IShyZXN1bHRzW3RlbXBdPWVsZW0pKX19ZWxzZSBtYXRjaGVyT3V0PWNvbmRlbnNlKG1hdGNoZXJPdXQ9PT1yZXN1bHRzP21hdGNoZXJPdXQuc3BsaWNlKHByZWV4aXN0aW5nLG1hdGNoZXJPdXQubGVuZ3RoKTptYXRjaGVyT3V0KSxwb3N0RmluZGVyP3Bvc3RGaW5kZXIobnVsbCxyZXN1bHRzLG1hdGNoZXJPdXQseG1sKTpwdXNoLmFwcGx5KHJlc3VsdHMsbWF0Y2hlck91dCl9KX1mdW5jdGlvbiBtYXRjaGVyRnJvbVRva2Vucyh0b2tlbnMpe2Zvcih2YXIgY2hlY2tDb250ZXh0LG1hdGNoZXIsaixsZW49dG9rZW5zLmxlbmd0aCxsZWFkaW5nUmVsYXRpdmU9RXhwci5yZWxhdGl2ZVt0b2tlbnNbMF0udHlwZV0saW1wbGljaXRSZWxhdGl2ZT1sZWFkaW5nUmVsYXRpdmV8fEV4cHIucmVsYXRpdmVbXCIgXCJdLGk9bGVhZGluZ1JlbGF0aXZlPzE6MCxtYXRjaENvbnRleHQ9YWRkQ29tYmluYXRvcihmdW5jdGlvbihlbGVtKXtyZXR1cm4gZWxlbT09PWNoZWNrQ29udGV4dH0saW1wbGljaXRSZWxhdGl2ZSwhMCksbWF0Y2hBbnlDb250ZXh0PWFkZENvbWJpbmF0b3IoZnVuY3Rpb24oZWxlbSl7cmV0dXJuIGluZGV4T2YoY2hlY2tDb250ZXh0LGVsZW0pPi0xfSxpbXBsaWNpdFJlbGF0aXZlLCEwKSxtYXRjaGVycz1bZnVuY3Rpb24oZWxlbSxjb250ZXh0LHhtbCl7dmFyIHJldD0hbGVhZGluZ1JlbGF0aXZlJiYoeG1sfHxjb250ZXh0IT09b3V0ZXJtb3N0Q29udGV4dCl8fCgoY2hlY2tDb250ZXh0PWNvbnRleHQpLm5vZGVUeXBlP21hdGNoQ29udGV4dChlbGVtLGNvbnRleHQseG1sKTptYXRjaEFueUNvbnRleHQoZWxlbSxjb250ZXh0LHhtbCkpO3JldHVybiBjaGVja0NvbnRleHQ9bnVsbCxyZXR9XTtpPGxlbjtpKyspaWYobWF0Y2hlcj1FeHByLnJlbGF0aXZlW3Rva2Vuc1tpXS50eXBlXSltYXRjaGVycz1bYWRkQ29tYmluYXRvcihlbGVtZW50TWF0Y2hlcihtYXRjaGVycyksbWF0Y2hlcildO2Vsc2V7aWYobWF0Y2hlcj1FeHByLmZpbHRlclt0b2tlbnNbaV0udHlwZV0uYXBwbHkobnVsbCx0b2tlbnNbaV0ubWF0Y2hlcyksbWF0Y2hlcltleHBhbmRvXSl7Zm9yKGo9KytpO2o8bGVuJiYhRXhwci5yZWxhdGl2ZVt0b2tlbnNbal0udHlwZV07aisrKTtyZXR1cm4gc2V0TWF0Y2hlcihpPjEmJmVsZW1lbnRNYXRjaGVyKG1hdGNoZXJzKSxpPjEmJnRvU2VsZWN0b3IodG9rZW5zLnNsaWNlKDAsaS0xKS5jb25jYXQoe3ZhbHVlOlwiIFwiPT09dG9rZW5zW2ktMl0udHlwZT9cIipcIjpcIlwifSkpLnJlcGxhY2UocnRyaW0sXCIkMVwiKSxtYXRjaGVyLGk8aiYmbWF0Y2hlckZyb21Ub2tlbnModG9rZW5zLnNsaWNlKGksaikpLGo8bGVuJiZtYXRjaGVyRnJvbVRva2Vucyh0b2tlbnM9dG9rZW5zLnNsaWNlKGopKSxqPGxlbiYmdG9TZWxlY3Rvcih0b2tlbnMpKX1tYXRjaGVycy5wdXNoKG1hdGNoZXIpfXJldHVybiBlbGVtZW50TWF0Y2hlcihtYXRjaGVycyl9ZnVuY3Rpb24gbWF0Y2hlckZyb21Hcm91cE1hdGNoZXJzKGVsZW1lbnRNYXRjaGVycyxzZXRNYXRjaGVycyl7dmFyIGJ5U2V0PXNldE1hdGNoZXJzLmxlbmd0aD4wLGJ5RWxlbWVudD1lbGVtZW50TWF0Y2hlcnMubGVuZ3RoPjAsc3VwZXJNYXRjaGVyPWZ1bmN0aW9uKHNlZWQsY29udGV4dCx4bWwscmVzdWx0cyxvdXRlcm1vc3Qpe3ZhciBlbGVtLGosbWF0Y2hlcixtYXRjaGVkQ291bnQ9MCxpPVwiMFwiLHVubWF0Y2hlZD1zZWVkJiZbXSxzZXRNYXRjaGVkPVtdLGNvbnRleHRCYWNrdXA9b3V0ZXJtb3N0Q29udGV4dCxlbGVtcz1zZWVkfHxieUVsZW1lbnQmJkV4cHIuZmluZC5UQUcoXCIqXCIsb3V0ZXJtb3N0KSxkaXJydW5zVW5pcXVlPWRpcnJ1bnMrPW51bGw9PWNvbnRleHRCYWNrdXA/MTpNYXRoLnJhbmRvbSgpfHwuMSxsZW49ZWxlbXMubGVuZ3RoO2ZvcihvdXRlcm1vc3QmJihvdXRlcm1vc3RDb250ZXh0PWNvbnRleHQ9PT1kb2N1bWVudHx8Y29udGV4dHx8b3V0ZXJtb3N0KTtpIT09bGVuJiZudWxsIT0oZWxlbT1lbGVtc1tpXSk7aSsrKXtpZihieUVsZW1lbnQmJmVsZW0pe2ZvcihqPTAsY29udGV4dHx8ZWxlbS5vd25lckRvY3VtZW50PT09ZG9jdW1lbnR8fChzZXREb2N1bWVudChlbGVtKSx4bWw9IWRvY3VtZW50SXNIVE1MKTttYXRjaGVyPWVsZW1lbnRNYXRjaGVyc1tqKytdOylpZihtYXRjaGVyKGVsZW0sY29udGV4dHx8ZG9jdW1lbnQseG1sKSl7cmVzdWx0cy5wdXNoKGVsZW0pO2JyZWFrfW91dGVybW9zdCYmKGRpcnJ1bnM9ZGlycnVuc1VuaXF1ZSl9YnlTZXQmJigoZWxlbT0hbWF0Y2hlciYmZWxlbSkmJm1hdGNoZWRDb3VudC0tLHNlZWQmJnVubWF0Y2hlZC5wdXNoKGVsZW0pKX1pZihtYXRjaGVkQ291bnQrPWksYnlTZXQmJmkhPT1tYXRjaGVkQ291bnQpe2ZvcihqPTA7bWF0Y2hlcj1zZXRNYXRjaGVyc1tqKytdOyltYXRjaGVyKHVubWF0Y2hlZCxzZXRNYXRjaGVkLGNvbnRleHQseG1sKTtpZihzZWVkKXtpZihtYXRjaGVkQ291bnQ+MClmb3IoO2ktLTspdW5tYXRjaGVkW2ldfHxzZXRNYXRjaGVkW2ldfHwoc2V0TWF0Y2hlZFtpXT1wb3AuY2FsbChyZXN1bHRzKSk7c2V0TWF0Y2hlZD1jb25kZW5zZShzZXRNYXRjaGVkKX1wdXNoLmFwcGx5KHJlc3VsdHMsc2V0TWF0Y2hlZCksb3V0ZXJtb3N0JiYhc2VlZCYmc2V0TWF0Y2hlZC5sZW5ndGg+MCYmbWF0Y2hlZENvdW50K3NldE1hdGNoZXJzLmxlbmd0aD4xJiZTaXp6bGUudW5pcXVlU29ydChyZXN1bHRzKX1yZXR1cm4gb3V0ZXJtb3N0JiYoZGlycnVucz1kaXJydW5zVW5pcXVlLG91dGVybW9zdENvbnRleHQ9Y29udGV4dEJhY2t1cCksdW5tYXRjaGVkfTtyZXR1cm4gYnlTZXQ/bWFya0Z1bmN0aW9uKHN1cGVyTWF0Y2hlcik6c3VwZXJNYXRjaGVyfXZhciBpLHN1cHBvcnQsRXhwcixnZXRUZXh0LGlzWE1MLHRva2VuaXplLGNvbXBpbGUsc2VsZWN0LG91dGVybW9zdENvbnRleHQsc29ydElucHV0LGhhc0R1cGxpY2F0ZSxzZXREb2N1bWVudCxkb2N1bWVudCxkb2NFbGVtLGRvY3VtZW50SXNIVE1MLHJidWdneVFTQSxyYnVnZ3lNYXRjaGVzLG1hdGNoZXMsY29udGFpbnMsZXhwYW5kbz1cInNpenpsZVwiKzEqbmV3IERhdGUscHJlZmVycmVkRG9jPXdpbmRvdy5kb2N1bWVudCxkaXJydW5zPTAsZG9uZT0wLGNsYXNzQ2FjaGU9Y3JlYXRlQ2FjaGUoKSx0b2tlbkNhY2hlPWNyZWF0ZUNhY2hlKCksY29tcGlsZXJDYWNoZT1jcmVhdGVDYWNoZSgpLG5vbm5hdGl2ZVNlbGVjdG9yQ2FjaGU9Y3JlYXRlQ2FjaGUoKSxzb3J0T3JkZXI9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gYT09PWImJihoYXNEdXBsaWNhdGU9ITApLDB9LGhhc093bj17fS5oYXNPd25Qcm9wZXJ0eSxhcnI9W10scG9wPWFyci5wb3AscHVzaF9uYXRpdmU9YXJyLnB1c2gscHVzaD1hcnIucHVzaCxzbGljZT1hcnIuc2xpY2UsaW5kZXhPZj1mdW5jdGlvbihsaXN0LGVsZW0pe2Zvcih2YXIgaT0wLGxlbj1saXN0Lmxlbmd0aDtpPGxlbjtpKyspaWYobGlzdFtpXT09PWVsZW0pcmV0dXJuIGk7cmV0dXJuLTF9LGJvb2xlYW5zPVwiY2hlY2tlZHxzZWxlY3RlZHxhc3luY3xhdXRvZm9jdXN8YXV0b3BsYXl8Y29udHJvbHN8ZGVmZXJ8ZGlzYWJsZWR8aGlkZGVufGlzbWFwfGxvb3B8bXVsdGlwbGV8b3BlbnxyZWFkb25seXxyZXF1aXJlZHxzY29wZWRcIix3aGl0ZXNwYWNlPVwiW1xcXFx4MjBcXFxcdFxcXFxyXFxcXG5cXFxcZl1cIixpZGVudGlmaWVyPVwiKD86XFxcXFxcXFwufFtcXFxcdy1dfFteXFwwLVxcXFx4YTBdKStcIixhdHRyaWJ1dGVzPVwiXFxcXFtcIit3aGl0ZXNwYWNlK1wiKihcIitpZGVudGlmaWVyK1wiKSg/OlwiK3doaXRlc3BhY2UrXCIqKFsqXiR8IX5dPz0pXCIrd2hpdGVzcGFjZStcIiooPzonKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCJ8KFwiK2lkZW50aWZpZXIrXCIpKXwpXCIrd2hpdGVzcGFjZStcIipcXFxcXVwiLHBzZXVkb3M9XCI6KFwiK2lkZW50aWZpZXIrXCIpKD86XFxcXCgoKCcoKD86XFxcXFxcXFwufFteXFxcXFxcXFwnXSkqKSd8XFxcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXFxcXCJdKSopXFxcIil8KCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKClbXFxcXF1dfFwiK2F0dHJpYnV0ZXMrXCIpKil8LiopXFxcXCl8KVwiLHJ3aGl0ZXNwYWNlPW5ldyBSZWdFeHAod2hpdGVzcGFjZStcIitcIixcImdcIikscnRyaW09bmV3IFJlZ0V4cChcIl5cIit3aGl0ZXNwYWNlK1wiK3woKD86XnxbXlxcXFxcXFxcXSkoPzpcXFxcXFxcXC4pKilcIit3aGl0ZXNwYWNlK1wiKyRcIixcImdcIikscmNvbW1hPW5ldyBSZWdFeHAoXCJeXCIrd2hpdGVzcGFjZStcIiosXCIrd2hpdGVzcGFjZStcIipcIikscmNvbWJpbmF0b3JzPW5ldyBSZWdFeHAoXCJeXCIrd2hpdGVzcGFjZStcIiooWz4rfl18XCIrd2hpdGVzcGFjZStcIilcIit3aGl0ZXNwYWNlK1wiKlwiKSxyZGVzY2VuZD1uZXcgUmVnRXhwKHdoaXRlc3BhY2UrXCJ8PlwiKSxycHNldWRvPW5ldyBSZWdFeHAocHNldWRvcykscmlkZW50aWZpZXI9bmV3IFJlZ0V4cChcIl5cIitpZGVudGlmaWVyK1wiJFwiKSxtYXRjaEV4cHI9e0lEOm5ldyBSZWdFeHAoXCJeIyhcIitpZGVudGlmaWVyK1wiKVwiKSxDTEFTUzpuZXcgUmVnRXhwKFwiXlxcXFwuKFwiK2lkZW50aWZpZXIrXCIpXCIpLFRBRzpuZXcgUmVnRXhwKFwiXihcIitpZGVudGlmaWVyK1wifFsqXSlcIiksQVRUUjpuZXcgUmVnRXhwKFwiXlwiK2F0dHJpYnV0ZXMpLFBTRVVETzpuZXcgUmVnRXhwKFwiXlwiK3BzZXVkb3MpLENISUxEOm5ldyBSZWdFeHAoXCJeOihvbmx5fGZpcnN0fGxhc3R8bnRofG50aC1sYXN0KS0oY2hpbGR8b2YtdHlwZSkoPzpcXFxcKFwiK3doaXRlc3BhY2UrXCIqKGV2ZW58b2RkfCgoWystXXwpKFxcXFxkKilufClcIit3aGl0ZXNwYWNlK1wiKig/OihbKy1dfClcIit3aGl0ZXNwYWNlK1wiKihcXFxcZCspfCkpXCIrd2hpdGVzcGFjZStcIipcXFxcKXwpXCIsXCJpXCIpLGJvb2w6bmV3IFJlZ0V4cChcIl4oPzpcIitib29sZWFucytcIikkXCIsXCJpXCIpLG5lZWRzQ29udGV4dDpuZXcgUmVnRXhwKFwiXlwiK3doaXRlc3BhY2UrXCIqWz4rfl18OihldmVufG9kZHxlcXxndHxsdHxudGh8Zmlyc3R8bGFzdCkoPzpcXFxcKFwiK3doaXRlc3BhY2UrXCIqKCg/Oi1cXFxcZCk/XFxcXGQqKVwiK3doaXRlc3BhY2UrXCIqXFxcXCl8KSg/PVteLV18JClcIixcImlcIil9LHJodG1sPS9IVE1MJC9pLHJpbnB1dHM9L14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxyaGVhZGVyPS9eaFxcZCQvaSxybmF0aXZlPS9eW157XStcXHtcXHMqXFxbbmF0aXZlIFxcdy8scnF1aWNrRXhwcj0vXig/OiMoW1xcdy1dKyl8KFxcdyspfFxcLihbXFx3LV0rKSkkLyxyc2libGluZz0vWyt+XS8scnVuZXNjYXBlPW5ldyBSZWdFeHAoXCJcXFxcXFxcXChbXFxcXGRhLWZdezEsNn1cIit3aGl0ZXNwYWNlK1wiP3woXCIrd2hpdGVzcGFjZStcIil8LilcIixcImlnXCIpLGZ1bmVzY2FwZT1mdW5jdGlvbihfLGVzY2FwZWQsZXNjYXBlZFdoaXRlc3BhY2Upe3ZhciBoaWdoPVwiMHhcIitlc2NhcGVkLTY1NTM2O3JldHVybiBoaWdoIT09aGlnaHx8ZXNjYXBlZFdoaXRlc3BhY2U/ZXNjYXBlZDpoaWdoPDA/U3RyaW5nLmZyb21DaGFyQ29kZShoaWdoKzY1NTM2KTpTdHJpbmcuZnJvbUNoYXJDb2RlKGhpZ2g+PjEwfDU1Mjk2LDEwMjMmaGlnaHw1NjMyMCl9LHJjc3Nlc2NhcGU9LyhbXFwwLVxceDFmXFx4N2ZdfF4tP1xcZCl8Xi0kfFteXFwwLVxceDFmXFx4N2YtXFx1RkZGRlxcdy1dL2csZmNzc2VzY2FwZT1mdW5jdGlvbihjaCxhc0NvZGVQb2ludCl7cmV0dXJuIGFzQ29kZVBvaW50P1wiXFwwXCI9PT1jaD9cIu+/vVwiOmNoLnNsaWNlKDAsLTEpK1wiXFxcXFwiK2NoLmNoYXJDb2RlQXQoY2gubGVuZ3RoLTEpLnRvU3RyaW5nKDE2KStcIiBcIjpcIlxcXFxcIitjaH0sdW5sb2FkSGFuZGxlcj1mdW5jdGlvbigpe3NldERvY3VtZW50KCl9LGluRGlzYWJsZWRGaWVsZHNldD1hZGRDb21iaW5hdG9yKGZ1bmN0aW9uKGVsZW0pe3JldHVybiEwPT09ZWxlbS5kaXNhYmxlZCYmXCJmaWVsZHNldFwiPT09ZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpfSx7ZGlyOlwicGFyZW50Tm9kZVwiLG5leHQ6XCJsZWdlbmRcIn0pO3RyeXtwdXNoLmFwcGx5KGFycj1zbGljZS5jYWxsKHByZWZlcnJlZERvYy5jaGlsZE5vZGVzKSxwcmVmZXJyZWREb2MuY2hpbGROb2RlcyksYXJyW3ByZWZlcnJlZERvYy5jaGlsZE5vZGVzLmxlbmd0aF0ubm9kZVR5cGV9Y2F0Y2goZSl7cHVzaD17YXBwbHk6YXJyLmxlbmd0aD9mdW5jdGlvbih0YXJnZXQsZWxzKXtwdXNoX25hdGl2ZS5hcHBseSh0YXJnZXQsc2xpY2UuY2FsbChlbHMpKX06ZnVuY3Rpb24odGFyZ2V0LGVscyl7Zm9yKHZhciBqPXRhcmdldC5sZW5ndGgsaT0wO3RhcmdldFtqKytdPWVsc1tpKytdOyk7dGFyZ2V0Lmxlbmd0aD1qLTF9fX1zdXBwb3J0PVNpenpsZS5zdXBwb3J0PXt9LGlzWE1MPVNpenpsZS5pc1hNTD1mdW5jdGlvbihlbGVtKXt2YXIgbmFtZXNwYWNlPWVsZW0ubmFtZXNwYWNlVVJJLGRvY0VsZW09KGVsZW0ub3duZXJEb2N1bWVudHx8ZWxlbSkuZG9jdW1lbnRFbGVtZW50O3JldHVybiFyaHRtbC50ZXN0KG5hbWVzcGFjZXx8ZG9jRWxlbSYmZG9jRWxlbS5ub2RlTmFtZXx8XCJIVE1MXCIpfSxzZXREb2N1bWVudD1TaXp6bGUuc2V0RG9jdW1lbnQ9ZnVuY3Rpb24obm9kZSl7dmFyIGhhc0NvbXBhcmUsc3ViV2luZG93LGRvYz1ub2RlP25vZGUub3duZXJEb2N1bWVudHx8bm9kZTpwcmVmZXJyZWREb2M7cmV0dXJuIGRvYyE9PWRvY3VtZW50JiY5PT09ZG9jLm5vZGVUeXBlJiZkb2MuZG9jdW1lbnRFbGVtZW50Pyhkb2N1bWVudD1kb2MsZG9jRWxlbT1kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsZG9jdW1lbnRJc0hUTUw9IWlzWE1MKGRvY3VtZW50KSxwcmVmZXJyZWREb2MhPT1kb2N1bWVudCYmKHN1YldpbmRvdz1kb2N1bWVudC5kZWZhdWx0VmlldykmJnN1YldpbmRvdy50b3AhPT1zdWJXaW5kb3cmJihzdWJXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lcj9zdWJXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInVubG9hZFwiLHVubG9hZEhhbmRsZXIsITEpOnN1YldpbmRvdy5hdHRhY2hFdmVudCYmc3ViV2luZG93LmF0dGFjaEV2ZW50KFwib251bmxvYWRcIix1bmxvYWRIYW5kbGVyKSksc3VwcG9ydC5hdHRyaWJ1dGVzPWFzc2VydChmdW5jdGlvbihlbCl7cmV0dXJuIGVsLmNsYXNzTmFtZT1cImlcIiwhZWwuZ2V0QXR0cmlidXRlKFwiY2xhc3NOYW1lXCIpfSksc3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZT1hc3NlcnQoZnVuY3Rpb24oZWwpe3JldHVybiBlbC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVDb21tZW50KFwiXCIpKSwhZWwuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCIqXCIpLmxlbmd0aH0pLHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZT1ybmF0aXZlLnRlc3QoZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSksc3VwcG9ydC5nZXRCeUlkPWFzc2VydChmdW5jdGlvbihlbCl7cmV0dXJuIGRvY0VsZW0uYXBwZW5kQ2hpbGQoZWwpLmlkPWV4cGFuZG8sIWRvY3VtZW50LmdldEVsZW1lbnRzQnlOYW1lfHwhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoZXhwYW5kbykubGVuZ3RofSksc3VwcG9ydC5nZXRCeUlkPyhFeHByLmZpbHRlci5JRD1mdW5jdGlvbihpZCl7dmFyIGF0dHJJZD1pZC5yZXBsYWNlKHJ1bmVzY2FwZSxmdW5lc2NhcGUpO3JldHVybiBmdW5jdGlvbihlbGVtKXtyZXR1cm4gZWxlbS5nZXRBdHRyaWJ1dGUoXCJpZFwiKT09PWF0dHJJZH19LEV4cHIuZmluZC5JRD1mdW5jdGlvbihpZCxjb250ZXh0KXtpZih2b2lkIDAhPT1jb250ZXh0LmdldEVsZW1lbnRCeUlkJiZkb2N1bWVudElzSFRNTCl7dmFyIGVsZW09Y29udGV4dC5nZXRFbGVtZW50QnlJZChpZCk7cmV0dXJuIGVsZW0/W2VsZW1dOltdfX0pOihFeHByLmZpbHRlci5JRD1mdW5jdGlvbihpZCl7dmFyIGF0dHJJZD1pZC5yZXBsYWNlKHJ1bmVzY2FwZSxmdW5lc2NhcGUpO3JldHVybiBmdW5jdGlvbihlbGVtKXt2YXIgbm9kZT12b2lkIDAhPT1lbGVtLmdldEF0dHJpYnV0ZU5vZGUmJmVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO3JldHVybiBub2RlJiZub2RlLnZhbHVlPT09YXR0cklkfX0sRXhwci5maW5kLklEPWZ1bmN0aW9uKGlkLGNvbnRleHQpe2lmKHZvaWQgMCE9PWNvbnRleHQuZ2V0RWxlbWVudEJ5SWQmJmRvY3VtZW50SXNIVE1MKXt2YXIgbm9kZSxpLGVsZW1zLGVsZW09Y29udGV4dC5nZXRFbGVtZW50QnlJZChpZCk7aWYoZWxlbSl7aWYoKG5vZGU9ZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKFwiaWRcIikpJiZub2RlLnZhbHVlPT09aWQpcmV0dXJuW2VsZW1dO2ZvcihlbGVtcz1jb250ZXh0LmdldEVsZW1lbnRzQnlOYW1lKGlkKSxpPTA7ZWxlbT1lbGVtc1tpKytdOylpZigobm9kZT1lbGVtLmdldEF0dHJpYnV0ZU5vZGUoXCJpZFwiKSkmJm5vZGUudmFsdWU9PT1pZClyZXR1cm5bZWxlbV19cmV0dXJuW119fSksRXhwci5maW5kLlRBRz1zdXBwb3J0LmdldEVsZW1lbnRzQnlUYWdOYW1lP2Z1bmN0aW9uKHRhZyxjb250ZXh0KXtyZXR1cm4gdm9pZCAwIT09Y29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZT9jb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKHRhZyk6c3VwcG9ydC5xc2E/Y29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKHRhZyk6dm9pZCAwfTpmdW5jdGlvbih0YWcsY29udGV4dCl7dmFyIGVsZW0sdG1wPVtdLGk9MCxyZXN1bHRzPWNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUodGFnKTtpZihcIipcIj09PXRhZyl7Zm9yKDtlbGVtPXJlc3VsdHNbaSsrXTspMT09PWVsZW0ubm9kZVR5cGUmJnRtcC5wdXNoKGVsZW0pO3JldHVybiB0bXB9cmV0dXJuIHJlc3VsdHN9LEV4cHIuZmluZC5DTEFTUz1zdXBwb3J0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUmJmZ1bmN0aW9uKGNsYXNzTmFtZSxjb250ZXh0KXtpZih2b2lkIDAhPT1jb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUmJmRvY3VtZW50SXNIVE1MKXJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoY2xhc3NOYW1lKX0scmJ1Z2d5TWF0Y2hlcz1bXSxyYnVnZ3lRU0E9W10sKHN1cHBvcnQucXNhPXJuYXRpdmUudGVzdChkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKSkmJihhc3NlcnQoZnVuY3Rpb24oZWwpe2RvY0VsZW0uYXBwZW5kQ2hpbGQoZWwpLmlubmVySFRNTD1cIjxhIGlkPSdcIitleHBhbmRvK1wiJz48L2E+PHNlbGVjdCBpZD0nXCIrZXhwYW5kbytcIi1cXHJcXFxcJyBtc2FsbG93Y2FwdHVyZT0nJz48b3B0aW9uIHNlbGVjdGVkPScnPjwvb3B0aW9uPjwvc2VsZWN0PlwiLGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbXNhbGxvd2NhcHR1cmVePScnXVwiKS5sZW5ndGgmJnJidWdneVFTQS5wdXNoKFwiWypeJF09XCIrd2hpdGVzcGFjZStcIiooPzonJ3xcXFwiXFxcIilcIiksZWwucXVlcnlTZWxlY3RvckFsbChcIltzZWxlY3RlZF1cIikubGVuZ3RofHxyYnVnZ3lRU0EucHVzaChcIlxcXFxbXCIrd2hpdGVzcGFjZStcIiooPzp2YWx1ZXxcIitib29sZWFucytcIilcIiksZWwucXVlcnlTZWxlY3RvckFsbChcIltpZH49XCIrZXhwYW5kbytcIi1dXCIpLmxlbmd0aHx8cmJ1Z2d5UVNBLnB1c2goXCJ+PVwiKSxlbC5xdWVyeVNlbGVjdG9yQWxsKFwiOmNoZWNrZWRcIikubGVuZ3RofHxyYnVnZ3lRU0EucHVzaChcIjpjaGVja2VkXCIpLGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCJhI1wiK2V4cGFuZG8rXCIrKlwiKS5sZW5ndGh8fHJidWdneVFTQS5wdXNoKFwiLiMuK1srfl1cIil9KSxhc3NlcnQoZnVuY3Rpb24oZWwpe2VsLmlubmVySFRNTD1cIjxhIGhyZWY9JycgZGlzYWJsZWQ9J2Rpc2FibGVkJz48L2E+PHNlbGVjdCBkaXNhYmxlZD0nZGlzYWJsZWQnPjxvcHRpb24vPjwvc2VsZWN0PlwiO3ZhciBpbnB1dD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7aW5wdXQuc2V0QXR0cmlidXRlKFwidHlwZVwiLFwiaGlkZGVuXCIpLGVsLmFwcGVuZENoaWxkKGlucHV0KS5zZXRBdHRyaWJ1dGUoXCJuYW1lXCIsXCJEXCIpLGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCJbbmFtZT1kXVwiKS5sZW5ndGgmJnJidWdneVFTQS5wdXNoKFwibmFtZVwiK3doaXRlc3BhY2UrXCIqWypeJHwhfl0/PVwiKSwyIT09ZWwucXVlcnlTZWxlY3RvckFsbChcIjplbmFibGVkXCIpLmxlbmd0aCYmcmJ1Z2d5UVNBLnB1c2goXCI6ZW5hYmxlZFwiLFwiOmRpc2FibGVkXCIpLGRvY0VsZW0uYXBwZW5kQ2hpbGQoZWwpLmRpc2FibGVkPSEwLDIhPT1lbC5xdWVyeVNlbGVjdG9yQWxsKFwiOmRpc2FibGVkXCIpLmxlbmd0aCYmcmJ1Z2d5UVNBLnB1c2goXCI6ZW5hYmxlZFwiLFwiOmRpc2FibGVkXCIpLGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCIqLDp4XCIpLHJidWdneVFTQS5wdXNoKFwiLC4qOlwiKX0pKSwoc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3I9cm5hdGl2ZS50ZXN0KG1hdGNoZXM9ZG9jRWxlbS5tYXRjaGVzfHxkb2NFbGVtLndlYmtpdE1hdGNoZXNTZWxlY3Rvcnx8ZG9jRWxlbS5tb3pNYXRjaGVzU2VsZWN0b3J8fGRvY0VsZW0ub01hdGNoZXNTZWxlY3Rvcnx8ZG9jRWxlbS5tc01hdGNoZXNTZWxlY3RvcikpJiZhc3NlcnQoZnVuY3Rpb24oZWwpe3N1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2g9bWF0Y2hlcy5jYWxsKGVsLFwiKlwiKSxtYXRjaGVzLmNhbGwoZWwsXCJbcyE9JyddOnhcIikscmJ1Z2d5TWF0Y2hlcy5wdXNoKFwiIT1cIixwc2V1ZG9zKX0pLHJidWdneVFTQT1yYnVnZ3lRU0EubGVuZ3RoJiZuZXcgUmVnRXhwKHJidWdneVFTQS5qb2luKFwifFwiKSkscmJ1Z2d5TWF0Y2hlcz1yYnVnZ3lNYXRjaGVzLmxlbmd0aCYmbmV3IFJlZ0V4cChyYnVnZ3lNYXRjaGVzLmpvaW4oXCJ8XCIpKSxoYXNDb21wYXJlPXJuYXRpdmUudGVzdChkb2NFbGVtLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKSxjb250YWlucz1oYXNDb21wYXJlfHxybmF0aXZlLnRlc3QoZG9jRWxlbS5jb250YWlucyk/ZnVuY3Rpb24oYSxiKXt2YXIgYWRvd249OT09PWEubm9kZVR5cGU/YS5kb2N1bWVudEVsZW1lbnQ6YSxidXA9YiYmYi5wYXJlbnROb2RlO3JldHVybiBhPT09YnVwfHwhKCFidXB8fDEhPT1idXAubm9kZVR5cGV8fCEoYWRvd24uY29udGFpbnM/YWRvd24uY29udGFpbnMoYnVwKTphLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uJiYxNiZhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGJ1cCkpKX06ZnVuY3Rpb24oYSxiKXtpZihiKWZvcig7Yj1iLnBhcmVudE5vZGU7KWlmKGI9PT1hKXJldHVybiEwO3JldHVybiExfSxzb3J0T3JkZXI9aGFzQ29tcGFyZT9mdW5jdGlvbihhLGIpe2lmKGE9PT1iKXJldHVybiBoYXNEdXBsaWNhdGU9ITAsMDt2YXIgY29tcGFyZT0hYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbi0hYi5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbjtyZXR1cm4gY29tcGFyZXx8KGNvbXBhcmU9KGEub3duZXJEb2N1bWVudHx8YSk9PT0oYi5vd25lckRvY3VtZW50fHxiKT9hLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGIpOjEsMSZjb21wYXJlfHwhc3VwcG9ydC5zb3J0RGV0YWNoZWQmJmIuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYSk9PT1jb21wYXJlP2E9PT1kb2N1bWVudHx8YS5vd25lckRvY3VtZW50PT09cHJlZmVycmVkRG9jJiZjb250YWlucyhwcmVmZXJyZWREb2MsYSk/LTE6Yj09PWRvY3VtZW50fHxiLm93bmVyRG9jdW1lbnQ9PT1wcmVmZXJyZWREb2MmJmNvbnRhaW5zKHByZWZlcnJlZERvYyxiKT8xOnNvcnRJbnB1dD9pbmRleE9mKHNvcnRJbnB1dCxhKS1pbmRleE9mKHNvcnRJbnB1dCxiKTowOjQmY29tcGFyZT8tMToxKX06ZnVuY3Rpb24oYSxiKXtpZihhPT09YilyZXR1cm4gaGFzRHVwbGljYXRlPSEwLDA7dmFyIGN1cixpPTAsYXVwPWEucGFyZW50Tm9kZSxidXA9Yi5wYXJlbnROb2RlLGFwPVthXSxicD1bYl07aWYoIWF1cHx8IWJ1cClyZXR1cm4gYT09PWRvY3VtZW50Py0xOmI9PT1kb2N1bWVudD8xOmF1cD8tMTpidXA/MTpzb3J0SW5wdXQ/aW5kZXhPZihzb3J0SW5wdXQsYSktaW5kZXhPZihzb3J0SW5wdXQsYik6MDtpZihhdXA9PT1idXApcmV0dXJuIHNpYmxpbmdDaGVjayhhLGIpO2ZvcihjdXI9YTtjdXI9Y3VyLnBhcmVudE5vZGU7KWFwLnVuc2hpZnQoY3VyKTtmb3IoY3VyPWI7Y3VyPWN1ci5wYXJlbnROb2RlOylicC51bnNoaWZ0KGN1cik7Zm9yKDthcFtpXT09PWJwW2ldOylpKys7cmV0dXJuIGk/c2libGluZ0NoZWNrKGFwW2ldLGJwW2ldKTphcFtpXT09PXByZWZlcnJlZERvYz8tMTpicFtpXT09PXByZWZlcnJlZERvYz8xOjB9LGRvY3VtZW50KTpkb2N1bWVudH0sU2l6emxlLm1hdGNoZXM9ZnVuY3Rpb24oZXhwcixlbGVtZW50cyl7cmV0dXJuIFNpenpsZShleHByLG51bGwsbnVsbCxlbGVtZW50cyl9LFNpenpsZS5tYXRjaGVzU2VsZWN0b3I9ZnVuY3Rpb24oZWxlbSxleHByKXtpZigoZWxlbS5vd25lckRvY3VtZW50fHxlbGVtKSE9PWRvY3VtZW50JiZzZXREb2N1bWVudChlbGVtKSxzdXBwb3J0Lm1hdGNoZXNTZWxlY3RvciYmZG9jdW1lbnRJc0hUTUwmJiFub25uYXRpdmVTZWxlY3RvckNhY2hlW2V4cHIrXCIgXCJdJiYoIXJidWdneU1hdGNoZXN8fCFyYnVnZ3lNYXRjaGVzLnRlc3QoZXhwcikpJiYoIXJidWdneVFTQXx8IXJidWdneVFTQS50ZXN0KGV4cHIpKSl0cnl7dmFyIHJldD1tYXRjaGVzLmNhbGwoZWxlbSxleHByKTtpZihyZXR8fHN1cHBvcnQuZGlzY29ubmVjdGVkTWF0Y2h8fGVsZW0uZG9jdW1lbnQmJjExIT09ZWxlbS5kb2N1bWVudC5ub2RlVHlwZSlyZXR1cm4gcmV0fWNhdGNoKGUpe25vbm5hdGl2ZVNlbGVjdG9yQ2FjaGUoZXhwciwhMCl9cmV0dXJuIFNpenpsZShleHByLGRvY3VtZW50LG51bGwsW2VsZW1dKS5sZW5ndGg+MH0sU2l6emxlLmNvbnRhaW5zPWZ1bmN0aW9uKGNvbnRleHQsZWxlbSl7cmV0dXJuKGNvbnRleHQub3duZXJEb2N1bWVudHx8Y29udGV4dCkhPT1kb2N1bWVudCYmc2V0RG9jdW1lbnQoY29udGV4dCksY29udGFpbnMoY29udGV4dCxlbGVtKX0sU2l6emxlLmF0dHI9ZnVuY3Rpb24oZWxlbSxuYW1lKXsoZWxlbS5vd25lckRvY3VtZW50fHxlbGVtKSE9PWRvY3VtZW50JiZzZXREb2N1bWVudChlbGVtKTt2YXIgZm49RXhwci5hdHRySGFuZGxlW25hbWUudG9Mb3dlckNhc2UoKV0sdmFsPWZuJiZoYXNPd24uY2FsbChFeHByLmF0dHJIYW5kbGUsbmFtZS50b0xvd2VyQ2FzZSgpKT9mbihlbGVtLG5hbWUsIWRvY3VtZW50SXNIVE1MKTp2b2lkIDA7cmV0dXJuIHZvaWQgMCE9PXZhbD92YWw6c3VwcG9ydC5hdHRyaWJ1dGVzfHwhZG9jdW1lbnRJc0hUTUw/ZWxlbS5nZXRBdHRyaWJ1dGUobmFtZSk6KHZhbD1lbGVtLmdldEF0dHJpYnV0ZU5vZGUobmFtZSkpJiZ2YWwuc3BlY2lmaWVkP3ZhbC52YWx1ZTpudWxsfSxTaXp6bGUuZXNjYXBlPWZ1bmN0aW9uKHNlbCl7cmV0dXJuKHNlbCtcIlwiKS5yZXBsYWNlKHJjc3Nlc2NhcGUsZmNzc2VzY2FwZSl9LFNpenpsZS5lcnJvcj1mdW5jdGlvbihtc2cpe3Rocm93IG5ldyBFcnJvcihcIlN5bnRheCBlcnJvciwgdW5yZWNvZ25pemVkIGV4cHJlc3Npb246IFwiK21zZyl9LFNpenpsZS51bmlxdWVTb3J0PWZ1bmN0aW9uKHJlc3VsdHMpe3ZhciBlbGVtLGR1cGxpY2F0ZXM9W10saj0wLGk9MDtpZihoYXNEdXBsaWNhdGU9IXN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcyxzb3J0SW5wdXQ9IXN1cHBvcnQuc29ydFN0YWJsZSYmcmVzdWx0cy5zbGljZSgwKSxyZXN1bHRzLnNvcnQoc29ydE9yZGVyKSxoYXNEdXBsaWNhdGUpe2Zvcig7ZWxlbT1yZXN1bHRzW2krK107KWVsZW09PT1yZXN1bHRzW2ldJiYoaj1kdXBsaWNhdGVzLnB1c2goaSkpO2Zvcig7ai0tOylyZXN1bHRzLnNwbGljZShkdXBsaWNhdGVzW2pdLDEpfXJldHVybiBzb3J0SW5wdXQ9bnVsbCxyZXN1bHRzfSxnZXRUZXh0PVNpenpsZS5nZXRUZXh0PWZ1bmN0aW9uKGVsZW0pe3ZhciBub2RlLHJldD1cIlwiLGk9MCxub2RlVHlwZT1lbGVtLm5vZGVUeXBlO2lmKG5vZGVUeXBlKXtpZigxPT09bm9kZVR5cGV8fDk9PT1ub2RlVHlwZXx8MTE9PT1ub2RlVHlwZSl7aWYoXCJzdHJpbmdcIj09dHlwZW9mIGVsZW0udGV4dENvbnRlbnQpcmV0dXJuIGVsZW0udGV4dENvbnRlbnQ7Zm9yKGVsZW09ZWxlbS5maXJzdENoaWxkO2VsZW07ZWxlbT1lbGVtLm5leHRTaWJsaW5nKXJldCs9Z2V0VGV4dChlbGVtKX1lbHNlIGlmKDM9PT1ub2RlVHlwZXx8ND09PW5vZGVUeXBlKXJldHVybiBlbGVtLm5vZGVWYWx1ZX1lbHNlIGZvcig7bm9kZT1lbGVtW2krK107KXJldCs9Z2V0VGV4dChub2RlKTtyZXR1cm4gcmV0fSxFeHByPVNpenpsZS5zZWxlY3RvcnM9e2NhY2hlTGVuZ3RoOjUwLGNyZWF0ZVBzZXVkbzptYXJrRnVuY3Rpb24sbWF0Y2g6bWF0Y2hFeHByLGF0dHJIYW5kbGU6e30sZmluZDp7fSxyZWxhdGl2ZTp7XCI+XCI6e2RpcjpcInBhcmVudE5vZGVcIixmaXJzdDohMH0sXCIgXCI6e2RpcjpcInBhcmVudE5vZGVcIn0sXCIrXCI6e2RpcjpcInByZXZpb3VzU2libGluZ1wiLGZpcnN0OiEwfSxcIn5cIjp7ZGlyOlwicHJldmlvdXNTaWJsaW5nXCJ9fSxwcmVGaWx0ZXI6e0FUVFI6ZnVuY3Rpb24obWF0Y2gpe3JldHVybiBtYXRjaFsxXT1tYXRjaFsxXS5yZXBsYWNlKHJ1bmVzY2FwZSxmdW5lc2NhcGUpLG1hdGNoWzNdPShtYXRjaFszXXx8bWF0Y2hbNF18fG1hdGNoWzVdfHxcIlwiKS5yZXBsYWNlKHJ1bmVzY2FwZSxmdW5lc2NhcGUpLFwifj1cIj09PW1hdGNoWzJdJiYobWF0Y2hbM109XCIgXCIrbWF0Y2hbM10rXCIgXCIpLG1hdGNoLnNsaWNlKDAsNCl9LENISUxEOmZ1bmN0aW9uKG1hdGNoKXtyZXR1cm4gbWF0Y2hbMV09bWF0Y2hbMV0udG9Mb3dlckNhc2UoKSxcIm50aFwiPT09bWF0Y2hbMV0uc2xpY2UoMCwzKT8obWF0Y2hbM118fFNpenpsZS5lcnJvcihtYXRjaFswXSksbWF0Y2hbNF09KyhtYXRjaFs0XT9tYXRjaFs1XSsobWF0Y2hbNl18fDEpOjIqKFwiZXZlblwiPT09bWF0Y2hbM118fFwib2RkXCI9PT1tYXRjaFszXSkpLG1hdGNoWzVdPSsobWF0Y2hbN10rbWF0Y2hbOF18fFwib2RkXCI9PT1tYXRjaFszXSkpOm1hdGNoWzNdJiZTaXp6bGUuZXJyb3IobWF0Y2hbMF0pLG1hdGNofSxQU0VVRE86ZnVuY3Rpb24obWF0Y2gpe3ZhciBleGNlc3MsdW5xdW90ZWQ9IW1hdGNoWzZdJiZtYXRjaFsyXTtyZXR1cm4gbWF0Y2hFeHByLkNISUxELnRlc3QobWF0Y2hbMF0pP251bGw6KG1hdGNoWzNdP21hdGNoWzJdPW1hdGNoWzRdfHxtYXRjaFs1XXx8XCJcIjp1bnF1b3RlZCYmcnBzZXVkby50ZXN0KHVucXVvdGVkKSYmKGV4Y2Vzcz10b2tlbml6ZSh1bnF1b3RlZCwhMCkpJiYoZXhjZXNzPXVucXVvdGVkLmluZGV4T2YoXCIpXCIsdW5xdW90ZWQubGVuZ3RoLWV4Y2VzcyktdW5xdW90ZWQubGVuZ3RoKSYmKG1hdGNoWzBdPW1hdGNoWzBdLnNsaWNlKDAsZXhjZXNzKSxtYXRjaFsyXT11bnF1b3RlZC5zbGljZSgwLGV4Y2VzcykpLG1hdGNoLnNsaWNlKDAsMykpfX0sZmlsdGVyOntUQUc6ZnVuY3Rpb24obm9kZU5hbWVTZWxlY3Rvcil7dmFyIG5vZGVOYW1lPW5vZGVOYW1lU2VsZWN0b3IucmVwbGFjZShydW5lc2NhcGUsZnVuZXNjYXBlKS50b0xvd2VyQ2FzZSgpO3JldHVyblwiKlwiPT09bm9kZU5hbWVTZWxlY3Rvcj9mdW5jdGlvbigpe3JldHVybiEwfTpmdW5jdGlvbihlbGVtKXtyZXR1cm4gZWxlbS5ub2RlTmFtZSYmZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpPT09bm9kZU5hbWV9fSxDTEFTUzpmdW5jdGlvbihjbGFzc05hbWUpe3ZhciBwYXR0ZXJuPWNsYXNzQ2FjaGVbY2xhc3NOYW1lK1wiIFwiXTtyZXR1cm4gcGF0dGVybnx8KHBhdHRlcm49bmV3IFJlZ0V4cChcIihefFwiK3doaXRlc3BhY2UrXCIpXCIrY2xhc3NOYW1lK1wiKFwiK3doaXRlc3BhY2UrXCJ8JClcIikpJiZjbGFzc0NhY2hlKGNsYXNzTmFtZSxmdW5jdGlvbihlbGVtKXtyZXR1cm4gcGF0dGVybi50ZXN0KFwic3RyaW5nXCI9PXR5cGVvZiBlbGVtLmNsYXNzTmFtZSYmZWxlbS5jbGFzc05hbWV8fHZvaWQgMCE9PWVsZW0uZ2V0QXR0cmlidXRlJiZlbGVtLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpfHxcIlwiKX0pfSxBVFRSOmZ1bmN0aW9uKG5hbWUsb3BlcmF0b3IsY2hlY2spe3JldHVybiBmdW5jdGlvbihlbGVtKXt2YXIgcmVzdWx0PVNpenpsZS5hdHRyKGVsZW0sbmFtZSk7cmV0dXJuIG51bGw9PXJlc3VsdD9cIiE9XCI9PT1vcGVyYXRvcjohb3BlcmF0b3J8fChyZXN1bHQrPVwiXCIsXCI9XCI9PT1vcGVyYXRvcj9yZXN1bHQ9PT1jaGVjazpcIiE9XCI9PT1vcGVyYXRvcj9yZXN1bHQhPT1jaGVjazpcIl49XCI9PT1vcGVyYXRvcj9jaGVjayYmMD09PXJlc3VsdC5pbmRleE9mKGNoZWNrKTpcIio9XCI9PT1vcGVyYXRvcj9jaGVjayYmcmVzdWx0LmluZGV4T2YoY2hlY2spPi0xOlwiJD1cIj09PW9wZXJhdG9yP2NoZWNrJiZyZXN1bHQuc2xpY2UoLWNoZWNrLmxlbmd0aCk9PT1jaGVjazpcIn49XCI9PT1vcGVyYXRvcj8oXCIgXCIrcmVzdWx0LnJlcGxhY2UocndoaXRlc3BhY2UsXCIgXCIpK1wiIFwiKS5pbmRleE9mKGNoZWNrKT4tMTpcInw9XCI9PT1vcGVyYXRvciYmKHJlc3VsdD09PWNoZWNrfHxyZXN1bHQuc2xpY2UoMCxjaGVjay5sZW5ndGgrMSk9PT1jaGVjaytcIi1cIikpfX0sQ0hJTEQ6ZnVuY3Rpb24odHlwZSx3aGF0LGFyZ3VtZW50LGZpcnN0LGxhc3Qpe3ZhciBzaW1wbGU9XCJudGhcIiE9PXR5cGUuc2xpY2UoMCwzKSxmb3J3YXJkPVwibGFzdFwiIT09dHlwZS5zbGljZSgtNCksb2ZUeXBlPVwib2YtdHlwZVwiPT09d2hhdDtyZXR1cm4gMT09PWZpcnN0JiYwPT09bGFzdD9mdW5jdGlvbihlbGVtKXtyZXR1cm4hIWVsZW0ucGFyZW50Tm9kZX06ZnVuY3Rpb24oZWxlbSxjb250ZXh0LHhtbCl7dmFyIGNhY2hlLHVuaXF1ZUNhY2hlLG91dGVyQ2FjaGUsbm9kZSxub2RlSW5kZXgsc3RhcnQsZGlyPXNpbXBsZSE9PWZvcndhcmQ/XCJuZXh0U2libGluZ1wiOlwicHJldmlvdXNTaWJsaW5nXCIscGFyZW50PWVsZW0ucGFyZW50Tm9kZSxuYW1lPW9mVHlwZSYmZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLHVzZUNhY2hlPSF4bWwmJiFvZlR5cGUsZGlmZj0hMTtpZihwYXJlbnQpe2lmKHNpbXBsZSl7Zm9yKDtkaXI7KXtmb3Iobm9kZT1lbGVtO25vZGU9bm9kZVtkaXJdOylpZihvZlR5cGU/bm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpPT09bmFtZToxPT09bm9kZS5ub2RlVHlwZSlyZXR1cm4hMTtzdGFydD1kaXI9XCJvbmx5XCI9PT10eXBlJiYhc3RhcnQmJlwibmV4dFNpYmxpbmdcIn1yZXR1cm4hMH1pZihzdGFydD1bZm9yd2FyZD9wYXJlbnQuZmlyc3RDaGlsZDpwYXJlbnQubGFzdENoaWxkXSxmb3J3YXJkJiZ1c2VDYWNoZSl7Zm9yKG5vZGU9cGFyZW50LG91dGVyQ2FjaGU9bm9kZVtleHBhbmRvXXx8KG5vZGVbZXhwYW5kb109e30pLHVuaXF1ZUNhY2hlPW91dGVyQ2FjaGVbbm9kZS51bmlxdWVJRF18fChvdXRlckNhY2hlW25vZGUudW5pcXVlSURdPXt9KSxjYWNoZT11bmlxdWVDYWNoZVt0eXBlXXx8W10sbm9kZUluZGV4PWNhY2hlWzBdPT09ZGlycnVucyYmY2FjaGVbMV0sZGlmZj1ub2RlSW5kZXgmJmNhY2hlWzJdLG5vZGU9bm9kZUluZGV4JiZwYXJlbnQuY2hpbGROb2Rlc1tub2RlSW5kZXhdO25vZGU9Kytub2RlSW5kZXgmJm5vZGUmJm5vZGVbZGlyXXx8KGRpZmY9bm9kZUluZGV4PTApfHxzdGFydC5wb3AoKTspaWYoMT09PW5vZGUubm9kZVR5cGUmJisrZGlmZiYmbm9kZT09PWVsZW0pe3VuaXF1ZUNhY2hlW3R5cGVdPVtkaXJydW5zLG5vZGVJbmRleCxkaWZmXTticmVha319ZWxzZSBpZih1c2VDYWNoZSYmKG5vZGU9ZWxlbSxvdXRlckNhY2hlPW5vZGVbZXhwYW5kb118fChub2RlW2V4cGFuZG9dPXt9KSx1bmlxdWVDYWNoZT1vdXRlckNhY2hlW25vZGUudW5pcXVlSURdfHwob3V0ZXJDYWNoZVtub2RlLnVuaXF1ZUlEXT17fSksY2FjaGU9dW5pcXVlQ2FjaGVbdHlwZV18fFtdLG5vZGVJbmRleD1jYWNoZVswXT09PWRpcnJ1bnMmJmNhY2hlWzFdLGRpZmY9bm9kZUluZGV4KSwhMT09PWRpZmYpZm9yKDsobm9kZT0rK25vZGVJbmRleCYmbm9kZSYmbm9kZVtkaXJdfHwoZGlmZj1ub2RlSW5kZXg9MCl8fHN0YXJ0LnBvcCgpKSYmKChvZlR5cGU/bm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpIT09bmFtZToxIT09bm9kZS5ub2RlVHlwZSl8fCErK2RpZmZ8fCh1c2VDYWNoZSYmKG91dGVyQ2FjaGU9bm9kZVtleHBhbmRvXXx8KG5vZGVbZXhwYW5kb109e30pLHVuaXF1ZUNhY2hlPW91dGVyQ2FjaGVbbm9kZS51bmlxdWVJRF18fChvdXRlckNhY2hlW25vZGUudW5pcXVlSURdPXt9KSx1bmlxdWVDYWNoZVt0eXBlXT1bZGlycnVucyxkaWZmXSksbm9kZSE9PWVsZW0pKTspO3JldHVybihkaWZmLT1sYXN0KT09PWZpcnN0fHxkaWZmJWZpcnN0PT0wJiZkaWZmL2ZpcnN0Pj0wfX19LFBTRVVETzpmdW5jdGlvbihwc2V1ZG8sYXJndW1lbnQpe3ZhciBhcmdzLGZuPUV4cHIucHNldWRvc1twc2V1ZG9dfHxFeHByLnNldEZpbHRlcnNbcHNldWRvLnRvTG93ZXJDYXNlKCldfHxTaXp6bGUuZXJyb3IoXCJ1bnN1cHBvcnRlZCBwc2V1ZG86IFwiK3BzZXVkbyk7cmV0dXJuIGZuW2V4cGFuZG9dP2ZuKGFyZ3VtZW50KTpmbi5sZW5ndGg+MT8oYXJncz1bcHNldWRvLHBzZXVkbyxcIlwiLGFyZ3VtZW50XSxFeHByLnNldEZpbHRlcnMuaGFzT3duUHJvcGVydHkocHNldWRvLnRvTG93ZXJDYXNlKCkpP21hcmtGdW5jdGlvbihmdW5jdGlvbihzZWVkLG1hdGNoZXMpe2Zvcih2YXIgaWR4LG1hdGNoZWQ9Zm4oc2VlZCxhcmd1bWVudCksaT1tYXRjaGVkLmxlbmd0aDtpLS07KWlkeD1pbmRleE9mKHNlZWQsbWF0Y2hlZFtpXSksc2VlZFtpZHhdPSEobWF0Y2hlc1tpZHhdPW1hdGNoZWRbaV0pfSk6ZnVuY3Rpb24oZWxlbSl7cmV0dXJuIGZuKGVsZW0sMCxhcmdzKX0pOmZufX0scHNldWRvczp7bm90Om1hcmtGdW5jdGlvbihmdW5jdGlvbihzZWxlY3Rvcil7dmFyIGlucHV0PVtdLHJlc3VsdHM9W10sbWF0Y2hlcj1jb21waWxlKHNlbGVjdG9yLnJlcGxhY2UocnRyaW0sXCIkMVwiKSk7cmV0dXJuIG1hdGNoZXJbZXhwYW5kb10/bWFya0Z1bmN0aW9uKGZ1bmN0aW9uKHNlZWQsbWF0Y2hlcyxjb250ZXh0LHhtbCl7Zm9yKHZhciBlbGVtLHVubWF0Y2hlZD1tYXRjaGVyKHNlZWQsbnVsbCx4bWwsW10pLGk9c2VlZC5sZW5ndGg7aS0tOykoZWxlbT11bm1hdGNoZWRbaV0pJiYoc2VlZFtpXT0hKG1hdGNoZXNbaV09ZWxlbSkpfSk6ZnVuY3Rpb24oZWxlbSxjb250ZXh0LHhtbCl7cmV0dXJuIGlucHV0WzBdPWVsZW0sbWF0Y2hlcihpbnB1dCxudWxsLHhtbCxyZXN1bHRzKSxpbnB1dFswXT1udWxsLCFyZXN1bHRzLnBvcCgpfX0pLGhhczptYXJrRnVuY3Rpb24oZnVuY3Rpb24oc2VsZWN0b3Ipe3JldHVybiBmdW5jdGlvbihlbGVtKXtyZXR1cm4gU2l6emxlKHNlbGVjdG9yLGVsZW0pLmxlbmd0aD4wfX0pLGNvbnRhaW5zOm1hcmtGdW5jdGlvbihmdW5jdGlvbih0ZXh0KXtyZXR1cm4gdGV4dD10ZXh0LnJlcGxhY2UocnVuZXNjYXBlLGZ1bmVzY2FwZSksZnVuY3Rpb24oZWxlbSl7cmV0dXJuKGVsZW0udGV4dENvbnRlbnR8fGdldFRleHQoZWxlbSkpLmluZGV4T2YodGV4dCk+LTF9fSksbGFuZzptYXJrRnVuY3Rpb24oZnVuY3Rpb24obGFuZyl7cmV0dXJuIHJpZGVudGlmaWVyLnRlc3QobGFuZ3x8XCJcIil8fFNpenpsZS5lcnJvcihcInVuc3VwcG9ydGVkIGxhbmc6IFwiK2xhbmcpLGxhbmc9bGFuZy5yZXBsYWNlKHJ1bmVzY2FwZSxmdW5lc2NhcGUpLnRvTG93ZXJDYXNlKCksZnVuY3Rpb24oZWxlbSl7dmFyIGVsZW1MYW5nO2Rve2lmKGVsZW1MYW5nPWRvY3VtZW50SXNIVE1MP2VsZW0ubGFuZzplbGVtLmdldEF0dHJpYnV0ZShcInhtbDpsYW5nXCIpfHxlbGVtLmdldEF0dHJpYnV0ZShcImxhbmdcIikpcmV0dXJuKGVsZW1MYW5nPWVsZW1MYW5nLnRvTG93ZXJDYXNlKCkpPT09bGFuZ3x8MD09PWVsZW1MYW5nLmluZGV4T2YobGFuZytcIi1cIil9d2hpbGUoKGVsZW09ZWxlbS5wYXJlbnROb2RlKSYmMT09PWVsZW0ubm9kZVR5cGUpO3JldHVybiExfX0pLHRhcmdldDpmdW5jdGlvbihlbGVtKXt2YXIgaGFzaD13aW5kb3cubG9jYXRpb24mJndpbmRvdy5sb2NhdGlvbi5oYXNoO3JldHVybiBoYXNoJiZoYXNoLnNsaWNlKDEpPT09ZWxlbS5pZH0scm9vdDpmdW5jdGlvbihlbGVtKXtyZXR1cm4gZWxlbT09PWRvY0VsZW19LGZvY3VzOmZ1bmN0aW9uKGVsZW0pe3JldHVybiBlbGVtPT09ZG9jdW1lbnQuYWN0aXZlRWxlbWVudCYmKCFkb2N1bWVudC5oYXNGb2N1c3x8ZG9jdW1lbnQuaGFzRm9jdXMoKSkmJiEhKGVsZW0udHlwZXx8ZWxlbS5ocmVmfHx+ZWxlbS50YWJJbmRleCl9LGVuYWJsZWQ6Y3JlYXRlRGlzYWJsZWRQc2V1ZG8oITEpLGRpc2FibGVkOmNyZWF0ZURpc2FibGVkUHNldWRvKCEwKSxjaGVja2VkOmZ1bmN0aW9uKGVsZW0pe3ZhciBub2RlTmFtZT1lbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09bm9kZU5hbWUmJiEhZWxlbS5jaGVja2VkfHxcIm9wdGlvblwiPT09bm9kZU5hbWUmJiEhZWxlbS5zZWxlY3RlZH0sc2VsZWN0ZWQ6ZnVuY3Rpb24oZWxlbSl7cmV0dXJuIGVsZW0ucGFyZW50Tm9kZSYmZWxlbS5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXgsITA9PT1lbGVtLnNlbGVjdGVkfSxlbXB0eTpmdW5jdGlvbihlbGVtKXtmb3IoZWxlbT1lbGVtLmZpcnN0Q2hpbGQ7ZWxlbTtlbGVtPWVsZW0ubmV4dFNpYmxpbmcpaWYoZWxlbS5ub2RlVHlwZTw2KXJldHVybiExO3JldHVybiEwfSxwYXJlbnQ6ZnVuY3Rpb24oZWxlbSl7cmV0dXJuIUV4cHIucHNldWRvcy5lbXB0eShlbGVtKX0saGVhZGVyOmZ1bmN0aW9uKGVsZW0pe3JldHVybiByaGVhZGVyLnRlc3QoZWxlbS5ub2RlTmFtZSl9LGlucHV0OmZ1bmN0aW9uKGVsZW0pe3JldHVybiByaW5wdXRzLnRlc3QoZWxlbS5ub2RlTmFtZSl9LGJ1dHRvbjpmdW5jdGlvbihlbGVtKXt2YXIgbmFtZT1lbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09bmFtZSYmXCJidXR0b25cIj09PWVsZW0udHlwZXx8XCJidXR0b25cIj09PW5hbWV9LHRleHQ6ZnVuY3Rpb24oZWxlbSl7dmFyIGF0dHI7cmV0dXJuXCJpbnB1dFwiPT09ZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpJiZcInRleHRcIj09PWVsZW0udHlwZSYmKG51bGw9PShhdHRyPWVsZW0uZ2V0QXR0cmlidXRlKFwidHlwZVwiKSl8fFwidGV4dFwiPT09YXR0ci50b0xvd2VyQ2FzZSgpKX0sZmlyc3Q6Y3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbigpe3JldHVyblswXX0pLGxhc3Q6Y3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbihtYXRjaEluZGV4ZXMsbGVuZ3RoKXtyZXR1cm5bbGVuZ3RoLTFdfSksZXE6Y3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbihtYXRjaEluZGV4ZXMsbGVuZ3RoLGFyZ3VtZW50KXtyZXR1cm5bYXJndW1lbnQ8MD9hcmd1bWVudCtsZW5ndGg6YXJndW1lbnRdfSksZXZlbjpjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKG1hdGNoSW5kZXhlcyxsZW5ndGgpe2Zvcih2YXIgaT0wO2k8bGVuZ3RoO2krPTIpbWF0Y2hJbmRleGVzLnB1c2goaSk7cmV0dXJuIG1hdGNoSW5kZXhlc30pLG9kZDpjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKG1hdGNoSW5kZXhlcyxsZW5ndGgpe2Zvcih2YXIgaT0xO2k8bGVuZ3RoO2krPTIpbWF0Y2hJbmRleGVzLnB1c2goaSk7cmV0dXJuIG1hdGNoSW5kZXhlc30pLGx0OmNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24obWF0Y2hJbmRleGVzLGxlbmd0aCxhcmd1bWVudCl7Zm9yKHZhciBpPWFyZ3VtZW50PDA/YXJndW1lbnQrbGVuZ3RoOmFyZ3VtZW50Pmxlbmd0aD9sZW5ndGg6YXJndW1lbnQ7LS1pPj0wOyltYXRjaEluZGV4ZXMucHVzaChpKTtyZXR1cm4gbWF0Y2hJbmRleGVzfSksZ3Q6Y3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbihtYXRjaEluZGV4ZXMsbGVuZ3RoLGFyZ3VtZW50KXtmb3IodmFyIGk9YXJndW1lbnQ8MD9hcmd1bWVudCtsZW5ndGg6YXJndW1lbnQ7KytpPGxlbmd0aDspbWF0Y2hJbmRleGVzLnB1c2goaSk7cmV0dXJuIG1hdGNoSW5kZXhlc30pfX0sRXhwci5wc2V1ZG9zLm50aD1FeHByLnBzZXVkb3MuZXE7Zm9yKGkgaW57cmFkaW86ITAsY2hlY2tib3g6ITAsZmlsZTohMCxwYXNzd29yZDohMCxpbWFnZTohMH0pRXhwci5wc2V1ZG9zW2ldPWZ1bmN0aW9uKHR5cGUpe3JldHVybiBmdW5jdGlvbihlbGVtKXtyZXR1cm5cImlucHV0XCI9PT1lbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkmJmVsZW0udHlwZT09PXR5cGV9fShpKTtmb3IoaSBpbntzdWJtaXQ6ITAscmVzZXQ6ITB9KUV4cHIucHNldWRvc1tpXT1mdW5jdGlvbih0eXBlKXtyZXR1cm4gZnVuY3Rpb24oZWxlbSl7dmFyIG5hbWU9ZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybihcImlucHV0XCI9PT1uYW1lfHxcImJ1dHRvblwiPT09bmFtZSkmJmVsZW0udHlwZT09PXR5cGV9fShpKTtyZXR1cm4gc2V0RmlsdGVycy5wcm90b3R5cGU9RXhwci5maWx0ZXJzPUV4cHIucHNldWRvcyxFeHByLnNldEZpbHRlcnM9bmV3IHNldEZpbHRlcnMsdG9rZW5pemU9U2l6emxlLnRva2VuaXplPWZ1bmN0aW9uKHNlbGVjdG9yLHBhcnNlT25seSl7dmFyIG1hdGNoZWQsbWF0Y2gsdG9rZW5zLHR5cGUsc29GYXIsZ3JvdXBzLHByZUZpbHRlcnMsY2FjaGVkPXRva2VuQ2FjaGVbc2VsZWN0b3IrXCIgXCJdO2lmKGNhY2hlZClyZXR1cm4gcGFyc2VPbmx5PzA6Y2FjaGVkLnNsaWNlKDApO2Zvcihzb0Zhcj1zZWxlY3Rvcixncm91cHM9W10scHJlRmlsdGVycz1FeHByLnByZUZpbHRlcjtzb0Zhcjspe21hdGNoZWQmJiEobWF0Y2g9cmNvbW1hLmV4ZWMoc29GYXIpKXx8KG1hdGNoJiYoc29GYXI9c29GYXIuc2xpY2UobWF0Y2hbMF0ubGVuZ3RoKXx8c29GYXIpLGdyb3Vwcy5wdXNoKHRva2Vucz1bXSkpLG1hdGNoZWQ9ITEsKG1hdGNoPXJjb21iaW5hdG9ycy5leGVjKHNvRmFyKSkmJihtYXRjaGVkPW1hdGNoLnNoaWZ0KCksdG9rZW5zLnB1c2goe3ZhbHVlOm1hdGNoZWQsdHlwZTptYXRjaFswXS5yZXBsYWNlKHJ0cmltLFwiIFwiKX0pLHNvRmFyPXNvRmFyLnNsaWNlKG1hdGNoZWQubGVuZ3RoKSk7Zm9yKHR5cGUgaW4gRXhwci5maWx0ZXIpIShtYXRjaD1tYXRjaEV4cHJbdHlwZV0uZXhlYyhzb0ZhcikpfHxwcmVGaWx0ZXJzW3R5cGVdJiYhKG1hdGNoPXByZUZpbHRlcnNbdHlwZV0obWF0Y2gpKXx8KG1hdGNoZWQ9bWF0Y2guc2hpZnQoKSx0b2tlbnMucHVzaCh7dmFsdWU6bWF0Y2hlZCx0eXBlOnR5cGUsbWF0Y2hlczptYXRjaH0pLHNvRmFyPXNvRmFyLnNsaWNlKG1hdGNoZWQubGVuZ3RoKSk7aWYoIW1hdGNoZWQpYnJlYWt9cmV0dXJuIHBhcnNlT25seT9zb0Zhci5sZW5ndGg6c29GYXI/U2l6emxlLmVycm9yKHNlbGVjdG9yKTp0b2tlbkNhY2hlKHNlbGVjdG9yLGdyb3Vwcykuc2xpY2UoMCl9LGNvbXBpbGU9U2l6emxlLmNvbXBpbGU9ZnVuY3Rpb24oc2VsZWN0b3IsbWF0Y2gpe3ZhciBpLHNldE1hdGNoZXJzPVtdLGVsZW1lbnRNYXRjaGVycz1bXSxjYWNoZWQ9Y29tcGlsZXJDYWNoZVtzZWxlY3RvcitcIiBcIl07aWYoIWNhY2hlZCl7Zm9yKG1hdGNofHwobWF0Y2g9dG9rZW5pemUoc2VsZWN0b3IpKSxpPW1hdGNoLmxlbmd0aDtpLS07KWNhY2hlZD1tYXRjaGVyRnJvbVRva2VucyhtYXRjaFtpXSksY2FjaGVkW2V4cGFuZG9dP3NldE1hdGNoZXJzLnB1c2goY2FjaGVkKTplbGVtZW50TWF0Y2hlcnMucHVzaChjYWNoZWQpO2NhY2hlZD1jb21waWxlckNhY2hlKHNlbGVjdG9yLG1hdGNoZXJGcm9tR3JvdXBNYXRjaGVycyhlbGVtZW50TWF0Y2hlcnMsc2V0TWF0Y2hlcnMpKSxjYWNoZWQuc2VsZWN0b3I9c2VsZWN0b3J9cmV0dXJuIGNhY2hlZH0sc2VsZWN0PVNpenpsZS5zZWxlY3Q9ZnVuY3Rpb24oc2VsZWN0b3IsY29udGV4dCxyZXN1bHRzLHNlZWQpe3ZhciBpLHRva2Vucyx0b2tlbix0eXBlLGZpbmQsY29tcGlsZWQ9XCJmdW5jdGlvblwiPT10eXBlb2Ygc2VsZWN0b3ImJnNlbGVjdG9yLG1hdGNoPSFzZWVkJiZ0b2tlbml6ZShzZWxlY3Rvcj1jb21waWxlZC5zZWxlY3Rvcnx8c2VsZWN0b3IpO2lmKHJlc3VsdHM9cmVzdWx0c3x8W10sMT09PW1hdGNoLmxlbmd0aCl7aWYodG9rZW5zPW1hdGNoWzBdPW1hdGNoWzBdLnNsaWNlKDApLHRva2Vucy5sZW5ndGg+MiYmXCJJRFwiPT09KHRva2VuPXRva2Vuc1swXSkudHlwZSYmOT09PWNvbnRleHQubm9kZVR5cGUmJmRvY3VtZW50SXNIVE1MJiZFeHByLnJlbGF0aXZlW3Rva2Vuc1sxXS50eXBlXSl7aWYoIShjb250ZXh0PShFeHByLmZpbmQuSUQodG9rZW4ubWF0Y2hlc1swXS5yZXBsYWNlKHJ1bmVzY2FwZSxmdW5lc2NhcGUpLGNvbnRleHQpfHxbXSlbMF0pKXJldHVybiByZXN1bHRzO2NvbXBpbGVkJiYoY29udGV4dD1jb250ZXh0LnBhcmVudE5vZGUpLHNlbGVjdG9yPXNlbGVjdG9yLnNsaWNlKHRva2Vucy5zaGlmdCgpLnZhbHVlLmxlbmd0aCl9Zm9yKGk9bWF0Y2hFeHByLm5lZWRzQ29udGV4dC50ZXN0KHNlbGVjdG9yKT8wOnRva2Vucy5sZW5ndGg7aS0tJiYodG9rZW49dG9rZW5zW2ldLCFFeHByLnJlbGF0aXZlW3R5cGU9dG9rZW4udHlwZV0pOylpZigoZmluZD1FeHByLmZpbmRbdHlwZV0pJiYoc2VlZD1maW5kKHRva2VuLm1hdGNoZXNbMF0ucmVwbGFjZShydW5lc2NhcGUsZnVuZXNjYXBlKSxyc2libGluZy50ZXN0KHRva2Vuc1swXS50eXBlKSYmdGVzdENvbnRleHQoY29udGV4dC5wYXJlbnROb2RlKXx8Y29udGV4dCkpKXtpZih0b2tlbnMuc3BsaWNlKGksMSksIShzZWxlY3Rvcj1zZWVkLmxlbmd0aCYmdG9TZWxlY3Rvcih0b2tlbnMpKSlyZXR1cm4gcHVzaC5hcHBseShyZXN1bHRzLHNlZWQpLHJlc3VsdHM7YnJlYWt9fXJldHVybihjb21waWxlZHx8Y29tcGlsZShzZWxlY3RvcixtYXRjaCkpKHNlZWQsY29udGV4dCwhZG9jdW1lbnRJc0hUTUwscmVzdWx0cywhY29udGV4dHx8cnNpYmxpbmcudGVzdChzZWxlY3RvcikmJnRlc3RDb250ZXh0KGNvbnRleHQucGFyZW50Tm9kZSl8fGNvbnRleHQpLHJlc3VsdHN9LHN1cHBvcnQuc29ydFN0YWJsZT1leHBhbmRvLnNwbGl0KFwiXCIpLnNvcnQoc29ydE9yZGVyKS5qb2luKFwiXCIpPT09ZXhwYW5kbyxzdXBwb3J0LmRldGVjdER1cGxpY2F0ZXM9ISFoYXNEdXBsaWNhdGUsc2V0RG9jdW1lbnQoKSxzdXBwb3J0LnNvcnREZXRhY2hlZD1hc3NlcnQoZnVuY3Rpb24oZWwpe3JldHVybiAxJmVsLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmaWVsZHNldFwiKSl9KSxhc3NlcnQoZnVuY3Rpb24oZWwpe3JldHVybiBlbC5pbm5lckhUTUw9XCI8YSBocmVmPScjJz48L2E+XCIsXCIjXCI9PT1lbC5maXJzdENoaWxkLmdldEF0dHJpYnV0ZShcImhyZWZcIil9KXx8YWRkSGFuZGxlKFwidHlwZXxocmVmfGhlaWdodHx3aWR0aFwiLGZ1bmN0aW9uKGVsZW0sbmFtZSxpc1hNTCl7aWYoIWlzWE1MKXJldHVybiBlbGVtLmdldEF0dHJpYnV0ZShuYW1lLFwidHlwZVwiPT09bmFtZS50b0xvd2VyQ2FzZSgpPzE6Mil9KSxzdXBwb3J0LmF0dHJpYnV0ZXMmJmFzc2VydChmdW5jdGlvbihlbCl7cmV0dXJuIGVsLmlubmVySFRNTD1cIjxpbnB1dC8+XCIsZWwuZmlyc3RDaGlsZC5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLFwiXCIpLFwiXCI9PT1lbC5maXJzdENoaWxkLmdldEF0dHJpYnV0ZShcInZhbHVlXCIpfSl8fGFkZEhhbmRsZShcInZhbHVlXCIsZnVuY3Rpb24oZWxlbSxuYW1lLGlzWE1MKXtpZighaXNYTUwmJlwiaW5wdXRcIj09PWVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSlyZXR1cm4gZWxlbS5kZWZhdWx0VmFsdWV9KSxhc3NlcnQoZnVuY3Rpb24oZWwpe3JldHVybiBudWxsPT1lbC5nZXRBdHRyaWJ1dGUoXCJkaXNhYmxlZFwiKX0pfHxhZGRIYW5kbGUoYm9vbGVhbnMsZnVuY3Rpb24oZWxlbSxuYW1lLGlzWE1MKXt2YXIgdmFsO2lmKCFpc1hNTClyZXR1cm4hMD09PWVsZW1bbmFtZV0/bmFtZS50b0xvd2VyQ2FzZSgpOih2YWw9ZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKG5hbWUpKSYmdmFsLnNwZWNpZmllZD92YWwudmFsdWU6bnVsbH0pLFNpenpsZX0od2luZG93KTtqUXVlcnkuZmluZD1TaXp6bGUsalF1ZXJ5LmV4cHI9U2l6emxlLnNlbGVjdG9ycyxqUXVlcnkuZXhwcltcIjpcIl09alF1ZXJ5LmV4cHIucHNldWRvcyxqUXVlcnkudW5pcXVlU29ydD1qUXVlcnkudW5pcXVlPVNpenpsZS51bmlxdWVTb3J0LGpRdWVyeS50ZXh0PVNpenpsZS5nZXRUZXh0LGpRdWVyeS5pc1hNTERvYz1TaXp6bGUuaXNYTUwsalF1ZXJ5LmNvbnRhaW5zPVNpenpsZS5jb250YWlucyxqUXVlcnkuZXNjYXBlU2VsZWN0b3I9U2l6emxlLmVzY2FwZTt2YXIgZGlyPWZ1bmN0aW9uKGVsZW0sZGlyLHVudGlsKXtmb3IodmFyIG1hdGNoZWQ9W10sdHJ1bmNhdGU9dm9pZCAwIT09dW50aWw7KGVsZW09ZWxlbVtkaXJdKSYmOSE9PWVsZW0ubm9kZVR5cGU7KWlmKDE9PT1lbGVtLm5vZGVUeXBlKXtpZih0cnVuY2F0ZSYmalF1ZXJ5KGVsZW0pLmlzKHVudGlsKSlicmVhazttYXRjaGVkLnB1c2goZWxlbSl9cmV0dXJuIG1hdGNoZWR9LHNpYmxpbmdzPWZ1bmN0aW9uKG4sZWxlbSl7Zm9yKHZhciBtYXRjaGVkPVtdO247bj1uLm5leHRTaWJsaW5nKTE9PT1uLm5vZGVUeXBlJiZuIT09ZWxlbSYmbWF0Y2hlZC5wdXNoKG4pO3JldHVybiBtYXRjaGVkfSxybmVlZHNDb250ZXh0PWpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dCxyc2luZ2xlVGFnPS9ePChbYS16XVteXFwvXFwwPjpcXHgyMFxcdFxcclxcblxcZl0qKVtcXHgyMFxcdFxcclxcblxcZl0qXFwvPz4oPzo8XFwvXFwxPnwpJC9pO2pRdWVyeS5maWx0ZXI9ZnVuY3Rpb24oZXhwcixlbGVtcyxub3Qpe3ZhciBlbGVtPWVsZW1zWzBdO3JldHVybiBub3QmJihleHByPVwiOm5vdChcIitleHByK1wiKVwiKSwxPT09ZWxlbXMubGVuZ3RoJiYxPT09ZWxlbS5ub2RlVHlwZT9qUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoZWxlbSxleHByKT9bZWxlbV06W106alF1ZXJ5LmZpbmQubWF0Y2hlcyhleHByLGpRdWVyeS5ncmVwKGVsZW1zLGZ1bmN0aW9uKGVsZW0pe3JldHVybiAxPT09ZWxlbS5ub2RlVHlwZX0pKX0salF1ZXJ5LmZuLmV4dGVuZCh7ZmluZDpmdW5jdGlvbihzZWxlY3Rvcil7dmFyIGkscmV0LGxlbj10aGlzLmxlbmd0aCxzZWxmPXRoaXM7aWYoXCJzdHJpbmdcIiE9dHlwZW9mIHNlbGVjdG9yKXJldHVybiB0aGlzLnB1c2hTdGFjayhqUXVlcnkoc2VsZWN0b3IpLmZpbHRlcihmdW5jdGlvbigpe2ZvcihpPTA7aTxsZW47aSsrKWlmKGpRdWVyeS5jb250YWlucyhzZWxmW2ldLHRoaXMpKXJldHVybiEwfSkpO2ZvcihyZXQ9dGhpcy5wdXNoU3RhY2soW10pLGk9MDtpPGxlbjtpKyspalF1ZXJ5LmZpbmQoc2VsZWN0b3Isc2VsZltpXSxyZXQpO3JldHVybiBsZW4+MT9qUXVlcnkudW5pcXVlU29ydChyZXQpOnJldH0sZmlsdGVyOmZ1bmN0aW9uKHNlbGVjdG9yKXtyZXR1cm4gdGhpcy5wdXNoU3RhY2sod2lubm93KHRoaXMsc2VsZWN0b3J8fFtdLCExKSl9LG5vdDpmdW5jdGlvbihzZWxlY3Rvcil7cmV0dXJuIHRoaXMucHVzaFN0YWNrKHdpbm5vdyh0aGlzLHNlbGVjdG9yfHxbXSwhMCkpfSxpczpmdW5jdGlvbihzZWxlY3Rvcil7cmV0dXJuISF3aW5ub3codGhpcyxcInN0cmluZ1wiPT10eXBlb2Ygc2VsZWN0b3ImJnJuZWVkc0NvbnRleHQudGVzdChzZWxlY3Rvcik/alF1ZXJ5KHNlbGVjdG9yKTpzZWxlY3Rvcnx8W10sITEpLmxlbmd0aH19KTt2YXIgcm9vdGpRdWVyeSxycXVpY2tFeHByPS9eKD86XFxzKig8W1xcd1xcV10rPilbXj5dKnwjKFtcXHctXSspKSQvOyhqUXVlcnkuZm4uaW5pdD1mdW5jdGlvbihzZWxlY3Rvcixjb250ZXh0LHJvb3Qpe3ZhciBtYXRjaCxlbGVtO2lmKCFzZWxlY3RvcilyZXR1cm4gdGhpcztpZihyb290PXJvb3R8fHJvb3RqUXVlcnksXCJzdHJpbmdcIj09dHlwZW9mIHNlbGVjdG9yKXtpZighKG1hdGNoPVwiPFwiPT09c2VsZWN0b3JbMF0mJlwiPlwiPT09c2VsZWN0b3Jbc2VsZWN0b3IubGVuZ3RoLTFdJiZzZWxlY3Rvci5sZW5ndGg+PTM/W251bGwsc2VsZWN0b3IsbnVsbF06cnF1aWNrRXhwci5leGVjKHNlbGVjdG9yKSl8fCFtYXRjaFsxXSYmY29udGV4dClyZXR1cm4hY29udGV4dHx8Y29udGV4dC5qcXVlcnk/KGNvbnRleHR8fHJvb3QpLmZpbmQoc2VsZWN0b3IpOnRoaXMuY29uc3RydWN0b3IoY29udGV4dCkuZmluZChzZWxlY3Rvcik7aWYobWF0Y2hbMV0pe2lmKGNvbnRleHQ9Y29udGV4dCBpbnN0YW5jZW9mIGpRdWVyeT9jb250ZXh0WzBdOmNvbnRleHQsalF1ZXJ5Lm1lcmdlKHRoaXMsalF1ZXJ5LnBhcnNlSFRNTChtYXRjaFsxXSxjb250ZXh0JiZjb250ZXh0Lm5vZGVUeXBlP2NvbnRleHQub3duZXJEb2N1bWVudHx8Y29udGV4dDpkb2N1bWVudCwhMCkpLHJzaW5nbGVUYWcudGVzdChtYXRjaFsxXSkmJmpRdWVyeS5pc1BsYWluT2JqZWN0KGNvbnRleHQpKWZvcihtYXRjaCBpbiBjb250ZXh0KWlzRnVuY3Rpb24odGhpc1ttYXRjaF0pP3RoaXNbbWF0Y2hdKGNvbnRleHRbbWF0Y2hdKTp0aGlzLmF0dHIobWF0Y2gsY29udGV4dFttYXRjaF0pO3JldHVybiB0aGlzfXJldHVybiBlbGVtPWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKG1hdGNoWzJdKSxlbGVtJiYodGhpc1swXT1lbGVtLHRoaXMubGVuZ3RoPTEpLHRoaXN9cmV0dXJuIHNlbGVjdG9yLm5vZGVUeXBlPyh0aGlzWzBdPXNlbGVjdG9yLHRoaXMubGVuZ3RoPTEsdGhpcyk6aXNGdW5jdGlvbihzZWxlY3Rvcik/dm9pZCAwIT09cm9vdC5yZWFkeT9yb290LnJlYWR5KHNlbGVjdG9yKTpzZWxlY3RvcihqUXVlcnkpOmpRdWVyeS5tYWtlQXJyYXkoc2VsZWN0b3IsdGhpcyl9KS5wcm90b3R5cGU9alF1ZXJ5LmZuLHJvb3RqUXVlcnk9alF1ZXJ5KGRvY3VtZW50KTt2YXIgcnBhcmVudHNwcmV2PS9eKD86cGFyZW50c3xwcmV2KD86VW50aWx8QWxsKSkvLGd1YXJhbnRlZWRVbmlxdWU9e2NoaWxkcmVuOiEwLGNvbnRlbnRzOiEwLG5leHQ6ITAscHJldjohMH07alF1ZXJ5LmZuLmV4dGVuZCh7aGFzOmZ1bmN0aW9uKHRhcmdldCl7dmFyIHRhcmdldHM9alF1ZXJ5KHRhcmdldCx0aGlzKSxsPXRhcmdldHMubGVuZ3RoO3JldHVybiB0aGlzLmZpbHRlcihmdW5jdGlvbigpe2Zvcih2YXIgaT0wO2k8bDtpKyspaWYoalF1ZXJ5LmNvbnRhaW5zKHRoaXMsdGFyZ2V0c1tpXSkpcmV0dXJuITB9KX0sY2xvc2VzdDpmdW5jdGlvbihzZWxlY3RvcnMsY29udGV4dCl7dmFyIGN1cixpPTAsbD10aGlzLmxlbmd0aCxtYXRjaGVkPVtdLHRhcmdldHM9XCJzdHJpbmdcIiE9dHlwZW9mIHNlbGVjdG9ycyYmalF1ZXJ5KHNlbGVjdG9ycyk7aWYoIXJuZWVkc0NvbnRleHQudGVzdChzZWxlY3RvcnMpKWZvcig7aTxsO2krKylmb3IoY3VyPXRoaXNbaV07Y3VyJiZjdXIhPT1jb250ZXh0O2N1cj1jdXIucGFyZW50Tm9kZSlpZihjdXIubm9kZVR5cGU8MTEmJih0YXJnZXRzP3RhcmdldHMuaW5kZXgoY3VyKT4tMToxPT09Y3VyLm5vZGVUeXBlJiZqUXVlcnkuZmluZC5tYXRjaGVzU2VsZWN0b3IoY3VyLHNlbGVjdG9ycykpKXttYXRjaGVkLnB1c2goY3VyKTticmVha31yZXR1cm4gdGhpcy5wdXNoU3RhY2sobWF0Y2hlZC5sZW5ndGg+MT9qUXVlcnkudW5pcXVlU29ydChtYXRjaGVkKTptYXRjaGVkKX0saW5kZXg6ZnVuY3Rpb24oZWxlbSl7cmV0dXJuIGVsZW0/XCJzdHJpbmdcIj09dHlwZW9mIGVsZW0/aW5kZXhPZi5jYWxsKGpRdWVyeShlbGVtKSx0aGlzWzBdKTppbmRleE9mLmNhbGwodGhpcyxlbGVtLmpxdWVyeT9lbGVtWzBdOmVsZW0pOnRoaXNbMF0mJnRoaXNbMF0ucGFyZW50Tm9kZT90aGlzLmZpcnN0KCkucHJldkFsbCgpLmxlbmd0aDotMX0sYWRkOmZ1bmN0aW9uKHNlbGVjdG9yLGNvbnRleHQpe3JldHVybiB0aGlzLnB1c2hTdGFjayhqUXVlcnkudW5pcXVlU29ydChqUXVlcnkubWVyZ2UodGhpcy5nZXQoKSxqUXVlcnkoc2VsZWN0b3IsY29udGV4dCkpKSl9LGFkZEJhY2s6ZnVuY3Rpb24oc2VsZWN0b3Ipe3JldHVybiB0aGlzLmFkZChudWxsPT1zZWxlY3Rvcj90aGlzLnByZXZPYmplY3Q6dGhpcy5wcmV2T2JqZWN0LmZpbHRlcihzZWxlY3RvcikpfX0pLGpRdWVyeS5lYWNoKHtwYXJlbnQ6ZnVuY3Rpb24oZWxlbSl7dmFyIHBhcmVudD1lbGVtLnBhcmVudE5vZGU7cmV0dXJuIHBhcmVudCYmMTEhPT1wYXJlbnQubm9kZVR5cGU/cGFyZW50Om51bGx9LHBhcmVudHM6ZnVuY3Rpb24oZWxlbSl7cmV0dXJuIGRpcihlbGVtLFwicGFyZW50Tm9kZVwiKX0scGFyZW50c1VudGlsOmZ1bmN0aW9uKGVsZW0saSx1bnRpbCl7cmV0dXJuIGRpcihlbGVtLFwicGFyZW50Tm9kZVwiLHVudGlsKX0sbmV4dDpmdW5jdGlvbihlbGVtKXtyZXR1cm4gc2libGluZyhlbGVtLFwibmV4dFNpYmxpbmdcIil9LHByZXY6ZnVuY3Rpb24oZWxlbSl7cmV0dXJuIHNpYmxpbmcoZWxlbSxcInByZXZpb3VzU2libGluZ1wiKX0sbmV4dEFsbDpmdW5jdGlvbihlbGVtKXtyZXR1cm4gZGlyKGVsZW0sXCJuZXh0U2libGluZ1wiKX0scHJldkFsbDpmdW5jdGlvbihlbGVtKXtyZXR1cm4gZGlyKGVsZW0sXCJwcmV2aW91c1NpYmxpbmdcIil9LG5leHRVbnRpbDpmdW5jdGlvbihlbGVtLGksdW50aWwpe3JldHVybiBkaXIoZWxlbSxcIm5leHRTaWJsaW5nXCIsdW50aWwpfSxwcmV2VW50aWw6ZnVuY3Rpb24oZWxlbSxpLHVudGlsKXtyZXR1cm4gZGlyKGVsZW0sXCJwcmV2aW91c1NpYmxpbmdcIix1bnRpbCl9LHNpYmxpbmdzOmZ1bmN0aW9uKGVsZW0pe3JldHVybiBzaWJsaW5ncygoZWxlbS5wYXJlbnROb2RlfHx7fSkuZmlyc3RDaGlsZCxlbGVtKX0sY2hpbGRyZW46ZnVuY3Rpb24oZWxlbSl7cmV0dXJuIHNpYmxpbmdzKGVsZW0uZmlyc3RDaGlsZCl9LGNvbnRlbnRzOmZ1bmN0aW9uKGVsZW0pe3JldHVybiB2b2lkIDAhPT1lbGVtLmNvbnRlbnREb2N1bWVudD9lbGVtLmNvbnRlbnREb2N1bWVudDoobm9kZU5hbWUoZWxlbSxcInRlbXBsYXRlXCIpJiYoZWxlbT1lbGVtLmNvbnRlbnR8fGVsZW0pLGpRdWVyeS5tZXJnZShbXSxlbGVtLmNoaWxkTm9kZXMpKX19LGZ1bmN0aW9uKG5hbWUsZm4pe2pRdWVyeS5mbltuYW1lXT1mdW5jdGlvbih1bnRpbCxzZWxlY3Rvcil7dmFyIG1hdGNoZWQ9alF1ZXJ5Lm1hcCh0aGlzLGZuLHVudGlsKTtyZXR1cm5cIlVudGlsXCIhPT1uYW1lLnNsaWNlKC01KSYmKHNlbGVjdG9yPXVudGlsKSxzZWxlY3RvciYmXCJzdHJpbmdcIj09dHlwZW9mIHNlbGVjdG9yJiYobWF0Y2hlZD1qUXVlcnkuZmlsdGVyKHNlbGVjdG9yLG1hdGNoZWQpKSx0aGlzLmxlbmd0aD4xJiYoZ3VhcmFudGVlZFVuaXF1ZVtuYW1lXXx8alF1ZXJ5LnVuaXF1ZVNvcnQobWF0Y2hlZCkscnBhcmVudHNwcmV2LnRlc3QobmFtZSkmJm1hdGNoZWQucmV2ZXJzZSgpKSx0aGlzLnB1c2hTdGFjayhtYXRjaGVkKX19KTt2YXIgcm5vdGh0bWx3aGl0ZT0vW15cXHgyMFxcdFxcclxcblxcZl0rL2c7alF1ZXJ5LkNhbGxiYWNrcz1mdW5jdGlvbihvcHRpb25zKXtvcHRpb25zPVwic3RyaW5nXCI9PXR5cGVvZiBvcHRpb25zP2NyZWF0ZU9wdGlvbnMob3B0aW9ucyk6alF1ZXJ5LmV4dGVuZCh7fSxvcHRpb25zKTt2YXIgZmlyaW5nLG1lbW9yeSxmaXJlZCxsb2NrZWQsbGlzdD1bXSxxdWV1ZT1bXSxmaXJpbmdJbmRleD0tMSxmaXJlPWZ1bmN0aW9uKCl7Zm9yKGxvY2tlZD1sb2NrZWR8fG9wdGlvbnMub25jZSxmaXJlZD1maXJpbmc9ITA7cXVldWUubGVuZ3RoO2ZpcmluZ0luZGV4PS0xKWZvcihtZW1vcnk9cXVldWUuc2hpZnQoKTsrK2ZpcmluZ0luZGV4PGxpc3QubGVuZ3RoOykhMT09PWxpc3RbZmlyaW5nSW5kZXhdLmFwcGx5KG1lbW9yeVswXSxtZW1vcnlbMV0pJiZvcHRpb25zLnN0b3BPbkZhbHNlJiYoZmlyaW5nSW5kZXg9bGlzdC5sZW5ndGgsbWVtb3J5PSExKTtvcHRpb25zLm1lbW9yeXx8KG1lbW9yeT0hMSksZmlyaW5nPSExLGxvY2tlZCYmKGxpc3Q9bWVtb3J5P1tdOlwiXCIpfSxzZWxmPXthZGQ6ZnVuY3Rpb24oKXtyZXR1cm4gbGlzdCYmKG1lbW9yeSYmIWZpcmluZyYmKGZpcmluZ0luZGV4PWxpc3QubGVuZ3RoLTEscXVldWUucHVzaChtZW1vcnkpKSxmdW5jdGlvbiBhZGQoYXJncyl7alF1ZXJ5LmVhY2goYXJncyxmdW5jdGlvbihfLGFyZyl7aXNGdW5jdGlvbihhcmcpP29wdGlvbnMudW5pcXVlJiZzZWxmLmhhcyhhcmcpfHxsaXN0LnB1c2goYXJnKTphcmcmJmFyZy5sZW5ndGgmJlwic3RyaW5nXCIhPT10b1R5cGUoYXJnKSYmYWRkKGFyZyl9KX0oYXJndW1lbnRzKSxtZW1vcnkmJiFmaXJpbmcmJmZpcmUoKSksdGhpc30scmVtb3ZlOmZ1bmN0aW9uKCl7cmV0dXJuIGpRdWVyeS5lYWNoKGFyZ3VtZW50cyxmdW5jdGlvbihfLGFyZyl7Zm9yKHZhciBpbmRleDsoaW5kZXg9alF1ZXJ5LmluQXJyYXkoYXJnLGxpc3QsaW5kZXgpKT4tMTspbGlzdC5zcGxpY2UoaW5kZXgsMSksaW5kZXg8PWZpcmluZ0luZGV4JiZmaXJpbmdJbmRleC0tfSksdGhpc30saGFzOmZ1bmN0aW9uKGZuKXtyZXR1cm4gZm4/alF1ZXJ5LmluQXJyYXkoZm4sbGlzdCk+LTE6bGlzdC5sZW5ndGg+MH0sZW1wdHk6ZnVuY3Rpb24oKXtyZXR1cm4gbGlzdCYmKGxpc3Q9W10pLHRoaXN9LGRpc2FibGU6ZnVuY3Rpb24oKXtyZXR1cm4gbG9ja2VkPXF1ZXVlPVtdLGxpc3Q9bWVtb3J5PVwiXCIsdGhpc30sZGlzYWJsZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hbGlzdH0sbG9jazpmdW5jdGlvbigpe3JldHVybiBsb2NrZWQ9cXVldWU9W10sbWVtb3J5fHxmaXJpbmd8fChsaXN0PW1lbW9yeT1cIlwiKSx0aGlzfSxsb2NrZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hIWxvY2tlZH0sZmlyZVdpdGg6ZnVuY3Rpb24oY29udGV4dCxhcmdzKXtyZXR1cm4gbG9ja2VkfHwoYXJncz1hcmdzfHxbXSxhcmdzPVtjb250ZXh0LGFyZ3Muc2xpY2U/YXJncy5zbGljZSgpOmFyZ3NdLHF1ZXVlLnB1c2goYXJncyksZmlyaW5nfHxmaXJlKCkpLHRoaXN9LGZpcmU6ZnVuY3Rpb24oKXtyZXR1cm4gc2VsZi5maXJlV2l0aCh0aGlzLGFyZ3VtZW50cyksdGhpc30sZmlyZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hIWZpcmVkfX07cmV0dXJuIHNlbGZ9LGpRdWVyeS5leHRlbmQoe0RlZmVycmVkOmZ1bmN0aW9uKGZ1bmMpe3ZhciB0dXBsZXM9W1tcIm5vdGlmeVwiLFwicHJvZ3Jlc3NcIixqUXVlcnkuQ2FsbGJhY2tzKFwibWVtb3J5XCIpLGpRdWVyeS5DYWxsYmFja3MoXCJtZW1vcnlcIiksMl0sW1wicmVzb2x2ZVwiLFwiZG9uZVwiLGpRdWVyeS5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKSxqUXVlcnkuQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIiksMCxcInJlc29sdmVkXCJdLFtcInJlamVjdFwiLFwiZmFpbFwiLGpRdWVyeS5DYWxsYmFja3MoXCJvbmNlIG1lbW9yeVwiKSxqUXVlcnkuQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIiksMSxcInJlamVjdGVkXCJdXSxzdGF0ZT1cInBlbmRpbmdcIixwcm9taXNlPXtzdGF0ZTpmdW5jdGlvbigpe3JldHVybiBzdGF0ZX0sYWx3YXlzOmZ1bmN0aW9uKCl7cmV0dXJuIGRlZmVycmVkLmRvbmUoYXJndW1lbnRzKS5mYWlsKGFyZ3VtZW50cyksdGhpc30sY2F0Y2g6ZnVuY3Rpb24oZm4pe3JldHVybiBwcm9taXNlLnRoZW4obnVsbCxmbil9LHBpcGU6ZnVuY3Rpb24oKXt2YXIgZm5zPWFyZ3VtZW50cztyZXR1cm4galF1ZXJ5LkRlZmVycmVkKGZ1bmN0aW9uKG5ld0RlZmVyKXtqUXVlcnkuZWFjaCh0dXBsZXMsZnVuY3Rpb24oaSx0dXBsZSl7dmFyIGZuPWlzRnVuY3Rpb24oZm5zW3R1cGxlWzRdXSkmJmZuc1t0dXBsZVs0XV07ZGVmZXJyZWRbdHVwbGVbMV1dKGZ1bmN0aW9uKCl7dmFyIHJldHVybmVkPWZuJiZmbi5hcHBseSh0aGlzLGFyZ3VtZW50cyk7cmV0dXJuZWQmJmlzRnVuY3Rpb24ocmV0dXJuZWQucHJvbWlzZSk/cmV0dXJuZWQucHJvbWlzZSgpLnByb2dyZXNzKG5ld0RlZmVyLm5vdGlmeSkuZG9uZShuZXdEZWZlci5yZXNvbHZlKS5mYWlsKG5ld0RlZmVyLnJlamVjdCk6bmV3RGVmZXJbdHVwbGVbMF0rXCJXaXRoXCJdKHRoaXMsZm4/W3JldHVybmVkXTphcmd1bWVudHMpfSl9KSxmbnM9bnVsbH0pLnByb21pc2UoKX0sdGhlbjpmdW5jdGlvbihvbkZ1bGZpbGxlZCxvblJlamVjdGVkLG9uUHJvZ3Jlc3Mpe2Z1bmN0aW9uIHJlc29sdmUoZGVwdGgsZGVmZXJyZWQsaGFuZGxlcixzcGVjaWFsKXtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgdGhhdD10aGlzLGFyZ3M9YXJndW1lbnRzLG1pZ2h0VGhyb3c9ZnVuY3Rpb24oKXt2YXIgcmV0dXJuZWQsdGhlbjtpZighKGRlcHRoPG1heERlcHRoKSl7aWYoKHJldHVybmVkPWhhbmRsZXIuYXBwbHkodGhhdCxhcmdzKSk9PT1kZWZlcnJlZC5wcm9taXNlKCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlRoZW5hYmxlIHNlbGYtcmVzb2x1dGlvblwiKTt0aGVuPXJldHVybmVkJiYoXCJvYmplY3RcIj09dHlwZW9mIHJldHVybmVkfHxcImZ1bmN0aW9uXCI9PXR5cGVvZiByZXR1cm5lZCkmJnJldHVybmVkLnRoZW4saXNGdW5jdGlvbih0aGVuKT9zcGVjaWFsP3RoZW4uY2FsbChyZXR1cm5lZCxyZXNvbHZlKG1heERlcHRoLGRlZmVycmVkLElkZW50aXR5LHNwZWNpYWwpLHJlc29sdmUobWF4RGVwdGgsZGVmZXJyZWQsVGhyb3dlcixzcGVjaWFsKSk6KG1heERlcHRoKyssdGhlbi5jYWxsKHJldHVybmVkLHJlc29sdmUobWF4RGVwdGgsZGVmZXJyZWQsSWRlbnRpdHksc3BlY2lhbCkscmVzb2x2ZShtYXhEZXB0aCxkZWZlcnJlZCxUaHJvd2VyLHNwZWNpYWwpLHJlc29sdmUobWF4RGVwdGgsZGVmZXJyZWQsSWRlbnRpdHksZGVmZXJyZWQubm90aWZ5V2l0aCkpKTooaGFuZGxlciE9PUlkZW50aXR5JiYodGhhdD12b2lkIDAsYXJncz1bcmV0dXJuZWRdKSwoc3BlY2lhbHx8ZGVmZXJyZWQucmVzb2x2ZVdpdGgpKHRoYXQsYXJncykpfX0scHJvY2Vzcz1zcGVjaWFsP21pZ2h0VGhyb3c6ZnVuY3Rpb24oKXt0cnl7bWlnaHRUaHJvdygpfWNhdGNoKGUpe2pRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rJiZqUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vayhlLHByb2Nlc3Muc3RhY2tUcmFjZSksZGVwdGgrMT49bWF4RGVwdGgmJihoYW5kbGVyIT09VGhyb3dlciYmKHRoYXQ9dm9pZCAwLGFyZ3M9W2VdKSxkZWZlcnJlZC5yZWplY3RXaXRoKHRoYXQsYXJncykpfX07ZGVwdGg/cHJvY2VzcygpOihqUXVlcnkuRGVmZXJyZWQuZ2V0U3RhY2tIb29rJiYocHJvY2Vzcy5zdGFja1RyYWNlPWpRdWVyeS5EZWZlcnJlZC5nZXRTdGFja0hvb2soKSksd2luZG93LnNldFRpbWVvdXQocHJvY2VzcykpfX12YXIgbWF4RGVwdGg9MDtyZXR1cm4galF1ZXJ5LkRlZmVycmVkKGZ1bmN0aW9uKG5ld0RlZmVyKXt0dXBsZXNbMF1bM10uYWRkKHJlc29sdmUoMCxuZXdEZWZlcixpc0Z1bmN0aW9uKG9uUHJvZ3Jlc3MpP29uUHJvZ3Jlc3M6SWRlbnRpdHksbmV3RGVmZXIubm90aWZ5V2l0aCkpLHR1cGxlc1sxXVszXS5hZGQocmVzb2x2ZSgwLG5ld0RlZmVyLGlzRnVuY3Rpb24ob25GdWxmaWxsZWQpP29uRnVsZmlsbGVkOklkZW50aXR5KSksdHVwbGVzWzJdWzNdLmFkZChyZXNvbHZlKDAsbmV3RGVmZXIsaXNGdW5jdGlvbihvblJlamVjdGVkKT9vblJlamVjdGVkOlRocm93ZXIpKX0pLnByb21pc2UoKX0scHJvbWlzZTpmdW5jdGlvbihvYmope3JldHVybiBudWxsIT1vYmo/alF1ZXJ5LmV4dGVuZChvYmoscHJvbWlzZSk6cHJvbWlzZX19LGRlZmVycmVkPXt9O3JldHVybiBqUXVlcnkuZWFjaCh0dXBsZXMsZnVuY3Rpb24oaSx0dXBsZSl7dmFyIGxpc3Q9dHVwbGVbMl0sc3RhdGVTdHJpbmc9dHVwbGVbNV07cHJvbWlzZVt0dXBsZVsxXV09bGlzdC5hZGQsc3RhdGVTdHJpbmcmJmxpc3QuYWRkKGZ1bmN0aW9uKCl7c3RhdGU9c3RhdGVTdHJpbmd9LHR1cGxlc1szLWldWzJdLmRpc2FibGUsdHVwbGVzWzMtaV1bM10uZGlzYWJsZSx0dXBsZXNbMF1bMl0ubG9jayx0dXBsZXNbMF1bM10ubG9jayksbGlzdC5hZGQodHVwbGVbM10uZmlyZSksZGVmZXJyZWRbdHVwbGVbMF1dPWZ1bmN0aW9uKCl7cmV0dXJuIGRlZmVycmVkW3R1cGxlWzBdK1wiV2l0aFwiXSh0aGlzPT09ZGVmZXJyZWQ/dm9pZCAwOnRoaXMsYXJndW1lbnRzKSx0aGlzfSxkZWZlcnJlZFt0dXBsZVswXStcIldpdGhcIl09bGlzdC5maXJlV2l0aH0pLHByb21pc2UucHJvbWlzZShkZWZlcnJlZCksZnVuYyYmZnVuYy5jYWxsKGRlZmVycmVkLGRlZmVycmVkKSxkZWZlcnJlZH0sd2hlbjpmdW5jdGlvbihzaW5nbGVWYWx1ZSl7dmFyIHJlbWFpbmluZz1hcmd1bWVudHMubGVuZ3RoLGk9cmVtYWluaW5nLHJlc29sdmVDb250ZXh0cz1BcnJheShpKSxyZXNvbHZlVmFsdWVzPXNsaWNlLmNhbGwoYXJndW1lbnRzKSxtYXN0ZXI9alF1ZXJ5LkRlZmVycmVkKCksdXBkYXRlRnVuYz1mdW5jdGlvbihpKXtyZXR1cm4gZnVuY3Rpb24odmFsdWUpe3Jlc29sdmVDb250ZXh0c1tpXT10aGlzLHJlc29sdmVWYWx1ZXNbaV09YXJndW1lbnRzLmxlbmd0aD4xP3NsaWNlLmNhbGwoYXJndW1lbnRzKTp2YWx1ZSwtLXJlbWFpbmluZ3x8bWFzdGVyLnJlc29sdmVXaXRoKHJlc29sdmVDb250ZXh0cyxyZXNvbHZlVmFsdWVzKX19O2lmKHJlbWFpbmluZzw9MSYmKGFkb3B0VmFsdWUoc2luZ2xlVmFsdWUsbWFzdGVyLmRvbmUodXBkYXRlRnVuYyhpKSkucmVzb2x2ZSxtYXN0ZXIucmVqZWN0LCFyZW1haW5pbmcpLFwicGVuZGluZ1wiPT09bWFzdGVyLnN0YXRlKCl8fGlzRnVuY3Rpb24ocmVzb2x2ZVZhbHVlc1tpXSYmcmVzb2x2ZVZhbHVlc1tpXS50aGVuKSkpcmV0dXJuIG1hc3Rlci50aGVuKCk7Zm9yKDtpLS07KWFkb3B0VmFsdWUocmVzb2x2ZVZhbHVlc1tpXSx1cGRhdGVGdW5jKGkpLG1hc3Rlci5yZWplY3QpO3JldHVybiBtYXN0ZXIucHJvbWlzZSgpfX0pO3ZhciByZXJyb3JOYW1lcz0vXihFdmFsfEludGVybmFsfFJhbmdlfFJlZmVyZW5jZXxTeW50YXh8VHlwZXxVUkkpRXJyb3IkLztqUXVlcnkuRGVmZXJyZWQuZXhjZXB0aW9uSG9vaz1mdW5jdGlvbihlcnJvcixzdGFjayl7d2luZG93LmNvbnNvbGUmJndpbmRvdy5jb25zb2xlLndhcm4mJmVycm9yJiZyZXJyb3JOYW1lcy50ZXN0KGVycm9yLm5hbWUpJiZ3aW5kb3cuY29uc29sZS53YXJuKFwialF1ZXJ5LkRlZmVycmVkIGV4Y2VwdGlvbjogXCIrZXJyb3IubWVzc2FnZSxlcnJvci5zdGFjayxzdGFjayl9LGpRdWVyeS5yZWFkeUV4Y2VwdGlvbj1mdW5jdGlvbihlcnJvcil7d2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKXt0aHJvdyBlcnJvcn0pfTt2YXIgcmVhZHlMaXN0PWpRdWVyeS5EZWZlcnJlZCgpO2pRdWVyeS5mbi5yZWFkeT1mdW5jdGlvbihmbil7cmV0dXJuIHJlYWR5TGlzdC50aGVuKGZuKS5jYXRjaChmdW5jdGlvbihlcnJvcil7alF1ZXJ5LnJlYWR5RXhjZXB0aW9uKGVycm9yKX0pLHRoaXN9LGpRdWVyeS5leHRlbmQoe2lzUmVhZHk6ITEscmVhZHlXYWl0OjEscmVhZHk6ZnVuY3Rpb24od2FpdCl7KCEwPT09d2FpdD8tLWpRdWVyeS5yZWFkeVdhaXQ6alF1ZXJ5LmlzUmVhZHkpfHwoalF1ZXJ5LmlzUmVhZHk9ITAsITAhPT13YWl0JiYtLWpRdWVyeS5yZWFkeVdhaXQ+MHx8cmVhZHlMaXN0LnJlc29sdmVXaXRoKGRvY3VtZW50LFtqUXVlcnldKSl9fSksalF1ZXJ5LnJlYWR5LnRoZW49cmVhZHlMaXN0LnRoZW4sXCJjb21wbGV0ZVwiPT09ZG9jdW1lbnQucmVhZHlTdGF0ZXx8XCJsb2FkaW5nXCIhPT1kb2N1bWVudC5yZWFkeVN0YXRlJiYhZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmRvU2Nyb2xsP3dpbmRvdy5zZXRUaW1lb3V0KGpRdWVyeS5yZWFkeSk6KGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJET01Db250ZW50TG9hZGVkXCIsY29tcGxldGVkKSx3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIixjb21wbGV0ZWQpKTt2YXIgYWNjZXNzPWZ1bmN0aW9uKGVsZW1zLGZuLGtleSx2YWx1ZSxjaGFpbmFibGUsZW1wdHlHZXQscmF3KXt2YXIgaT0wLGxlbj1lbGVtcy5sZW5ndGgsYnVsaz1udWxsPT1rZXk7aWYoXCJvYmplY3RcIj09PXRvVHlwZShrZXkpKXtjaGFpbmFibGU9ITA7Zm9yKGkgaW4ga2V5KWFjY2VzcyhlbGVtcyxmbixpLGtleVtpXSwhMCxlbXB0eUdldCxyYXcpfWVsc2UgaWYodm9pZCAwIT09dmFsdWUmJihjaGFpbmFibGU9ITAsaXNGdW5jdGlvbih2YWx1ZSl8fChyYXc9ITApLGJ1bGsmJihyYXc/KGZuLmNhbGwoZWxlbXMsdmFsdWUpLGZuPW51bGwpOihidWxrPWZuLGZuPWZ1bmN0aW9uKGVsZW0sa2V5LHZhbHVlKXtyZXR1cm4gYnVsay5jYWxsKGpRdWVyeShlbGVtKSx2YWx1ZSl9KSksZm4pKWZvcig7aTxsZW47aSsrKWZuKGVsZW1zW2ldLGtleSxyYXc/dmFsdWU6dmFsdWUuY2FsbChlbGVtc1tpXSxpLGZuKGVsZW1zW2ldLGtleSkpKTtyZXR1cm4gY2hhaW5hYmxlP2VsZW1zOmJ1bGs/Zm4uY2FsbChlbGVtcyk6bGVuP2ZuKGVsZW1zWzBdLGtleSk6ZW1wdHlHZXR9LHJtc1ByZWZpeD0vXi1tcy0vLHJkYXNoQWxwaGE9Ly0oW2Etel0pL2csYWNjZXB0RGF0YT1mdW5jdGlvbihvd25lcil7cmV0dXJuIDE9PT1vd25lci5ub2RlVHlwZXx8OT09PW93bmVyLm5vZGVUeXBlfHwhK293bmVyLm5vZGVUeXBlfTtEYXRhLnVpZD0xLERhdGEucHJvdG90eXBlPXtjYWNoZTpmdW5jdGlvbihvd25lcil7dmFyIHZhbHVlPW93bmVyW3RoaXMuZXhwYW5kb107cmV0dXJuIHZhbHVlfHwodmFsdWU9e30sYWNjZXB0RGF0YShvd25lcikmJihvd25lci5ub2RlVHlwZT9vd25lclt0aGlzLmV4cGFuZG9dPXZhbHVlOk9iamVjdC5kZWZpbmVQcm9wZXJ0eShvd25lcix0aGlzLmV4cGFuZG8se3ZhbHVlOnZhbHVlLGNvbmZpZ3VyYWJsZTohMH0pKSksdmFsdWV9LHNldDpmdW5jdGlvbihvd25lcixkYXRhLHZhbHVlKXt2YXIgcHJvcCxjYWNoZT10aGlzLmNhY2hlKG93bmVyKTtpZihcInN0cmluZ1wiPT10eXBlb2YgZGF0YSljYWNoZVtjYW1lbENhc2UoZGF0YSldPXZhbHVlO2Vsc2UgZm9yKHByb3AgaW4gZGF0YSljYWNoZVtjYW1lbENhc2UocHJvcCldPWRhdGFbcHJvcF07cmV0dXJuIGNhY2hlfSxnZXQ6ZnVuY3Rpb24ob3duZXIsa2V5KXtyZXR1cm4gdm9pZCAwPT09a2V5P3RoaXMuY2FjaGUob3duZXIpOm93bmVyW3RoaXMuZXhwYW5kb10mJm93bmVyW3RoaXMuZXhwYW5kb11bY2FtZWxDYXNlKGtleSldfSxhY2Nlc3M6ZnVuY3Rpb24ob3duZXIsa2V5LHZhbHVlKXtyZXR1cm4gdm9pZCAwPT09a2V5fHxrZXkmJlwic3RyaW5nXCI9PXR5cGVvZiBrZXkmJnZvaWQgMD09PXZhbHVlP3RoaXMuZ2V0KG93bmVyLGtleSk6KHRoaXMuc2V0KG93bmVyLGtleSx2YWx1ZSksdm9pZCAwIT09dmFsdWU/dmFsdWU6a2V5KX0scmVtb3ZlOmZ1bmN0aW9uKG93bmVyLGtleSl7dmFyIGksY2FjaGU9b3duZXJbdGhpcy5leHBhbmRvXTtpZih2b2lkIDAhPT1jYWNoZSl7aWYodm9pZCAwIT09a2V5KXtBcnJheS5pc0FycmF5KGtleSk/a2V5PWtleS5tYXAoY2FtZWxDYXNlKTooa2V5PWNhbWVsQ2FzZShrZXkpLGtleT1rZXkgaW4gY2FjaGU/W2tleV06a2V5Lm1hdGNoKHJub3RodG1sd2hpdGUpfHxbXSksaT1rZXkubGVuZ3RoO2Zvcig7aS0tOylkZWxldGUgY2FjaGVba2V5W2ldXX0odm9pZCAwPT09a2V5fHxqUXVlcnkuaXNFbXB0eU9iamVjdChjYWNoZSkpJiYob3duZXIubm9kZVR5cGU/b3duZXJbdGhpcy5leHBhbmRvXT12b2lkIDA6ZGVsZXRlIG93bmVyW3RoaXMuZXhwYW5kb10pfX0saGFzRGF0YTpmdW5jdGlvbihvd25lcil7dmFyIGNhY2hlPW93bmVyW3RoaXMuZXhwYW5kb107cmV0dXJuIHZvaWQgMCE9PWNhY2hlJiYhalF1ZXJ5LmlzRW1wdHlPYmplY3QoY2FjaGUpfX07dmFyIGRhdGFQcml2PW5ldyBEYXRhLGRhdGFVc2VyPW5ldyBEYXRhLHJicmFjZT0vXig/Olxce1tcXHdcXFddKlxcfXxcXFtbXFx3XFxXXSpcXF0pJC8scm11bHRpRGFzaD0vW0EtWl0vZztqUXVlcnkuZXh0ZW5kKHtoYXNEYXRhOmZ1bmN0aW9uKGVsZW0pe3JldHVybiBkYXRhVXNlci5oYXNEYXRhKGVsZW0pfHxkYXRhUHJpdi5oYXNEYXRhKGVsZW0pfSxkYXRhOmZ1bmN0aW9uKGVsZW0sbmFtZSxkYXRhKXtyZXR1cm4gZGF0YVVzZXIuYWNjZXNzKGVsZW0sbmFtZSxkYXRhKX0scmVtb3ZlRGF0YTpmdW5jdGlvbihlbGVtLG5hbWUpe2RhdGFVc2VyLnJlbW92ZShlbGVtLG5hbWUpfSxfZGF0YTpmdW5jdGlvbihlbGVtLG5hbWUsZGF0YSl7cmV0dXJuIGRhdGFQcml2LmFjY2VzcyhlbGVtLG5hbWUsZGF0YSl9LF9yZW1vdmVEYXRhOmZ1bmN0aW9uKGVsZW0sbmFtZSl7ZGF0YVByaXYucmVtb3ZlKGVsZW0sbmFtZSl9fSksalF1ZXJ5LmZuLmV4dGVuZCh7ZGF0YTpmdW5jdGlvbihrZXksdmFsdWUpe3ZhciBpLG5hbWUsZGF0YSxlbGVtPXRoaXNbMF0sYXR0cnM9ZWxlbSYmZWxlbS5hdHRyaWJ1dGVzO2lmKHZvaWQgMD09PWtleSl7aWYodGhpcy5sZW5ndGgmJihkYXRhPWRhdGFVc2VyLmdldChlbGVtKSwxPT09ZWxlbS5ub2RlVHlwZSYmIWRhdGFQcml2LmdldChlbGVtLFwiaGFzRGF0YUF0dHJzXCIpKSl7Zm9yKGk9YXR0cnMubGVuZ3RoO2ktLTspYXR0cnNbaV0mJihuYW1lPWF0dHJzW2ldLm5hbWUsMD09PW5hbWUuaW5kZXhPZihcImRhdGEtXCIpJiYobmFtZT1jYW1lbENhc2UobmFtZS5zbGljZSg1KSksZGF0YUF0dHIoZWxlbSxuYW1lLGRhdGFbbmFtZV0pKSk7ZGF0YVByaXYuc2V0KGVsZW0sXCJoYXNEYXRhQXR0cnNcIiwhMCl9cmV0dXJuIGRhdGF9cmV0dXJuXCJvYmplY3RcIj09dHlwZW9mIGtleT90aGlzLmVhY2goZnVuY3Rpb24oKXtkYXRhVXNlci5zZXQodGhpcyxrZXkpfSk6YWNjZXNzKHRoaXMsZnVuY3Rpb24odmFsdWUpe3ZhciBkYXRhO2lmKGVsZW0mJnZvaWQgMD09PXZhbHVlKXtpZih2b2lkIDAhPT0oZGF0YT1kYXRhVXNlci5nZXQoZWxlbSxrZXkpKSlyZXR1cm4gZGF0YTtpZih2b2lkIDAhPT0oZGF0YT1kYXRhQXR0cihlbGVtLGtleSkpKXJldHVybiBkYXRhfWVsc2UgdGhpcy5lYWNoKGZ1bmN0aW9uKCl7ZGF0YVVzZXIuc2V0KHRoaXMsa2V5LHZhbHVlKX0pfSxudWxsLHZhbHVlLGFyZ3VtZW50cy5sZW5ndGg+MSxudWxsLCEwKX0scmVtb3ZlRGF0YTpmdW5jdGlvbihrZXkpe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXtkYXRhVXNlci5yZW1vdmUodGhpcyxrZXkpfSl9fSksalF1ZXJ5LmV4dGVuZCh7cXVldWU6ZnVuY3Rpb24oZWxlbSx0eXBlLGRhdGEpe3ZhciBxdWV1ZTtpZihlbGVtKXJldHVybiB0eXBlPSh0eXBlfHxcImZ4XCIpK1wicXVldWVcIixxdWV1ZT1kYXRhUHJpdi5nZXQoZWxlbSx0eXBlKSxkYXRhJiYoIXF1ZXVlfHxBcnJheS5pc0FycmF5KGRhdGEpP3F1ZXVlPWRhdGFQcml2LmFjY2VzcyhlbGVtLHR5cGUsalF1ZXJ5Lm1ha2VBcnJheShkYXRhKSk6cXVldWUucHVzaChkYXRhKSkscXVldWV8fFtdfSxkZXF1ZXVlOmZ1bmN0aW9uKGVsZW0sdHlwZSl7dHlwZT10eXBlfHxcImZ4XCI7dmFyIHF1ZXVlPWpRdWVyeS5xdWV1ZShlbGVtLHR5cGUpLHN0YXJ0TGVuZ3RoPXF1ZXVlLmxlbmd0aCxmbj1xdWV1ZS5zaGlmdCgpLGhvb2tzPWpRdWVyeS5fcXVldWVIb29rcyhlbGVtLHR5cGUpLG5leHQ9ZnVuY3Rpb24oKXtqUXVlcnkuZGVxdWV1ZShlbGVtLHR5cGUpfTtcImlucHJvZ3Jlc3NcIj09PWZuJiYoZm49cXVldWUuc2hpZnQoKSxzdGFydExlbmd0aC0tKSxmbiYmKFwiZnhcIj09PXR5cGUmJnF1ZXVlLnVuc2hpZnQoXCJpbnByb2dyZXNzXCIpLGRlbGV0ZSBob29rcy5zdG9wLGZuLmNhbGwoZWxlbSxuZXh0LGhvb2tzKSksIXN0YXJ0TGVuZ3RoJiZob29rcyYmaG9va3MuZW1wdHkuZmlyZSgpfSxfcXVldWVIb29rczpmdW5jdGlvbihlbGVtLHR5cGUpe3ZhciBrZXk9dHlwZStcInF1ZXVlSG9va3NcIjtyZXR1cm4gZGF0YVByaXYuZ2V0KGVsZW0sa2V5KXx8ZGF0YVByaXYuYWNjZXNzKGVsZW0sa2V5LHtlbXB0eTpqUXVlcnkuQ2FsbGJhY2tzKFwib25jZSBtZW1vcnlcIikuYWRkKGZ1bmN0aW9uKCl7ZGF0YVByaXYucmVtb3ZlKGVsZW0sW3R5cGUrXCJxdWV1ZVwiLGtleV0pfSl9KX19KSxqUXVlcnkuZm4uZXh0ZW5kKHtxdWV1ZTpmdW5jdGlvbih0eXBlLGRhdGEpe3ZhciBzZXR0ZXI9MjtyZXR1cm5cInN0cmluZ1wiIT10eXBlb2YgdHlwZSYmKGRhdGE9dHlwZSx0eXBlPVwiZnhcIixzZXR0ZXItLSksYXJndW1lbnRzLmxlbmd0aDxzZXR0ZXI/alF1ZXJ5LnF1ZXVlKHRoaXNbMF0sdHlwZSk6dm9pZCAwPT09ZGF0YT90aGlzOnRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciBxdWV1ZT1qUXVlcnkucXVldWUodGhpcyx0eXBlLGRhdGEpO2pRdWVyeS5fcXVldWVIb29rcyh0aGlzLHR5cGUpLFwiZnhcIj09PXR5cGUmJlwiaW5wcm9ncmVzc1wiIT09cXVldWVbMF0mJmpRdWVyeS5kZXF1ZXVlKHRoaXMsdHlwZSl9KX0sZGVxdWV1ZTpmdW5jdGlvbih0eXBlKXtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7alF1ZXJ5LmRlcXVldWUodGhpcyx0eXBlKX0pfSxjbGVhclF1ZXVlOmZ1bmN0aW9uKHR5cGUpe3JldHVybiB0aGlzLnF1ZXVlKHR5cGV8fFwiZnhcIixbXSl9LHByb21pc2U6ZnVuY3Rpb24odHlwZSxvYmope3ZhciB0bXAsY291bnQ9MSxkZWZlcj1qUXVlcnkuRGVmZXJyZWQoKSxlbGVtZW50cz10aGlzLGk9dGhpcy5sZW5ndGgscmVzb2x2ZT1mdW5jdGlvbigpey0tY291bnR8fGRlZmVyLnJlc29sdmVXaXRoKGVsZW1lbnRzLFtlbGVtZW50c10pfTtmb3IoXCJzdHJpbmdcIiE9dHlwZW9mIHR5cGUmJihvYmo9dHlwZSx0eXBlPXZvaWQgMCksdHlwZT10eXBlfHxcImZ4XCI7aS0tOykodG1wPWRhdGFQcml2LmdldChlbGVtZW50c1tpXSx0eXBlK1wicXVldWVIb29rc1wiKSkmJnRtcC5lbXB0eSYmKGNvdW50KyssdG1wLmVtcHR5LmFkZChyZXNvbHZlKSk7cmV0dXJuIHJlc29sdmUoKSxkZWZlci5wcm9taXNlKG9iail9fSk7dmFyIHBudW09L1srLV0/KD86XFxkKlxcLnwpXFxkKyg/OltlRV1bKy1dP1xcZCt8KS8uc291cmNlLHJjc3NOdW09bmV3IFJlZ0V4cChcIl4oPzooWystXSk9fCkoXCIrcG51bStcIikoW2EteiVdKikkXCIsXCJpXCIpLGNzc0V4cGFuZD1bXCJUb3BcIixcIlJpZ2h0XCIsXCJCb3R0b21cIixcIkxlZnRcIl0sZG9jdW1lbnRFbGVtZW50PWRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxpc0F0dGFjaGVkPWZ1bmN0aW9uKGVsZW0pe3JldHVybiBqUXVlcnkuY29udGFpbnMoZWxlbS5vd25lckRvY3VtZW50LGVsZW0pfSxjb21wb3NlZD17Y29tcG9zZWQ6ITB9O2RvY3VtZW50RWxlbWVudC5nZXRSb290Tm9kZSYmKGlzQXR0YWNoZWQ9ZnVuY3Rpb24oZWxlbSl7cmV0dXJuIGpRdWVyeS5jb250YWlucyhlbGVtLm93bmVyRG9jdW1lbnQsZWxlbSl8fGVsZW0uZ2V0Um9vdE5vZGUoY29tcG9zZWQpPT09ZWxlbS5vd25lckRvY3VtZW50fSk7dmFyIGlzSGlkZGVuV2l0aGluVHJlZT1mdW5jdGlvbihlbGVtLGVsKXtyZXR1cm4gZWxlbT1lbHx8ZWxlbSxcIm5vbmVcIj09PWVsZW0uc3R5bGUuZGlzcGxheXx8XCJcIj09PWVsZW0uc3R5bGUuZGlzcGxheSYmaXNBdHRhY2hlZChlbGVtKSYmXCJub25lXCI9PT1qUXVlcnkuY3NzKGVsZW0sXCJkaXNwbGF5XCIpfSxzd2FwPWZ1bmN0aW9uKGVsZW0sb3B0aW9ucyxjYWxsYmFjayxhcmdzKXt2YXIgcmV0LG5hbWUsb2xkPXt9O2ZvcihuYW1lIGluIG9wdGlvbnMpb2xkW25hbWVdPWVsZW0uc3R5bGVbbmFtZV0sZWxlbS5zdHlsZVtuYW1lXT1vcHRpb25zW25hbWVdO3JldD1jYWxsYmFjay5hcHBseShlbGVtLGFyZ3N8fFtdKTtmb3IobmFtZSBpbiBvcHRpb25zKWVsZW0uc3R5bGVbbmFtZV09b2xkW25hbWVdO3JldHVybiByZXR9LGRlZmF1bHREaXNwbGF5TWFwPXt9O2pRdWVyeS5mbi5leHRlbmQoe3Nob3c6ZnVuY3Rpb24oKXtyZXR1cm4gc2hvd0hpZGUodGhpcywhMCl9LGhpZGU6ZnVuY3Rpb24oKXtyZXR1cm4gc2hvd0hpZGUodGhpcyl9LHRvZ2dsZTpmdW5jdGlvbihzdGF0ZSl7cmV0dXJuXCJib29sZWFuXCI9PXR5cGVvZiBzdGF0ZT9zdGF0ZT90aGlzLnNob3coKTp0aGlzLmhpZGUoKTp0aGlzLmVhY2goZnVuY3Rpb24oKXtpc0hpZGRlbldpdGhpblRyZWUodGhpcyk/alF1ZXJ5KHRoaXMpLnNob3coKTpqUXVlcnkodGhpcykuaGlkZSgpfSl9fSk7dmFyIHJjaGVja2FibGVUeXBlPS9eKD86Y2hlY2tib3h8cmFkaW8pJC9pLHJ0YWdOYW1lPS88KFthLXpdW15cXC9cXDA+XFx4MjBcXHRcXHJcXG5cXGZdKikvaSxyc2NyaXB0VHlwZT0vXiR8Xm1vZHVsZSR8XFwvKD86amF2YXxlY21hKXNjcmlwdC9pLHdyYXBNYXA9e29wdGlvbjpbMSxcIjxzZWxlY3QgbXVsdGlwbGU9J211bHRpcGxlJz5cIixcIjwvc2VsZWN0PlwiXSx0aGVhZDpbMSxcIjx0YWJsZT5cIixcIjwvdGFibGU+XCJdLGNvbDpbMixcIjx0YWJsZT48Y29sZ3JvdXA+XCIsXCI8L2NvbGdyb3VwPjwvdGFibGU+XCJdLHRyOlsyLFwiPHRhYmxlPjx0Ym9keT5cIixcIjwvdGJvZHk+PC90YWJsZT5cIl0sdGQ6WzMsXCI8dGFibGU+PHRib2R5Pjx0cj5cIixcIjwvdHI+PC90Ym9keT48L3RhYmxlPlwiXSxfZGVmYXVsdDpbMCxcIlwiLFwiXCJdfTt3cmFwTWFwLm9wdGdyb3VwPXdyYXBNYXAub3B0aW9uLHdyYXBNYXAudGJvZHk9d3JhcE1hcC50Zm9vdD13cmFwTWFwLmNvbGdyb3VwPXdyYXBNYXAuY2FwdGlvbj13cmFwTWFwLnRoZWFkLHdyYXBNYXAudGg9d3JhcE1hcC50ZDt2YXIgcmh0bWw9Lzx8JiM/XFx3KzsvOyFmdW5jdGlvbigpe3ZhciBmcmFnbWVudD1kb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCksZGl2PWZyYWdtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikpLGlucHV0PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtpbnB1dC5zZXRBdHRyaWJ1dGUoXCJ0eXBlXCIsXCJyYWRpb1wiKSxpbnB1dC5zZXRBdHRyaWJ1dGUoXCJjaGVja2VkXCIsXCJjaGVja2VkXCIpLGlucHV0LnNldEF0dHJpYnV0ZShcIm5hbWVcIixcInRcIiksZGl2LmFwcGVuZENoaWxkKGlucHV0KSxzdXBwb3J0LmNoZWNrQ2xvbmU9ZGl2LmNsb25lTm9kZSghMCkuY2xvbmVOb2RlKCEwKS5sYXN0Q2hpbGQuY2hlY2tlZCxkaXYuaW5uZXJIVE1MPVwiPHRleHRhcmVhPng8L3RleHRhcmVhPlwiLHN1cHBvcnQubm9DbG9uZUNoZWNrZWQ9ISFkaXYuY2xvbmVOb2RlKCEwKS5sYXN0Q2hpbGQuZGVmYXVsdFZhbHVlfSgpO3ZhciBya2V5RXZlbnQ9L15rZXkvLHJtb3VzZUV2ZW50PS9eKD86bW91c2V8cG9pbnRlcnxjb250ZXh0bWVudXxkcmFnfGRyb3ApfGNsaWNrLyxydHlwZW5hbWVzcGFjZT0vXihbXi5dKikoPzpcXC4oLispfCkvO2pRdWVyeS5ldmVudD17Z2xvYmFsOnt9LGFkZDpmdW5jdGlvbihlbGVtLHR5cGVzLGhhbmRsZXIsZGF0YSxzZWxlY3Rvcil7dmFyIGhhbmRsZU9iakluLGV2ZW50SGFuZGxlLHRtcCxldmVudHMsdCxoYW5kbGVPYmosc3BlY2lhbCxoYW5kbGVycyx0eXBlLG5hbWVzcGFjZXMsb3JpZ1R5cGUsZWxlbURhdGE9ZGF0YVByaXYuZ2V0KGVsZW0pO2lmKGVsZW1EYXRhKWZvcihoYW5kbGVyLmhhbmRsZXImJihoYW5kbGVPYmpJbj1oYW5kbGVyLGhhbmRsZXI9aGFuZGxlT2JqSW4uaGFuZGxlcixzZWxlY3Rvcj1oYW5kbGVPYmpJbi5zZWxlY3Rvciksc2VsZWN0b3ImJmpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3Rvcihkb2N1bWVudEVsZW1lbnQsc2VsZWN0b3IpLGhhbmRsZXIuZ3VpZHx8KGhhbmRsZXIuZ3VpZD1qUXVlcnkuZ3VpZCsrKSwoZXZlbnRzPWVsZW1EYXRhLmV2ZW50cyl8fChldmVudHM9ZWxlbURhdGEuZXZlbnRzPXt9KSwoZXZlbnRIYW5kbGU9ZWxlbURhdGEuaGFuZGxlKXx8KGV2ZW50SGFuZGxlPWVsZW1EYXRhLmhhbmRsZT1mdW5jdGlvbihlKXtyZXR1cm4gdm9pZCAwIT09alF1ZXJ5JiZqUXVlcnkuZXZlbnQudHJpZ2dlcmVkIT09ZS50eXBlP2pRdWVyeS5ldmVudC5kaXNwYXRjaC5hcHBseShlbGVtLGFyZ3VtZW50cyk6dm9pZCAwfSksdHlwZXM9KHR5cGVzfHxcIlwiKS5tYXRjaChybm90aHRtbHdoaXRlKXx8W1wiXCJdLHQ9dHlwZXMubGVuZ3RoO3QtLTspdG1wPXJ0eXBlbmFtZXNwYWNlLmV4ZWModHlwZXNbdF0pfHxbXSx0eXBlPW9yaWdUeXBlPXRtcFsxXSxuYW1lc3BhY2VzPSh0bXBbMl18fFwiXCIpLnNwbGl0KFwiLlwiKS5zb3J0KCksdHlwZSYmKHNwZWNpYWw9alF1ZXJ5LmV2ZW50LnNwZWNpYWxbdHlwZV18fHt9LHR5cGU9KHNlbGVjdG9yP3NwZWNpYWwuZGVsZWdhdGVUeXBlOnNwZWNpYWwuYmluZFR5cGUpfHx0eXBlLHNwZWNpYWw9alF1ZXJ5LmV2ZW50LnNwZWNpYWxbdHlwZV18fHt9LGhhbmRsZU9iaj1qUXVlcnkuZXh0ZW5kKHt0eXBlOnR5cGUsb3JpZ1R5cGU6b3JpZ1R5cGUsZGF0YTpkYXRhLGhhbmRsZXI6aGFuZGxlcixndWlkOmhhbmRsZXIuZ3VpZCxzZWxlY3RvcjpzZWxlY3RvcixuZWVkc0NvbnRleHQ6c2VsZWN0b3ImJmpRdWVyeS5leHByLm1hdGNoLm5lZWRzQ29udGV4dC50ZXN0KHNlbGVjdG9yKSxuYW1lc3BhY2U6bmFtZXNwYWNlcy5qb2luKFwiLlwiKX0saGFuZGxlT2JqSW4pLChoYW5kbGVycz1ldmVudHNbdHlwZV0pfHwoaGFuZGxlcnM9ZXZlbnRzW3R5cGVdPVtdLGhhbmRsZXJzLmRlbGVnYXRlQ291bnQ9MCxzcGVjaWFsLnNldHVwJiYhMSE9PXNwZWNpYWwuc2V0dXAuY2FsbChlbGVtLGRhdGEsbmFtZXNwYWNlcyxldmVudEhhbmRsZSl8fGVsZW0uYWRkRXZlbnRMaXN0ZW5lciYmZWxlbS5hZGRFdmVudExpc3RlbmVyKHR5cGUsZXZlbnRIYW5kbGUpKSxzcGVjaWFsLmFkZCYmKHNwZWNpYWwuYWRkLmNhbGwoZWxlbSxoYW5kbGVPYmopLGhhbmRsZU9iai5oYW5kbGVyLmd1aWR8fChoYW5kbGVPYmouaGFuZGxlci5ndWlkPWhhbmRsZXIuZ3VpZCkpLHNlbGVjdG9yP2hhbmRsZXJzLnNwbGljZShoYW5kbGVycy5kZWxlZ2F0ZUNvdW50KyssMCxoYW5kbGVPYmopOmhhbmRsZXJzLnB1c2goaGFuZGxlT2JqKSxqUXVlcnkuZXZlbnQuZ2xvYmFsW3R5cGVdPSEwKX0scmVtb3ZlOmZ1bmN0aW9uKGVsZW0sdHlwZXMsaGFuZGxlcixzZWxlY3RvcixtYXBwZWRUeXBlcyl7dmFyIGosb3JpZ0NvdW50LHRtcCxldmVudHMsdCxoYW5kbGVPYmosc3BlY2lhbCxoYW5kbGVycyx0eXBlLG5hbWVzcGFjZXMsb3JpZ1R5cGUsZWxlbURhdGE9ZGF0YVByaXYuaGFzRGF0YShlbGVtKSYmZGF0YVByaXYuZ2V0KGVsZW0pO2lmKGVsZW1EYXRhJiYoZXZlbnRzPWVsZW1EYXRhLmV2ZW50cykpe2Zvcih0eXBlcz0odHlwZXN8fFwiXCIpLm1hdGNoKHJub3RodG1sd2hpdGUpfHxbXCJcIl0sdD10eXBlcy5sZW5ndGg7dC0tOylpZih0bXA9cnR5cGVuYW1lc3BhY2UuZXhlYyh0eXBlc1t0XSl8fFtdLHR5cGU9b3JpZ1R5cGU9dG1wWzFdLG5hbWVzcGFjZXM9KHRtcFsyXXx8XCJcIikuc3BsaXQoXCIuXCIpLnNvcnQoKSx0eXBlKXtmb3Ioc3BlY2lhbD1qUXVlcnkuZXZlbnQuc3BlY2lhbFt0eXBlXXx8e30sdHlwZT0oc2VsZWN0b3I/c3BlY2lhbC5kZWxlZ2F0ZVR5cGU6c3BlY2lhbC5iaW5kVHlwZSl8fHR5cGUsaGFuZGxlcnM9ZXZlbnRzW3R5cGVdfHxbXSx0bXA9dG1wWzJdJiZuZXcgUmVnRXhwKFwiKF58XFxcXC4pXCIrbmFtZXNwYWNlcy5qb2luKFwiXFxcXC4oPzouKlxcXFwufClcIikrXCIoXFxcXC58JClcIiksb3JpZ0NvdW50PWo9aGFuZGxlcnMubGVuZ3RoO2otLTspaGFuZGxlT2JqPWhhbmRsZXJzW2pdLCFtYXBwZWRUeXBlcyYmb3JpZ1R5cGUhPT1oYW5kbGVPYmoub3JpZ1R5cGV8fGhhbmRsZXImJmhhbmRsZXIuZ3VpZCE9PWhhbmRsZU9iai5ndWlkfHx0bXAmJiF0bXAudGVzdChoYW5kbGVPYmoubmFtZXNwYWNlKXx8c2VsZWN0b3ImJnNlbGVjdG9yIT09aGFuZGxlT2JqLnNlbGVjdG9yJiYoXCIqKlwiIT09c2VsZWN0b3J8fCFoYW5kbGVPYmouc2VsZWN0b3IpfHwoaGFuZGxlcnMuc3BsaWNlKGosMSksaGFuZGxlT2JqLnNlbGVjdG9yJiZoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LS0sc3BlY2lhbC5yZW1vdmUmJnNwZWNpYWwucmVtb3ZlLmNhbGwoZWxlbSxoYW5kbGVPYmopKTtvcmlnQ291bnQmJiFoYW5kbGVycy5sZW5ndGgmJihzcGVjaWFsLnRlYXJkb3duJiYhMSE9PXNwZWNpYWwudGVhcmRvd24uY2FsbChlbGVtLG5hbWVzcGFjZXMsZWxlbURhdGEuaGFuZGxlKXx8alF1ZXJ5LnJlbW92ZUV2ZW50KGVsZW0sdHlwZSxlbGVtRGF0YS5oYW5kbGUpLGRlbGV0ZSBldmVudHNbdHlwZV0pfWVsc2UgZm9yKHR5cGUgaW4gZXZlbnRzKWpRdWVyeS5ldmVudC5yZW1vdmUoZWxlbSx0eXBlK3R5cGVzW3RdLGhhbmRsZXIsc2VsZWN0b3IsITApO2pRdWVyeS5pc0VtcHR5T2JqZWN0KGV2ZW50cykmJmRhdGFQcml2LnJlbW92ZShlbGVtLFwiaGFuZGxlIGV2ZW50c1wiKX19LGRpc3BhdGNoOmZ1bmN0aW9uKG5hdGl2ZUV2ZW50KXt2YXIgaSxqLHJldCxtYXRjaGVkLGhhbmRsZU9iaixoYW5kbGVyUXVldWUsZXZlbnQ9alF1ZXJ5LmV2ZW50LmZpeChuYXRpdmVFdmVudCksYXJncz1uZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCksaGFuZGxlcnM9KGRhdGFQcml2LmdldCh0aGlzLFwiZXZlbnRzXCIpfHx7fSlbZXZlbnQudHlwZV18fFtdLHNwZWNpYWw9alF1ZXJ5LmV2ZW50LnNwZWNpYWxbZXZlbnQudHlwZV18fHt9O2ZvcihhcmdzWzBdPWV2ZW50LGk9MTtpPGFyZ3VtZW50cy5sZW5ndGg7aSsrKWFyZ3NbaV09YXJndW1lbnRzW2ldO2lmKGV2ZW50LmRlbGVnYXRlVGFyZ2V0PXRoaXMsIXNwZWNpYWwucHJlRGlzcGF0Y2h8fCExIT09c3BlY2lhbC5wcmVEaXNwYXRjaC5jYWxsKHRoaXMsZXZlbnQpKXtmb3IoaGFuZGxlclF1ZXVlPWpRdWVyeS5ldmVudC5oYW5kbGVycy5jYWxsKHRoaXMsZXZlbnQsaGFuZGxlcnMpLGk9MDsobWF0Y2hlZD1oYW5kbGVyUXVldWVbaSsrXSkmJiFldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpOylmb3IoZXZlbnQuY3VycmVudFRhcmdldD1tYXRjaGVkLmVsZW0saj0wOyhoYW5kbGVPYmo9bWF0Y2hlZC5oYW5kbGVyc1tqKytdKSYmIWV2ZW50LmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCk7KWV2ZW50LnJuYW1lc3BhY2UmJiExIT09aGFuZGxlT2JqLm5hbWVzcGFjZSYmIWV2ZW50LnJuYW1lc3BhY2UudGVzdChoYW5kbGVPYmoubmFtZXNwYWNlKXx8KGV2ZW50LmhhbmRsZU9iaj1oYW5kbGVPYmosZXZlbnQuZGF0YT1oYW5kbGVPYmouZGF0YSx2b2lkIDAhPT0ocmV0PSgoalF1ZXJ5LmV2ZW50LnNwZWNpYWxbaGFuZGxlT2JqLm9yaWdUeXBlXXx8e30pLmhhbmRsZXx8aGFuZGxlT2JqLmhhbmRsZXIpLmFwcGx5KG1hdGNoZWQuZWxlbSxhcmdzKSkmJiExPT09KGV2ZW50LnJlc3VsdD1yZXQpJiYoZXZlbnQucHJldmVudERlZmF1bHQoKSxldmVudC5zdG9wUHJvcGFnYXRpb24oKSkpO3JldHVybiBzcGVjaWFsLnBvc3REaXNwYXRjaCYmc3BlY2lhbC5wb3N0RGlzcGF0Y2guY2FsbCh0aGlzLGV2ZW50KSxldmVudC5yZXN1bHR9fSxoYW5kbGVyczpmdW5jdGlvbihldmVudCxoYW5kbGVycyl7dmFyIGksaGFuZGxlT2JqLHNlbCxtYXRjaGVkSGFuZGxlcnMsbWF0Y2hlZFNlbGVjdG9ycyxoYW5kbGVyUXVldWU9W10sZGVsZWdhdGVDb3VudD1oYW5kbGVycy5kZWxlZ2F0ZUNvdW50LGN1cj1ldmVudC50YXJnZXQ7aWYoZGVsZWdhdGVDb3VudCYmY3VyLm5vZGVUeXBlJiYhKFwiY2xpY2tcIj09PWV2ZW50LnR5cGUmJmV2ZW50LmJ1dHRvbj49MSkpZm9yKDtjdXIhPT10aGlzO2N1cj1jdXIucGFyZW50Tm9kZXx8dGhpcylpZigxPT09Y3VyLm5vZGVUeXBlJiYoXCJjbGlja1wiIT09ZXZlbnQudHlwZXx8ITAhPT1jdXIuZGlzYWJsZWQpKXtmb3IobWF0Y2hlZEhhbmRsZXJzPVtdLG1hdGNoZWRTZWxlY3RvcnM9e30saT0wO2k8ZGVsZWdhdGVDb3VudDtpKyspaGFuZGxlT2JqPWhhbmRsZXJzW2ldLHNlbD1oYW5kbGVPYmouc2VsZWN0b3IrXCIgXCIsdm9pZCAwPT09bWF0Y2hlZFNlbGVjdG9yc1tzZWxdJiYobWF0Y2hlZFNlbGVjdG9yc1tzZWxdPWhhbmRsZU9iai5uZWVkc0NvbnRleHQ/alF1ZXJ5KHNlbCx0aGlzKS5pbmRleChjdXIpPi0xOmpRdWVyeS5maW5kKHNlbCx0aGlzLG51bGwsW2N1cl0pLmxlbmd0aCksbWF0Y2hlZFNlbGVjdG9yc1tzZWxdJiZtYXRjaGVkSGFuZGxlcnMucHVzaChoYW5kbGVPYmopO21hdGNoZWRIYW5kbGVycy5sZW5ndGgmJmhhbmRsZXJRdWV1ZS5wdXNoKHtlbGVtOmN1cixoYW5kbGVyczptYXRjaGVkSGFuZGxlcnN9KX1yZXR1cm4gY3VyPXRoaXMsZGVsZWdhdGVDb3VudDxoYW5kbGVycy5sZW5ndGgmJmhhbmRsZXJRdWV1ZS5wdXNoKHtlbGVtOmN1cixoYW5kbGVyczpoYW5kbGVycy5zbGljZShkZWxlZ2F0ZUNvdW50KX0pLGhhbmRsZXJRdWV1ZX0sYWRkUHJvcDpmdW5jdGlvbihuYW1lLGhvb2spe09iamVjdC5kZWZpbmVQcm9wZXJ0eShqUXVlcnkuRXZlbnQucHJvdG90eXBlLG5hbWUse2VudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLGdldDppc0Z1bmN0aW9uKGhvb2spP2Z1bmN0aW9uKCl7aWYodGhpcy5vcmlnaW5hbEV2ZW50KXJldHVybiBob29rKHRoaXMub3JpZ2luYWxFdmVudCl9OmZ1bmN0aW9uKCl7aWYodGhpcy5vcmlnaW5hbEV2ZW50KXJldHVybiB0aGlzLm9yaWdpbmFsRXZlbnRbbmFtZV19LHNldDpmdW5jdGlvbih2YWx1ZSl7T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsbmFtZSx7ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsd3JpdGFibGU6ITAsdmFsdWU6dmFsdWV9KX19KX0sZml4OmZ1bmN0aW9uKG9yaWdpbmFsRXZlbnQpe3JldHVybiBvcmlnaW5hbEV2ZW50W2pRdWVyeS5leHBhbmRvXT9vcmlnaW5hbEV2ZW50Om5ldyBqUXVlcnkuRXZlbnQob3JpZ2luYWxFdmVudCl9LHNwZWNpYWw6e2xvYWQ6e25vQnViYmxlOiEwfSxjbGljazp7c2V0dXA6ZnVuY3Rpb24oZGF0YSl7dmFyIGVsPXRoaXN8fGRhdGE7cmV0dXJuIHJjaGVja2FibGVUeXBlLnRlc3QoZWwudHlwZSkmJmVsLmNsaWNrJiZub2RlTmFtZShlbCxcImlucHV0XCIpJiZsZXZlcmFnZU5hdGl2ZShlbCxcImNsaWNrXCIscmV0dXJuVHJ1ZSksITF9LHRyaWdnZXI6ZnVuY3Rpb24oZGF0YSl7dmFyIGVsPXRoaXN8fGRhdGE7cmV0dXJuIHJjaGVja2FibGVUeXBlLnRlc3QoZWwudHlwZSkmJmVsLmNsaWNrJiZub2RlTmFtZShlbCxcImlucHV0XCIpJiZsZXZlcmFnZU5hdGl2ZShlbCxcImNsaWNrXCIpLCEwfSxfZGVmYXVsdDpmdW5jdGlvbihldmVudCl7dmFyIHRhcmdldD1ldmVudC50YXJnZXQ7cmV0dXJuIHJjaGVja2FibGVUeXBlLnRlc3QodGFyZ2V0LnR5cGUpJiZ0YXJnZXQuY2xpY2smJm5vZGVOYW1lKHRhcmdldCxcImlucHV0XCIpJiZkYXRhUHJpdi5nZXQodGFyZ2V0LFwiY2xpY2tcIil8fG5vZGVOYW1lKHRhcmdldCxcImFcIil9fSxiZWZvcmV1bmxvYWQ6e3Bvc3REaXNwYXRjaDpmdW5jdGlvbihldmVudCl7dm9pZCAwIT09ZXZlbnQucmVzdWx0JiZldmVudC5vcmlnaW5hbEV2ZW50JiYoZXZlbnQub3JpZ2luYWxFdmVudC5yZXR1cm5WYWx1ZT1ldmVudC5yZXN1bHQpfX19fSxqUXVlcnkucmVtb3ZlRXZlbnQ9ZnVuY3Rpb24oZWxlbSx0eXBlLGhhbmRsZSl7ZWxlbS5yZW1vdmVFdmVudExpc3RlbmVyJiZlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSxoYW5kbGUpfSxqUXVlcnkuRXZlbnQ9ZnVuY3Rpb24oc3JjLHByb3BzKXtpZighKHRoaXMgaW5zdGFuY2VvZiBqUXVlcnkuRXZlbnQpKXJldHVybiBuZXcgalF1ZXJ5LkV2ZW50KHNyYyxwcm9wcyk7c3JjJiZzcmMudHlwZT8odGhpcy5vcmlnaW5hbEV2ZW50PXNyYyx0aGlzLnR5cGU9c3JjLnR5cGUsdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9c3JjLmRlZmF1bHRQcmV2ZW50ZWR8fHZvaWQgMD09PXNyYy5kZWZhdWx0UHJldmVudGVkJiYhMT09PXNyYy5yZXR1cm5WYWx1ZT9yZXR1cm5UcnVlOnJldHVybkZhbHNlLHRoaXMudGFyZ2V0PXNyYy50YXJnZXQmJjM9PT1zcmMudGFyZ2V0Lm5vZGVUeXBlP3NyYy50YXJnZXQucGFyZW50Tm9kZTpzcmMudGFyZ2V0LHRoaXMuY3VycmVudFRhcmdldD1zcmMuY3VycmVudFRhcmdldCx0aGlzLnJlbGF0ZWRUYXJnZXQ9c3JjLnJlbGF0ZWRUYXJnZXQpOnRoaXMudHlwZT1zcmMscHJvcHMmJmpRdWVyeS5leHRlbmQodGhpcyxwcm9wcyksdGhpcy50aW1lU3RhbXA9c3JjJiZzcmMudGltZVN0YW1wfHxEYXRlLm5vdygpLHRoaXNbalF1ZXJ5LmV4cGFuZG9dPSEwfSxqUXVlcnkuRXZlbnQucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpqUXVlcnkuRXZlbnQsaXNEZWZhdWx0UHJldmVudGVkOnJldHVybkZhbHNlLGlzUHJvcGFnYXRpb25TdG9wcGVkOnJldHVybkZhbHNlLGlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkOnJldHVybkZhbHNlLGlzU2ltdWxhdGVkOiExLHByZXZlbnREZWZhdWx0OmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5vcmlnaW5hbEV2ZW50O3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPXJldHVyblRydWUsZSYmIXRoaXMuaXNTaW11bGF0ZWQmJmUucHJldmVudERlZmF1bHQoKX0sc3RvcFByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5vcmlnaW5hbEV2ZW50O3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9cmV0dXJuVHJ1ZSxlJiYhdGhpcy5pc1NpbXVsYXRlZCYmZS5zdG9wUHJvcGFnYXRpb24oKX0sc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7dmFyIGU9dGhpcy5vcmlnaW5hbEV2ZW50O3RoaXMuaXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ9cmV0dXJuVHJ1ZSxlJiYhdGhpcy5pc1NpbXVsYXRlZCYmZS5zdG9wSW1tZWRpYXRlUHJvcGFnYXRpb24oKSx0aGlzLnN0b3BQcm9wYWdhdGlvbigpfX0salF1ZXJ5LmVhY2goe2FsdEtleTohMCxidWJibGVzOiEwLGNhbmNlbGFibGU6ITAsY2hhbmdlZFRvdWNoZXM6ITAsY3RybEtleTohMCxkZXRhaWw6ITAsZXZlbnRQaGFzZTohMCxtZXRhS2V5OiEwLHBhZ2VYOiEwLHBhZ2VZOiEwLHNoaWZ0S2V5OiEwLHZpZXc6ITAsY2hhcjohMCxjb2RlOiEwLGNoYXJDb2RlOiEwLGtleTohMCxrZXlDb2RlOiEwLGJ1dHRvbjohMCxidXR0b25zOiEwLGNsaWVudFg6ITAsY2xpZW50WTohMCxvZmZzZXRYOiEwLG9mZnNldFk6ITAscG9pbnRlcklkOiEwLHBvaW50ZXJUeXBlOiEwLHNjcmVlblg6ITAsc2NyZWVuWTohMCx0YXJnZXRUb3VjaGVzOiEwLHRvRWxlbWVudDohMCx0b3VjaGVzOiEwLHdoaWNoOmZ1bmN0aW9uKGV2ZW50KXt2YXIgYnV0dG9uPWV2ZW50LmJ1dHRvbjtyZXR1cm4gbnVsbD09ZXZlbnQud2hpY2gmJnJrZXlFdmVudC50ZXN0KGV2ZW50LnR5cGUpP251bGwhPWV2ZW50LmNoYXJDb2RlP2V2ZW50LmNoYXJDb2RlOmV2ZW50LmtleUNvZGU6IWV2ZW50LndoaWNoJiZ2b2lkIDAhPT1idXR0b24mJnJtb3VzZUV2ZW50LnRlc3QoZXZlbnQudHlwZSk/MSZidXR0b24/MToyJmJ1dHRvbj8zOjQmYnV0dG9uPzI6MDpldmVudC53aGljaH19LGpRdWVyeS5ldmVudC5hZGRQcm9wKSxqUXVlcnkuZWFjaCh7Zm9jdXM6XCJmb2N1c2luXCIsYmx1cjpcImZvY3Vzb3V0XCJ9LGZ1bmN0aW9uKHR5cGUsZGVsZWdhdGVUeXBlKXtqUXVlcnkuZXZlbnQuc3BlY2lhbFt0eXBlXT17c2V0dXA6ZnVuY3Rpb24oKXtyZXR1cm4gbGV2ZXJhZ2VOYXRpdmUodGhpcyx0eXBlLGV4cGVjdFN5bmMpLCExfSx0cmlnZ2VyOmZ1bmN0aW9uKCl7cmV0dXJuIGxldmVyYWdlTmF0aXZlKHRoaXMsdHlwZSksITB9LGRlbGVnYXRlVHlwZTpkZWxlZ2F0ZVR5cGV9fSksalF1ZXJ5LmVhY2goe21vdXNlZW50ZXI6XCJtb3VzZW92ZXJcIixtb3VzZWxlYXZlOlwibW91c2VvdXRcIixwb2ludGVyZW50ZXI6XCJwb2ludGVyb3ZlclwiLHBvaW50ZXJsZWF2ZTpcInBvaW50ZXJvdXRcIn0sZnVuY3Rpb24ob3JpZyxmaXgpe2pRdWVyeS5ldmVudC5zcGVjaWFsW29yaWddPXtkZWxlZ2F0ZVR5cGU6Zml4LGJpbmRUeXBlOmZpeCxoYW5kbGU6ZnVuY3Rpb24oZXZlbnQpe3ZhciByZXQsdGFyZ2V0PXRoaXMscmVsYXRlZD1ldmVudC5yZWxhdGVkVGFyZ2V0LGhhbmRsZU9iaj1ldmVudC5oYW5kbGVPYmo7cmV0dXJuIHJlbGF0ZWQmJihyZWxhdGVkPT09dGFyZ2V0fHxqUXVlcnkuY29udGFpbnModGFyZ2V0LHJlbGF0ZWQpKXx8KGV2ZW50LnR5cGU9aGFuZGxlT2JqLm9yaWdUeXBlLHJldD1oYW5kbGVPYmouaGFuZGxlci5hcHBseSh0aGlzLGFyZ3VtZW50cyksZXZlbnQudHlwZT1maXgpLHJldH19fSksalF1ZXJ5LmZuLmV4dGVuZCh7b246ZnVuY3Rpb24odHlwZXMsc2VsZWN0b3IsZGF0YSxmbil7cmV0dXJuIG9uKHRoaXMsdHlwZXMsc2VsZWN0b3IsZGF0YSxmbil9LG9uZTpmdW5jdGlvbih0eXBlcyxzZWxlY3RvcixkYXRhLGZuKXtyZXR1cm4gb24odGhpcyx0eXBlcyxzZWxlY3RvcixkYXRhLGZuLDEpfSxvZmY6ZnVuY3Rpb24odHlwZXMsc2VsZWN0b3IsZm4pe3ZhciBoYW5kbGVPYmosdHlwZTtpZih0eXBlcyYmdHlwZXMucHJldmVudERlZmF1bHQmJnR5cGVzLmhhbmRsZU9iailyZXR1cm4gaGFuZGxlT2JqPXR5cGVzLmhhbmRsZU9iaixqUXVlcnkodHlwZXMuZGVsZWdhdGVUYXJnZXQpLm9mZihoYW5kbGVPYmoubmFtZXNwYWNlP2hhbmRsZU9iai5vcmlnVHlwZStcIi5cIitoYW5kbGVPYmoubmFtZXNwYWNlOmhhbmRsZU9iai5vcmlnVHlwZSxoYW5kbGVPYmouc2VsZWN0b3IsaGFuZGxlT2JqLmhhbmRsZXIpLHRoaXM7aWYoXCJvYmplY3RcIj09dHlwZW9mIHR5cGVzKXtmb3IodHlwZSBpbiB0eXBlcyl0aGlzLm9mZih0eXBlLHNlbGVjdG9yLHR5cGVzW3R5cGVdKTtyZXR1cm4gdGhpc31yZXR1cm4hMSE9PXNlbGVjdG9yJiZcImZ1bmN0aW9uXCIhPXR5cGVvZiBzZWxlY3Rvcnx8KGZuPXNlbGVjdG9yLHNlbGVjdG9yPXZvaWQgMCksITE9PT1mbiYmKGZuPXJldHVybkZhbHNlKSx0aGlzLmVhY2goZnVuY3Rpb24oKXtqUXVlcnkuZXZlbnQucmVtb3ZlKHRoaXMsdHlwZXMsZm4sc2VsZWN0b3IpfSl9fSk7dmFyIHJ4aHRtbFRhZz0vPCg/IWFyZWF8YnJ8Y29sfGVtYmVkfGhyfGltZ3xpbnB1dHxsaW5rfG1ldGF8cGFyYW0pKChbYS16XVteXFwvXFwwPlxceDIwXFx0XFxyXFxuXFxmXSopW14+XSopXFwvPi9naSxybm9Jbm5lcmh0bWw9LzxzY3JpcHR8PHN0eWxlfDxsaW5rL2kscmNoZWNrZWQ9L2NoZWNrZWRcXHMqKD86W149XXw9XFxzKi5jaGVja2VkLikvaSxyY2xlYW5TY3JpcHQ9L15cXHMqPCEoPzpcXFtDREFUQVxcW3wtLSl8KD86XFxdXFxdfC0tKT5cXHMqJC9nO2pRdWVyeS5leHRlbmQoe2h0bWxQcmVmaWx0ZXI6ZnVuY3Rpb24oaHRtbCl7cmV0dXJuIGh0bWwucmVwbGFjZShyeGh0bWxUYWcsXCI8JDE+PC8kMj5cIil9LGNsb25lOmZ1bmN0aW9uKGVsZW0sZGF0YUFuZEV2ZW50cyxkZWVwRGF0YUFuZEV2ZW50cyl7dmFyIGksbCxzcmNFbGVtZW50cyxkZXN0RWxlbWVudHMsY2xvbmU9ZWxlbS5jbG9uZU5vZGUoITApLGluUGFnZT1pc0F0dGFjaGVkKGVsZW0pO2lmKCEoc3VwcG9ydC5ub0Nsb25lQ2hlY2tlZHx8MSE9PWVsZW0ubm9kZVR5cGUmJjExIT09ZWxlbS5ub2RlVHlwZXx8alF1ZXJ5LmlzWE1MRG9jKGVsZW0pKSlmb3IoZGVzdEVsZW1lbnRzPWdldEFsbChjbG9uZSksc3JjRWxlbWVudHM9Z2V0QWxsKGVsZW0pLGk9MCxsPXNyY0VsZW1lbnRzLmxlbmd0aDtpPGw7aSsrKWZpeElucHV0KHNyY0VsZW1lbnRzW2ldLGRlc3RFbGVtZW50c1tpXSk7aWYoZGF0YUFuZEV2ZW50cylpZihkZWVwRGF0YUFuZEV2ZW50cylmb3Ioc3JjRWxlbWVudHM9c3JjRWxlbWVudHN8fGdldEFsbChlbGVtKSxkZXN0RWxlbWVudHM9ZGVzdEVsZW1lbnRzfHxnZXRBbGwoY2xvbmUpLGk9MCxsPXNyY0VsZW1lbnRzLmxlbmd0aDtpPGw7aSsrKWNsb25lQ29weUV2ZW50KHNyY0VsZW1lbnRzW2ldLGRlc3RFbGVtZW50c1tpXSk7ZWxzZSBjbG9uZUNvcHlFdmVudChlbGVtLGNsb25lKTtyZXR1cm4gZGVzdEVsZW1lbnRzPWdldEFsbChjbG9uZSxcInNjcmlwdFwiKSxkZXN0RWxlbWVudHMubGVuZ3RoPjAmJnNldEdsb2JhbEV2YWwoZGVzdEVsZW1lbnRzLCFpblBhZ2UmJmdldEFsbChlbGVtLFwic2NyaXB0XCIpKSxjbG9uZX0sY2xlYW5EYXRhOmZ1bmN0aW9uKGVsZW1zKXtmb3IodmFyIGRhdGEsZWxlbSx0eXBlLHNwZWNpYWw9alF1ZXJ5LmV2ZW50LnNwZWNpYWwsaT0wO3ZvaWQgMCE9PShlbGVtPWVsZW1zW2ldKTtpKyspaWYoYWNjZXB0RGF0YShlbGVtKSl7aWYoZGF0YT1lbGVtW2RhdGFQcml2LmV4cGFuZG9dKXtpZihkYXRhLmV2ZW50cylmb3IodHlwZSBpbiBkYXRhLmV2ZW50cylzcGVjaWFsW3R5cGVdP2pRdWVyeS5ldmVudC5yZW1vdmUoZWxlbSx0eXBlKTpqUXVlcnkucmVtb3ZlRXZlbnQoZWxlbSx0eXBlLGRhdGEuaGFuZGxlKTtlbGVtW2RhdGFQcml2LmV4cGFuZG9dPXZvaWQgMH1lbGVtW2RhdGFVc2VyLmV4cGFuZG9dJiYoZWxlbVtkYXRhVXNlci5leHBhbmRvXT12b2lkIDApfX19KSxqUXVlcnkuZm4uZXh0ZW5kKHtkZXRhY2g6ZnVuY3Rpb24oc2VsZWN0b3Ipe3JldHVybiByZW1vdmUodGhpcyxzZWxlY3RvciwhMCl9LHJlbW92ZTpmdW5jdGlvbihzZWxlY3Rvcil7cmV0dXJuIHJlbW92ZSh0aGlzLHNlbGVjdG9yKX0sdGV4dDpmdW5jdGlvbih2YWx1ZSl7cmV0dXJuIGFjY2Vzcyh0aGlzLGZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4gdm9pZCAwPT09dmFsdWU/alF1ZXJ5LnRleHQodGhpcyk6dGhpcy5lbXB0eSgpLmVhY2goZnVuY3Rpb24oKXsxIT09dGhpcy5ub2RlVHlwZSYmMTEhPT10aGlzLm5vZGVUeXBlJiY5IT09dGhpcy5ub2RlVHlwZXx8KHRoaXMudGV4dENvbnRlbnQ9dmFsdWUpfSl9LG51bGwsdmFsdWUsYXJndW1lbnRzLmxlbmd0aCl9LGFwcGVuZDpmdW5jdGlvbigpe3JldHVybiBkb21NYW5pcCh0aGlzLGFyZ3VtZW50cyxmdW5jdGlvbihlbGVtKXtpZigxPT09dGhpcy5ub2RlVHlwZXx8MTE9PT10aGlzLm5vZGVUeXBlfHw5PT09dGhpcy5ub2RlVHlwZSl7bWFuaXB1bGF0aW9uVGFyZ2V0KHRoaXMsZWxlbSkuYXBwZW5kQ2hpbGQoZWxlbSl9fSl9LHByZXBlbmQ6ZnVuY3Rpb24oKXtyZXR1cm4gZG9tTWFuaXAodGhpcyxhcmd1bWVudHMsZnVuY3Rpb24oZWxlbSl7aWYoMT09PXRoaXMubm9kZVR5cGV8fDExPT09dGhpcy5ub2RlVHlwZXx8OT09PXRoaXMubm9kZVR5cGUpe3ZhciB0YXJnZXQ9bWFuaXB1bGF0aW9uVGFyZ2V0KHRoaXMsZWxlbSk7dGFyZ2V0Lmluc2VydEJlZm9yZShlbGVtLHRhcmdldC5maXJzdENoaWxkKX19KX0sYmVmb3JlOmZ1bmN0aW9uKCl7cmV0dXJuIGRvbU1hbmlwKHRoaXMsYXJndW1lbnRzLGZ1bmN0aW9uKGVsZW0pe3RoaXMucGFyZW50Tm9kZSYmdGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShlbGVtLHRoaXMpfSl9LGFmdGVyOmZ1bmN0aW9uKCl7cmV0dXJuIGRvbU1hbmlwKHRoaXMsYXJndW1lbnRzLGZ1bmN0aW9uKGVsZW0pe3RoaXMucGFyZW50Tm9kZSYmdGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShlbGVtLHRoaXMubmV4dFNpYmxpbmcpfSl9LGVtcHR5OmZ1bmN0aW9uKCl7Zm9yKHZhciBlbGVtLGk9MDtudWxsIT0oZWxlbT10aGlzW2ldKTtpKyspMT09PWVsZW0ubm9kZVR5cGUmJihqUXVlcnkuY2xlYW5EYXRhKGdldEFsbChlbGVtLCExKSksZWxlbS50ZXh0Q29udGVudD1cIlwiKTtyZXR1cm4gdGhpc30sY2xvbmU6ZnVuY3Rpb24oZGF0YUFuZEV2ZW50cyxkZWVwRGF0YUFuZEV2ZW50cyl7cmV0dXJuIGRhdGFBbmRFdmVudHM9bnVsbCE9ZGF0YUFuZEV2ZW50cyYmZGF0YUFuZEV2ZW50cyxkZWVwRGF0YUFuZEV2ZW50cz1udWxsPT1kZWVwRGF0YUFuZEV2ZW50cz9kYXRhQW5kRXZlbnRzOmRlZXBEYXRhQW5kRXZlbnRzLHRoaXMubWFwKGZ1bmN0aW9uKCl7cmV0dXJuIGpRdWVyeS5jbG9uZSh0aGlzLGRhdGFBbmRFdmVudHMsZGVlcERhdGFBbmRFdmVudHMpfSl9LGh0bWw6ZnVuY3Rpb24odmFsdWUpe3JldHVybiBhY2Nlc3ModGhpcyxmdW5jdGlvbih2YWx1ZSl7dmFyIGVsZW09dGhpc1swXXx8e30saT0wLGw9dGhpcy5sZW5ndGg7aWYodm9pZCAwPT09dmFsdWUmJjE9PT1lbGVtLm5vZGVUeXBlKXJldHVybiBlbGVtLmlubmVySFRNTDtpZihcInN0cmluZ1wiPT10eXBlb2YgdmFsdWUmJiFybm9Jbm5lcmh0bWwudGVzdCh2YWx1ZSkmJiF3cmFwTWFwWyhydGFnTmFtZS5leGVjKHZhbHVlKXx8W1wiXCIsXCJcIl0pWzFdLnRvTG93ZXJDYXNlKCldKXt2YWx1ZT1qUXVlcnkuaHRtbFByZWZpbHRlcih2YWx1ZSk7dHJ5e2Zvcig7aTxsO2krKyllbGVtPXRoaXNbaV18fHt9LDE9PT1lbGVtLm5vZGVUeXBlJiYoalF1ZXJ5LmNsZWFuRGF0YShnZXRBbGwoZWxlbSwhMSkpLGVsZW0uaW5uZXJIVE1MPXZhbHVlKTtlbGVtPTB9Y2F0Y2goZSl7fX1lbGVtJiZ0aGlzLmVtcHR5KCkuYXBwZW5kKHZhbHVlKX0sbnVsbCx2YWx1ZSxhcmd1bWVudHMubGVuZ3RoKX0scmVwbGFjZVdpdGg6ZnVuY3Rpb24oKXt2YXIgaWdub3JlZD1bXTtyZXR1cm4gZG9tTWFuaXAodGhpcyxhcmd1bWVudHMsZnVuY3Rpb24oZWxlbSl7dmFyIHBhcmVudD10aGlzLnBhcmVudE5vZGU7alF1ZXJ5LmluQXJyYXkodGhpcyxpZ25vcmVkKTwwJiYoalF1ZXJ5LmNsZWFuRGF0YShnZXRBbGwodGhpcykpLHBhcmVudCYmcGFyZW50LnJlcGxhY2VDaGlsZChlbGVtLHRoaXMpKX0saWdub3JlZCl9fSksalF1ZXJ5LmVhY2goe2FwcGVuZFRvOlwiYXBwZW5kXCIscHJlcGVuZFRvOlwicHJlcGVuZFwiLGluc2VydEJlZm9yZTpcImJlZm9yZVwiLGluc2VydEFmdGVyOlwiYWZ0ZXJcIixyZXBsYWNlQWxsOlwicmVwbGFjZVdpdGhcIn0sZnVuY3Rpb24obmFtZSxvcmlnaW5hbCl7alF1ZXJ5LmZuW25hbWVdPWZ1bmN0aW9uKHNlbGVjdG9yKXtmb3IodmFyIGVsZW1zLHJldD1bXSxpbnNlcnQ9alF1ZXJ5KHNlbGVjdG9yKSxsYXN0PWluc2VydC5sZW5ndGgtMSxpPTA7aTw9bGFzdDtpKyspZWxlbXM9aT09PWxhc3Q/dGhpczp0aGlzLmNsb25lKCEwKSxqUXVlcnkoaW5zZXJ0W2ldKVtvcmlnaW5hbF0oZWxlbXMpLHB1c2guYXBwbHkocmV0LGVsZW1zLmdldCgpKTtyZXR1cm4gdGhpcy5wdXNoU3RhY2socmV0KX19KTt2YXIgcm51bW5vbnB4PW5ldyBSZWdFeHAoXCJeKFwiK3BudW0rXCIpKD8hcHgpW2EteiVdKyRcIixcImlcIiksZ2V0U3R5bGVzPWZ1bmN0aW9uKGVsZW0pe3ZhciB2aWV3PWVsZW0ub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldztyZXR1cm4gdmlldyYmdmlldy5vcGVuZXJ8fCh2aWV3PXdpbmRvdyksdmlldy5nZXRDb21wdXRlZFN0eWxlKGVsZW0pfSxyYm94U3R5bGU9bmV3IFJlZ0V4cChjc3NFeHBhbmQuam9pbihcInxcIiksXCJpXCIpOyFmdW5jdGlvbigpe2Z1bmN0aW9uIGNvbXB1dGVTdHlsZVRlc3RzKCl7aWYoZGl2KXtjb250YWluZXIuc3R5bGUuY3NzVGV4dD1cInBvc2l0aW9uOmFic29sdXRlO2xlZnQ6LTExMTExcHg7d2lkdGg6NjBweDttYXJnaW4tdG9wOjFweDtwYWRkaW5nOjA7Ym9yZGVyOjBcIixkaXYuc3R5bGUuY3NzVGV4dD1cInBvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6YmxvY2s7Ym94LXNpemluZzpib3JkZXItYm94O292ZXJmbG93OnNjcm9sbDttYXJnaW46YXV0bztib3JkZXI6MXB4O3BhZGRpbmc6MXB4O3dpZHRoOjYwJTt0b3A6MSVcIixkb2N1bWVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoY29udGFpbmVyKS5hcHBlbmRDaGlsZChkaXYpO3ZhciBkaXZTdHlsZT13aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShkaXYpO3BpeGVsUG9zaXRpb25WYWw9XCIxJVwiIT09ZGl2U3R5bGUudG9wLHJlbGlhYmxlTWFyZ2luTGVmdFZhbD0xMj09PXJvdW5kUGl4ZWxNZWFzdXJlcyhkaXZTdHlsZS5tYXJnaW5MZWZ0KSxkaXYuc3R5bGUucmlnaHQ9XCI2MCVcIixwaXhlbEJveFN0eWxlc1ZhbD0zNj09PXJvdW5kUGl4ZWxNZWFzdXJlcyhkaXZTdHlsZS5yaWdodCksYm94U2l6aW5nUmVsaWFibGVWYWw9MzY9PT1yb3VuZFBpeGVsTWVhc3VyZXMoZGl2U3R5bGUud2lkdGgpLGRpdi5zdHlsZS5wb3NpdGlvbj1cImFic29sdXRlXCIsc2Nyb2xsYm94U2l6ZVZhbD0xMj09PXJvdW5kUGl4ZWxNZWFzdXJlcyhkaXYub2Zmc2V0V2lkdGgvMyksZG9jdW1lbnRFbGVtZW50LnJlbW92ZUNoaWxkKGNvbnRhaW5lciksZGl2PW51bGx9fWZ1bmN0aW9uIHJvdW5kUGl4ZWxNZWFzdXJlcyhtZWFzdXJlKXtyZXR1cm4gTWF0aC5yb3VuZChwYXJzZUZsb2F0KG1lYXN1cmUpKX12YXIgcGl4ZWxQb3NpdGlvblZhbCxib3hTaXppbmdSZWxpYWJsZVZhbCxzY3JvbGxib3hTaXplVmFsLHBpeGVsQm94U3R5bGVzVmFsLHJlbGlhYmxlTWFyZ2luTGVmdFZhbCxjb250YWluZXI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxkaXY9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtkaXYuc3R5bGUmJihkaXYuc3R5bGUuYmFja2dyb3VuZENsaXA9XCJjb250ZW50LWJveFwiLGRpdi5jbG9uZU5vZGUoITApLnN0eWxlLmJhY2tncm91bmRDbGlwPVwiXCIsc3VwcG9ydC5jbGVhckNsb25lU3R5bGU9XCJjb250ZW50LWJveFwiPT09ZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwLGpRdWVyeS5leHRlbmQoc3VwcG9ydCx7Ym94U2l6aW5nUmVsaWFibGU6ZnVuY3Rpb24oKXtyZXR1cm4gY29tcHV0ZVN0eWxlVGVzdHMoKSxib3hTaXppbmdSZWxpYWJsZVZhbH0scGl4ZWxCb3hTdHlsZXM6ZnVuY3Rpb24oKXtyZXR1cm4gY29tcHV0ZVN0eWxlVGVzdHMoKSxwaXhlbEJveFN0eWxlc1ZhbH0scGl4ZWxQb3NpdGlvbjpmdW5jdGlvbigpe3JldHVybiBjb21wdXRlU3R5bGVUZXN0cygpLHBpeGVsUG9zaXRpb25WYWx9LHJlbGlhYmxlTWFyZ2luTGVmdDpmdW5jdGlvbigpe3JldHVybiBjb21wdXRlU3R5bGVUZXN0cygpLHJlbGlhYmxlTWFyZ2luTGVmdFZhbH0sc2Nyb2xsYm94U2l6ZTpmdW5jdGlvbigpe3JldHVybiBjb21wdXRlU3R5bGVUZXN0cygpLHNjcm9sbGJveFNpemVWYWx9fSkpfSgpO3ZhciBjc3NQcmVmaXhlcz1bXCJXZWJraXRcIixcIk1velwiLFwibXNcIl0sZW1wdHlTdHlsZT1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLnN0eWxlLHZlbmRvclByb3BzPXt9LHJkaXNwbGF5c3dhcD0vXihub25lfHRhYmxlKD8hLWNbZWFdKS4rKS8scmN1c3RvbVByb3A9L14tLS8sY3NzU2hvdz17cG9zaXRpb246XCJhYnNvbHV0ZVwiLHZpc2liaWxpdHk6XCJoaWRkZW5cIixkaXNwbGF5OlwiYmxvY2tcIn0sY3NzTm9ybWFsVHJhbnNmb3JtPXtsZXR0ZXJTcGFjaW5nOlwiMFwiLGZvbnRXZWlnaHQ6XCI0MDBcIn07alF1ZXJ5LmV4dGVuZCh7Y3NzSG9va3M6e29wYWNpdHk6e2dldDpmdW5jdGlvbihlbGVtLGNvbXB1dGVkKXtpZihjb21wdXRlZCl7dmFyIHJldD1jdXJDU1MoZWxlbSxcIm9wYWNpdHlcIik7cmV0dXJuXCJcIj09PXJldD9cIjFcIjpyZXR9fX19LGNzc051bWJlcjp7YW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6ITAsY29sdW1uQ291bnQ6ITAsZmlsbE9wYWNpdHk6ITAsZmxleEdyb3c6ITAsZmxleFNocmluazohMCxmb250V2VpZ2h0OiEwLGdyaWRBcmVhOiEwLGdyaWRDb2x1bW46ITAsZ3JpZENvbHVtbkVuZDohMCxncmlkQ29sdW1uU3RhcnQ6ITAsZ3JpZFJvdzohMCxncmlkUm93RW5kOiEwLGdyaWRSb3dTdGFydDohMCxsaW5lSGVpZ2h0OiEwLG9wYWNpdHk6ITAsb3JkZXI6ITAsb3JwaGFuczohMCx3aWRvd3M6ITAsekluZGV4OiEwLHpvb206ITB9LGNzc1Byb3BzOnt9LHN0eWxlOmZ1bmN0aW9uKGVsZW0sbmFtZSx2YWx1ZSxleHRyYSl7aWYoZWxlbSYmMyE9PWVsZW0ubm9kZVR5cGUmJjghPT1lbGVtLm5vZGVUeXBlJiZlbGVtLnN0eWxlKXt2YXIgcmV0LHR5cGUsaG9va3Msb3JpZ05hbWU9Y2FtZWxDYXNlKG5hbWUpLGlzQ3VzdG9tUHJvcD1yY3VzdG9tUHJvcC50ZXN0KG5hbWUpLHN0eWxlPWVsZW0uc3R5bGU7aWYoaXNDdXN0b21Qcm9wfHwobmFtZT1maW5hbFByb3BOYW1lKG9yaWdOYW1lKSksaG9va3M9alF1ZXJ5LmNzc0hvb2tzW25hbWVdfHxqUXVlcnkuY3NzSG9va3Nbb3JpZ05hbWVdLHZvaWQgMD09PXZhbHVlKXJldHVybiBob29rcyYmXCJnZXRcImluIGhvb2tzJiZ2b2lkIDAhPT0ocmV0PWhvb2tzLmdldChlbGVtLCExLGV4dHJhKSk/cmV0OnN0eWxlW25hbWVdO3R5cGU9dHlwZW9mIHZhbHVlLFwic3RyaW5nXCI9PT10eXBlJiYocmV0PXJjc3NOdW0uZXhlYyh2YWx1ZSkpJiZyZXRbMV0mJih2YWx1ZT1hZGp1c3RDU1MoZWxlbSxuYW1lLHJldCksdHlwZT1cIm51bWJlclwiKSxudWxsIT12YWx1ZSYmdmFsdWU9PT12YWx1ZSYmKFwibnVtYmVyXCIhPT10eXBlfHxpc0N1c3RvbVByb3B8fCh2YWx1ZSs9cmV0JiZyZXRbM118fChqUXVlcnkuY3NzTnVtYmVyW29yaWdOYW1lXT9cIlwiOlwicHhcIikpLHN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlfHxcIlwiIT09dmFsdWV8fDAhPT1uYW1lLmluZGV4T2YoXCJiYWNrZ3JvdW5kXCIpfHwoc3R5bGVbbmFtZV09XCJpbmhlcml0XCIpLGhvb2tzJiZcInNldFwiaW4gaG9va3MmJnZvaWQgMD09PSh2YWx1ZT1ob29rcy5zZXQoZWxlbSx2YWx1ZSxleHRyYSkpfHwoaXNDdXN0b21Qcm9wP3N0eWxlLnNldFByb3BlcnR5KG5hbWUsdmFsdWUpOnN0eWxlW25hbWVdPXZhbHVlKSl9fSxjc3M6ZnVuY3Rpb24oZWxlbSxuYW1lLGV4dHJhLHN0eWxlcyl7dmFyIHZhbCxudW0saG9va3Msb3JpZ05hbWU9Y2FtZWxDYXNlKG5hbWUpO3JldHVybiByY3VzdG9tUHJvcC50ZXN0KG5hbWUpfHwobmFtZT1maW5hbFByb3BOYW1lKG9yaWdOYW1lKSksaG9va3M9alF1ZXJ5LmNzc0hvb2tzW25hbWVdfHxqUXVlcnkuY3NzSG9va3Nbb3JpZ05hbWVdLGhvb2tzJiZcImdldFwiaW4gaG9va3MmJih2YWw9aG9va3MuZ2V0KGVsZW0sITAsZXh0cmEpKSx2b2lkIDA9PT12YWwmJih2YWw9Y3VyQ1NTKGVsZW0sbmFtZSxzdHlsZXMpKSxcIm5vcm1hbFwiPT09dmFsJiZuYW1lIGluIGNzc05vcm1hbFRyYW5zZm9ybSYmKHZhbD1jc3NOb3JtYWxUcmFuc2Zvcm1bbmFtZV0pLFwiXCI9PT1leHRyYXx8ZXh0cmE/KG51bT1wYXJzZUZsb2F0KHZhbCksITA9PT1leHRyYXx8aXNGaW5pdGUobnVtKT9udW18fDA6dmFsKTp2YWx9fSksalF1ZXJ5LmVhY2goW1wiaGVpZ2h0XCIsXCJ3aWR0aFwiXSxmdW5jdGlvbihpLGRpbWVuc2lvbil7alF1ZXJ5LmNzc0hvb2tzW2RpbWVuc2lvbl09e2dldDpmdW5jdGlvbihlbGVtLGNvbXB1dGVkLGV4dHJhKXtpZihjb21wdXRlZClyZXR1cm4hcmRpc3BsYXlzd2FwLnRlc3QoalF1ZXJ5LmNzcyhlbGVtLFwiZGlzcGxheVwiKSl8fGVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGgmJmVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGg/Z2V0V2lkdGhPckhlaWdodChlbGVtLGRpbWVuc2lvbixleHRyYSk6c3dhcChlbGVtLGNzc1Nob3csZnVuY3Rpb24oKXtyZXR1cm4gZ2V0V2lkdGhPckhlaWdodChlbGVtLGRpbWVuc2lvbixleHRyYSl9KX0sc2V0OmZ1bmN0aW9uKGVsZW0sdmFsdWUsZXh0cmEpe3ZhciBtYXRjaGVzLHN0eWxlcz1nZXRTdHlsZXMoZWxlbSksc2Nyb2xsYm94U2l6ZUJ1Z2d5PSFzdXBwb3J0LnNjcm9sbGJveFNpemUoKSYmXCJhYnNvbHV0ZVwiPT09c3R5bGVzLnBvc2l0aW9uLGJveFNpemluZ05lZWRlZD1zY3JvbGxib3hTaXplQnVnZ3l8fGV4dHJhLGlzQm9yZGVyQm94PWJveFNpemluZ05lZWRlZCYmXCJib3JkZXItYm94XCI9PT1qUXVlcnkuY3NzKGVsZW0sXCJib3hTaXppbmdcIiwhMSxzdHlsZXMpLHN1YnRyYWN0PWV4dHJhP2JveE1vZGVsQWRqdXN0bWVudChlbGVtLGRpbWVuc2lvbixleHRyYSxpc0JvcmRlckJveCxzdHlsZXMpOjA7cmV0dXJuIGlzQm9yZGVyQm94JiZzY3JvbGxib3hTaXplQnVnZ3kmJihzdWJ0cmFjdC09TWF0aC5jZWlsKGVsZW1bXCJvZmZzZXRcIitkaW1lbnNpb25bMF0udG9VcHBlckNhc2UoKStkaW1lbnNpb24uc2xpY2UoMSldLXBhcnNlRmxvYXQoc3R5bGVzW2RpbWVuc2lvbl0pLWJveE1vZGVsQWRqdXN0bWVudChlbGVtLGRpbWVuc2lvbixcImJvcmRlclwiLCExLHN0eWxlcyktLjUpKSxzdWJ0cmFjdCYmKG1hdGNoZXM9cmNzc051bS5leGVjKHZhbHVlKSkmJlwicHhcIiE9PShtYXRjaGVzWzNdfHxcInB4XCIpJiYoZWxlbS5zdHlsZVtkaW1lbnNpb25dPXZhbHVlLHZhbHVlPWpRdWVyeS5jc3MoZWxlbSxkaW1lbnNpb24pKSxzZXRQb3NpdGl2ZU51bWJlcihlbGVtLHZhbHVlLHN1YnRyYWN0KX19fSksalF1ZXJ5LmNzc0hvb2tzLm1hcmdpbkxlZnQ9YWRkR2V0SG9va0lmKHN1cHBvcnQucmVsaWFibGVNYXJnaW5MZWZ0LGZ1bmN0aW9uKGVsZW0sY29tcHV0ZWQpe2lmKGNvbXB1dGVkKXJldHVybihwYXJzZUZsb2F0KGN1ckNTUyhlbGVtLFwibWFyZ2luTGVmdFwiKSl8fGVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdC1zd2FwKGVsZW0se21hcmdpbkxlZnQ6MH0sZnVuY3Rpb24oKXtyZXR1cm4gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0fSkpK1wicHhcIn0pLGpRdWVyeS5lYWNoKHttYXJnaW46XCJcIixwYWRkaW5nOlwiXCIsYm9yZGVyOlwiV2lkdGhcIn0sZnVuY3Rpb24ocHJlZml4LHN1ZmZpeCl7alF1ZXJ5LmNzc0hvb2tzW3ByZWZpeCtzdWZmaXhdPXtleHBhbmQ6ZnVuY3Rpb24odmFsdWUpe2Zvcih2YXIgaT0wLGV4cGFuZGVkPXt9LHBhcnRzPVwic3RyaW5nXCI9PXR5cGVvZiB2YWx1ZT92YWx1ZS5zcGxpdChcIiBcIik6W3ZhbHVlXTtpPDQ7aSsrKWV4cGFuZGVkW3ByZWZpeCtjc3NFeHBhbmRbaV0rc3VmZml4XT1wYXJ0c1tpXXx8cGFydHNbaS0yXXx8cGFydHNbMF07cmV0dXJuIGV4cGFuZGVkfX0sXCJtYXJnaW5cIiE9PXByZWZpeCYmKGpRdWVyeS5jc3NIb29rc1twcmVmaXgrc3VmZml4XS5zZXQ9c2V0UG9zaXRpdmVOdW1iZXIpfSksalF1ZXJ5LmZuLmV4dGVuZCh7Y3NzOmZ1bmN0aW9uKG5hbWUsdmFsdWUpe3JldHVybiBhY2Nlc3ModGhpcyxmdW5jdGlvbihlbGVtLG5hbWUsdmFsdWUpe3ZhciBzdHlsZXMsbGVuLG1hcD17fSxpPTA7aWYoQXJyYXkuaXNBcnJheShuYW1lKSl7Zm9yKHN0eWxlcz1nZXRTdHlsZXMoZWxlbSksbGVuPW5hbWUubGVuZ3RoO2k8bGVuO2krKyltYXBbbmFtZVtpXV09alF1ZXJ5LmNzcyhlbGVtLG5hbWVbaV0sITEsc3R5bGVzKTtyZXR1cm4gbWFwfXJldHVybiB2b2lkIDAhPT12YWx1ZT9qUXVlcnkuc3R5bGUoZWxlbSxuYW1lLHZhbHVlKTpqUXVlcnkuY3NzKGVsZW0sbmFtZSl9LG5hbWUsdmFsdWUsYXJndW1lbnRzLmxlbmd0aD4xKX19KSxqUXVlcnkuVHdlZW49VHdlZW4sVHdlZW4ucHJvdG90eXBlPXtjb25zdHJ1Y3RvcjpUd2Vlbixpbml0OmZ1bmN0aW9uKGVsZW0sb3B0aW9ucyxwcm9wLGVuZCxlYXNpbmcsdW5pdCl7dGhpcy5lbGVtPWVsZW0sdGhpcy5wcm9wPXByb3AsdGhpcy5lYXNpbmc9ZWFzaW5nfHxqUXVlcnkuZWFzaW5nLl9kZWZhdWx0LHRoaXMub3B0aW9ucz1vcHRpb25zLHRoaXMuc3RhcnQ9dGhpcy5ub3c9dGhpcy5jdXIoKSx0aGlzLmVuZD1lbmQsdGhpcy51bml0PXVuaXR8fChqUXVlcnkuY3NzTnVtYmVyW3Byb3BdP1wiXCI6XCJweFwiKX0sY3VyOmZ1bmN0aW9uKCl7dmFyIGhvb2tzPVR3ZWVuLnByb3BIb29rc1t0aGlzLnByb3BdO3JldHVybiBob29rcyYmaG9va3MuZ2V0P2hvb2tzLmdldCh0aGlzKTpUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuZ2V0KHRoaXMpfSxydW46ZnVuY3Rpb24ocGVyY2VudCl7dmFyIGVhc2VkLGhvb2tzPVR3ZWVuLnByb3BIb29rc1t0aGlzLnByb3BdO3JldHVybiB0aGlzLm9wdGlvbnMuZHVyYXRpb24/dGhpcy5wb3M9ZWFzZWQ9alF1ZXJ5LmVhc2luZ1t0aGlzLmVhc2luZ10ocGVyY2VudCx0aGlzLm9wdGlvbnMuZHVyYXRpb24qcGVyY2VudCwwLDEsdGhpcy5vcHRpb25zLmR1cmF0aW9uKTp0aGlzLnBvcz1lYXNlZD1wZXJjZW50LHRoaXMubm93PSh0aGlzLmVuZC10aGlzLnN0YXJ0KSplYXNlZCt0aGlzLnN0YXJ0LHRoaXMub3B0aW9ucy5zdGVwJiZ0aGlzLm9wdGlvbnMuc3RlcC5jYWxsKHRoaXMuZWxlbSx0aGlzLm5vdyx0aGlzKSxob29rcyYmaG9va3Muc2V0P2hvb2tzLnNldCh0aGlzKTpUd2Vlbi5wcm9wSG9va3MuX2RlZmF1bHQuc2V0KHRoaXMpLHRoaXN9fSxUd2Vlbi5wcm90b3R5cGUuaW5pdC5wcm90b3R5cGU9VHdlZW4ucHJvdG90eXBlLFR3ZWVuLnByb3BIb29rcz17X2RlZmF1bHQ6e2dldDpmdW5jdGlvbih0d2Vlbil7dmFyIHJlc3VsdDtyZXR1cm4gMSE9PXR3ZWVuLmVsZW0ubm9kZVR5cGV8fG51bGwhPXR3ZWVuLmVsZW1bdHdlZW4ucHJvcF0mJm51bGw9PXR3ZWVuLmVsZW0uc3R5bGVbdHdlZW4ucHJvcF0/dHdlZW4uZWxlbVt0d2Vlbi5wcm9wXToocmVzdWx0PWpRdWVyeS5jc3ModHdlZW4uZWxlbSx0d2Vlbi5wcm9wLFwiXCIpLHJlc3VsdCYmXCJhdXRvXCIhPT1yZXN1bHQ/cmVzdWx0OjApfSxzZXQ6ZnVuY3Rpb24odHdlZW4pe2pRdWVyeS5meC5zdGVwW3R3ZWVuLnByb3BdP2pRdWVyeS5meC5zdGVwW3R3ZWVuLnByb3BdKHR3ZWVuKToxIT09dHdlZW4uZWxlbS5ub2RlVHlwZXx8IWpRdWVyeS5jc3NIb29rc1t0d2Vlbi5wcm9wXSYmbnVsbD09dHdlZW4uZWxlbS5zdHlsZVtmaW5hbFByb3BOYW1lKHR3ZWVuLnByb3ApXT90d2Vlbi5lbGVtW3R3ZWVuLnByb3BdPXR3ZWVuLm5vdzpqUXVlcnkuc3R5bGUodHdlZW4uZWxlbSx0d2Vlbi5wcm9wLHR3ZWVuLm5vdyt0d2Vlbi51bml0KX19fSxUd2Vlbi5wcm9wSG9va3Muc2Nyb2xsVG9wPVR3ZWVuLnByb3BIb29rcy5zY3JvbGxMZWZ0PXtzZXQ6ZnVuY3Rpb24odHdlZW4pe3R3ZWVuLmVsZW0ubm9kZVR5cGUmJnR3ZWVuLmVsZW0ucGFyZW50Tm9kZSYmKHR3ZWVuLmVsZW1bdHdlZW4ucHJvcF09dHdlZW4ubm93KX19LGpRdWVyeS5lYXNpbmc9e2xpbmVhcjpmdW5jdGlvbihwKXtyZXR1cm4gcH0sc3dpbmc6ZnVuY3Rpb24ocCl7cmV0dXJuLjUtTWF0aC5jb3MocCpNYXRoLlBJKS8yfSxfZGVmYXVsdDpcInN3aW5nXCJ9LGpRdWVyeS5meD1Ud2Vlbi5wcm90b3R5cGUuaW5pdCxqUXVlcnkuZnguc3RlcD17fTt2YXIgZnhOb3csaW5Qcm9ncmVzcyxyZnh0eXBlcz0vXig/OnRvZ2dsZXxzaG93fGhpZGUpJC8scnJ1bj0vcXVldWVIb29rcyQvO2pRdWVyeS5BbmltYXRpb249alF1ZXJ5LmV4dGVuZChBbmltYXRpb24se3R3ZWVuZXJzOntcIipcIjpbZnVuY3Rpb24ocHJvcCx2YWx1ZSl7dmFyIHR3ZWVuPXRoaXMuY3JlYXRlVHdlZW4ocHJvcCx2YWx1ZSk7cmV0dXJuIGFkanVzdENTUyh0d2Vlbi5lbGVtLHByb3AscmNzc051bS5leGVjKHZhbHVlKSx0d2VlbiksdHdlZW59XX0sdHdlZW5lcjpmdW5jdGlvbihwcm9wcyxjYWxsYmFjayl7aXNGdW5jdGlvbihwcm9wcyk/KGNhbGxiYWNrPXByb3BzLHByb3BzPVtcIipcIl0pOnByb3BzPXByb3BzLm1hdGNoKHJub3RodG1sd2hpdGUpO2Zvcih2YXIgcHJvcCxpbmRleD0wLGxlbmd0aD1wcm9wcy5sZW5ndGg7aW5kZXg8bGVuZ3RoO2luZGV4KyspcHJvcD1wcm9wc1tpbmRleF0sQW5pbWF0aW9uLnR3ZWVuZXJzW3Byb3BdPUFuaW1hdGlvbi50d2VlbmVyc1twcm9wXXx8W10sQW5pbWF0aW9uLnR3ZWVuZXJzW3Byb3BdLnVuc2hpZnQoY2FsbGJhY2spfSxwcmVmaWx0ZXJzOltkZWZhdWx0UHJlZmlsdGVyXSxwcmVmaWx0ZXI6ZnVuY3Rpb24oY2FsbGJhY2sscHJlcGVuZCl7cHJlcGVuZD9BbmltYXRpb24ucHJlZmlsdGVycy51bnNoaWZ0KGNhbGxiYWNrKTpBbmltYXRpb24ucHJlZmlsdGVycy5wdXNoKGNhbGxiYWNrKX19KSxqUXVlcnkuc3BlZWQ9ZnVuY3Rpb24oc3BlZWQsZWFzaW5nLGZuKXt2YXIgb3B0PXNwZWVkJiZcIm9iamVjdFwiPT10eXBlb2Ygc3BlZWQ/alF1ZXJ5LmV4dGVuZCh7fSxzcGVlZCk6e2NvbXBsZXRlOmZufHwhZm4mJmVhc2luZ3x8aXNGdW5jdGlvbihzcGVlZCkmJnNwZWVkLGR1cmF0aW9uOnNwZWVkLGVhc2luZzpmbiYmZWFzaW5nfHxlYXNpbmcmJiFpc0Z1bmN0aW9uKGVhc2luZykmJmVhc2luZ307cmV0dXJuIGpRdWVyeS5meC5vZmY/b3B0LmR1cmF0aW9uPTA6XCJudW1iZXJcIiE9dHlwZW9mIG9wdC5kdXJhdGlvbiYmKG9wdC5kdXJhdGlvbiBpbiBqUXVlcnkuZnguc3BlZWRzP29wdC5kdXJhdGlvbj1qUXVlcnkuZnguc3BlZWRzW29wdC5kdXJhdGlvbl06b3B0LmR1cmF0aW9uPWpRdWVyeS5meC5zcGVlZHMuX2RlZmF1bHQpLG51bGwhPW9wdC5xdWV1ZSYmITAhPT1vcHQucXVldWV8fChvcHQucXVldWU9XCJmeFwiKSxvcHQub2xkPW9wdC5jb21wbGV0ZSxvcHQuY29tcGxldGU9ZnVuY3Rpb24oKXtpc0Z1bmN0aW9uKG9wdC5vbGQpJiZvcHQub2xkLmNhbGwodGhpcyksb3B0LnF1ZXVlJiZqUXVlcnkuZGVxdWV1ZSh0aGlzLG9wdC5xdWV1ZSl9LG9wdH0salF1ZXJ5LmZuLmV4dGVuZCh7ZmFkZVRvOmZ1bmN0aW9uKHNwZWVkLHRvLGVhc2luZyxjYWxsYmFjayl7cmV0dXJuIHRoaXMuZmlsdGVyKGlzSGlkZGVuV2l0aGluVHJlZSkuY3NzKFwib3BhY2l0eVwiLDApLnNob3coKS5lbmQoKS5hbmltYXRlKHtvcGFjaXR5OnRvfSxzcGVlZCxlYXNpbmcsY2FsbGJhY2spfSxhbmltYXRlOmZ1bmN0aW9uKHByb3Asc3BlZWQsZWFzaW5nLGNhbGxiYWNrKXt2YXIgZW1wdHk9alF1ZXJ5LmlzRW1wdHlPYmplY3QocHJvcCksb3B0YWxsPWpRdWVyeS5zcGVlZChzcGVlZCxlYXNpbmcsY2FsbGJhY2spLGRvQW5pbWF0aW9uPWZ1bmN0aW9uKCl7dmFyIGFuaW09QW5pbWF0aW9uKHRoaXMsalF1ZXJ5LmV4dGVuZCh7fSxwcm9wKSxvcHRhbGwpOyhlbXB0eXx8ZGF0YVByaXYuZ2V0KHRoaXMsXCJmaW5pc2hcIikpJiZhbmltLnN0b3AoITApfTtyZXR1cm4gZG9BbmltYXRpb24uZmluaXNoPWRvQW5pbWF0aW9uLGVtcHR5fHwhMT09PW9wdGFsbC5xdWV1ZT90aGlzLmVhY2goZG9BbmltYXRpb24pOnRoaXMucXVldWUob3B0YWxsLnF1ZXVlLGRvQW5pbWF0aW9uKX0sc3RvcDpmdW5jdGlvbih0eXBlLGNsZWFyUXVldWUsZ290b0VuZCl7dmFyIHN0b3BRdWV1ZT1mdW5jdGlvbihob29rcyl7dmFyIHN0b3A9aG9va3Muc3RvcDtkZWxldGUgaG9va3Muc3RvcCxzdG9wKGdvdG9FbmQpfTtyZXR1cm5cInN0cmluZ1wiIT10eXBlb2YgdHlwZSYmKGdvdG9FbmQ9Y2xlYXJRdWV1ZSxjbGVhclF1ZXVlPXR5cGUsdHlwZT12b2lkIDApLGNsZWFyUXVldWUmJiExIT09dHlwZSYmdGhpcy5xdWV1ZSh0eXBlfHxcImZ4XCIsW10pLHRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciBkZXF1ZXVlPSEwLGluZGV4PW51bGwhPXR5cGUmJnR5cGUrXCJxdWV1ZUhvb2tzXCIsdGltZXJzPWpRdWVyeS50aW1lcnMsZGF0YT1kYXRhUHJpdi5nZXQodGhpcyk7aWYoaW5kZXgpZGF0YVtpbmRleF0mJmRhdGFbaW5kZXhdLnN0b3AmJnN0b3BRdWV1ZShkYXRhW2luZGV4XSk7ZWxzZSBmb3IoaW5kZXggaW4gZGF0YSlkYXRhW2luZGV4XSYmZGF0YVtpbmRleF0uc3RvcCYmcnJ1bi50ZXN0KGluZGV4KSYmc3RvcFF1ZXVlKGRhdGFbaW5kZXhdKTtmb3IoaW5kZXg9dGltZXJzLmxlbmd0aDtpbmRleC0tOyl0aW1lcnNbaW5kZXhdLmVsZW0hPT10aGlzfHxudWxsIT10eXBlJiZ0aW1lcnNbaW5kZXhdLnF1ZXVlIT09dHlwZXx8KHRpbWVyc1tpbmRleF0uYW5pbS5zdG9wKGdvdG9FbmQpLGRlcXVldWU9ITEsdGltZXJzLnNwbGljZShpbmRleCwxKSk7IWRlcXVldWUmJmdvdG9FbmR8fGpRdWVyeS5kZXF1ZXVlKHRoaXMsdHlwZSl9KX0sZmluaXNoOmZ1bmN0aW9uKHR5cGUpe3JldHVybiExIT09dHlwZSYmKHR5cGU9dHlwZXx8XCJmeFwiKSx0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgaW5kZXgsZGF0YT1kYXRhUHJpdi5nZXQodGhpcykscXVldWU9ZGF0YVt0eXBlK1wicXVldWVcIl0saG9va3M9ZGF0YVt0eXBlK1wicXVldWVIb29rc1wiXSx0aW1lcnM9alF1ZXJ5LnRpbWVycyxsZW5ndGg9cXVldWU/cXVldWUubGVuZ3RoOjA7Zm9yKGRhdGEuZmluaXNoPSEwLGpRdWVyeS5xdWV1ZSh0aGlzLHR5cGUsW10pLGhvb2tzJiZob29rcy5zdG9wJiZob29rcy5zdG9wLmNhbGwodGhpcywhMCksaW5kZXg9dGltZXJzLmxlbmd0aDtpbmRleC0tOyl0aW1lcnNbaW5kZXhdLmVsZW09PT10aGlzJiZ0aW1lcnNbaW5kZXhdLnF1ZXVlPT09dHlwZSYmKHRpbWVyc1tpbmRleF0uYW5pbS5zdG9wKCEwKSx0aW1lcnMuc3BsaWNlKGluZGV4LDEpKTtmb3IoaW5kZXg9MDtpbmRleDxsZW5ndGg7aW5kZXgrKylxdWV1ZVtpbmRleF0mJnF1ZXVlW2luZGV4XS5maW5pc2gmJnF1ZXVlW2luZGV4XS5maW5pc2guY2FsbCh0aGlzKTtkZWxldGUgZGF0YS5maW5pc2h9KX19KSxqUXVlcnkuZWFjaChbXCJ0b2dnbGVcIixcInNob3dcIixcImhpZGVcIl0sZnVuY3Rpb24oaSxuYW1lKXt2YXIgY3NzRm49alF1ZXJ5LmZuW25hbWVdO2pRdWVyeS5mbltuYW1lXT1mdW5jdGlvbihzcGVlZCxlYXNpbmcsY2FsbGJhY2spe3JldHVybiBudWxsPT1zcGVlZHx8XCJib29sZWFuXCI9PXR5cGVvZiBzcGVlZD9jc3NGbi5hcHBseSh0aGlzLGFyZ3VtZW50cyk6dGhpcy5hbmltYXRlKGdlbkZ4KG5hbWUsITApLHNwZWVkLGVhc2luZyxjYWxsYmFjayl9fSksalF1ZXJ5LmVhY2goe3NsaWRlRG93bjpnZW5GeChcInNob3dcIiksc2xpZGVVcDpnZW5GeChcImhpZGVcIiksc2xpZGVUb2dnbGU6Z2VuRngoXCJ0b2dnbGVcIiksZmFkZUluOntvcGFjaXR5Olwic2hvd1wifSxmYWRlT3V0OntvcGFjaXR5OlwiaGlkZVwifSxmYWRlVG9nZ2xlOntvcGFjaXR5OlwidG9nZ2xlXCJ9fSxmdW5jdGlvbihuYW1lLHByb3BzKXtqUXVlcnkuZm5bbmFtZV09ZnVuY3Rpb24oc3BlZWQsZWFzaW5nLGNhbGxiYWNrKXtyZXR1cm4gdGhpcy5hbmltYXRlKHByb3BzLHNwZWVkLGVhc2luZyxjYWxsYmFjayl9fSksalF1ZXJ5LnRpbWVycz1bXSxqUXVlcnkuZngudGljaz1mdW5jdGlvbigpe3ZhciB0aW1lcixpPTAsdGltZXJzPWpRdWVyeS50aW1lcnM7Zm9yKGZ4Tm93PURhdGUubm93KCk7aTx0aW1lcnMubGVuZ3RoO2krKykodGltZXI9dGltZXJzW2ldKSgpfHx0aW1lcnNbaV0hPT10aW1lcnx8dGltZXJzLnNwbGljZShpLS0sMSk7dGltZXJzLmxlbmd0aHx8alF1ZXJ5LmZ4LnN0b3AoKSxmeE5vdz12b2lkIDB9LGpRdWVyeS5meC50aW1lcj1mdW5jdGlvbih0aW1lcil7alF1ZXJ5LnRpbWVycy5wdXNoKHRpbWVyKSxqUXVlcnkuZnguc3RhcnQoKX0salF1ZXJ5LmZ4LmludGVydmFsPTEzLGpRdWVyeS5meC5zdGFydD1mdW5jdGlvbigpe2luUHJvZ3Jlc3N8fChpblByb2dyZXNzPSEwLHNjaGVkdWxlKCkpfSxqUXVlcnkuZnguc3RvcD1mdW5jdGlvbigpe2luUHJvZ3Jlc3M9bnVsbH0salF1ZXJ5LmZ4LnNwZWVkcz17c2xvdzo2MDAsZmFzdDoyMDAsX2RlZmF1bHQ6NDAwfSxqUXVlcnkuZm4uZGVsYXk9ZnVuY3Rpb24odGltZSx0eXBlKXtyZXR1cm4gdGltZT1qUXVlcnkuZng/alF1ZXJ5LmZ4LnNwZWVkc1t0aW1lXXx8dGltZTp0aW1lLHR5cGU9dHlwZXx8XCJmeFwiLHRoaXMucXVldWUodHlwZSxmdW5jdGlvbihuZXh0LGhvb2tzKXt2YXIgdGltZW91dD13aW5kb3cuc2V0VGltZW91dChuZXh0LHRpbWUpO2hvb2tzLnN0b3A9ZnVuY3Rpb24oKXt3aW5kb3cuY2xlYXJUaW1lb3V0KHRpbWVvdXQpfX0pfSxmdW5jdGlvbigpe3ZhciBpbnB1dD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIiksc2VsZWN0PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzZWxlY3RcIiksb3B0PXNlbGVjdC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwib3B0aW9uXCIpKTtpbnB1dC50eXBlPVwiY2hlY2tib3hcIixzdXBwb3J0LmNoZWNrT249XCJcIiE9PWlucHV0LnZhbHVlLHN1cHBvcnQub3B0U2VsZWN0ZWQ9b3B0LnNlbGVjdGVkLGlucHV0PWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKSxpbnB1dC52YWx1ZT1cInRcIixpbnB1dC50eXBlPVwicmFkaW9cIixzdXBwb3J0LnJhZGlvVmFsdWU9XCJ0XCI9PT1pbnB1dC52YWx1ZX0oKTt2YXIgYm9vbEhvb2ssYXR0ckhhbmRsZT1qUXVlcnkuZXhwci5hdHRySGFuZGxlO2pRdWVyeS5mbi5leHRlbmQoe2F0dHI6ZnVuY3Rpb24obmFtZSx2YWx1ZSl7cmV0dXJuIGFjY2Vzcyh0aGlzLGpRdWVyeS5hdHRyLG5hbWUsdmFsdWUsYXJndW1lbnRzLmxlbmd0aD4xKX0scmVtb3ZlQXR0cjpmdW5jdGlvbihuYW1lKXtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7alF1ZXJ5LnJlbW92ZUF0dHIodGhpcyxuYW1lKX0pfX0pLGpRdWVyeS5leHRlbmQoe2F0dHI6ZnVuY3Rpb24oZWxlbSxuYW1lLHZhbHVlKXt2YXIgcmV0LGhvb2tzLG5UeXBlPWVsZW0ubm9kZVR5cGU7aWYoMyE9PW5UeXBlJiY4IT09blR5cGUmJjIhPT1uVHlwZSlyZXR1cm4gdm9pZCAwPT09ZWxlbS5nZXRBdHRyaWJ1dGU/alF1ZXJ5LnByb3AoZWxlbSxuYW1lLHZhbHVlKTooMT09PW5UeXBlJiZqUXVlcnkuaXNYTUxEb2MoZWxlbSl8fChob29rcz1qUXVlcnkuYXR0ckhvb2tzW25hbWUudG9Mb3dlckNhc2UoKV18fChqUXVlcnkuZXhwci5tYXRjaC5ib29sLnRlc3QobmFtZSk/Ym9vbEhvb2s6dm9pZCAwKSksdm9pZCAwIT09dmFsdWU/bnVsbD09PXZhbHVlP3ZvaWQgalF1ZXJ5LnJlbW92ZUF0dHIoZWxlbSxuYW1lKTpob29rcyYmXCJzZXRcImluIGhvb2tzJiZ2b2lkIDAhPT0ocmV0PWhvb2tzLnNldChlbGVtLHZhbHVlLG5hbWUpKT9yZXQ6KGVsZW0uc2V0QXR0cmlidXRlKG5hbWUsdmFsdWUrXCJcIiksdmFsdWUpOmhvb2tzJiZcImdldFwiaW4gaG9va3MmJm51bGwhPT0ocmV0PWhvb2tzLmdldChlbGVtLG5hbWUpKT9yZXQ6KHJldD1qUXVlcnkuZmluZC5hdHRyKGVsZW0sbmFtZSksbnVsbD09cmV0P3ZvaWQgMDpyZXQpKX0sYXR0ckhvb2tzOnt0eXBlOntzZXQ6ZnVuY3Rpb24oZWxlbSx2YWx1ZSl7aWYoIXN1cHBvcnQucmFkaW9WYWx1ZSYmXCJyYWRpb1wiPT09dmFsdWUmJm5vZGVOYW1lKGVsZW0sXCJpbnB1dFwiKSl7dmFyIHZhbD1lbGVtLnZhbHVlO3JldHVybiBlbGVtLnNldEF0dHJpYnV0ZShcInR5cGVcIix2YWx1ZSksdmFsJiYoZWxlbS52YWx1ZT12YWwpLHZhbHVlfX19fSxyZW1vdmVBdHRyOmZ1bmN0aW9uKGVsZW0sdmFsdWUpe3ZhciBuYW1lLGk9MCxhdHRyTmFtZXM9dmFsdWUmJnZhbHVlLm1hdGNoKHJub3RodG1sd2hpdGUpO2lmKGF0dHJOYW1lcyYmMT09PWVsZW0ubm9kZVR5cGUpZm9yKDtuYW1lPWF0dHJOYW1lc1tpKytdOyllbGVtLnJlbW92ZUF0dHJpYnV0ZShuYW1lKX19KSxib29sSG9vaz17c2V0OmZ1bmN0aW9uKGVsZW0sdmFsdWUsbmFtZSl7cmV0dXJuITE9PT12YWx1ZT9qUXVlcnkucmVtb3ZlQXR0cihlbGVtLG5hbWUpOmVsZW0uc2V0QXR0cmlidXRlKG5hbWUsbmFtZSksbmFtZX19LGpRdWVyeS5lYWNoKGpRdWVyeS5leHByLm1hdGNoLmJvb2wuc291cmNlLm1hdGNoKC9cXHcrL2cpLGZ1bmN0aW9uKGksbmFtZSl7dmFyIGdldHRlcj1hdHRySGFuZGxlW25hbWVdfHxqUXVlcnkuZmluZC5hdHRyO2F0dHJIYW5kbGVbbmFtZV09ZnVuY3Rpb24oZWxlbSxuYW1lLGlzWE1MKXt2YXIgcmV0LGhhbmRsZSxsb3dlcmNhc2VOYW1lPW5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm4gaXNYTUx8fChoYW5kbGU9YXR0ckhhbmRsZVtsb3dlcmNhc2VOYW1lXSxhdHRySGFuZGxlW2xvd2VyY2FzZU5hbWVdPXJldCxyZXQ9bnVsbCE9Z2V0dGVyKGVsZW0sbmFtZSxpc1hNTCk/bG93ZXJjYXNlTmFtZTpudWxsLGF0dHJIYW5kbGVbbG93ZXJjYXNlTmFtZV09aGFuZGxlKSxyZXR9fSk7dmFyIHJmb2N1c2FibGU9L14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxyY2xpY2thYmxlPS9eKD86YXxhcmVhKSQvaTtqUXVlcnkuZm4uZXh0ZW5kKHtwcm9wOmZ1bmN0aW9uKG5hbWUsdmFsdWUpe3JldHVybiBhY2Nlc3ModGhpcyxqUXVlcnkucHJvcCxuYW1lLHZhbHVlLGFyZ3VtZW50cy5sZW5ndGg+MSl9LHJlbW92ZVByb3A6ZnVuY3Rpb24obmFtZSl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe2RlbGV0ZSB0aGlzW2pRdWVyeS5wcm9wRml4W25hbWVdfHxuYW1lXX0pfX0pLGpRdWVyeS5leHRlbmQoe3Byb3A6ZnVuY3Rpb24oZWxlbSxuYW1lLHZhbHVlKXt2YXIgcmV0LGhvb2tzLG5UeXBlPWVsZW0ubm9kZVR5cGU7aWYoMyE9PW5UeXBlJiY4IT09blR5cGUmJjIhPT1uVHlwZSlyZXR1cm4gMT09PW5UeXBlJiZqUXVlcnkuaXNYTUxEb2MoZWxlbSl8fChuYW1lPWpRdWVyeS5wcm9wRml4W25hbWVdfHxuYW1lLGhvb2tzPWpRdWVyeS5wcm9wSG9va3NbbmFtZV0pLHZvaWQgMCE9PXZhbHVlP2hvb2tzJiZcInNldFwiaW4gaG9va3MmJnZvaWQgMCE9PShyZXQ9aG9va3Muc2V0KGVsZW0sdmFsdWUsbmFtZSkpP3JldDplbGVtW25hbWVdPXZhbHVlOmhvb2tzJiZcImdldFwiaW4gaG9va3MmJm51bGwhPT0ocmV0PWhvb2tzLmdldChlbGVtLG5hbWUpKT9yZXQ6ZWxlbVtuYW1lXX0scHJvcEhvb2tzOnt0YWJJbmRleDp7Z2V0OmZ1bmN0aW9uKGVsZW0pe3ZhciB0YWJpbmRleD1qUXVlcnkuZmluZC5hdHRyKGVsZW0sXCJ0YWJpbmRleFwiKTtyZXR1cm4gdGFiaW5kZXg/cGFyc2VJbnQodGFiaW5kZXgsMTApOnJmb2N1c2FibGUudGVzdChlbGVtLm5vZGVOYW1lKXx8cmNsaWNrYWJsZS50ZXN0KGVsZW0ubm9kZU5hbWUpJiZlbGVtLmhyZWY/MDotMX19fSxwcm9wRml4Ontmb3I6XCJodG1sRm9yXCIsY2xhc3M6XCJjbGFzc05hbWVcIn19KSxzdXBwb3J0Lm9wdFNlbGVjdGVkfHwoalF1ZXJ5LnByb3BIb29rcy5zZWxlY3RlZD17Z2V0OmZ1bmN0aW9uKGVsZW0pe3ZhciBwYXJlbnQ9ZWxlbS5wYXJlbnROb2RlO3JldHVybiBwYXJlbnQmJnBhcmVudC5wYXJlbnROb2RlJiZwYXJlbnQucGFyZW50Tm9kZS5zZWxlY3RlZEluZGV4LG51bGx9LHNldDpmdW5jdGlvbihlbGVtKXt2YXIgcGFyZW50PWVsZW0ucGFyZW50Tm9kZTtwYXJlbnQmJihwYXJlbnQuc2VsZWN0ZWRJbmRleCxwYXJlbnQucGFyZW50Tm9kZSYmcGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleCl9fSksalF1ZXJ5LmVhY2goW1widGFiSW5kZXhcIixcInJlYWRPbmx5XCIsXCJtYXhMZW5ndGhcIixcImNlbGxTcGFjaW5nXCIsXCJjZWxsUGFkZGluZ1wiLFwicm93U3BhblwiLFwiY29sU3BhblwiLFwidXNlTWFwXCIsXCJmcmFtZUJvcmRlclwiLFwiY29udGVudEVkaXRhYmxlXCJdLGZ1bmN0aW9uKCl7alF1ZXJ5LnByb3BGaXhbdGhpcy50b0xvd2VyQ2FzZSgpXT10aGlzfSksalF1ZXJ5LmZuLmV4dGVuZCh7YWRkQ2xhc3M6ZnVuY3Rpb24odmFsdWUpe3ZhciBjbGFzc2VzLGVsZW0sY3VyLGN1clZhbHVlLGNsYXp6LGosZmluYWxWYWx1ZSxpPTA7aWYoaXNGdW5jdGlvbih2YWx1ZSkpcmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbihqKXtqUXVlcnkodGhpcykuYWRkQ2xhc3ModmFsdWUuY2FsbCh0aGlzLGosZ2V0Q2xhc3ModGhpcykpKX0pO2lmKGNsYXNzZXM9Y2xhc3Nlc1RvQXJyYXkodmFsdWUpLGNsYXNzZXMubGVuZ3RoKWZvcig7ZWxlbT10aGlzW2krK107KWlmKGN1clZhbHVlPWdldENsYXNzKGVsZW0pLGN1cj0xPT09ZWxlbS5ub2RlVHlwZSYmXCIgXCIrc3RyaXBBbmRDb2xsYXBzZShjdXJWYWx1ZSkrXCIgXCIpe2ZvcihqPTA7Y2xheno9Y2xhc3Nlc1tqKytdOyljdXIuaW5kZXhPZihcIiBcIitjbGF6eitcIiBcIik8MCYmKGN1cis9Y2xhenorXCIgXCIpO2ZpbmFsVmFsdWU9c3RyaXBBbmRDb2xsYXBzZShjdXIpLGN1clZhbHVlIT09ZmluYWxWYWx1ZSYmZWxlbS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLGZpbmFsVmFsdWUpfXJldHVybiB0aGlzfSxyZW1vdmVDbGFzczpmdW5jdGlvbih2YWx1ZSl7dmFyIGNsYXNzZXMsZWxlbSxjdXIsY3VyVmFsdWUsY2xhenosaixmaW5hbFZhbHVlLGk9MDtpZihpc0Z1bmN0aW9uKHZhbHVlKSlyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKGope2pRdWVyeSh0aGlzKS5yZW1vdmVDbGFzcyh2YWx1ZS5jYWxsKHRoaXMsaixnZXRDbGFzcyh0aGlzKSkpfSk7aWYoIWFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIHRoaXMuYXR0cihcImNsYXNzXCIsXCJcIik7aWYoY2xhc3Nlcz1jbGFzc2VzVG9BcnJheSh2YWx1ZSksY2xhc3Nlcy5sZW5ndGgpZm9yKDtlbGVtPXRoaXNbaSsrXTspaWYoY3VyVmFsdWU9Z2V0Q2xhc3MoZWxlbSksY3VyPTE9PT1lbGVtLm5vZGVUeXBlJiZcIiBcIitzdHJpcEFuZENvbGxhcHNlKGN1clZhbHVlKStcIiBcIil7Zm9yKGo9MDtjbGF6ej1jbGFzc2VzW2orK107KWZvcig7Y3VyLmluZGV4T2YoXCIgXCIrY2xhenorXCIgXCIpPi0xOyljdXI9Y3VyLnJlcGxhY2UoXCIgXCIrY2xhenorXCIgXCIsXCIgXCIpO2ZpbmFsVmFsdWU9c3RyaXBBbmRDb2xsYXBzZShjdXIpLGN1clZhbHVlIT09ZmluYWxWYWx1ZSYmZWxlbS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLGZpbmFsVmFsdWUpfXJldHVybiB0aGlzfSx0b2dnbGVDbGFzczpmdW5jdGlvbih2YWx1ZSxzdGF0ZVZhbCl7dmFyIHR5cGU9dHlwZW9mIHZhbHVlLGlzVmFsaWRWYWx1ZT1cInN0cmluZ1wiPT09dHlwZXx8QXJyYXkuaXNBcnJheSh2YWx1ZSk7cmV0dXJuXCJib29sZWFuXCI9PXR5cGVvZiBzdGF0ZVZhbCYmaXNWYWxpZFZhbHVlP3N0YXRlVmFsP3RoaXMuYWRkQ2xhc3ModmFsdWUpOnRoaXMucmVtb3ZlQ2xhc3ModmFsdWUpOmlzRnVuY3Rpb24odmFsdWUpP3RoaXMuZWFjaChmdW5jdGlvbihpKXtqUXVlcnkodGhpcykudG9nZ2xlQ2xhc3ModmFsdWUuY2FsbCh0aGlzLGksZ2V0Q2xhc3ModGhpcyksc3RhdGVWYWwpLHN0YXRlVmFsKX0pOnRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciBjbGFzc05hbWUsaSxzZWxmLGNsYXNzTmFtZXM7aWYoaXNWYWxpZFZhbHVlKWZvcihpPTAsc2VsZj1qUXVlcnkodGhpcyksY2xhc3NOYW1lcz1jbGFzc2VzVG9BcnJheSh2YWx1ZSk7Y2xhc3NOYW1lPWNsYXNzTmFtZXNbaSsrXTspc2VsZi5oYXNDbGFzcyhjbGFzc05hbWUpP3NlbGYucmVtb3ZlQ2xhc3MoY2xhc3NOYW1lKTpzZWxmLmFkZENsYXNzKGNsYXNzTmFtZSk7ZWxzZSB2b2lkIDAhPT12YWx1ZSYmXCJib29sZWFuXCIhPT10eXBlfHwoY2xhc3NOYW1lPWdldENsYXNzKHRoaXMpLGNsYXNzTmFtZSYmZGF0YVByaXYuc2V0KHRoaXMsXCJfX2NsYXNzTmFtZV9fXCIsY2xhc3NOYW1lKSx0aGlzLnNldEF0dHJpYnV0ZSYmdGhpcy5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLGNsYXNzTmFtZXx8ITE9PT12YWx1ZT9cIlwiOmRhdGFQcml2LmdldCh0aGlzLFwiX19jbGFzc05hbWVfX1wiKXx8XCJcIikpfSl9LGhhc0NsYXNzOmZ1bmN0aW9uKHNlbGVjdG9yKXt2YXIgY2xhc3NOYW1lLGVsZW0saT0wO2ZvcihjbGFzc05hbWU9XCIgXCIrc2VsZWN0b3IrXCIgXCI7ZWxlbT10aGlzW2krK107KWlmKDE9PT1lbGVtLm5vZGVUeXBlJiYoXCIgXCIrc3RyaXBBbmRDb2xsYXBzZShnZXRDbGFzcyhlbGVtKSkrXCIgXCIpLmluZGV4T2YoY2xhc3NOYW1lKT4tMSlyZXR1cm4hMDtyZXR1cm4hMX19KTt2YXIgcnJldHVybj0vXFxyL2c7alF1ZXJ5LmZuLmV4dGVuZCh7dmFsOmZ1bmN0aW9uKHZhbHVlKXt2YXIgaG9va3MscmV0LHZhbHVlSXNGdW5jdGlvbixlbGVtPXRoaXNbMF07e2lmKGFyZ3VtZW50cy5sZW5ndGgpcmV0dXJuIHZhbHVlSXNGdW5jdGlvbj1pc0Z1bmN0aW9uKHZhbHVlKSx0aGlzLmVhY2goZnVuY3Rpb24oaSl7dmFyIHZhbDsxPT09dGhpcy5ub2RlVHlwZSYmKHZhbD12YWx1ZUlzRnVuY3Rpb24/dmFsdWUuY2FsbCh0aGlzLGksalF1ZXJ5KHRoaXMpLnZhbCgpKTp2YWx1ZSxudWxsPT12YWw/dmFsPVwiXCI6XCJudW1iZXJcIj09dHlwZW9mIHZhbD92YWwrPVwiXCI6QXJyYXkuaXNBcnJheSh2YWwpJiYodmFsPWpRdWVyeS5tYXAodmFsLGZ1bmN0aW9uKHZhbHVlKXtyZXR1cm4gbnVsbD09dmFsdWU/XCJcIjp2YWx1ZStcIlwifSkpLChob29rcz1qUXVlcnkudmFsSG9va3NbdGhpcy50eXBlXXx8alF1ZXJ5LnZhbEhvb2tzW3RoaXMubm9kZU5hbWUudG9Mb3dlckNhc2UoKV0pJiZcInNldFwiaW4gaG9va3MmJnZvaWQgMCE9PWhvb2tzLnNldCh0aGlzLHZhbCxcInZhbHVlXCIpfHwodGhpcy52YWx1ZT12YWwpKX0pO2lmKGVsZW0pcmV0dXJuKGhvb2tzPWpRdWVyeS52YWxIb29rc1tlbGVtLnR5cGVdfHxqUXVlcnkudmFsSG9va3NbZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpXSkmJlwiZ2V0XCJpbiBob29rcyYmdm9pZCAwIT09KHJldD1ob29rcy5nZXQoZWxlbSxcInZhbHVlXCIpKT9yZXQ6KHJldD1lbGVtLnZhbHVlLFwic3RyaW5nXCI9PXR5cGVvZiByZXQ/cmV0LnJlcGxhY2UocnJldHVybixcIlwiKTpudWxsPT1yZXQ/XCJcIjpyZXQpfX19KSxqUXVlcnkuZXh0ZW5kKHt2YWxIb29rczp7b3B0aW9uOntnZXQ6ZnVuY3Rpb24oZWxlbSl7dmFyIHZhbD1qUXVlcnkuZmluZC5hdHRyKGVsZW0sXCJ2YWx1ZVwiKTtyZXR1cm4gbnVsbCE9dmFsP3ZhbDpzdHJpcEFuZENvbGxhcHNlKGpRdWVyeS50ZXh0KGVsZW0pKX19LHNlbGVjdDp7Z2V0OmZ1bmN0aW9uKGVsZW0pe3ZhciB2YWx1ZSxvcHRpb24saSxvcHRpb25zPWVsZW0ub3B0aW9ucyxpbmRleD1lbGVtLnNlbGVjdGVkSW5kZXgsb25lPVwic2VsZWN0LW9uZVwiPT09ZWxlbS50eXBlLHZhbHVlcz1vbmU/bnVsbDpbXSxtYXg9b25lP2luZGV4KzE6b3B0aW9ucy5sZW5ndGg7Zm9yKGk9aW5kZXg8MD9tYXg6b25lP2luZGV4OjA7aTxtYXg7aSsrKWlmKG9wdGlvbj1vcHRpb25zW2ldLChvcHRpb24uc2VsZWN0ZWR8fGk9PT1pbmRleCkmJiFvcHRpb24uZGlzYWJsZWQmJighb3B0aW9uLnBhcmVudE5vZGUuZGlzYWJsZWR8fCFub2RlTmFtZShvcHRpb24ucGFyZW50Tm9kZSxcIm9wdGdyb3VwXCIpKSl7aWYodmFsdWU9alF1ZXJ5KG9wdGlvbikudmFsKCksb25lKXJldHVybiB2YWx1ZTt2YWx1ZXMucHVzaCh2YWx1ZSl9cmV0dXJuIHZhbHVlc30sc2V0OmZ1bmN0aW9uKGVsZW0sdmFsdWUpe2Zvcih2YXIgb3B0aW9uU2V0LG9wdGlvbixvcHRpb25zPWVsZW0ub3B0aW9ucyx2YWx1ZXM9alF1ZXJ5Lm1ha2VBcnJheSh2YWx1ZSksaT1vcHRpb25zLmxlbmd0aDtpLS07KW9wdGlvbj1vcHRpb25zW2ldLChvcHRpb24uc2VsZWN0ZWQ9alF1ZXJ5LmluQXJyYXkoalF1ZXJ5LnZhbEhvb2tzLm9wdGlvbi5nZXQob3B0aW9uKSx2YWx1ZXMpPi0xKSYmKG9wdGlvblNldD0hMCk7cmV0dXJuIG9wdGlvblNldHx8KGVsZW0uc2VsZWN0ZWRJbmRleD0tMSksdmFsdWVzfX19fSksalF1ZXJ5LmVhY2goW1wicmFkaW9cIixcImNoZWNrYm94XCJdLGZ1bmN0aW9uKCl7alF1ZXJ5LnZhbEhvb2tzW3RoaXNdPXtzZXQ6ZnVuY3Rpb24oZWxlbSx2YWx1ZSl7aWYoQXJyYXkuaXNBcnJheSh2YWx1ZSkpcmV0dXJuIGVsZW0uY2hlY2tlZD1qUXVlcnkuaW5BcnJheShqUXVlcnkoZWxlbSkudmFsKCksdmFsdWUpPi0xfX0sc3VwcG9ydC5jaGVja09ufHwoalF1ZXJ5LnZhbEhvb2tzW3RoaXNdLmdldD1mdW5jdGlvbihlbGVtKXtyZXR1cm4gbnVsbD09PWVsZW0uZ2V0QXR0cmlidXRlKFwidmFsdWVcIik/XCJvblwiOmVsZW0udmFsdWV9KX0pLHN1cHBvcnQuZm9jdXNpbj1cIm9uZm9jdXNpblwiaW4gd2luZG93O3ZhciByZm9jdXNNb3JwaD0vXig/OmZvY3VzaW5mb2N1c3xmb2N1c291dGJsdXIpJC8sc3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2s9ZnVuY3Rpb24oZSl7ZS5zdG9wUHJvcGFnYXRpb24oKX07alF1ZXJ5LmV4dGVuZChqUXVlcnkuZXZlbnQse3RyaWdnZXI6ZnVuY3Rpb24oZXZlbnQsZGF0YSxlbGVtLG9ubHlIYW5kbGVycyl7dmFyIGksY3VyLHRtcCxidWJibGVUeXBlLG9udHlwZSxoYW5kbGUsc3BlY2lhbCxsYXN0RWxlbWVudCxldmVudFBhdGg9W2VsZW18fGRvY3VtZW50XSx0eXBlPWhhc093bi5jYWxsKGV2ZW50LFwidHlwZVwiKT9ldmVudC50eXBlOmV2ZW50LG5hbWVzcGFjZXM9aGFzT3duLmNhbGwoZXZlbnQsXCJuYW1lc3BhY2VcIik/ZXZlbnQubmFtZXNwYWNlLnNwbGl0KFwiLlwiKTpbXTtpZihjdXI9bGFzdEVsZW1lbnQ9dG1wPWVsZW09ZWxlbXx8ZG9jdW1lbnQsMyE9PWVsZW0ubm9kZVR5cGUmJjghPT1lbGVtLm5vZGVUeXBlJiYhcmZvY3VzTW9ycGgudGVzdCh0eXBlK2pRdWVyeS5ldmVudC50cmlnZ2VyZWQpJiYodHlwZS5pbmRleE9mKFwiLlwiKT4tMSYmKG5hbWVzcGFjZXM9dHlwZS5zcGxpdChcIi5cIiksdHlwZT1uYW1lc3BhY2VzLnNoaWZ0KCksbmFtZXNwYWNlcy5zb3J0KCkpLG9udHlwZT10eXBlLmluZGV4T2YoXCI6XCIpPDAmJlwib25cIit0eXBlLGV2ZW50PWV2ZW50W2pRdWVyeS5leHBhbmRvXT9ldmVudDpuZXcgalF1ZXJ5LkV2ZW50KHR5cGUsXCJvYmplY3RcIj09dHlwZW9mIGV2ZW50JiZldmVudCksZXZlbnQuaXNUcmlnZ2VyPW9ubHlIYW5kbGVycz8yOjMsZXZlbnQubmFtZXNwYWNlPW5hbWVzcGFjZXMuam9pbihcIi5cIiksZXZlbnQucm5hbWVzcGFjZT1ldmVudC5uYW1lc3BhY2U/bmV3IFJlZ0V4cChcIihefFxcXFwuKVwiK25hbWVzcGFjZXMuam9pbihcIlxcXFwuKD86LipcXFxcLnwpXCIpK1wiKFxcXFwufCQpXCIpOm51bGwsZXZlbnQucmVzdWx0PXZvaWQgMCxldmVudC50YXJnZXR8fChldmVudC50YXJnZXQ9ZWxlbSksZGF0YT1udWxsPT1kYXRhP1tldmVudF06alF1ZXJ5Lm1ha2VBcnJheShkYXRhLFtldmVudF0pLHNwZWNpYWw9alF1ZXJ5LmV2ZW50LnNwZWNpYWxbdHlwZV18fHt9LG9ubHlIYW5kbGVyc3x8IXNwZWNpYWwudHJpZ2dlcnx8ITEhPT1zcGVjaWFsLnRyaWdnZXIuYXBwbHkoZWxlbSxkYXRhKSkpe2lmKCFvbmx5SGFuZGxlcnMmJiFzcGVjaWFsLm5vQnViYmxlJiYhaXNXaW5kb3coZWxlbSkpe2ZvcihidWJibGVUeXBlPXNwZWNpYWwuZGVsZWdhdGVUeXBlfHx0eXBlLHJmb2N1c01vcnBoLnRlc3QoYnViYmxlVHlwZSt0eXBlKXx8KGN1cj1jdXIucGFyZW50Tm9kZSk7Y3VyO2N1cj1jdXIucGFyZW50Tm9kZSlldmVudFBhdGgucHVzaChjdXIpLHRtcD1jdXI7dG1wPT09KGVsZW0ub3duZXJEb2N1bWVudHx8ZG9jdW1lbnQpJiZldmVudFBhdGgucHVzaCh0bXAuZGVmYXVsdFZpZXd8fHRtcC5wYXJlbnRXaW5kb3d8fHdpbmRvdyl9Zm9yKGk9MDsoY3VyPWV2ZW50UGF0aFtpKytdKSYmIWV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCk7KWxhc3RFbGVtZW50PWN1cixldmVudC50eXBlPWk+MT9idWJibGVUeXBlOnNwZWNpYWwuYmluZFR5cGV8fHR5cGUsaGFuZGxlPShkYXRhUHJpdi5nZXQoY3VyLFwiZXZlbnRzXCIpfHx7fSlbZXZlbnQudHlwZV0mJmRhdGFQcml2LmdldChjdXIsXCJoYW5kbGVcIiksaGFuZGxlJiZoYW5kbGUuYXBwbHkoY3VyLGRhdGEpLChoYW5kbGU9b250eXBlJiZjdXJbb250eXBlXSkmJmhhbmRsZS5hcHBseSYmYWNjZXB0RGF0YShjdXIpJiYoZXZlbnQucmVzdWx0PWhhbmRsZS5hcHBseShjdXIsZGF0YSksITE9PT1ldmVudC5yZXN1bHQmJmV2ZW50LnByZXZlbnREZWZhdWx0KCkpO3JldHVybiBldmVudC50eXBlPXR5cGUsb25seUhhbmRsZXJzfHxldmVudC5pc0RlZmF1bHRQcmV2ZW50ZWQoKXx8c3BlY2lhbC5fZGVmYXVsdCYmITEhPT1zcGVjaWFsLl9kZWZhdWx0LmFwcGx5KGV2ZW50UGF0aC5wb3AoKSxkYXRhKXx8IWFjY2VwdERhdGEoZWxlbSl8fG9udHlwZSYmaXNGdW5jdGlvbihlbGVtW3R5cGVdKSYmIWlzV2luZG93KGVsZW0pJiYodG1wPWVsZW1bb250eXBlXSx0bXAmJihlbGVtW29udHlwZV09bnVsbCksalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZD10eXBlLGV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkmJmxhc3RFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIodHlwZSxzdG9wUHJvcGFnYXRpb25DYWxsYmFjayksZWxlbVt0eXBlXSgpLGV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkmJmxhc3RFbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSxzdG9wUHJvcGFnYXRpb25DYWxsYmFjayksalF1ZXJ5LmV2ZW50LnRyaWdnZXJlZD12b2lkIDAsdG1wJiYoZWxlbVtvbnR5cGVdPXRtcCkpLGV2ZW50LnJlc3VsdH19LHNpbXVsYXRlOmZ1bmN0aW9uKHR5cGUsZWxlbSxldmVudCl7dmFyIGU9alF1ZXJ5LmV4dGVuZChuZXcgalF1ZXJ5LkV2ZW50LGV2ZW50LHt0eXBlOnR5cGUsaXNTaW11bGF0ZWQ6ITB9KTtqUXVlcnkuZXZlbnQudHJpZ2dlcihlLG51bGwsZWxlbSl9fSksalF1ZXJ5LmZuLmV4dGVuZCh7dHJpZ2dlcjpmdW5jdGlvbih0eXBlLGRhdGEpe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXtqUXVlcnkuZXZlbnQudHJpZ2dlcih0eXBlLGRhdGEsdGhpcyl9KX0sdHJpZ2dlckhhbmRsZXI6ZnVuY3Rpb24odHlwZSxkYXRhKXt2YXIgZWxlbT10aGlzWzBdO2lmKGVsZW0pcmV0dXJuIGpRdWVyeS5ldmVudC50cmlnZ2VyKHR5cGUsZGF0YSxlbGVtLCEwKX19KSxzdXBwb3J0LmZvY3VzaW58fGpRdWVyeS5lYWNoKHtmb2N1czpcImZvY3VzaW5cIixibHVyOlwiZm9jdXNvdXRcIn0sZnVuY3Rpb24ob3JpZyxmaXgpe3ZhciBoYW5kbGVyPWZ1bmN0aW9uKGV2ZW50KXtqUXVlcnkuZXZlbnQuc2ltdWxhdGUoZml4LGV2ZW50LnRhcmdldCxqUXVlcnkuZXZlbnQuZml4KGV2ZW50KSl9O2pRdWVyeS5ldmVudC5zcGVjaWFsW2ZpeF09e3NldHVwOmZ1bmN0aW9uKCl7dmFyIGRvYz10aGlzLm93bmVyRG9jdW1lbnR8fHRoaXMsYXR0YWNoZXM9ZGF0YVByaXYuYWNjZXNzKGRvYyxmaXgpO2F0dGFjaGVzfHxkb2MuYWRkRXZlbnRMaXN0ZW5lcihvcmlnLGhhbmRsZXIsITApLGRhdGFQcml2LmFjY2Vzcyhkb2MsZml4LChhdHRhY2hlc3x8MCkrMSl9LHRlYXJkb3duOmZ1bmN0aW9uKCl7dmFyIGRvYz10aGlzLm93bmVyRG9jdW1lbnR8fHRoaXMsYXR0YWNoZXM9ZGF0YVByaXYuYWNjZXNzKGRvYyxmaXgpLTE7YXR0YWNoZXM/ZGF0YVByaXYuYWNjZXNzKGRvYyxmaXgsYXR0YWNoZXMpOihkb2MucmVtb3ZlRXZlbnRMaXN0ZW5lcihvcmlnLGhhbmRsZXIsITApLGRhdGFQcml2LnJlbW92ZShkb2MsZml4KSl9fX0pO3ZhciBsb2NhdGlvbj13aW5kb3cubG9jYXRpb24sbm9uY2U9RGF0ZS5ub3coKSxycXVlcnk9L1xcPy87alF1ZXJ5LnBhcnNlWE1MPWZ1bmN0aW9uKGRhdGEpe3ZhciB4bWw7aWYoIWRhdGF8fFwic3RyaW5nXCIhPXR5cGVvZiBkYXRhKXJldHVybiBudWxsO3RyeXt4bWw9KG5ldyB3aW5kb3cuRE9NUGFyc2VyKS5wYXJzZUZyb21TdHJpbmcoZGF0YSxcInRleHQveG1sXCIpfWNhdGNoKGUpe3htbD12b2lkIDB9cmV0dXJuIHhtbCYmIXhtbC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInBhcnNlcmVycm9yXCIpLmxlbmd0aHx8alF1ZXJ5LmVycm9yKFwiSW52YWxpZCBYTUw6IFwiK2RhdGEpLHhtbH07dmFyIHJicmFja2V0PS9cXFtcXF0kLyxyQ1JMRj0vXFxyP1xcbi9nLHJzdWJtaXR0ZXJUeXBlcz0vXig/OnN1Ym1pdHxidXR0b258aW1hZ2V8cmVzZXR8ZmlsZSkkL2kscnN1Ym1pdHRhYmxlPS9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGtleWdlbikvaTtqUXVlcnkucGFyYW09ZnVuY3Rpb24oYSx0cmFkaXRpb25hbCl7dmFyIHByZWZpeCxzPVtdLGFkZD1mdW5jdGlvbihrZXksdmFsdWVPckZ1bmN0aW9uKXt2YXIgdmFsdWU9aXNGdW5jdGlvbih2YWx1ZU9yRnVuY3Rpb24pP3ZhbHVlT3JGdW5jdGlvbigpOnZhbHVlT3JGdW5jdGlvbjtzW3MubGVuZ3RoXT1lbmNvZGVVUklDb21wb25lbnQoa2V5KStcIj1cIitlbmNvZGVVUklDb21wb25lbnQobnVsbD09dmFsdWU/XCJcIjp2YWx1ZSl9O2lmKG51bGw9PWEpcmV0dXJuXCJcIjtpZihBcnJheS5pc0FycmF5KGEpfHxhLmpxdWVyeSYmIWpRdWVyeS5pc1BsYWluT2JqZWN0KGEpKWpRdWVyeS5lYWNoKGEsZnVuY3Rpb24oKXthZGQodGhpcy5uYW1lLHRoaXMudmFsdWUpfSk7ZWxzZSBmb3IocHJlZml4IGluIGEpYnVpbGRQYXJhbXMocHJlZml4LGFbcHJlZml4XSx0cmFkaXRpb25hbCxhZGQpO3JldHVybiBzLmpvaW4oXCImXCIpfSxqUXVlcnkuZm4uZXh0ZW5kKHtzZXJpYWxpemU6ZnVuY3Rpb24oKXtyZXR1cm4galF1ZXJ5LnBhcmFtKHRoaXMuc2VyaWFsaXplQXJyYXkoKSl9LHNlcmlhbGl6ZUFycmF5OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uKCl7dmFyIGVsZW1lbnRzPWpRdWVyeS5wcm9wKHRoaXMsXCJlbGVtZW50c1wiKTtyZXR1cm4gZWxlbWVudHM/alF1ZXJ5Lm1ha2VBcnJheShlbGVtZW50cyk6dGhpc30pLmZpbHRlcihmdW5jdGlvbigpe3ZhciB0eXBlPXRoaXMudHlwZTtyZXR1cm4gdGhpcy5uYW1lJiYhalF1ZXJ5KHRoaXMpLmlzKFwiOmRpc2FibGVkXCIpJiZyc3VibWl0dGFibGUudGVzdCh0aGlzLm5vZGVOYW1lKSYmIXJzdWJtaXR0ZXJUeXBlcy50ZXN0KHR5cGUpJiYodGhpcy5jaGVja2VkfHwhcmNoZWNrYWJsZVR5cGUudGVzdCh0eXBlKSl9KS5tYXAoZnVuY3Rpb24oaSxlbGVtKXt2YXIgdmFsPWpRdWVyeSh0aGlzKS52YWwoKTtyZXR1cm4gbnVsbD09dmFsP251bGw6QXJyYXkuaXNBcnJheSh2YWwpP2pRdWVyeS5tYXAodmFsLGZ1bmN0aW9uKHZhbCl7cmV0dXJue25hbWU6ZWxlbS5uYW1lLHZhbHVlOnZhbC5yZXBsYWNlKHJDUkxGLFwiXFxyXFxuXCIpfX0pOntuYW1lOmVsZW0ubmFtZSx2YWx1ZTp2YWwucmVwbGFjZShyQ1JMRixcIlxcclxcblwiKX19KS5nZXQoKX19KTt2YXIgcjIwPS8lMjAvZyxyaGFzaD0vIy4qJC8scmFudGlDYWNoZT0vKFs/Jl0pXz1bXiZdKi8scmhlYWRlcnM9L14oLio/KTpbIFxcdF0qKFteXFxyXFxuXSopJC9nbSxybG9jYWxQcm90b2NvbD0vXig/OmFib3V0fGFwcHxhcHAtc3RvcmFnZXwuKy1leHRlbnNpb258ZmlsZXxyZXN8d2lkZ2V0KTokLyxybm9Db250ZW50PS9eKD86R0VUfEhFQUQpJC8scnByb3RvY29sPS9eXFwvXFwvLyxwcmVmaWx0ZXJzPXt9LHRyYW5zcG9ydHM9e30sYWxsVHlwZXM9XCIqL1wiLmNvbmNhdChcIipcIiksb3JpZ2luQW5jaG9yPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpO29yaWdpbkFuY2hvci5ocmVmPWxvY2F0aW9uLmhyZWYsalF1ZXJ5LmV4dGVuZCh7YWN0aXZlOjAsbGFzdE1vZGlmaWVkOnt9LGV0YWc6e30sYWpheFNldHRpbmdzOnt1cmw6bG9jYXRpb24uaHJlZix0eXBlOlwiR0VUXCIsaXNMb2NhbDpybG9jYWxQcm90b2NvbC50ZXN0KGxvY2F0aW9uLnByb3RvY29sKSxnbG9iYWw6ITAscHJvY2Vzc0RhdGE6ITAsYXN5bmM6ITAsY29udGVudFR5cGU6XCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQ7IGNoYXJzZXQ9VVRGLThcIixhY2NlcHRzOntcIipcIjphbGxUeXBlcyx0ZXh0OlwidGV4dC9wbGFpblwiLGh0bWw6XCJ0ZXh0L2h0bWxcIix4bWw6XCJhcHBsaWNhdGlvbi94bWwsIHRleHQveG1sXCIsanNvbjpcImFwcGxpY2F0aW9uL2pzb24sIHRleHQvamF2YXNjcmlwdFwifSxjb250ZW50czp7eG1sOi9cXGJ4bWxcXGIvLGh0bWw6L1xcYmh0bWwvLGpzb246L1xcYmpzb25cXGIvfSxyZXNwb25zZUZpZWxkczp7eG1sOlwicmVzcG9uc2VYTUxcIix0ZXh0OlwicmVzcG9uc2VUZXh0XCIsanNvbjpcInJlc3BvbnNlSlNPTlwifSxjb252ZXJ0ZXJzOntcIiogdGV4dFwiOlN0cmluZyxcInRleHQgaHRtbFwiOiEwLFwidGV4dCBqc29uXCI6SlNPTi5wYXJzZSxcInRleHQgeG1sXCI6alF1ZXJ5LnBhcnNlWE1MfSxmbGF0T3B0aW9uczp7dXJsOiEwLGNvbnRleHQ6ITB9fSxhamF4U2V0dXA6ZnVuY3Rpb24odGFyZ2V0LHNldHRpbmdzKXtyZXR1cm4gc2V0dGluZ3M/YWpheEV4dGVuZChhamF4RXh0ZW5kKHRhcmdldCxqUXVlcnkuYWpheFNldHRpbmdzKSxzZXR0aW5ncyk6YWpheEV4dGVuZChqUXVlcnkuYWpheFNldHRpbmdzLHRhcmdldCl9LGFqYXhQcmVmaWx0ZXI6YWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKHByZWZpbHRlcnMpLGFqYXhUcmFuc3BvcnQ6YWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKHRyYW5zcG9ydHMpLGFqYXg6ZnVuY3Rpb24odXJsLG9wdGlvbnMpe2Z1bmN0aW9uIGRvbmUoc3RhdHVzLG5hdGl2ZVN0YXR1c1RleHQscmVzcG9uc2VzLGhlYWRlcnMpe3ZhciBpc1N1Y2Nlc3Msc3VjY2VzcyxlcnJvcixyZXNwb25zZSxtb2RpZmllZCxzdGF0dXNUZXh0PW5hdGl2ZVN0YXR1c1RleHQ7Y29tcGxldGVkfHwoY29tcGxldGVkPSEwLHRpbWVvdXRUaW1lciYmd2luZG93LmNsZWFyVGltZW91dCh0aW1lb3V0VGltZXIpLHRyYW5zcG9ydD12b2lkIDAscmVzcG9uc2VIZWFkZXJzU3RyaW5nPWhlYWRlcnN8fFwiXCIsanFYSFIucmVhZHlTdGF0ZT1zdGF0dXM+MD80OjAsaXNTdWNjZXNzPXN0YXR1cz49MjAwJiZzdGF0dXM8MzAwfHwzMDQ9PT1zdGF0dXMscmVzcG9uc2VzJiYocmVzcG9uc2U9YWpheEhhbmRsZVJlc3BvbnNlcyhzLGpxWEhSLHJlc3BvbnNlcykpLHJlc3BvbnNlPWFqYXhDb252ZXJ0KHMscmVzcG9uc2UsanFYSFIsaXNTdWNjZXNzKSxpc1N1Y2Nlc3M/KHMuaWZNb2RpZmllZCYmKG1vZGlmaWVkPWpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKFwiTGFzdC1Nb2RpZmllZFwiKSxtb2RpZmllZCYmKGpRdWVyeS5sYXN0TW9kaWZpZWRbY2FjaGVVUkxdPW1vZGlmaWVkKSwobW9kaWZpZWQ9anFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoXCJldGFnXCIpKSYmKGpRdWVyeS5ldGFnW2NhY2hlVVJMXT1tb2RpZmllZCkpLDIwND09PXN0YXR1c3x8XCJIRUFEXCI9PT1zLnR5cGU/c3RhdHVzVGV4dD1cIm5vY29udGVudFwiOjMwND09PXN0YXR1cz9zdGF0dXNUZXh0PVwibm90bW9kaWZpZWRcIjooc3RhdHVzVGV4dD1yZXNwb25zZS5zdGF0ZSxzdWNjZXNzPXJlc3BvbnNlLmRhdGEsZXJyb3I9cmVzcG9uc2UuZXJyb3IsaXNTdWNjZXNzPSFlcnJvcikpOihlcnJvcj1zdGF0dXNUZXh0LCFzdGF0dXMmJnN0YXR1c1RleHR8fChzdGF0dXNUZXh0PVwiZXJyb3JcIixzdGF0dXM8MCYmKHN0YXR1cz0wKSkpLGpxWEhSLnN0YXR1cz1zdGF0dXMsanFYSFIuc3RhdHVzVGV4dD0obmF0aXZlU3RhdHVzVGV4dHx8c3RhdHVzVGV4dCkrXCJcIixpc1N1Y2Nlc3M/ZGVmZXJyZWQucmVzb2x2ZVdpdGgoY2FsbGJhY2tDb250ZXh0LFtzdWNjZXNzLHN0YXR1c1RleHQsanFYSFJdKTpkZWZlcnJlZC5yZWplY3RXaXRoKGNhbGxiYWNrQ29udGV4dCxbanFYSFIsc3RhdHVzVGV4dCxlcnJvcl0pLGpxWEhSLnN0YXR1c0NvZGUoc3RhdHVzQ29kZSksc3RhdHVzQ29kZT12b2lkIDAsZmlyZUdsb2JhbHMmJmdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKGlzU3VjY2Vzcz9cImFqYXhTdWNjZXNzXCI6XCJhamF4RXJyb3JcIixbanFYSFIscyxpc1N1Y2Nlc3M/c3VjY2VzczplcnJvcl0pLGNvbXBsZXRlRGVmZXJyZWQuZmlyZVdpdGgoY2FsbGJhY2tDb250ZXh0LFtqcVhIUixzdGF0dXNUZXh0XSksZmlyZUdsb2JhbHMmJihnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlcihcImFqYXhDb21wbGV0ZVwiLFtqcVhIUixzXSksLS1qUXVlcnkuYWN0aXZlfHxqUXVlcnkuZXZlbnQudHJpZ2dlcihcImFqYXhTdG9wXCIpKSl9XCJvYmplY3RcIj09dHlwZW9mIHVybCYmKG9wdGlvbnM9dXJsLHVybD12b2lkIDApLG9wdGlvbnM9b3B0aW9uc3x8e307dmFyIHRyYW5zcG9ydCxjYWNoZVVSTCxyZXNwb25zZUhlYWRlcnNTdHJpbmcscmVzcG9uc2VIZWFkZXJzLHRpbWVvdXRUaW1lcix1cmxBbmNob3IsY29tcGxldGVkLGZpcmVHbG9iYWxzLGksdW5jYWNoZWQscz1qUXVlcnkuYWpheFNldHVwKHt9LG9wdGlvbnMpLGNhbGxiYWNrQ29udGV4dD1zLmNvbnRleHR8fHMsZ2xvYmFsRXZlbnRDb250ZXh0PXMuY29udGV4dCYmKGNhbGxiYWNrQ29udGV4dC5ub2RlVHlwZXx8Y2FsbGJhY2tDb250ZXh0LmpxdWVyeSk/alF1ZXJ5KGNhbGxiYWNrQ29udGV4dCk6alF1ZXJ5LmV2ZW50LGRlZmVycmVkPWpRdWVyeS5EZWZlcnJlZCgpLGNvbXBsZXRlRGVmZXJyZWQ9alF1ZXJ5LkNhbGxiYWNrcyhcIm9uY2UgbWVtb3J5XCIpLHN0YXR1c0NvZGU9cy5zdGF0dXNDb2RlfHx7fSxyZXF1ZXN0SGVhZGVycz17fSxyZXF1ZXN0SGVhZGVyc05hbWVzPXt9LHN0ckFib3J0PVwiY2FuY2VsZWRcIixqcVhIUj17cmVhZHlTdGF0ZTowLGdldFJlc3BvbnNlSGVhZGVyOmZ1bmN0aW9uKGtleSl7dmFyIG1hdGNoO2lmKGNvbXBsZXRlZCl7aWYoIXJlc3BvbnNlSGVhZGVycylmb3IocmVzcG9uc2VIZWFkZXJzPXt9O21hdGNoPXJoZWFkZXJzLmV4ZWMocmVzcG9uc2VIZWFkZXJzU3RyaW5nKTspcmVzcG9uc2VIZWFkZXJzW21hdGNoWzFdLnRvTG93ZXJDYXNlKCkrXCIgXCJdPShyZXNwb25zZUhlYWRlcnNbbWF0Y2hbMV0udG9Mb3dlckNhc2UoKStcIiBcIl18fFtdKS5jb25jYXQobWF0Y2hbMl0pO21hdGNoPXJlc3BvbnNlSGVhZGVyc1trZXkudG9Mb3dlckNhc2UoKStcIiBcIl19cmV0dXJuIG51bGw9PW1hdGNoP251bGw6bWF0Y2guam9pbihcIiwgXCIpfSxnZXRBbGxSZXNwb25zZUhlYWRlcnM6ZnVuY3Rpb24oKXtyZXR1cm4gY29tcGxldGVkP3Jlc3BvbnNlSGVhZGVyc1N0cmluZzpudWxsfSxzZXRSZXF1ZXN0SGVhZGVyOmZ1bmN0aW9uKG5hbWUsdmFsdWUpe3JldHVybiBudWxsPT1jb21wbGV0ZWQmJihuYW1lPXJlcXVlc3RIZWFkZXJzTmFtZXNbbmFtZS50b0xvd2VyQ2FzZSgpXT1yZXF1ZXN0SGVhZGVyc05hbWVzW25hbWUudG9Mb3dlckNhc2UoKV18fG5hbWUscmVxdWVzdEhlYWRlcnNbbmFtZV09dmFsdWUpLHRoaXN9LG92ZXJyaWRlTWltZVR5cGU6ZnVuY3Rpb24odHlwZSl7cmV0dXJuIG51bGw9PWNvbXBsZXRlZCYmKHMubWltZVR5cGU9dHlwZSksdGhpc30sc3RhdHVzQ29kZTpmdW5jdGlvbihtYXApe3ZhciBjb2RlO2lmKG1hcClpZihjb21wbGV0ZWQpanFYSFIuYWx3YXlzKG1hcFtqcVhIUi5zdGF0dXNdKTtlbHNlIGZvcihjb2RlIGluIG1hcClzdGF0dXNDb2RlW2NvZGVdPVtzdGF0dXNDb2RlW2NvZGVdLG1hcFtjb2RlXV07cmV0dXJuIHRoaXN9LGFib3J0OmZ1bmN0aW9uKHN0YXR1c1RleHQpe3ZhciBmaW5hbFRleHQ9c3RhdHVzVGV4dHx8c3RyQWJvcnQ7cmV0dXJuIHRyYW5zcG9ydCYmdHJhbnNwb3J0LmFib3J0KGZpbmFsVGV4dCksZG9uZSgwLGZpbmFsVGV4dCksdGhpc319O2lmKGRlZmVycmVkLnByb21pc2UoanFYSFIpLHMudXJsPSgodXJsfHxzLnVybHx8bG9jYXRpb24uaHJlZikrXCJcIikucmVwbGFjZShycHJvdG9jb2wsbG9jYXRpb24ucHJvdG9jb2wrXCIvL1wiKSxzLnR5cGU9b3B0aW9ucy5tZXRob2R8fG9wdGlvbnMudHlwZXx8cy5tZXRob2R8fHMudHlwZSxzLmRhdGFUeXBlcz0ocy5kYXRhVHlwZXx8XCIqXCIpLnRvTG93ZXJDYXNlKCkubWF0Y2gocm5vdGh0bWx3aGl0ZSl8fFtcIlwiXSxudWxsPT1zLmNyb3NzRG9tYWluKXt1cmxBbmNob3I9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIik7dHJ5e3VybEFuY2hvci5ocmVmPXMudXJsLHVybEFuY2hvci5ocmVmPXVybEFuY2hvci5ocmVmLHMuY3Jvc3NEb21haW49b3JpZ2luQW5jaG9yLnByb3RvY29sK1wiLy9cIitvcmlnaW5BbmNob3IuaG9zdCE9dXJsQW5jaG9yLnByb3RvY29sK1wiLy9cIit1cmxBbmNob3IuaG9zdH1jYXRjaChlKXtzLmNyb3NzRG9tYWluPSEwfX1pZihzLmRhdGEmJnMucHJvY2Vzc0RhdGEmJlwic3RyaW5nXCIhPXR5cGVvZiBzLmRhdGEmJihzLmRhdGE9alF1ZXJ5LnBhcmFtKHMuZGF0YSxzLnRyYWRpdGlvbmFsKSksaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMocHJlZmlsdGVycyxzLG9wdGlvbnMsanFYSFIpLGNvbXBsZXRlZClyZXR1cm4ganFYSFI7ZmlyZUdsb2JhbHM9alF1ZXJ5LmV2ZW50JiZzLmdsb2JhbCxmaXJlR2xvYmFscyYmMD09alF1ZXJ5LmFjdGl2ZSsrJiZqUXVlcnkuZXZlbnQudHJpZ2dlcihcImFqYXhTdGFydFwiKSxzLnR5cGU9cy50eXBlLnRvVXBwZXJDYXNlKCkscy5oYXNDb250ZW50PSFybm9Db250ZW50LnRlc3Qocy50eXBlKSxjYWNoZVVSTD1zLnVybC5yZXBsYWNlKHJoYXNoLFwiXCIpLHMuaGFzQ29udGVudD9zLmRhdGEmJnMucHJvY2Vzc0RhdGEmJjA9PT0ocy5jb250ZW50VHlwZXx8XCJcIikuaW5kZXhPZihcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiKSYmKHMuZGF0YT1zLmRhdGEucmVwbGFjZShyMjAsXCIrXCIpKToodW5jYWNoZWQ9cy51cmwuc2xpY2UoY2FjaGVVUkwubGVuZ3RoKSxzLmRhdGEmJihzLnByb2Nlc3NEYXRhfHxcInN0cmluZ1wiPT10eXBlb2Ygcy5kYXRhKSYmKGNhY2hlVVJMKz0ocnF1ZXJ5LnRlc3QoY2FjaGVVUkwpP1wiJlwiOlwiP1wiKStzLmRhdGEsZGVsZXRlIHMuZGF0YSksITE9PT1zLmNhY2hlJiYoY2FjaGVVUkw9Y2FjaGVVUkwucmVwbGFjZShyYW50aUNhY2hlLFwiJDFcIiksdW5jYWNoZWQ9KHJxdWVyeS50ZXN0KGNhY2hlVVJMKT9cIiZcIjpcIj9cIikrXCJfPVwiK25vbmNlKysrdW5jYWNoZWQpLHMudXJsPWNhY2hlVVJMK3VuY2FjaGVkKSxzLmlmTW9kaWZpZWQmJihqUXVlcnkubGFzdE1vZGlmaWVkW2NhY2hlVVJMXSYmanFYSFIuc2V0UmVxdWVzdEhlYWRlcihcIklmLU1vZGlmaWVkLVNpbmNlXCIsalF1ZXJ5Lmxhc3RNb2RpZmllZFtjYWNoZVVSTF0pLGpRdWVyeS5ldGFnW2NhY2hlVVJMXSYmanFYSFIuc2V0UmVxdWVzdEhlYWRlcihcIklmLU5vbmUtTWF0Y2hcIixqUXVlcnkuZXRhZ1tjYWNoZVVSTF0pKSwocy5kYXRhJiZzLmhhc0NvbnRlbnQmJiExIT09cy5jb250ZW50VHlwZXx8b3B0aW9ucy5jb250ZW50VHlwZSkmJmpxWEhSLnNldFJlcXVlc3RIZWFkZXIoXCJDb250ZW50LVR5cGVcIixzLmNvbnRlbnRUeXBlKSxqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKFwiQWNjZXB0XCIscy5kYXRhVHlwZXNbMF0mJnMuYWNjZXB0c1tzLmRhdGFUeXBlc1swXV0/cy5hY2NlcHRzW3MuZGF0YVR5cGVzWzBdXSsoXCIqXCIhPT1zLmRhdGFUeXBlc1swXT9cIiwgXCIrYWxsVHlwZXMrXCI7IHE9MC4wMVwiOlwiXCIpOnMuYWNjZXB0c1tcIipcIl0pO2ZvcihpIGluIHMuaGVhZGVycylqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKGkscy5oZWFkZXJzW2ldKTtpZihzLmJlZm9yZVNlbmQmJighMT09PXMuYmVmb3JlU2VuZC5jYWxsKGNhbGxiYWNrQ29udGV4dCxqcVhIUixzKXx8Y29tcGxldGVkKSlyZXR1cm4ganFYSFIuYWJvcnQoKTtpZihzdHJBYm9ydD1cImFib3J0XCIsY29tcGxldGVEZWZlcnJlZC5hZGQocy5jb21wbGV0ZSksanFYSFIuZG9uZShzLnN1Y2Nlc3MpLGpxWEhSLmZhaWwocy5lcnJvciksdHJhbnNwb3J0PWluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKHRyYW5zcG9ydHMscyxvcHRpb25zLGpxWEhSKSl7aWYoanFYSFIucmVhZHlTdGF0ZT0xLGZpcmVHbG9iYWxzJiZnbG9iYWxFdmVudENvbnRleHQudHJpZ2dlcihcImFqYXhTZW5kXCIsW2pxWEhSLHNdKSxjb21wbGV0ZWQpcmV0dXJuIGpxWEhSO3MuYXN5bmMmJnMudGltZW91dD4wJiYodGltZW91dFRpbWVyPXdpbmRvdy5zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7anFYSFIuYWJvcnQoXCJ0aW1lb3V0XCIpfSxzLnRpbWVvdXQpKTt0cnl7Y29tcGxldGVkPSExLHRyYW5zcG9ydC5zZW5kKHJlcXVlc3RIZWFkZXJzLGRvbmUpfWNhdGNoKGUpe2lmKGNvbXBsZXRlZCl0aHJvdyBlO2RvbmUoLTEsZSl9fWVsc2UgZG9uZSgtMSxcIk5vIFRyYW5zcG9ydFwiKTtyZXR1cm4ganFYSFJ9LGdldEpTT046ZnVuY3Rpb24odXJsLGRhdGEsY2FsbGJhY2spe3JldHVybiBqUXVlcnkuZ2V0KHVybCxkYXRhLGNhbGxiYWNrLFwianNvblwiKX0sZ2V0U2NyaXB0OmZ1bmN0aW9uKHVybCxjYWxsYmFjayl7cmV0dXJuIGpRdWVyeS5nZXQodXJsLHZvaWQgMCxjYWxsYmFjayxcInNjcmlwdFwiKX19KSxqUXVlcnkuZWFjaChbXCJnZXRcIixcInBvc3RcIl0sZnVuY3Rpb24oaSxtZXRob2Qpe2pRdWVyeVttZXRob2RdPWZ1bmN0aW9uKHVybCxkYXRhLGNhbGxiYWNrLHR5cGUpe3JldHVybiBpc0Z1bmN0aW9uKGRhdGEpJiYodHlwZT10eXBlfHxjYWxsYmFjayxjYWxsYmFjaz1kYXRhLGRhdGE9dm9pZCAwKSxqUXVlcnkuYWpheChqUXVlcnkuZXh0ZW5kKHt1cmw6dXJsLHR5cGU6bWV0aG9kLGRhdGFUeXBlOnR5cGUsZGF0YTpkYXRhLHN1Y2Nlc3M6Y2FsbGJhY2t9LGpRdWVyeS5pc1BsYWluT2JqZWN0KHVybCkmJnVybCkpfX0pLGpRdWVyeS5fZXZhbFVybD1mdW5jdGlvbih1cmwsb3B0aW9ucyl7cmV0dXJuIGpRdWVyeS5hamF4KHt1cmw6dXJsLHR5cGU6XCJHRVRcIixkYXRhVHlwZTpcInNjcmlwdFwiLGNhY2hlOiEwLGFzeW5jOiExLGdsb2JhbDohMSxjb252ZXJ0ZXJzOntcInRleHQgc2NyaXB0XCI6ZnVuY3Rpb24oKXt9fSxkYXRhRmlsdGVyOmZ1bmN0aW9uKHJlc3BvbnNlKXtqUXVlcnkuZ2xvYmFsRXZhbChyZXNwb25zZSxvcHRpb25zKX19KX0salF1ZXJ5LmZuLmV4dGVuZCh7d3JhcEFsbDpmdW5jdGlvbihodG1sKXt2YXIgd3JhcDtyZXR1cm4gdGhpc1swXSYmKGlzRnVuY3Rpb24oaHRtbCkmJihodG1sPWh0bWwuY2FsbCh0aGlzWzBdKSksd3JhcD1qUXVlcnkoaHRtbCx0aGlzWzBdLm93bmVyRG9jdW1lbnQpLmVxKDApLmNsb25lKCEwKSx0aGlzWzBdLnBhcmVudE5vZGUmJndyYXAuaW5zZXJ0QmVmb3JlKHRoaXNbMF0pLHdyYXAubWFwKGZ1bmN0aW9uKCl7Zm9yKHZhciBlbGVtPXRoaXM7ZWxlbS5maXJzdEVsZW1lbnRDaGlsZDspZWxlbT1lbGVtLmZpcnN0RWxlbWVudENoaWxkO3JldHVybiBlbGVtfSkuYXBwZW5kKHRoaXMpKSx0aGlzfSx3cmFwSW5uZXI6ZnVuY3Rpb24oaHRtbCl7cmV0dXJuIGlzRnVuY3Rpb24oaHRtbCk/dGhpcy5lYWNoKGZ1bmN0aW9uKGkpe2pRdWVyeSh0aGlzKS53cmFwSW5uZXIoaHRtbC5jYWxsKHRoaXMsaSkpfSk6dGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIHNlbGY9alF1ZXJ5KHRoaXMpLGNvbnRlbnRzPXNlbGYuY29udGVudHMoKTtjb250ZW50cy5sZW5ndGg/Y29udGVudHMud3JhcEFsbChodG1sKTpzZWxmLmFwcGVuZChodG1sKX0pfSx3cmFwOmZ1bmN0aW9uKGh0bWwpe3ZhciBodG1sSXNGdW5jdGlvbj1pc0Z1bmN0aW9uKGh0bWwpO3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oaSl7alF1ZXJ5KHRoaXMpLndyYXBBbGwoaHRtbElzRnVuY3Rpb24/aHRtbC5jYWxsKHRoaXMsaSk6aHRtbCl9KX0sdW53cmFwOmZ1bmN0aW9uKHNlbGVjdG9yKXtyZXR1cm4gdGhpcy5wYXJlbnQoc2VsZWN0b3IpLm5vdChcImJvZHlcIikuZWFjaChmdW5jdGlvbigpe2pRdWVyeSh0aGlzKS5yZXBsYWNlV2l0aCh0aGlzLmNoaWxkTm9kZXMpfSksdGhpc319KSxqUXVlcnkuZXhwci5wc2V1ZG9zLmhpZGRlbj1mdW5jdGlvbihlbGVtKXtyZXR1cm4halF1ZXJ5LmV4cHIucHNldWRvcy52aXNpYmxlKGVsZW0pfSxqUXVlcnkuZXhwci5wc2V1ZG9zLnZpc2libGU9ZnVuY3Rpb24oZWxlbSl7cmV0dXJuISEoZWxlbS5vZmZzZXRXaWR0aHx8ZWxlbS5vZmZzZXRIZWlnaHR8fGVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGgpfSxqUXVlcnkuYWpheFNldHRpbmdzLnhocj1mdW5jdGlvbigpe3RyeXtyZXR1cm4gbmV3IHdpbmRvdy5YTUxIdHRwUmVxdWVzdH1jYXRjaChlKXt9fTt2YXIgeGhyU3VjY2Vzc1N0YXR1cz17MDoyMDAsMTIyMzoyMDR9LHhoclN1cHBvcnRlZD1qUXVlcnkuYWpheFNldHRpbmdzLnhocigpO3N1cHBvcnQuY29ycz0hIXhoclN1cHBvcnRlZCYmXCJ3aXRoQ3JlZGVudGlhbHNcImluIHhoclN1cHBvcnRlZCxzdXBwb3J0LmFqYXg9eGhyU3VwcG9ydGVkPSEheGhyU3VwcG9ydGVkLGpRdWVyeS5hamF4VHJhbnNwb3J0KGZ1bmN0aW9uKG9wdGlvbnMpe3ZhciBjYWxsYmFjayxlcnJvckNhbGxiYWNrO2lmKHN1cHBvcnQuY29yc3x8eGhyU3VwcG9ydGVkJiYhb3B0aW9ucy5jcm9zc0RvbWFpbilyZXR1cm57c2VuZDpmdW5jdGlvbihoZWFkZXJzLGNvbXBsZXRlKXt2YXIgaSx4aHI9b3B0aW9ucy54aHIoKTtpZih4aHIub3BlbihvcHRpb25zLnR5cGUsb3B0aW9ucy51cmwsb3B0aW9ucy5hc3luYyxvcHRpb25zLnVzZXJuYW1lLG9wdGlvbnMucGFzc3dvcmQpLG9wdGlvbnMueGhyRmllbGRzKWZvcihpIGluIG9wdGlvbnMueGhyRmllbGRzKXhocltpXT1vcHRpb25zLnhockZpZWxkc1tpXTtvcHRpb25zLm1pbWVUeXBlJiZ4aHIub3ZlcnJpZGVNaW1lVHlwZSYmeGhyLm92ZXJyaWRlTWltZVR5cGUob3B0aW9ucy5taW1lVHlwZSksb3B0aW9ucy5jcm9zc0RvbWFpbnx8aGVhZGVyc1tcIlgtUmVxdWVzdGVkLVdpdGhcIl18fChoZWFkZXJzW1wiWC1SZXF1ZXN0ZWQtV2l0aFwiXT1cIlhNTEh0dHBSZXF1ZXN0XCIpO2ZvcihpIGluIGhlYWRlcnMpeGhyLnNldFJlcXVlc3RIZWFkZXIoaSxoZWFkZXJzW2ldKTtjYWxsYmFjaz1mdW5jdGlvbih0eXBlKXtyZXR1cm4gZnVuY3Rpb24oKXtjYWxsYmFjayYmKGNhbGxiYWNrPWVycm9yQ2FsbGJhY2s9eGhyLm9ubG9hZD14aHIub25lcnJvcj14aHIub25hYm9ydD14aHIub250aW1lb3V0PXhoci5vbnJlYWR5c3RhdGVjaGFuZ2U9bnVsbCxcImFib3J0XCI9PT10eXBlP3hoci5hYm9ydCgpOlwiZXJyb3JcIj09PXR5cGU/XCJudW1iZXJcIiE9dHlwZW9mIHhoci5zdGF0dXM/Y29tcGxldGUoMCxcImVycm9yXCIpOmNvbXBsZXRlKHhoci5zdGF0dXMseGhyLnN0YXR1c1RleHQpOmNvbXBsZXRlKHhoclN1Y2Nlc3NTdGF0dXNbeGhyLnN0YXR1c118fHhoci5zdGF0dXMseGhyLnN0YXR1c1RleHQsXCJ0ZXh0XCIhPT0oeGhyLnJlc3BvbnNlVHlwZXx8XCJ0ZXh0XCIpfHxcInN0cmluZ1wiIT10eXBlb2YgeGhyLnJlc3BvbnNlVGV4dD97YmluYXJ5Onhoci5yZXNwb25zZX06e3RleHQ6eGhyLnJlc3BvbnNlVGV4dH0seGhyLmdldEFsbFJlc3BvbnNlSGVhZGVycygpKSl9fSx4aHIub25sb2FkPWNhbGxiYWNrKCksZXJyb3JDYWxsYmFjaz14aHIub25lcnJvcj14aHIub250aW1lb3V0PWNhbGxiYWNrKFwiZXJyb3JcIiksdm9pZCAwIT09eGhyLm9uYWJvcnQ/eGhyLm9uYWJvcnQ9ZXJyb3JDYWxsYmFjazp4aHIub25yZWFkeXN0YXRlY2hhbmdlPWZ1bmN0aW9uKCl7ND09PXhoci5yZWFkeVN0YXRlJiZ3aW5kb3cuc2V0VGltZW91dChmdW5jdGlvbigpe2NhbGxiYWNrJiZlcnJvckNhbGxiYWNrKCl9KX0sY2FsbGJhY2s9Y2FsbGJhY2soXCJhYm9ydFwiKTt0cnl7eGhyLnNlbmQob3B0aW9ucy5oYXNDb250ZW50JiZvcHRpb25zLmRhdGF8fG51bGwpfWNhdGNoKGUpe2lmKGNhbGxiYWNrKXRocm93IGV9fSxhYm9ydDpmdW5jdGlvbigpe2NhbGxiYWNrJiZjYWxsYmFjaygpfX19KSxqUXVlcnkuYWpheFByZWZpbHRlcihmdW5jdGlvbihzKXtzLmNyb3NzRG9tYWluJiYocy5jb250ZW50cy5zY3JpcHQ9ITEpfSksalF1ZXJ5LmFqYXhTZXR1cCh7YWNjZXB0czp7c2NyaXB0OlwidGV4dC9qYXZhc2NyaXB0LCBhcHBsaWNhdGlvbi9qYXZhc2NyaXB0LCBhcHBsaWNhdGlvbi9lY21hc2NyaXB0LCBhcHBsaWNhdGlvbi94LWVjbWFzY3JpcHRcIn0sY29udGVudHM6e3NjcmlwdDovXFxiKD86amF2YXxlY21hKXNjcmlwdFxcYi99LGNvbnZlcnRlcnM6e1widGV4dCBzY3JpcHRcIjpmdW5jdGlvbih0ZXh0KXtyZXR1cm4galF1ZXJ5Lmdsb2JhbEV2YWwodGV4dCksdGV4dH19fSksalF1ZXJ5LmFqYXhQcmVmaWx0ZXIoXCJzY3JpcHRcIixmdW5jdGlvbihzKXt2b2lkIDA9PT1zLmNhY2hlJiYocy5jYWNoZT0hMSkscy5jcm9zc0RvbWFpbiYmKHMudHlwZT1cIkdFVFwiKX0pLGpRdWVyeS5hamF4VHJhbnNwb3J0KFwic2NyaXB0XCIsZnVuY3Rpb24ocyl7aWYocy5jcm9zc0RvbWFpbnx8cy5zY3JpcHRBdHRycyl7dmFyIHNjcmlwdCxjYWxsYmFjaztyZXR1cm57c2VuZDpmdW5jdGlvbihfLGNvbXBsZXRlKXtzY3JpcHQ9alF1ZXJ5KFwiPHNjcmlwdD5cIikuYXR0cihzLnNjcmlwdEF0dHJzfHx7fSkucHJvcCh7Y2hhcnNldDpzLnNjcmlwdENoYXJzZXQsc3JjOnMudXJsfSkub24oXCJsb2FkIGVycm9yXCIsY2FsbGJhY2s9ZnVuY3Rpb24oZXZ0KXtzY3JpcHQucmVtb3ZlKCksY2FsbGJhY2s9bnVsbCxldnQmJmNvbXBsZXRlKFwiZXJyb3JcIj09PWV2dC50eXBlPzQwNDoyMDAsZXZ0LnR5cGUpfSksZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzY3JpcHRbMF0pfSxhYm9ydDpmdW5jdGlvbigpe2NhbGxiYWNrJiZjYWxsYmFjaygpfX19fSk7dmFyIG9sZENhbGxiYWNrcz1bXSxyanNvbnA9Lyg9KVxcPyg/PSZ8JCl8XFw/XFw/LztqUXVlcnkuYWpheFNldHVwKHtqc29ucDpcImNhbGxiYWNrXCIsanNvbnBDYWxsYmFjazpmdW5jdGlvbigpe3ZhciBjYWxsYmFjaz1vbGRDYWxsYmFja3MucG9wKCl8fGpRdWVyeS5leHBhbmRvK1wiX1wiK25vbmNlKys7cmV0dXJuIHRoaXNbY2FsbGJhY2tdPSEwLGNhbGxiYWNrfX0pLGpRdWVyeS5hamF4UHJlZmlsdGVyKFwianNvbiBqc29ucFwiLGZ1bmN0aW9uKHMsb3JpZ2luYWxTZXR0aW5ncyxqcVhIUil7dmFyIGNhbGxiYWNrTmFtZSxvdmVyd3JpdHRlbixyZXNwb25zZUNvbnRhaW5lcixqc29uUHJvcD0hMSE9PXMuanNvbnAmJihyanNvbnAudGVzdChzLnVybCk/XCJ1cmxcIjpcInN0cmluZ1wiPT10eXBlb2Ygcy5kYXRhJiYwPT09KHMuY29udGVudFR5cGV8fFwiXCIpLmluZGV4T2YoXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIikmJnJqc29ucC50ZXN0KHMuZGF0YSkmJlwiZGF0YVwiKTtpZihqc29uUHJvcHx8XCJqc29ucFwiPT09cy5kYXRhVHlwZXNbMF0pcmV0dXJuIGNhbGxiYWNrTmFtZT1zLmpzb25wQ2FsbGJhY2s9aXNGdW5jdGlvbihzLmpzb25wQ2FsbGJhY2spP3MuanNvbnBDYWxsYmFjaygpOnMuanNvbnBDYWxsYmFjayxqc29uUHJvcD9zW2pzb25Qcm9wXT1zW2pzb25Qcm9wXS5yZXBsYWNlKHJqc29ucCxcIiQxXCIrY2FsbGJhY2tOYW1lKTohMSE9PXMuanNvbnAmJihzLnVybCs9KHJxdWVyeS50ZXN0KHMudXJsKT9cIiZcIjpcIj9cIikrcy5qc29ucCtcIj1cIitjYWxsYmFja05hbWUpLHMuY29udmVydGVyc1tcInNjcmlwdCBqc29uXCJdPWZ1bmN0aW9uKCl7cmV0dXJuIHJlc3BvbnNlQ29udGFpbmVyfHxqUXVlcnkuZXJyb3IoY2FsbGJhY2tOYW1lK1wiIHdhcyBub3QgY2FsbGVkXCIpLHJlc3BvbnNlQ29udGFpbmVyWzBdfSxzLmRhdGFUeXBlc1swXT1cImpzb25cIixvdmVyd3JpdHRlbj13aW5kb3dbY2FsbGJhY2tOYW1lXSx3aW5kb3dbY2FsbGJhY2tOYW1lXT1mdW5jdGlvbigpe3Jlc3BvbnNlQ29udGFpbmVyPWFyZ3VtZW50c30sanFYSFIuYWx3YXlzKGZ1bmN0aW9uKCl7dm9pZCAwPT09b3ZlcndyaXR0ZW4/alF1ZXJ5KHdpbmRvdykucmVtb3ZlUHJvcChjYWxsYmFja05hbWUpOndpbmRvd1tjYWxsYmFja05hbWVdPW92ZXJ3cml0dGVuLHNbY2FsbGJhY2tOYW1lXSYmKHMuanNvbnBDYWxsYmFjaz1vcmlnaW5hbFNldHRpbmdzLmpzb25wQ2FsbGJhY2ssb2xkQ2FsbGJhY2tzLnB1c2goY2FsbGJhY2tOYW1lKSkscmVzcG9uc2VDb250YWluZXImJmlzRnVuY3Rpb24ob3ZlcndyaXR0ZW4pJiZvdmVyd3JpdHRlbihyZXNwb25zZUNvbnRhaW5lclswXSkscmVzcG9uc2VDb250YWluZXI9b3ZlcndyaXR0ZW49dm9pZCAwfSksXCJzY3JpcHRcIn0pLHN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50PWZ1bmN0aW9uKCl7dmFyIGJvZHk9ZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50KFwiXCIpLmJvZHk7cmV0dXJuIGJvZHkuaW5uZXJIVE1MPVwiPGZvcm0+PC9mb3JtPjxmb3JtPjwvZm9ybT5cIiwyPT09Ym9keS5jaGlsZE5vZGVzLmxlbmd0aH0oKSxqUXVlcnkucGFyc2VIVE1MPWZ1bmN0aW9uKGRhdGEsY29udGV4dCxrZWVwU2NyaXB0cyl7aWYoXCJzdHJpbmdcIiE9dHlwZW9mIGRhdGEpcmV0dXJuW107XCJib29sZWFuXCI9PXR5cGVvZiBjb250ZXh0JiYoa2VlcFNjcmlwdHM9Y29udGV4dCxjb250ZXh0PSExKTt2YXIgYmFzZSxwYXJzZWQsc2NyaXB0cztyZXR1cm4gY29udGV4dHx8KHN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50Pyhjb250ZXh0PWRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudChcIlwiKSxiYXNlPWNvbnRleHQuY3JlYXRlRWxlbWVudChcImJhc2VcIiksYmFzZS5ocmVmPWRvY3VtZW50LmxvY2F0aW9uLmhyZWYsY29udGV4dC5oZWFkLmFwcGVuZENoaWxkKGJhc2UpKTpjb250ZXh0PWRvY3VtZW50KSxwYXJzZWQ9cnNpbmdsZVRhZy5leGVjKGRhdGEpLHNjcmlwdHM9IWtlZXBTY3JpcHRzJiZbXSxwYXJzZWQ/W2NvbnRleHQuY3JlYXRlRWxlbWVudChwYXJzZWRbMV0pXToocGFyc2VkPWJ1aWxkRnJhZ21lbnQoW2RhdGFdLGNvbnRleHQsc2NyaXB0cyksc2NyaXB0cyYmc2NyaXB0cy5sZW5ndGgmJmpRdWVyeShzY3JpcHRzKS5yZW1vdmUoKSxqUXVlcnkubWVyZ2UoW10scGFyc2VkLmNoaWxkTm9kZXMpKX0salF1ZXJ5LmZuLmxvYWQ9ZnVuY3Rpb24odXJsLHBhcmFtcyxjYWxsYmFjayl7dmFyIHNlbGVjdG9yLHR5cGUscmVzcG9uc2Usc2VsZj10aGlzLG9mZj11cmwuaW5kZXhPZihcIiBcIik7cmV0dXJuIG9mZj4tMSYmKHNlbGVjdG9yPXN0cmlwQW5kQ29sbGFwc2UodXJsLnNsaWNlKG9mZikpLHVybD11cmwuc2xpY2UoMCxvZmYpKSxpc0Z1bmN0aW9uKHBhcmFtcyk/KGNhbGxiYWNrPXBhcmFtcyxwYXJhbXM9dm9pZCAwKTpwYXJhbXMmJlwib2JqZWN0XCI9PXR5cGVvZiBwYXJhbXMmJih0eXBlPVwiUE9TVFwiKSxzZWxmLmxlbmd0aD4wJiZqUXVlcnkuYWpheCh7dXJsOnVybCx0eXBlOnR5cGV8fFwiR0VUXCIsZGF0YVR5cGU6XCJodG1sXCIsZGF0YTpwYXJhbXN9KS5kb25lKGZ1bmN0aW9uKHJlc3BvbnNlVGV4dCl7cmVzcG9uc2U9YXJndW1lbnRzLHNlbGYuaHRtbChzZWxlY3Rvcj9qUXVlcnkoXCI8ZGl2PlwiKS5hcHBlbmQoalF1ZXJ5LnBhcnNlSFRNTChyZXNwb25zZVRleHQpKS5maW5kKHNlbGVjdG9yKTpyZXNwb25zZVRleHQpfSkuYWx3YXlzKGNhbGxiYWNrJiZmdW5jdGlvbihqcVhIUixzdGF0dXMpe3NlbGYuZWFjaChmdW5jdGlvbigpe2NhbGxiYWNrLmFwcGx5KHRoaXMscmVzcG9uc2V8fFtqcVhIUi5yZXNwb25zZVRleHQsc3RhdHVzLGpxWEhSXSl9KX0pLHRoaXN9LGpRdWVyeS5lYWNoKFtcImFqYXhTdGFydFwiLFwiYWpheFN0b3BcIixcImFqYXhDb21wbGV0ZVwiLFwiYWpheEVycm9yXCIsXCJhamF4U3VjY2Vzc1wiLFwiYWpheFNlbmRcIl0sZnVuY3Rpb24oaSx0eXBlKXtqUXVlcnkuZm5bdHlwZV09ZnVuY3Rpb24oZm4pe3JldHVybiB0aGlzLm9uKHR5cGUsZm4pfX0pLGpRdWVyeS5leHByLnBzZXVkb3MuYW5pbWF0ZWQ9ZnVuY3Rpb24oZWxlbSl7cmV0dXJuIGpRdWVyeS5ncmVwKGpRdWVyeS50aW1lcnMsZnVuY3Rpb24oZm4pe3JldHVybiBlbGVtPT09Zm4uZWxlbX0pLmxlbmd0aH0salF1ZXJ5Lm9mZnNldD17c2V0T2Zmc2V0OmZ1bmN0aW9uKGVsZW0sb3B0aW9ucyxpKXt2YXIgY3VyUG9zaXRpb24sY3VyTGVmdCxjdXJDU1NUb3AsY3VyVG9wLGN1ck9mZnNldCxjdXJDU1NMZWZ0LGNhbGN1bGF0ZVBvc2l0aW9uLHBvc2l0aW9uPWpRdWVyeS5jc3MoZWxlbSxcInBvc2l0aW9uXCIpLGN1ckVsZW09alF1ZXJ5KGVsZW0pLHByb3BzPXt9O1wic3RhdGljXCI9PT1wb3NpdGlvbiYmKGVsZW0uc3R5bGUucG9zaXRpb249XCJyZWxhdGl2ZVwiKSxjdXJPZmZzZXQ9Y3VyRWxlbS5vZmZzZXQoKSxjdXJDU1NUb3A9alF1ZXJ5LmNzcyhlbGVtLFwidG9wXCIpLGN1ckNTU0xlZnQ9alF1ZXJ5LmNzcyhlbGVtLFwibGVmdFwiKSxjYWxjdWxhdGVQb3NpdGlvbj0oXCJhYnNvbHV0ZVwiPT09cG9zaXRpb258fFwiZml4ZWRcIj09PXBvc2l0aW9uKSYmKGN1ckNTU1RvcCtjdXJDU1NMZWZ0KS5pbmRleE9mKFwiYXV0b1wiKT4tMSxjYWxjdWxhdGVQb3NpdGlvbj8oY3VyUG9zaXRpb249Y3VyRWxlbS5wb3NpdGlvbigpLGN1clRvcD1jdXJQb3NpdGlvbi50b3AsY3VyTGVmdD1jdXJQb3NpdGlvbi5sZWZ0KTooY3VyVG9wPXBhcnNlRmxvYXQoY3VyQ1NTVG9wKXx8MCxjdXJMZWZ0PXBhcnNlRmxvYXQoY3VyQ1NTTGVmdCl8fDApLGlzRnVuY3Rpb24ob3B0aW9ucykmJihvcHRpb25zPW9wdGlvbnMuY2FsbChlbGVtLGksalF1ZXJ5LmV4dGVuZCh7fSxjdXJPZmZzZXQpKSksbnVsbCE9b3B0aW9ucy50b3AmJihwcm9wcy50b3A9b3B0aW9ucy50b3AtY3VyT2Zmc2V0LnRvcCtjdXJUb3ApLG51bGwhPW9wdGlvbnMubGVmdCYmKHByb3BzLmxlZnQ9b3B0aW9ucy5sZWZ0LWN1ck9mZnNldC5sZWZ0K2N1ckxlZnQpLFwidXNpbmdcImluIG9wdGlvbnM/b3B0aW9ucy51c2luZy5jYWxsKGVsZW0scHJvcHMpOmN1ckVsZW0uY3NzKHByb3BzKX19LGpRdWVyeS5mbi5leHRlbmQoe29mZnNldDpmdW5jdGlvbihvcHRpb25zKXtpZihhcmd1bWVudHMubGVuZ3RoKXJldHVybiB2b2lkIDA9PT1vcHRpb25zP3RoaXM6dGhpcy5lYWNoKGZ1bmN0aW9uKGkpe2pRdWVyeS5vZmZzZXQuc2V0T2Zmc2V0KHRoaXMsb3B0aW9ucyxpKX0pO3ZhciByZWN0LHdpbixlbGVtPXRoaXNbMF07aWYoZWxlbSlyZXR1cm4gZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aD8ocmVjdD1lbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLHdpbj1lbGVtLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcse3RvcDpyZWN0LnRvcCt3aW4ucGFnZVlPZmZzZXQsbGVmdDpyZWN0LmxlZnQrd2luLnBhZ2VYT2Zmc2V0fSk6e3RvcDowLGxlZnQ6MH19LHBvc2l0aW9uOmZ1bmN0aW9uKCl7aWYodGhpc1swXSl7dmFyIG9mZnNldFBhcmVudCxvZmZzZXQsZG9jLGVsZW09dGhpc1swXSxwYXJlbnRPZmZzZXQ9e3RvcDowLGxlZnQ6MH07aWYoXCJmaXhlZFwiPT09alF1ZXJ5LmNzcyhlbGVtLFwicG9zaXRpb25cIikpb2Zmc2V0PWVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7ZWxzZXtmb3Iob2Zmc2V0PXRoaXMub2Zmc2V0KCksZG9jPWVsZW0ub3duZXJEb2N1bWVudCxvZmZzZXRQYXJlbnQ9ZWxlbS5vZmZzZXRQYXJlbnR8fGRvYy5kb2N1bWVudEVsZW1lbnQ7b2Zmc2V0UGFyZW50JiYob2Zmc2V0UGFyZW50PT09ZG9jLmJvZHl8fG9mZnNldFBhcmVudD09PWRvYy5kb2N1bWVudEVsZW1lbnQpJiZcInN0YXRpY1wiPT09alF1ZXJ5LmNzcyhvZmZzZXRQYXJlbnQsXCJwb3NpdGlvblwiKTspb2Zmc2V0UGFyZW50PW9mZnNldFBhcmVudC5wYXJlbnROb2RlO29mZnNldFBhcmVudCYmb2Zmc2V0UGFyZW50IT09ZWxlbSYmMT09PW9mZnNldFBhcmVudC5ub2RlVHlwZSYmKHBhcmVudE9mZnNldD1qUXVlcnkob2Zmc2V0UGFyZW50KS5vZmZzZXQoKSxwYXJlbnRPZmZzZXQudG9wKz1qUXVlcnkuY3NzKG9mZnNldFBhcmVudCxcImJvcmRlclRvcFdpZHRoXCIsITApLHBhcmVudE9mZnNldC5sZWZ0Kz1qUXVlcnkuY3NzKG9mZnNldFBhcmVudCxcImJvcmRlckxlZnRXaWR0aFwiLCEwKSl9cmV0dXJue3RvcDpvZmZzZXQudG9wLXBhcmVudE9mZnNldC50b3AtalF1ZXJ5LmNzcyhlbGVtLFwibWFyZ2luVG9wXCIsITApLGxlZnQ6b2Zmc2V0LmxlZnQtcGFyZW50T2Zmc2V0LmxlZnQtalF1ZXJ5LmNzcyhlbGVtLFwibWFyZ2luTGVmdFwiLCEwKX19fSxvZmZzZXRQYXJlbnQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24oKXtmb3IodmFyIG9mZnNldFBhcmVudD10aGlzLm9mZnNldFBhcmVudDtvZmZzZXRQYXJlbnQmJlwic3RhdGljXCI9PT1qUXVlcnkuY3NzKG9mZnNldFBhcmVudCxcInBvc2l0aW9uXCIpOylvZmZzZXRQYXJlbnQ9b2Zmc2V0UGFyZW50Lm9mZnNldFBhcmVudDtyZXR1cm4gb2Zmc2V0UGFyZW50fHxkb2N1bWVudEVsZW1lbnR9KX19KSxqUXVlcnkuZWFjaCh7c2Nyb2xsTGVmdDpcInBhZ2VYT2Zmc2V0XCIsc2Nyb2xsVG9wOlwicGFnZVlPZmZzZXRcIn0sZnVuY3Rpb24obWV0aG9kLHByb3Ape3ZhciB0b3A9XCJwYWdlWU9mZnNldFwiPT09cHJvcDtqUXVlcnkuZm5bbWV0aG9kXT1mdW5jdGlvbih2YWwpe3JldHVybiBhY2Nlc3ModGhpcyxmdW5jdGlvbihlbGVtLG1ldGhvZCx2YWwpe3ZhciB3aW47aWYoaXNXaW5kb3coZWxlbSk/d2luPWVsZW06OT09PWVsZW0ubm9kZVR5cGUmJih3aW49ZWxlbS5kZWZhdWx0Vmlldyksdm9pZCAwPT09dmFsKXJldHVybiB3aW4/d2luW3Byb3BdOmVsZW1bbWV0aG9kXTt3aW4/d2luLnNjcm9sbFRvKHRvcD93aW4ucGFnZVhPZmZzZXQ6dmFsLHRvcD92YWw6d2luLnBhZ2VZT2Zmc2V0KTplbGVtW21ldGhvZF09dmFsfSxtZXRob2QsdmFsLGFyZ3VtZW50cy5sZW5ndGgpfX0pLGpRdWVyeS5lYWNoKFtcInRvcFwiLFwibGVmdFwiXSxmdW5jdGlvbihpLHByb3Ape2pRdWVyeS5jc3NIb29rc1twcm9wXT1hZGRHZXRIb29rSWYoc3VwcG9ydC5waXhlbFBvc2l0aW9uLGZ1bmN0aW9uKGVsZW0sY29tcHV0ZWQpe2lmKGNvbXB1dGVkKXJldHVybiBjb21wdXRlZD1jdXJDU1MoZWxlbSxwcm9wKSxybnVtbm9ucHgudGVzdChjb21wdXRlZCk/alF1ZXJ5KGVsZW0pLnBvc2l0aW9uKClbcHJvcF0rXCJweFwiOmNvbXB1dGVkfSl9KSxqUXVlcnkuZWFjaCh7SGVpZ2h0OlwiaGVpZ2h0XCIsV2lkdGg6XCJ3aWR0aFwifSxmdW5jdGlvbihuYW1lLHR5cGUpe2pRdWVyeS5lYWNoKHtwYWRkaW5nOlwiaW5uZXJcIituYW1lLGNvbnRlbnQ6dHlwZSxcIlwiOlwib3V0ZXJcIituYW1lfSxmdW5jdGlvbihkZWZhdWx0RXh0cmEsZnVuY05hbWUpe2pRdWVyeS5mbltmdW5jTmFtZV09ZnVuY3Rpb24obWFyZ2luLHZhbHVlKXt2YXIgY2hhaW5hYmxlPWFyZ3VtZW50cy5sZW5ndGgmJihkZWZhdWx0RXh0cmF8fFwiYm9vbGVhblwiIT10eXBlb2YgbWFyZ2luKSxleHRyYT1kZWZhdWx0RXh0cmF8fCghMD09PW1hcmdpbnx8ITA9PT12YWx1ZT9cIm1hcmdpblwiOlwiYm9yZGVyXCIpO3JldHVybiBhY2Nlc3ModGhpcyxmdW5jdGlvbihlbGVtLHR5cGUsdmFsdWUpe3ZhciBkb2M7cmV0dXJuIGlzV2luZG93KGVsZW0pPzA9PT1mdW5jTmFtZS5pbmRleE9mKFwib3V0ZXJcIik/ZWxlbVtcImlubmVyXCIrbmFtZV06ZWxlbS5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnRbXCJjbGllbnRcIituYW1lXTo5PT09ZWxlbS5ub2RlVHlwZT8oZG9jPWVsZW0uZG9jdW1lbnRFbGVtZW50LE1hdGgubWF4KGVsZW0uYm9keVtcInNjcm9sbFwiK25hbWVdLGRvY1tcInNjcm9sbFwiK25hbWVdLGVsZW0uYm9keVtcIm9mZnNldFwiK25hbWVdLGRvY1tcIm9mZnNldFwiK25hbWVdLGRvY1tcImNsaWVudFwiK25hbWVdKSk6dm9pZCAwPT09dmFsdWU/alF1ZXJ5LmNzcyhlbGVtLHR5cGUsZXh0cmEpOmpRdWVyeS5zdHlsZShlbGVtLHR5cGUsdmFsdWUsZXh0cmEpfSx0eXBlLGNoYWluYWJsZT9tYXJnaW46dm9pZCAwLGNoYWluYWJsZSl9fSl9KSxqUXVlcnkuZWFjaChcImJsdXIgZm9jdXMgZm9jdXNpbiBmb2N1c291dCByZXNpemUgc2Nyb2xsIGNsaWNrIGRibGNsaWNrIG1vdXNlZG93biBtb3VzZXVwIG1vdXNlbW92ZSBtb3VzZW92ZXIgbW91c2VvdXQgbW91c2VlbnRlciBtb3VzZWxlYXZlIGNoYW5nZSBzZWxlY3Qgc3VibWl0IGtleWRvd24ga2V5cHJlc3Mga2V5dXAgY29udGV4dG1lbnVcIi5zcGxpdChcIiBcIiksZnVuY3Rpb24oaSxuYW1lKXtqUXVlcnkuZm5bbmFtZV09ZnVuY3Rpb24oZGF0YSxmbil7cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGg+MD90aGlzLm9uKG5hbWUsbnVsbCxkYXRhLGZuKTp0aGlzLnRyaWdnZXIobmFtZSl9fSksalF1ZXJ5LmZuLmV4dGVuZCh7aG92ZXI6ZnVuY3Rpb24oZm5PdmVyLGZuT3V0KXtyZXR1cm4gdGhpcy5tb3VzZWVudGVyKGZuT3ZlcikubW91c2VsZWF2ZShmbk91dHx8Zm5PdmVyKX19KSxqUXVlcnkuZm4uZXh0ZW5kKHtiaW5kOmZ1bmN0aW9uKHR5cGVzLGRhdGEsZm4pe3JldHVybiB0aGlzLm9uKHR5cGVzLG51bGwsZGF0YSxmbil9LHVuYmluZDpmdW5jdGlvbih0eXBlcyxmbil7cmV0dXJuIHRoaXMub2ZmKHR5cGVzLG51bGwsZm4pfSxkZWxlZ2F0ZTpmdW5jdGlvbihzZWxlY3Rvcix0eXBlcyxkYXRhLGZuKXtyZXR1cm4gdGhpcy5vbih0eXBlcyxzZWxlY3RvcixkYXRhLGZuKX0sdW5kZWxlZ2F0ZTpmdW5jdGlvbihzZWxlY3Rvcix0eXBlcyxmbil7cmV0dXJuIDE9PT1hcmd1bWVudHMubGVuZ3RoP3RoaXMub2ZmKHNlbGVjdG9yLFwiKipcIik6dGhpcy5vZmYodHlwZXMsc2VsZWN0b3J8fFwiKipcIixmbil9fSksalF1ZXJ5LnByb3h5PWZ1bmN0aW9uKGZuLGNvbnRleHQpe3ZhciB0bXAsYXJncyxwcm94eTtpZihcInN0cmluZ1wiPT10eXBlb2YgY29udGV4dCYmKHRtcD1mbltjb250ZXh0XSxjb250ZXh0PWZuLGZuPXRtcCksaXNGdW5jdGlvbihmbikpcmV0dXJuIGFyZ3M9c2xpY2UuY2FsbChhcmd1bWVudHMsMikscHJveHk9ZnVuY3Rpb24oKXtyZXR1cm4gZm4uYXBwbHkoY29udGV4dHx8dGhpcyxhcmdzLmNvbmNhdChzbGljZS5jYWxsKGFyZ3VtZW50cykpKX0scHJveHkuZ3VpZD1mbi5ndWlkPWZuLmd1aWR8fGpRdWVyeS5ndWlkKysscHJveHl9LGpRdWVyeS5ob2xkUmVhZHk9ZnVuY3Rpb24oaG9sZCl7aG9sZD9qUXVlcnkucmVhZHlXYWl0Kys6alF1ZXJ5LnJlYWR5KCEwKX0salF1ZXJ5LmlzQXJyYXk9QXJyYXkuaXNBcnJheSxqUXVlcnkucGFyc2VKU09OPUpTT04ucGFyc2UsalF1ZXJ5Lm5vZGVOYW1lPW5vZGVOYW1lLGpRdWVyeS5pc0Z1bmN0aW9uPWlzRnVuY3Rpb24salF1ZXJ5LmlzV2luZG93PWlzV2luZG93LGpRdWVyeS5jYW1lbENhc2U9Y2FtZWxDYXNlLGpRdWVyeS50eXBlPXRvVHlwZSxqUXVlcnkubm93PURhdGUubm93LGpRdWVyeS5pc051bWVyaWM9ZnVuY3Rpb24ob2JqKXt2YXIgdHlwZT1qUXVlcnkudHlwZShvYmopO3JldHVybihcIm51bWJlclwiPT09dHlwZXx8XCJzdHJpbmdcIj09PXR5cGUpJiYhaXNOYU4ob2JqLXBhcnNlRmxvYXQob2JqKSl9LF9fV0VCUEFDS19BTURfREVGSU5FX0FSUkFZX189W10sdm9pZCAwIT09KF9fV0VCUEFDS19BTURfREVGSU5FX1JFU1VMVF9fPWZ1bmN0aW9uKCl7cmV0dXJuIGpRdWVyeX0uYXBwbHkoZXhwb3J0cyxfX1dFQlBBQ0tfQU1EX0RFRklORV9BUlJBWV9fKSkmJihtb2R1bGUuZXhwb3J0cz1fX1dFQlBBQ0tfQU1EX0RFRklORV9SRVNVTFRfXyk7dmFyIF9qUXVlcnk9d2luZG93LmpRdWVyeSxfJD13aW5kb3cuJDtyZXR1cm4galF1ZXJ5Lm5vQ29uZmxpY3Q9ZnVuY3Rpb24oZGVlcCl7cmV0dXJuIHdpbmRvdy4kPT09alF1ZXJ5JiYod2luZG93LiQ9XyQpLGRlZXAmJndpbmRvdy5qUXVlcnk9PT1qUXVlcnkmJih3aW5kb3cualF1ZXJ5PV9qUXVlcnkpLGpRdWVyeX0sbm9HbG9iYWx8fCh3aW5kb3cualF1ZXJ5PXdpbmRvdy4kPWpRdWVyeSksalF1ZXJ5fSl9LGZ1bmN0aW9uKG1vZHVsZSxleHBvcnRzLF9fd2VicGFja19yZXF1aXJlX18pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSxDb25zdHJ1Y3Rvcil7aWYoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfU9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pLGV4cG9ydHMuU2ltcGxlRmFjZT12b2lkIDA7dmFyIF9jcmVhdGVDbGFzcz1mdW5jdGlvbigpe2Z1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LHByb3BzKXtmb3IodmFyIGk9MDtpPHByb3BzLmxlbmd0aDtpKyspe3ZhciBkZXNjcmlwdG9yPXByb3BzW2ldO2Rlc2NyaXB0b3IuZW51bWVyYWJsZT1kZXNjcmlwdG9yLmVudW1lcmFibGV8fCExLGRlc2NyaXB0b3IuY29uZmlndXJhYmxlPSEwLFwidmFsdWVcImluIGRlc2NyaXB0b3ImJihkZXNjcmlwdG9yLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LGRlc2NyaXB0b3Iua2V5LGRlc2NyaXB0b3IpfX1yZXR1cm4gZnVuY3Rpb24oQ29uc3RydWN0b3IscHJvdG9Qcm9wcyxzdGF0aWNQcm9wcyl7cmV0dXJuIHByb3RvUHJvcHMmJmRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLHByb3RvUHJvcHMpLHN0YXRpY1Byb3BzJiZkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLHN0YXRpY1Byb3BzKSxDb25zdHJ1Y3Rvcn19KCksX3Jpbmc9X193ZWJwYWNrX3JlcXVpcmVfXyg1KSxfY2xvY2tIYW5kPV9fd2VicGFja19yZXF1aXJlX18oNiksX2NpcmNsZT1fX3dlYnBhY2tfcmVxdWlyZV9fKDApLF9kZWZhdWx0UHJvcGVydGllcz1fX3dlYnBhY2tfcmVxdWlyZV9fKDEpO2V4cG9ydHMuU2ltcGxlRmFjZT1mdW5jdGlvbigpe2Z1bmN0aW9uIFNpbXBsZUZhY2UoY29udGV4dCx4Q2VudGVyLHlDZW50ZXIscmFkaXVzLGZhY2VDb25maWcpe19jbGFzc0NhbGxDaGVjayh0aGlzLFNpbXBsZUZhY2UpLHRoaXMuX2NvbnRleHQ9Y29udGV4dCx0aGlzLl94Q2VudGVyPXhDZW50ZXIsdGhpcy5feUNlbnRlcj15Q2VudGVyLHRoaXMuX3JhZGl1cz1yYWRpdXMsdGhpcy5fZmFjZUNvbmZpZz1mYWNlQ29uZmlnLHRoaXMuX2lzQm9yZGVyRmlsbGVkPWZhY2VDb25maWcuaXNCb3JkZXJGaWxsZWR8fF9kZWZhdWx0UHJvcGVydGllcy5ERUZBVUxUX1BST1BFUlRJRVMuaXNCb3JkZXJGaWxsZWQ7dmFyIGhhbmRDb2xvcj1mYWNlQ29uZmlnLmhhbmRDb2xvcnx8X2RlZmF1bHRQcm9wZXJ0aWVzLkRFRkFVTFRfUFJPUEVSVElFUy5oYW5kQ29sb3I7dGhpcy5faG91ckhhbmQ9bmV3IF9jbG9ja0hhbmQuQ2xvY2tIYW5kKHRoaXMuX2NvbnRleHQsMCwuNSpyYWRpdXMsLjA3KnJhZGl1cyxoYW5kQ29sb3IpLHRoaXMuX21pbnV0ZUhhbmQ9bmV3IF9jbG9ja0hhbmQuQ2xvY2tIYW5kKHRoaXMuX2NvbnRleHQsMCwuOCpyYWRpdXMsLjA3KnJhZGl1cyxoYW5kQ29sb3IpLHRoaXMuX3NlY29uZEhhbmQ9bmV3IF9jbG9ja0hhbmQuQ2xvY2tIYW5kKHRoaXMuX2NvbnRleHQsMCwuOSpyYWRpdXMsLjAyKnJhZGl1cyxoYW5kQ29sb3IpO3ZhciBoaW5nZUNvbG9yPWZhY2VDb25maWcuaGluZ2VDb2xvcnx8X2RlZmF1bHRQcm9wZXJ0aWVzLkRFRkFVTFRfUFJPUEVSVElFUy5oaW5nZUNvbG9yO3RoaXMuX2NlbnRlckhpbmdlPW5ldyBfY2lyY2xlLkNpcmNsZSh0aGlzLl9jb250ZXh0LDAsMCwuMSpyYWRpdXMsaGluZ2VDb2xvcik7dmFyIGZpbGxDb2xvcj1mYWNlQ29uZmlnLmZpbGxDb2xvcnx8X2RlZmF1bHRQcm9wZXJ0aWVzLkRFRkFVTFRfUFJPUEVSVElFUy5maWxsQ29sb3I7dGhpcy5fb3V0ZXJDaXJjbGU9bmV3IF9jaXJjbGUuQ2lyY2xlKHRoaXMuX2NvbnRleHQsMCwwLHJhZGl1cyxmaWxsQ29sb3IpfXJldHVybiBfY3JlYXRlQ2xhc3MoU2ltcGxlRmFjZSxbe2tleTpcInJlbmRlclwiLHZhbHVlOmZ1bmN0aW9uKCl7aWYodGhpcy5fb3V0ZXJDaXJjbGUucmVuZGVyKCksdGhpcy5faXNCb3JkZXJGaWxsZWQmJnRoaXMuX2ZhY2VDb25maWcuaXNGcmFtZUdyYWRpZW50KXtmb3IodmFyIGNvbG9yR3JhZGllbnRTdG9wUG9pbnRzPXRoaXMuX2ZhY2VDb25maWcuZnJhbWVHcmFkaWVudENvbG9yTGlzdHx8X2RlZmF1bHRQcm9wZXJ0aWVzLkRFRkFVTFRfUFJPUEVSVElFUy5mcmFtZUdyYWRpZW50Q29sb3JMaXN0LGdyYWQ9dGhpcy5fY29udGV4dC5jcmVhdGVSYWRpYWxHcmFkaWVudCh0aGlzLl94Q2VudGVyLHRoaXMuX3lDZW50ZXIsLjk1KnRoaXMuX3JhZGl1cyx0aGlzLl94Q2VudGVyLHRoaXMuX3lDZW50ZXIsMS4wNSp0aGlzLl9yYWRpdXMpLGk9MDtpPGNvbG9yR3JhZGllbnRTdG9wUG9pbnRzLmxlbmd0aDtpKyspe3ZhciByYXRpbz1pLyhjb2xvckdyYWRpZW50U3RvcFBvaW50cy5sZW5ndGgtMSk7Z3JhZC5hZGRDb2xvclN0b3AocmF0aW8sY29sb3JHcmFkaWVudFN0b3BQb2ludHNbaV0pfXRoaXMuX2NvbnRleHQuc3Ryb2tlU3R5bGU9Z3JhZCx0aGlzLl9jb250ZXh0LmxpbmVXaWR0aD0uMSp0aGlzLl9yYWRpdXMsdGhpcy5fY29udGV4dC5zdHJva2UoKX1lbHNle3ZhciBjb2xvcj10aGlzLl9mYWNlQ29uZmlnLmZyYW1lQ29sb3J8fF9kZWZhdWx0UHJvcGVydGllcy5ERUZBVUxUX1BST1BFUlRJRVMuaGluZ2VDb2xvcjtuZXcgX3JpbmcuUmluZyh0aGlzLl9jb250ZXh0LHRoaXMuX3hDZW50ZXIsdGhpcy5feUNlbnRlciwxLjA1KnRoaXMuX3JhZGl1cywuOTUqdGhpcy5fcmFkaXVzLHRoaXMuX2lzQm9yZGVyRmlsbGVkLGNvbG9yKS5yZW5kZXIoKX10aGlzLl9jZW50ZXJIaW5nZS5yZW5kZXIoKSx0aGlzLmRyYXdOdW1iZXJzKCl9fSx7a2V5OlwiZHJhd051bWJlcnNcIix2YWx1ZTpmdW5jdGlvbigpe3ZhciBhbmc9dm9pZCAwLG51bT12b2lkIDAsY3R4PXRoaXMuX2NvbnRleHQ7Y3R4LmZvbnQ9LjE1KnRoaXMuX3JhZGl1cytcInB4IGFyaWFsXCIsY3R4LnRleHRCYXNlbGluZT1cIm1pZGRsZVwiLGN0eC50ZXh0QWxpZ249XCJjZW50ZXJcIjt2YXIgZmFjZUNvbmZpZz10aGlzLl9mYWNlQ29uZmlnfHx7fSxudW1iZXJDb2xvcnM9ZmFjZUNvbmZpZy5udW1iZXJDb2xvcnN8fHt9O2ZvcihudW09MTtudW08MTM7bnVtKyspYW5nPW51bSpNYXRoLlBJLzYsY3R4LnJvdGF0ZShhbmcpLGN0eC50cmFuc2xhdGUoMCwuODUqLXRoaXMuX3JhZGl1cyksY3R4LnJvdGF0ZSgtYW5nKSxjdHguZmlsbFN0eWxlPW51bWJlckNvbG9yc1tudW1dP251bWJlckNvbG9yc1tudW1dOmZhY2VDb25maWcuaGluZ2VDb2xvcnx8XCIjMzMzXCIsY3R4LmZpbGxUZXh0KG51bS50b1N0cmluZygpLDAsMCksY3R4LnJvdGF0ZShhbmcpLGN0eC50cmFuc2xhdGUoMCwuODUqdGhpcy5fcmFkaXVzKSxjdHgucm90YXRlKC1hbmcpO2N0eC5maWxsU3R5bGU9ZmFjZUNvbmZpZy5oaW5nZUNvbG9yfHxcIiMzMzNcIn19LHtrZXk6XCJob3VySGFuZFwiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9ob3VySGFuZH19LHtrZXk6XCJtaW51dGVIYW5kXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX21pbnV0ZUhhbmR9fSx7a2V5Olwic2Vjb25kSGFuZFwiLGdldDpmdW5jdGlvbigpe3JldHVybiB0aGlzLl9zZWNvbmRIYW5kfX1dKSxTaW1wbGVGYWNlfSgpfSxmdW5jdGlvbihtb2R1bGUsZXhwb3J0cyxfX3dlYnBhY2tfcmVxdWlyZV9fKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsQ29uc3RydWN0b3Ipe2lmKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKX1PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KSxleHBvcnRzLlJpbmc9dm9pZCAwO3ZhciBfY3JlYXRlQ2xhc3M9ZnVuY3Rpb24oKXtmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCxwcm9wcyl7Zm9yKHZhciBpPTA7aTxwcm9wcy5sZW5ndGg7aSsrKXt2YXIgZGVzY3JpcHRvcj1wcm9wc1tpXTtkZXNjcmlwdG9yLmVudW1lcmFibGU9ZGVzY3JpcHRvci5lbnVtZXJhYmxlfHwhMSxkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBkZXNjcmlwdG9yJiYoZGVzY3JpcHRvci53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCxkZXNjcmlwdG9yLmtleSxkZXNjcmlwdG9yKX19cmV0dXJuIGZ1bmN0aW9uKENvbnN0cnVjdG9yLHByb3RvUHJvcHMsc3RhdGljUHJvcHMpe3JldHVybiBwcm90b1Byb3BzJiZkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSxwcm90b1Byb3BzKSxzdGF0aWNQcm9wcyYmZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3RvcixzdGF0aWNQcm9wcyksQ29uc3RydWN0b3J9fSgpLF9jaXJjbGU9X193ZWJwYWNrX3JlcXVpcmVfXygwKTtleHBvcnRzLlJpbmc9ZnVuY3Rpb24oKXtmdW5jdGlvbiBSaW5nKGNvbnRleHQseENlbnRlcix5Q2VudGVyLGlubmVyUmFkaXVzLG91dGVyUmFkaXVzLGlzUmluZ0ZpbGxlZCxjb2xvcil7X2NsYXNzQ2FsbENoZWNrKHRoaXMsUmluZyksdGhpcy5fY29udGV4dD1jb250ZXh0LHRoaXMuX3hDZW50ZXI9eENlbnRlcix0aGlzLl95Q2VudGVyPXlDZW50ZXIsdGhpcy5faW5uZXJSYWRpdXM9aW5uZXJSYWRpdXMsdGhpcy5fb3V0ZXJSYWRpdXM9b3V0ZXJSYWRpdXMsdGhpcy5faXNSaW5nRmlsbGVkPWlzUmluZ0ZpbGxlZHx8ITEsdGhpcy5fY29sb3I9Y29sb3J9cmV0dXJuIF9jcmVhdGVDbGFzcyhSaW5nLFt7a2V5OlwicmVuZGVyXCIsdmFsdWU6ZnVuY3Rpb24oKXtpZih0aGlzLl9pc1JpbmdGaWxsZWQpe3ZhciBhdmdSYWRpdXM9KHRoaXMuX2lubmVyUmFkaXVzK3RoaXMuX291dGVyUmFkaXVzKS8yLHdpZHRoPXRoaXMuX291dGVyUmFkaXVzLXRoaXMuX2lubmVyUmFkaXVzO3RoaXMuX2NvbnRleHQuYmVnaW5QYXRoKCksdGhpcy5fY29udGV4dC5zdHJva2VTdHlsZT10aGlzLl9jb2xvcix0aGlzLl9jb250ZXh0LmFyYyh0aGlzLl94Q2VudGVyLHRoaXMuX3hDZW50ZXIsYXZnUmFkaXVzLDAsMipNYXRoLlBJKSx0aGlzLl9jb250ZXh0LmxpbmVXaWR0aD13aWR0aCx0aGlzLl9jb250ZXh0LnN0cm9rZSgpfWVsc2V7dmFyIGlubmVyQ2lyY2xlPW5ldyBfY2lyY2xlLkNpcmNsZSh0aGlzLl9jb250ZXh0LHRoaXMuX3hDZW50ZXIsdGhpcy5feUNlbnRlcix0aGlzLl9pbm5lclJhZGl1cyx0aGlzLl9jb2xvciksb3V0ZXJDaXJjbGU9bmV3IF9jaXJjbGUuQ2lyY2xlKHRoaXMuX2NvbnRleHQsdGhpcy5feENlbnRlcix0aGlzLl95Q2VudGVyLHRoaXMuX291dGVyUmFkaXVzLHRoaXMuX2NvbG9yKTtpbm5lckNpcmNsZS5yZW5kZXIoKSxvdXRlckNpcmNsZS5yZW5kZXIoKX19fV0pLFJpbmd9KCl9LGZ1bmN0aW9uKG1vZHVsZSxleHBvcnRzLF9fd2VicGFja19yZXF1aXJlX18pe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSxDb25zdHJ1Y3Rvcil7aWYoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpfU9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBfY3JlYXRlQ2xhc3M9ZnVuY3Rpb24oKXtmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCxwcm9wcyl7Zm9yKHZhciBpPTA7aTxwcm9wcy5sZW5ndGg7aSsrKXt2YXIgZGVzY3JpcHRvcj1wcm9wc1tpXTtkZXNjcmlwdG9yLmVudW1lcmFibGU9ZGVzY3JpcHRvci5lbnVtZXJhYmxlfHwhMSxkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZT0hMCxcInZhbHVlXCJpbiBkZXNjcmlwdG9yJiYoZGVzY3JpcHRvci53cml0YWJsZT0hMCksT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCxkZXNjcmlwdG9yLmtleSxkZXNjcmlwdG9yKX19cmV0dXJuIGZ1bmN0aW9uKENvbnN0cnVjdG9yLHByb3RvUHJvcHMsc3RhdGljUHJvcHMpe3JldHVybiBwcm90b1Byb3BzJiZkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSxwcm90b1Byb3BzKSxzdGF0aWNQcm9wcyYmZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3RvcixzdGF0aWNQcm9wcyksQ29uc3RydWN0b3J9fSgpO2V4cG9ydHMuQ2xvY2tIYW5kPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gQ2xvY2tIYW5kKGNvbnRleHQscG9zaXRpb24sbGVuZ3RoLHdpZHRoLGZpbGxDb2xvcil7X2NsYXNzQ2FsbENoZWNrKHRoaXMsQ2xvY2tIYW5kKSx0aGlzLl9jb250ZXh0PWNvbnRleHQsdGhpcy5fcG9zaXRpb249cG9zaXRpb24sdGhpcy5fbGVuZ3RoPWxlbmd0aCx0aGlzLl93aWR0aD13aWR0aCx0aGlzLl9maWxsQ29sb3I9ZmlsbENvbG9yfXJldHVybiBfY3JlYXRlQ2xhc3MoQ2xvY2tIYW5kLFt7a2V5OlwicmVuZGVyXCIsdmFsdWU6ZnVuY3Rpb24oKXt0aGlzLl9jb250ZXh0LmJlZ2luUGF0aCgpLHRoaXMuX2NvbnRleHQubGluZVdpZHRoPXRoaXMuX3dpZHRoLHRoaXMuX2NvbnRleHQubGluZUNhcD1cInJvdW5kXCIsdGhpcy5fY29udGV4dC5tb3ZlVG8oMCwwKSx0aGlzLl9jb250ZXh0LnJvdGF0ZSh0aGlzLl9wb3NpdGlvbiksdGhpcy5fY29udGV4dC5zdHJva2VTdHlsZT10aGlzLl9maWxsQ29sb3IsdGhpcy5fY29udGV4dC5saW5lVG8oMCwtdGhpcy5fbGVuZ3RoKSx0aGlzLl9jb250ZXh0LnN0cm9rZSgpLHRoaXMuX2NvbnRleHQucm90YXRlKC10aGlzLl9wb3NpdGlvbil9fSx7a2V5OlwicG9zaXRpb25cIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5fcG9zaXRpb259LHNldDpmdW5jdGlvbihwb3Mpe3RoaXMuX3Bvc2l0aW9uPXBvcyx0aGlzLnJlbmRlcigpfX1dKSxDbG9ja0hhbmR9KCl9LGZ1bmN0aW9uKG1vZHVsZSxleHBvcnRzLF9fd2VicGFja19yZXF1aXJlX18pe1widXNlIHN0cmljdFwiO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO2V4cG9ydHMuZmFjZUNvbmZpZz17RkFDRV8wOntpc0JvcmRlckZpbGxlZDohMCxmcmFtZUNvbG9yOlwiIzY2MDAwMFwiLGhpbmdlQ29sb3I6XCIjMzMzXCIsaGFuZENvbG9yOlwiIzMzM1wifSxGQUNFXzE6e2lzRnJhbWVHcmFkaWVudDohMCxmcmFtZUdyYWRpZW50Q29sb3JMaXN0OltcIiMzMzNcIixcIiNGRkZGRkZcIixcIiMzMzNcIl0saGluZ2VDb2xvcjpcIiMzMzNcIixoYW5kQ29sb3I6XCIjMzMzXCJ9LEZBQ0VfMjp7aXNGcmFtZUdyYWRpZW50OiEwLGZyYW1lR3JhZGllbnRDb2xvckxpc3Q6W1wiIzY2MDAwMFwiLFwiI2ZmMDAwMFwiLFwiI2ZmY2NjY1wiXSxoaW5nZUNvbG9yOlwiIzY2MDAwMFwifSxGQUNFXzM6e2lzRnJhbWVHcmFkaWVudDohMCxmcmFtZUdyYWRpZW50Q29sb3JMaXN0OltcIiM0ZDNkMDBcIixcIiNmZmNjMDBcIixcIiNmZmU2ODBcIixcIiNmZmZhZTZcIixcIiNmZmU2ODBcIixcIiNmZmNjMDBcIixcIiM0ZDNkMDBcIl0saGluZ2VDb2xvcjpcIiNjY2EzMDBcIixudW1iZXJDb2xvcnM6ezE6XCIjY2NhMzAwXCIsMjpcIiNjY2EzMDBcIiwzOlwiI2NjYTMwMFwiLDQ6XCIjY2NhMzAwXCIsNTpcIiNjY2EzMDBcIiw2OlwiI2NjYTMwMFwiLDc6XCIjY2NhMzAwXCIsODpcIiNjY2EzMDBcIiw5OlwiI2NjYTMwMFwiLDEwOlwiI2NjYTMwMFwiLDExOlwiI2NjYTMwMFwiLDEyOlwiI2NjYTMwMFwifSxmaWxsQ29sb3I6XCIjMzMzMzMzXCIsaGFuZENvbG9yOlwiI2NjYTMwMFwifSxGQUNFXzQ6e2lzRnJhbWVHcmFkaWVudDohMCxmcmFtZUdyYWRpZW50Q29sb3JMaXN0OltcIiNmZjAwMDBcIixcIiMwMGZmMDBcIixcIiMwMDAwZmZcIl0saGluZ2VDb2xvcjpcIiM2NjAwMDBcIixudW1iZXJDb2xvcnM6ezE6XCIjMDA1OWIzXCIsMjpcIiMwMGNjN2FcIiwzOlwiIzRkOTRmZlwiLDQ6XCIjZmYzM2JiXCIsNTpcIiNmZjk5MzNcIiw2OlwiIzJkMmQ4NlwiLDc6XCIjODYwMGIzXCIsODpcIiM4MDAwMDBcIiw5OlwiIzAwZTZlNlwiLDEwOlwiI2ZmZmYwMFwiLDExOlwiIzAwMzNjY1wiLDEyOlwiI2ZmMDAwMFwifSxoYW5kQ29sb3I6XCIjNjYwMDAwXCIsZnJhbWVDb2xvcjpcIiM2NjAwMDBcIn19fV0pfSk7IiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFB1YlN1YiBmcm9tIFwicHVic3ViLWpzXCI7XG5pbXBvcnQgKiBhcyBKc0Nsb2NrIGZyb20gXCJqcy1lYXN5LWNsb2NrXCI7XG5pbXBvcnQgTmV3c1BhbmVsIGZyb20gXCIuLi9uZXdzLXBhbmVsL25ld3NQYW5lbC5jb21wb25lbnRcIjtcbmltcG9ydCBTaWRlYmFyIGZyb20gXCIuLi9zaWRlYmFyL3NpZGViYXIuY29tcG9uZW50XCI7XG5pbXBvcnQgeyBMSU5LX0VWRU5UX05BTUUgfSBmcm9tIFwiLi4vc2lkZWJhci9zaWRlYmFyLnByb3BzXCI7XG5pbXBvcnQgTmV3c1NlcnZpY2UgZnJvbSBcIi4uLy4uL3NlcnZpY2VzL25ld3NcIjtcbmltcG9ydCB7IFBBR0VfU0NST0xMRURfQk9UVE9NX0VWRU5UIH0gZnJvbSBcIi4uL3BhZ2UtYm9keS9wYWdlQm9keS5wcm9wc1wiO1xuaW1wb3J0IFV0aWxzIGZyb20gXCIuLi8uLi9zZXJ2aWNlcy91dGlsXCI7XG5cbmNvbnN0IExPQURfTU9SRV9ORVdTX0VWRU5UID0gYE1BSU5fTE9BRF9NT1JFX05FV1NfJHtVdGlscy5nZW5lcmF0ZVJhbmRvbVN0cmluZyg1KX1gO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNYWluUGFnZSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBuZXdzUGFuZWxTY3JvbGxlZERvd246IGZhbHNlLFxuICAgICAgbmV3c0RhdGE6IHt9LFxuICAgICAgbmV3c1BhbmVsTG9hZGluZzogdHJ1ZVxuICAgIH07XG4gICAgY29uc29sZS5sb2coSnNDbG9jayk7XG4gICAgdGhpcy5uZXdzU2VydmljZSA9IG5ldyBOZXdzU2VydmljZSgpO1xuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgdGhpcy5mZXRjaEhlYWRsaW5lc0FuZFJlbmRlcigpO1xuICAgIHRoaXMuc2lkZUJhclN1YnNyaXB0aW9uID0gUHViU3ViLnN1YnNjcmliZShMSU5LX0VWRU5UX05BTUUsIHRoaXMuc2lkZUJhckxpbmtDbGlja2VkLmJpbmQodGhpcykpO1xuICAgIHRoaXMuaXNTY3JvbGxlZERvd25TdWJzY3JpcHRpb24gPSBQdWJTdWIuc3Vic2NyaWJlKFBBR0VfU0NST0xMRURfQk9UVE9NX0VWRU5ULCB0aGlzLnBhZ2VTY3JvbGxlZERvd24uYmluZCh0aGlzKSk7XG4gIH1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICBpZiAodGhpcy5zaWRlQmFyU3Vic3JpcHRpb24pIHtcbiAgICAgIFB1YlN1Yi51bnN1YnNjcmliZSh0aGlzLnNpZGVCYXJTdWJzcmlwdGlvbik7XG4gICAgfVxuICAgIGlmICh0aGlzLmlzU2Nyb2xsZWREb3duU3Vic2NyaXB0aW9uKSB7XG4gICAgICBQdWJTdWIudW5zdWJzY3JpYmUodGhpcy5pc1Njcm9sbGVkRG93blN1YnNjcmlwdGlvbik7XG4gICAgfVxuICAgIHRoaXMubmV3c1NlcnZpY2UgPSBudWxsO1xuICB9XG5cbiAgc2lkZUJhckxpbmtDbGlja2VkKG1lc3NhZ2UsIGRhdGEpIHtcbiAgICBsZXQgb3B0aW9ucyA9IHt9O1xuICAgIGlmIChkYXRhKSB7XG4gICAgICB0aGlzLnNldFN0YXRlKHsgbmV3c1BhbmVsTG9hZGluZzogdHJ1ZSwgbmV3c0RhdGE6IFtdIH0pXG4gICAgICB0aGlzLmZldGNoSGVhZGxpbmVzQW5kUmVuZGVyKGRhdGEpO1xuICAgIH1cbiAgfVxuXG4gIHBhZ2VTY3JvbGxlZERvd24obWVzc2FnZSwgZGF0YSkge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBuZXdzUGFuZWxTY3JvbGxlZERvd246IHRydWUgfSk7XG4gICAgdGhpcy5uZXdzUGFuZWxGZXRjaE1vcmVEYXRhKCk7XG4gIH1cblxuICBmZXRjaEhlYWRsaW5lc0FuZFJlbmRlcihvcHRpb25zID0ge30sIGFkZGl0aW9uYWxPcHRpb25zID0ge30pIHtcbiAgICB0aGlzLm5ld3NTZXJ2aWNlLmZldGNoVG9wSGVhZGxpbmVzKG9wdGlvbnMsIHsgbG9hZE1vcmVEYXRhOiBhZGRpdGlvbmFsT3B0aW9ucy5sb2FkTW9yZURhdGEgfHwgZmFsc2UgfSlcbiAgICAgIC50aGVuKG5ld3MgPT4ge1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICBuZXdzRGF0YTogbmV3cyxcbiAgICAgICAgICBuZXdzUGFuZWxMb2FkaW5nOiBmYWxzZSxcbiAgICAgICAgICBuZXdzUGFuZWxTY3JvbGxlZERvd246IGZhbHNlXG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gIH1cblxuICBuZXdzUGFuZWxGZXRjaE1vcmVEYXRhKCkge1xuICAgIHRoaXMuZmV0Y2hIZWFkbGluZXNBbmRSZW5kZXIoe30sIHsgbG9hZE1vcmVEYXRhOiB0cnVlIH0pO1xuICB9XG5cbiAgaXNCb3R0b20oZWwpIHtcbiAgICByZXR1cm4gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuYm90dG9tIDw9IHdpbmRvdy5pbm5lckhlaWdodDtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250YWluZXItZmx1aWRcIiByZWY9e2VsID0+IHRoaXMucGFnZUJvZHlFbGVtZW50ID0gZWx9PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cInJvd1wiPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLWxnLTEwXCI+XG4gICAgICAgICAgICA8TmV3c1BhbmVsIHNjcm9sbFN1cHBvcnQ9e3RydWV9IG5ld3NEYXRhPXt0aGlzLnN0YXRlLm5ld3NEYXRhfSBpc0xvYWRpbmc9e3RoaXMuc3RhdGUubmV3c1BhbmVsTG9hZGluZ30gaXNTY3JvbGxlZERvd249e3RoaXMuc3RhdGUubmV3c1BhbmVsU2Nyb2xsZWREb3dufSAvPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sLWxnLTJcIj5cbiAgICAgICAgICAgIDxTaWRlYmFyIC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufSIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obW9kdWxlKSB7XHJcblx0aWYgKCFtb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XHJcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcclxuXHRcdG1vZHVsZS5wYXRocyA9IFtdO1xyXG5cdFx0Ly8gbW9kdWxlLnBhcmVudCA9IHVuZGVmaW5lZCBieSBkZWZhdWx0XHJcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XHJcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XHJcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXHJcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XHJcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xyXG5cdFx0XHR9XHJcblx0XHR9KTtcclxuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xyXG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxyXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xyXG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcclxuXHRcdFx0fVxyXG5cdFx0fSk7XHJcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcclxuXHR9XHJcblx0cmV0dXJuIG1vZHVsZTtcclxufTtcclxuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgQnJvd3NlclJvdXRlciBhcyBSb3V0ZXIsIFJvdXRlLCBMaW5rLCBJbmRleFJvdXRlIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcbmltcG9ydCBQdWJTdWIgZnJvbSBcInB1YnN1Yi1qc1wiO1xuXG5pbXBvcnQgTWFpblBhZ2UgZnJvbSAnLi4vbWFpbi1wYWdlL21haW5QYWdlLmNvbXBvbmVudCc7XG5pbXBvcnQgTmV3c1NlYXJjaCBmcm9tICcuLi9uZXdzLXNlYXJjaC9uZXdzU2VhcmNoLmNvbXBvbmVudCc7XG5pbXBvcnQgU291cmNlUGFnZSBmcm9tICcuLi9zb3VyY2UtcGFnZS9zb3VyY2VQYWdlLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBQQUdFX1NDUk9MTEVEX0JPVFRPTV9FVkVOVCwgUEFHRV9TQ1JPTExfV0FJVF9USU1FIH0gZnJvbSAnLi9wYWdlQm9keS5wcm9wcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBhZ2VCb2R5IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5zdGF0ZSA9IHt9O1xuICAgIHRoaXMucGFnZVNjcm9sbGVkID0gdGhpcy5wYWdlU2Nyb2xsZWQuYmluZCh0aGlzKTtcbiAgICB0aGlzLmxhc3RTY3JvbGxUaW1lID0gbnVsbDtcbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCB0aGlzLnBhZ2VTY3JvbGxlZCk7XG4gIH1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLmxhc3RTY3JvbGxUaW1lID0gbnVsbDtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgdGhpcy5wYWdlU2Nyb2xsZWQpO1xuICB9XG5cbiAgcGFnZVNjcm9sbGVkKCkge1xuICAgIGlmICgod2luZG93LmlubmVySGVpZ2h0ICsgd2luZG93LnNjcm9sbFkpID49IGRvY3VtZW50LmJvZHkub2Zmc2V0SGVpZ2h0KSB7XG4gICAgICBpZighdGhpcy5sYXN0U2Nyb2xsVGltZSB8fCBEYXRlLm5vdygpIC0gdGhpcy5sYXN0U2Nyb2xsVGltZSA+PSBQQUdFX1NDUk9MTF9XQUlUX1RJTUUpIHtcbiAgICAgICAgdGhpcy5sYXN0U2Nyb2xsVGltZSA9IERhdGUubm93KCk7XG4gICAgICAgIFB1YlN1Yi5wdWJsaXNoKFBBR0VfU0NST0xMRURfQk9UVE9NX0VWRU5ULCB7fSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRhaW5lci1mbHVpZFwiPlxuICAgICAgICA8Um91dGUgZXhhY3QgcGF0aD0nLycgY29tcG9uZW50PXtNYWluUGFnZX0gLz5cbiAgICAgICAgPFJvdXRlIHBhdGg9Jy9zZWFyY2gnIGNvbXBvbmVudD17TmV3c1NlYXJjaH0gLz5cbiAgICAgICAgPFJvdXRlIHBhdGg9Jy9zb3VyY2VzJyBjb21wb25lbnQ9e1NvdXJjZVBhZ2V9IC8+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59IiwiaW1wb3J0IFV0aWxzIGZyb20gJy4uLy4uL3NlcnZpY2VzL3V0aWwnO1xuXG5leHBvcnQgY29uc3QgSEVBREVSX0xJTktTID0gW1xuICB7XG4gICAgZGlzcGxheTogJ0hlYWRsaW5lcycsXG4gICAgYWRkcmVzczogJy8nLFxuICAgIHVuaXF1ZUtleTogJ0hlYWRlcl8nICsgVXRpbHMuZ2VuZXJhdGVSYW5kb21TdHJpbmcoNSlcbiAgfSxcbiAge1xuICAgIGRpc3BsYXk6ICdOZXdzIFNlYXJjaCcsXG4gICAgYWRkcmVzczogJy9zZWFyY2gnLFxuICAgIHVuaXF1ZUtleTogJ0hlYWRlcl8nICsgVXRpbHMuZ2VuZXJhdGVSYW5kb21TdHJpbmcoNSlcbiAgfSxcbiAge1xuICAgIGRpc3BsYXk6ICdTb3VyY2VzJyxcbiAgICBhZGRyZXNzOiAnL3NvdXJjZXMnLFxuICAgIHVuaXF1ZUtleTogJ0hlYWRlcl8nICsgVXRpbHMuZ2VuZXJhdGVSYW5kb21TdHJpbmcoNSlcbiAgfVxuXTtcblxuZXhwb3J0IGNvbnN0IFNJVEVfVElUTEUgPSB7XG4gIGRpc3BsYXk6ICdOZXdzIFJvb20nLFxuICBhZGRyZXNzOiAnLydcbn07IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEJyb3dzZXJSb3V0ZXIgYXMgUm91dGVyLCBSb3V0ZSwgTGluayB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XG5cbmltcG9ydCB7IEhFQURFUl9MSU5LUywgU0lURV9USVRMRSB9IGZyb20gXCIuL2hlYWRlci5wcm9wc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBIZWFkZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgYWN0aXZlTGlua0lkOiBudWxsXG4gICAgfTtcblxuICAgIHRoaXMuaGVhZGVyTGlua0NsaWNrZWQgPSB0aGlzLmhlYWRlckxpbmtDbGlja2VkLmJpbmQodGhpcyk7XG4gICAgdGhpcy5nZXRIZWFkZXJMaW5rcyA9IHRoaXMuZ2V0SGVhZGVyTGlua3MuYmluZCh0aGlzKTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBhY3RpdmVMaW5rSWQ6IEhFQURFUl9MSU5LU1swXS51bmlxdWVLZXkgfSlcbiAgfVxuXG4gIGhlYWRlckxpbmtDbGlja2VkKGV2ZW50KSB7XG4gICAgbGV0IGxpbmtFbGVtZW50ID0gZXZlbnQuY3VycmVudFRhcmdldDtcbiAgICBsZXQgbGlua1VuaXF1ZUtleSA9IGxpbmtFbGVtZW50LmdldEF0dHJpYnV0ZSgnZGF0YS1rZXknKTtcbiAgICB0aGlzLnNldFN0YXRlKHsgYWN0aXZlTGlua0lkOiBsaW5rVW5pcXVlS2V5IH0pO1xuICB9XG5cbiAgZ2V0SGVhZGVyTGlua3MoKSB7XG4gICAgcmV0dXJuIEhFQURFUl9MSU5LUy5tYXAobGlua09iaiA9PiB7XG4gICAgICByZXR1cm4gKFxuICAgICAgICA8bGkgY2xhc3NOYW1lPXsnbmF2LWl0ZW0gJyArIChsaW5rT2JqLnVuaXF1ZUtleSA9PSB0aGlzLnN0YXRlLmFjdGl2ZUxpbmtJZCA/ICdhY3RpdmUnIDogJycpfSBrZXk9e2xpbmtPYmoudW5pcXVlS2V5fSBkYXRhLWtleT17bGlua09iai51bmlxdWVLZXl9IG9uQ2xpY2s9e3RoaXMuaGVhZGVyTGlua0NsaWNrZWR9PlxuICAgICAgICAgIDxMaW5rIGNsYXNzTmFtZT1cIm5hdi1saW5rXCIgdG89e2xpbmtPYmouYWRkcmVzc30+e2xpbmtPYmouZGlzcGxheX08L0xpbms+XG4gICAgICAgIDwvbGk+XG4gICAgICApO1xuICAgIH0pO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRhaW5lci1mbHVpZFwiPlxuICAgICAgICA8bmF2IGNsYXNzTmFtZT1cIm5hdmJhciBuYXZiYXItZXhwYW5kLWxnIG5hdmJhci1kYXJrIGJnLWRhcmsgZml4ZWQtdG9wXCI+XG4gICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb250YWluZXItZmx1aWRcIj5cbiAgICAgICAgICAgIDxhIGNsYXNzTmFtZT1cIm5hdmJhci1icmFuZFwiIGhyZWY9e1NJVEVfVElUTEUuYWRkcmVzc30+e1NJVEVfVElUTEUuZGlzcGxheX08L2E+XG4gICAgICAgICAgICA8YnV0dG9uIGNsYXNzTmFtZT1cIm5hdmJhci10b2dnbGVyXCIgdHlwZT1cImJ1dHRvblwiIGRhdGEtdG9nZ2xlPVwiY29sbGFwc2VcIiBkYXRhLXRhcmdldD1cIiNuYXZiYXJSZXNwb25zaXZlXCIgYXJpYS1jb250cm9scz1cIm5hdmJhclJlc3BvbnNpdmVcIiBhcmlhLWV4cGFuZGVkPVwiZmFsc2VcIiBhcmlhLWxhYmVsPVwiVG9nZ2xlIG5hdmlnYXRpb25cIj5cbiAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwibmF2YmFyLXRvZ2dsZXItaWNvblwiPjwvc3Bhbj5cbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJjb2xsYXBzZSBuYXZiYXItY29sbGFwc2VcIiBpZD1cIm5hdmJhclJlc3BvbnNpdmVcIj5cbiAgICAgICAgICAgICAgPHVsIGNsYXNzTmFtZT1cIm5hdmJhci1uYXYgbWwtYXV0b1wiPlxuICAgICAgICAgICAgICAgIHt0aGlzLmdldEhlYWRlckxpbmtzKCl9XG4gICAgICAgICAgICAgIDwvdWw+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9uYXY+XG4gICAgICA8L2Rpdj5cbiAgICApO1xuICB9XG59IiwibW9kdWxlLmV4cG9ydHMgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uIChhcnIpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcnIpID09ICdbb2JqZWN0IEFycmF5XSc7XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9ICdTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXNTZWNyZXQ7XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGVtcHR5RnVuY3Rpb24gPSByZXF1aXJlKCdmYmpzL2xpYi9lbXB0eUZ1bmN0aW9uJyk7XG52YXIgaW52YXJpYW50ID0gcmVxdWlyZSgnZmJqcy9saWIvaW52YXJpYW50Jyk7XG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSByZXF1aXJlKCcuL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiBzaGltKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgc2VjcmV0KSB7XG4gICAgaWYgKHNlY3JldCA9PT0gUmVhY3RQcm9wVHlwZXNTZWNyZXQpIHtcbiAgICAgIC8vIEl0IGlzIHN0aWxsIHNhZmUgd2hlbiBjYWxsZWQgZnJvbSBSZWFjdC5cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaW52YXJpYW50KFxuICAgICAgZmFsc2UsXG4gICAgICAnQ2FsbGluZyBQcm9wVHlwZXMgdmFsaWRhdG9ycyBkaXJlY3RseSBpcyBub3Qgc3VwcG9ydGVkIGJ5IHRoZSBgcHJvcC10eXBlc2AgcGFja2FnZS4gJyArXG4gICAgICAnVXNlIFByb3BUeXBlcy5jaGVja1Byb3BUeXBlcygpIHRvIGNhbGwgdGhlbS4gJyArXG4gICAgICAnUmVhZCBtb3JlIGF0IGh0dHA6Ly9mYi5tZS91c2UtY2hlY2stcHJvcC10eXBlcydcbiAgICApO1xuICB9O1xuICBzaGltLmlzUmVxdWlyZWQgPSBzaGltO1xuICBmdW5jdGlvbiBnZXRTaGltKCkge1xuICAgIHJldHVybiBzaGltO1xuICB9O1xuICAvLyBJbXBvcnRhbnQhXG4gIC8vIEtlZXAgdGhpcyBsaXN0IGluIHN5bmMgd2l0aCBwcm9kdWN0aW9uIHZlcnNpb24gaW4gYC4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMuanNgLlxuICB2YXIgUmVhY3RQcm9wVHlwZXMgPSB7XG4gICAgYXJyYXk6IHNoaW0sXG4gICAgYm9vbDogc2hpbSxcbiAgICBmdW5jOiBzaGltLFxuICAgIG51bWJlcjogc2hpbSxcbiAgICBvYmplY3Q6IHNoaW0sXG4gICAgc3RyaW5nOiBzaGltLFxuICAgIHN5bWJvbDogc2hpbSxcblxuICAgIGFueTogc2hpbSxcbiAgICBhcnJheU9mOiBnZXRTaGltLFxuICAgIGVsZW1lbnQ6IHNoaW0sXG4gICAgaW5zdGFuY2VPZjogZ2V0U2hpbSxcbiAgICBub2RlOiBzaGltLFxuICAgIG9iamVjdE9mOiBnZXRTaGltLFxuICAgIG9uZU9mOiBnZXRTaGltLFxuICAgIG9uZU9mVHlwZTogZ2V0U2hpbSxcbiAgICBzaGFwZTogZ2V0U2hpbSxcbiAgICBleGFjdDogZ2V0U2hpbVxuICB9O1xuXG4gIFJlYWN0UHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzID0gZW1wdHlGdW5jdGlvbjtcbiAgUmVhY3RQcm9wVHlwZXMuUHJvcFR5cGVzID0gUmVhY3RQcm9wVHlwZXM7XG5cbiAgcmV0dXJuIFJlYWN0UHJvcFR5cGVzO1xufTtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IEJyb3dzZXJSb3V0ZXIgYXMgUm91dGVyLCBSb3V0ZSwgTGluayB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XG5cbmltcG9ydCBIZWFkZXIgZnJvbSBcIi4uL2hlYWRlci9oZWFkZXIuY29tcG9uZW50XCI7XG5pbXBvcnQgUGFnZUJvZHkgZnJvbSBcIi4uL3BhZ2UtYm9keS9wYWdlQm9keS5jb21wb25lbnRcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTGF5b3V0IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiAoXG4gICAgICA8Um91dGVyPlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbnRhaW5lci1mbHVpZFwiPlxuICAgICAgICAgIDxIZWFkZXIgLz5cbiAgICAgICAgICA8UGFnZUJvZHkgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L1JvdXRlcj5cbiAgICApXG4gIH1cbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbi8qKlxuICogQHBhcmFtIHsqfSBvYmplY3QgVGhlIG9iamVjdCB0byBjaGVjay5cbiAqIEByZXR1cm4ge2Jvb2xlYW59IFdoZXRoZXIgb3Igbm90IHRoZSBvYmplY3QgaXMgYSBET00gbm9kZS5cbiAqL1xuZnVuY3Rpb24gaXNOb2RlKG9iamVjdCkge1xuICB2YXIgZG9jID0gb2JqZWN0ID8gb2JqZWN0Lm93bmVyRG9jdW1lbnQgfHwgb2JqZWN0IDogZG9jdW1lbnQ7XG4gIHZhciBkZWZhdWx0VmlldyA9IGRvYy5kZWZhdWx0VmlldyB8fCB3aW5kb3c7XG4gIHJldHVybiAhIShvYmplY3QgJiYgKHR5cGVvZiBkZWZhdWx0Vmlldy5Ob2RlID09PSAnZnVuY3Rpb24nID8gb2JqZWN0IGluc3RhbmNlb2YgZGVmYXVsdFZpZXcuTm9kZSA6IHR5cGVvZiBvYmplY3QgPT09ICdvYmplY3QnICYmIHR5cGVvZiBvYmplY3Qubm9kZVR5cGUgPT09ICdudW1iZXInICYmIHR5cGVvZiBvYmplY3Qubm9kZU5hbWUgPT09ICdzdHJpbmcnKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNOb2RlOyIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAdHlwZWNoZWNrc1xuICovXG5cbnZhciBpc05vZGUgPSByZXF1aXJlKCcuL2lzTm9kZScpO1xuXG4vKipcbiAqIEBwYXJhbSB7Kn0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY2hlY2suXG4gKiBAcmV0dXJuIHtib29sZWFufSBXaGV0aGVyIG9yIG5vdCB0aGUgb2JqZWN0IGlzIGEgRE9NIHRleHQgbm9kZS5cbiAqL1xuZnVuY3Rpb24gaXNUZXh0Tm9kZShvYmplY3QpIHtcbiAgcmV0dXJuIGlzTm9kZShvYmplY3QpICYmIG9iamVjdC5ub2RlVHlwZSA9PSAzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzVGV4dE5vZGU7IiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIFxuICovXG5cbnZhciBpc1RleHROb2RlID0gcmVxdWlyZSgnLi9pc1RleHROb2RlJyk7XG5cbi8qZXNsaW50LWRpc2FibGUgbm8tYml0d2lzZSAqL1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIGdpdmVuIERPTSBub2RlIGNvbnRhaW5zIG9yIGlzIGFub3RoZXIgRE9NIG5vZGUuXG4gKi9cbmZ1bmN0aW9uIGNvbnRhaW5zTm9kZShvdXRlck5vZGUsIGlubmVyTm9kZSkge1xuICBpZiAoIW91dGVyTm9kZSB8fCAhaW5uZXJOb2RlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IGVsc2UgaWYgKG91dGVyTm9kZSA9PT0gaW5uZXJOb2RlKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSBpZiAoaXNUZXh0Tm9kZShvdXRlck5vZGUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9IGVsc2UgaWYgKGlzVGV4dE5vZGUoaW5uZXJOb2RlKSkge1xuICAgIHJldHVybiBjb250YWluc05vZGUob3V0ZXJOb2RlLCBpbm5lck5vZGUucGFyZW50Tm9kZSk7XG4gIH0gZWxzZSBpZiAoJ2NvbnRhaW5zJyBpbiBvdXRlck5vZGUpIHtcbiAgICByZXR1cm4gb3V0ZXJOb2RlLmNvbnRhaW5zKGlubmVyTm9kZSk7XG4gIH0gZWxzZSBpZiAob3V0ZXJOb2RlLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKSB7XG4gICAgcmV0dXJuICEhKG91dGVyTm9kZS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihpbm5lck5vZGUpICYgMTYpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnRhaW5zTm9kZTsiLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICpcbiAqIEB0eXBlY2hlY2tzXG4gKiBcbiAqL1xuXG4vKmVzbGludC1kaXNhYmxlIG5vLXNlbGYtY29tcGFyZSAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogaW5saW5lZCBPYmplY3QuaXMgcG9seWZpbGwgdG8gYXZvaWQgcmVxdWlyaW5nIGNvbnN1bWVycyBzaGlwIHRoZWlyIG93blxuICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L2lzXG4gKi9cbmZ1bmN0aW9uIGlzKHgsIHkpIHtcbiAgLy8gU2FtZVZhbHVlIGFsZ29yaXRobVxuICBpZiAoeCA9PT0geSkge1xuICAgIC8vIFN0ZXBzIDEtNSwgNy0xMFxuICAgIC8vIFN0ZXBzIDYuYi02LmU6ICswICE9IC0wXG4gICAgLy8gQWRkZWQgdGhlIG5vbnplcm8geSBjaGVjayB0byBtYWtlIEZsb3cgaGFwcHksIGJ1dCBpdCBpcyByZWR1bmRhbnRcbiAgICByZXR1cm4geCAhPT0gMCB8fCB5ICE9PSAwIHx8IDEgLyB4ID09PSAxIC8geTtcbiAgfSBlbHNlIHtcbiAgICAvLyBTdGVwIDYuYTogTmFOID09IE5hTlxuICAgIHJldHVybiB4ICE9PSB4ICYmIHkgIT09IHk7XG4gIH1cbn1cblxuLyoqXG4gKiBQZXJmb3JtcyBlcXVhbGl0eSBieSBpdGVyYXRpbmcgdGhyb3VnaCBrZXlzIG9uIGFuIG9iamVjdCBhbmQgcmV0dXJuaW5nIGZhbHNlXG4gKiB3aGVuIGFueSBrZXkgaGFzIHZhbHVlcyB3aGljaCBhcmUgbm90IHN0cmljdGx5IGVxdWFsIGJldHdlZW4gdGhlIGFyZ3VtZW50cy5cbiAqIFJldHVybnMgdHJ1ZSB3aGVuIHRoZSB2YWx1ZXMgb2YgYWxsIGtleXMgYXJlIHN0cmljdGx5IGVxdWFsLlxuICovXG5mdW5jdGlvbiBzaGFsbG93RXF1YWwob2JqQSwgb2JqQikge1xuICBpZiAoaXMob2JqQSwgb2JqQikpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGlmICh0eXBlb2Ygb2JqQSAhPT0gJ29iamVjdCcgfHwgb2JqQSA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqQiAhPT0gJ29iamVjdCcgfHwgb2JqQiA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHZhciBrZXlzQSA9IE9iamVjdC5rZXlzKG9iakEpO1xuICB2YXIga2V5c0IgPSBPYmplY3Qua2V5cyhvYmpCKTtcblxuICBpZiAoa2V5c0EubGVuZ3RoICE9PSBrZXlzQi5sZW5ndGgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICAvLyBUZXN0IGZvciBBJ3Mga2V5cyBkaWZmZXJlbnQgZnJvbSBCLlxuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXNBLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKCFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iakIsIGtleXNBW2ldKSB8fCAhaXMob2JqQVtrZXlzQVtpXV0sIG9iakJba2V5c0FbaV1dKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNoYWxsb3dFcXVhbDsiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICogQHR5cGVjaGVja3NcbiAqL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBmYi13d3cvdHlwZW9mLXVuZGVmaW5lZCAqL1xuXG4vKipcbiAqIFNhbWUgYXMgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBidXQgd3JhcHMgaW4gYSB0cnktY2F0Y2ggYmxvY2suIEluIElFIGl0IGlzXG4gKiBub3Qgc2FmZSB0byBjYWxsIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgaWYgdGhlcmUgaXMgbm90aGluZyBmb2N1c2VkLlxuICpcbiAqIFRoZSBhY3RpdmVFbGVtZW50IHdpbGwgYmUgbnVsbCBvbmx5IGlmIHRoZSBkb2N1bWVudCBvciBkb2N1bWVudCBib2R5IGlzIG5vdFxuICogeWV0IGRlZmluZWQuXG4gKlxuICogQHBhcmFtIHs/RE9NRG9jdW1lbnR9IGRvYyBEZWZhdWx0cyB0byBjdXJyZW50IGRvY3VtZW50LlxuICogQHJldHVybiB7P0RPTUVsZW1lbnR9XG4gKi9cbmZ1bmN0aW9uIGdldEFjdGl2ZUVsZW1lbnQoZG9jKSAvKj9ET01FbGVtZW50Ki97XG4gIGRvYyA9IGRvYyB8fCAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyA/IGRvY3VtZW50IDogdW5kZWZpbmVkKTtcbiAgaWYgKHR5cGVvZiBkb2MgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgdHJ5IHtcbiAgICByZXR1cm4gZG9jLmFjdGl2ZUVsZW1lbnQgfHwgZG9jLmJvZHk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZG9jLmJvZHk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXRBY3RpdmVFbGVtZW50OyIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGNhblVzZURPTSA9ICEhKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5kb2N1bWVudCAmJiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCk7XG5cbi8qKlxuICogU2ltcGxlLCBsaWdodHdlaWdodCBtb2R1bGUgYXNzaXN0aW5nIHdpdGggdGhlIGRldGVjdGlvbiBhbmQgY29udGV4dCBvZlxuICogV29ya2VyLiBIZWxwcyBhdm9pZCBjaXJjdWxhciBkZXBlbmRlbmNpZXMgYW5kIGFsbG93cyBjb2RlIHRvIHJlYXNvbiBhYm91dFxuICogd2hldGhlciBvciBub3QgdGhleSBhcmUgaW4gYSBXb3JrZXIsIGV2ZW4gaWYgdGhleSBuZXZlciBpbmNsdWRlIHRoZSBtYWluXG4gKiBgUmVhY3RXb3JrZXJgIGRlcGVuZGVuY3kuXG4gKi9cbnZhciBFeGVjdXRpb25FbnZpcm9ubWVudCA9IHtcblxuICBjYW5Vc2VET006IGNhblVzZURPTSxcblxuICBjYW5Vc2VXb3JrZXJzOiB0eXBlb2YgV29ya2VyICE9PSAndW5kZWZpbmVkJyxcblxuICBjYW5Vc2VFdmVudExpc3RlbmVyczogY2FuVXNlRE9NICYmICEhKHdpbmRvdy5hZGRFdmVudExpc3RlbmVyIHx8IHdpbmRvdy5hdHRhY2hFdmVudCksXG5cbiAgY2FuVXNlVmlld3BvcnQ6IGNhblVzZURPTSAmJiAhIXdpbmRvdy5zY3JlZW4sXG5cbiAgaXNJbldvcmtlcjogIWNhblVzZURPTSAvLyBGb3Igbm93LCB0aGlzIGlzIHRydWUgLSBtaWdodCBjaGFuZ2UgaW4gdGhlIGZ1dHVyZS5cblxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBFeGVjdXRpb25FbnZpcm9ubWVudDsiLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjMuMlxuICogcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuLypcbiBNb2Rlcm5penIgMy4wLjBwcmUgKEN1c3RvbSBCdWlsZCkgfCBNSVRcbiovXG4ndXNlIHN0cmljdCc7dmFyIGJhPXJlcXVpcmUoXCJmYmpzL2xpYi9pbnZhcmlhbnRcIiksZWE9cmVxdWlyZShcInJlYWN0XCIpLG09cmVxdWlyZShcImZianMvbGliL0V4ZWN1dGlvbkVudmlyb25tZW50XCIpLEE9cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIiksQz1yZXF1aXJlKFwiZmJqcy9saWIvZW1wdHlGdW5jdGlvblwiKSxmYT1yZXF1aXJlKFwiZmJqcy9saWIvZ2V0QWN0aXZlRWxlbWVudFwiKSxoYT1yZXF1aXJlKFwiZmJqcy9saWIvc2hhbGxvd0VxdWFsXCIpLGphPXJlcXVpcmUoXCJmYmpzL2xpYi9jb250YWluc05vZGVcIiksa2E9cmVxdWlyZShcImZianMvbGliL2VtcHR5T2JqZWN0XCIpO1xuZnVuY3Rpb24gRChhKXtmb3IodmFyIGI9YXJndW1lbnRzLmxlbmd0aC0xLGM9XCJodHRwOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50XFx4M2RcIithLGQ9MDtkPGI7ZCsrKWMrPVwiXFx4MjZhcmdzW11cXHgzZFwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbZCsxXSk7YmEoITEsXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgJXMgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLiBcIixjKX1lYT92b2lkIDA6RChcIjIyN1wiKTtcbmZ1bmN0aW9uIG1hKGEsYixjLGQsZSxmLGgsZyxrKXt0aGlzLl9oYXNDYXVnaHRFcnJvcj0hMTt0aGlzLl9jYXVnaHRFcnJvcj1udWxsO3ZhciB2PUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywzKTt0cnl7Yi5hcHBseShjLHYpfWNhdGNoKGwpe3RoaXMuX2NhdWdodEVycm9yPWwsdGhpcy5faGFzQ2F1Z2h0RXJyb3I9ITB9fVxudmFyIEU9e19jYXVnaHRFcnJvcjpudWxsLF9oYXNDYXVnaHRFcnJvcjohMSxfcmV0aHJvd0Vycm9yOm51bGwsX2hhc1JldGhyb3dFcnJvcjohMSxpbnZva2VHdWFyZGVkQ2FsbGJhY2s6ZnVuY3Rpb24oYSxiLGMsZCxlLGYsaCxnLGspe21hLmFwcGx5KEUsYXJndW1lbnRzKX0saW52b2tlR3VhcmRlZENhbGxiYWNrQW5kQ2F0Y2hGaXJzdEVycm9yOmZ1bmN0aW9uKGEsYixjLGQsZSxmLGgsZyxrKXtFLmludm9rZUd1YXJkZWRDYWxsYmFjay5hcHBseSh0aGlzLGFyZ3VtZW50cyk7aWYoRS5oYXNDYXVnaHRFcnJvcigpKXt2YXIgdj1FLmNsZWFyQ2F1Z2h0RXJyb3IoKTtFLl9oYXNSZXRocm93RXJyb3J8fChFLl9oYXNSZXRocm93RXJyb3I9ITAsRS5fcmV0aHJvd0Vycm9yPXYpfX0scmV0aHJvd0NhdWdodEVycm9yOmZ1bmN0aW9uKCl7cmV0dXJuIG5hLmFwcGx5KEUsYXJndW1lbnRzKX0saGFzQ2F1Z2h0RXJyb3I6ZnVuY3Rpb24oKXtyZXR1cm4gRS5faGFzQ2F1Z2h0RXJyb3J9LGNsZWFyQ2F1Z2h0RXJyb3I6ZnVuY3Rpb24oKXtpZihFLl9oYXNDYXVnaHRFcnJvcil7dmFyIGE9XG5FLl9jYXVnaHRFcnJvcjtFLl9jYXVnaHRFcnJvcj1udWxsO0UuX2hhc0NhdWdodEVycm9yPSExO3JldHVybiBhfUQoXCIxOThcIil9fTtmdW5jdGlvbiBuYSgpe2lmKEUuX2hhc1JldGhyb3dFcnJvcil7dmFyIGE9RS5fcmV0aHJvd0Vycm9yO0UuX3JldGhyb3dFcnJvcj1udWxsO0UuX2hhc1JldGhyb3dFcnJvcj0hMTt0aHJvdyBhO319dmFyIG9hPW51bGwscGE9e307XG5mdW5jdGlvbiBxYSgpe2lmKG9hKWZvcih2YXIgYSBpbiBwYSl7dmFyIGI9cGFbYV0sYz1vYS5pbmRleE9mKGEpOy0xPGM/dm9pZCAwOkQoXCI5NlwiLGEpO2lmKCFyYVtjXSl7Yi5leHRyYWN0RXZlbnRzP3ZvaWQgMDpEKFwiOTdcIixhKTtyYVtjXT1iO2M9Yi5ldmVudFR5cGVzO2Zvcih2YXIgZCBpbiBjKXt2YXIgZT12b2lkIDA7dmFyIGY9Y1tkXSxoPWIsZz1kO3NhLmhhc093blByb3BlcnR5KGcpP0QoXCI5OVwiLGcpOnZvaWQgMDtzYVtnXT1mO3ZhciBrPWYucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM7aWYoayl7Zm9yKGUgaW4gaylrLmhhc093blByb3BlcnR5KGUpJiZ0YShrW2VdLGgsZyk7ZT0hMH1lbHNlIGYucmVnaXN0cmF0aW9uTmFtZT8odGEoZi5yZWdpc3RyYXRpb25OYW1lLGgsZyksZT0hMCk6ZT0hMTtlP3ZvaWQgMDpEKFwiOThcIixkLGEpfX19fVxuZnVuY3Rpb24gdGEoYSxiLGMpe3VhW2FdP0QoXCIxMDBcIixhKTp2b2lkIDA7dWFbYV09Yjt2YVthXT1iLmV2ZW50VHlwZXNbY10uZGVwZW5kZW5jaWVzfXZhciByYT1bXSxzYT17fSx1YT17fSx2YT17fTtmdW5jdGlvbiB3YShhKXtvYT9EKFwiMTAxXCIpOnZvaWQgMDtvYT1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhKTtxYSgpfWZ1bmN0aW9uIHhhKGEpe3ZhciBiPSExLGM7Zm9yKGMgaW4gYSlpZihhLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD1hW2NdO3BhLmhhc093blByb3BlcnR5KGMpJiZwYVtjXT09PWR8fChwYVtjXT9EKFwiMTAyXCIsYyk6dm9pZCAwLHBhW2NdPWQsYj0hMCl9YiYmcWEoKX1cbnZhciBDYT1PYmplY3QuZnJlZXplKHtwbHVnaW5zOnJhLGV2ZW50TmFtZURpc3BhdGNoQ29uZmlnczpzYSxyZWdpc3RyYXRpb25OYW1lTW9kdWxlczp1YSxyZWdpc3RyYXRpb25OYW1lRGVwZW5kZW5jaWVzOnZhLHBvc3NpYmxlUmVnaXN0cmF0aW9uTmFtZXM6bnVsbCxpbmplY3RFdmVudFBsdWdpbk9yZGVyOndhLGluamVjdEV2ZW50UGx1Z2luc0J5TmFtZTp4YX0pLERhPW51bGwsRWE9bnVsbCxGYT1udWxsO2Z1bmN0aW9uIEdhKGEsYixjLGQpe2I9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9RmEoZCk7RS5pbnZva2VHdWFyZGVkQ2FsbGJhY2tBbmRDYXRjaEZpcnN0RXJyb3IoYixjLHZvaWQgMCxhKTthLmN1cnJlbnRUYXJnZXQ9bnVsbH1cbmZ1bmN0aW9uIEhhKGEsYil7bnVsbD09Yj9EKFwiMzBcIik6dm9pZCAwO2lmKG51bGw9PWEpcmV0dXJuIGI7aWYoQXJyYXkuaXNBcnJheShhKSl7aWYoQXJyYXkuaXNBcnJheShiKSlyZXR1cm4gYS5wdXNoLmFwcGx5KGEsYiksYTthLnB1c2goYik7cmV0dXJuIGF9cmV0dXJuIEFycmF5LmlzQXJyYXkoYik/W2FdLmNvbmNhdChiKTpbYSxiXX1mdW5jdGlvbiBJYShhLGIsYyl7QXJyYXkuaXNBcnJheShhKT9hLmZvckVhY2goYixjKTphJiZiLmNhbGwoYyxhKX12YXIgSmE9bnVsbDtcbmZ1bmN0aW9uIEthKGEsYil7aWYoYSl7dmFyIGM9YS5fZGlzcGF0Y2hMaXN0ZW5lcnMsZD1hLl9kaXNwYXRjaEluc3RhbmNlcztpZihBcnJheS5pc0FycmF5KGMpKWZvcih2YXIgZT0wO2U8Yy5sZW5ndGgmJiFhLmlzUHJvcGFnYXRpb25TdG9wcGVkKCk7ZSsrKUdhKGEsYixjW2VdLGRbZV0pO2Vsc2UgYyYmR2EoYSxiLGMsZCk7YS5fZGlzcGF0Y2hMaXN0ZW5lcnM9bnVsbDthLl9kaXNwYXRjaEluc3RhbmNlcz1udWxsO2EuaXNQZXJzaXN0ZW50KCl8fGEuY29uc3RydWN0b3IucmVsZWFzZShhKX19ZnVuY3Rpb24gTGEoYSl7cmV0dXJuIEthKGEsITApfWZ1bmN0aW9uIE1hKGEpe3JldHVybiBLYShhLCExKX12YXIgTmE9e2luamVjdEV2ZW50UGx1Z2luT3JkZXI6d2EsaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lOnhhfTtcbmZ1bmN0aW9uIE9hKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7aWYoIWMpcmV0dXJuIG51bGw7dmFyIGQ9RGEoYyk7aWYoIWQpcmV0dXJuIG51bGw7Yz1kW2JdO2E6c3dpdGNoKGIpe2Nhc2UgXCJvbkNsaWNrXCI6Y2FzZSBcIm9uQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tcIjpjYXNlIFwib25Eb3VibGVDbGlja0NhcHR1cmVcIjpjYXNlIFwib25Nb3VzZURvd25cIjpjYXNlIFwib25Nb3VzZURvd25DYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlVXBcIjpjYXNlIFwib25Nb3VzZVVwQ2FwdHVyZVwiOihkPSFkLmRpc2FibGVkKXx8KGE9YS50eXBlLGQ9IShcImJ1dHRvblwiPT09YXx8XCJpbnB1dFwiPT09YXx8XCJzZWxlY3RcIj09PWF8fFwidGV4dGFyZWFcIj09PWEpKTthPSFkO2JyZWFrIGE7ZGVmYXVsdDphPSExfWlmKGEpcmV0dXJuIG51bGw7YyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGM/RChcIjIzMVwiLGIsdHlwZW9mIGMpOnZvaWQgMDtcbnJldHVybiBjfWZ1bmN0aW9uIFBhKGEsYil7bnVsbCE9PWEmJihKYT1IYShKYSxhKSk7YT1KYTtKYT1udWxsO2EmJihiP0lhKGEsTGEpOklhKGEsTWEpLEphP0QoXCI5NVwiKTp2b2lkIDAsRS5yZXRocm93Q2F1Z2h0RXJyb3IoKSl9ZnVuY3Rpb24gUWEoYSxiLGMsZCl7Zm9yKHZhciBlPW51bGwsZj0wO2Y8cmEubGVuZ3RoO2YrKyl7dmFyIGg9cmFbZl07aCYmKGg9aC5leHRyYWN0RXZlbnRzKGEsYixjLGQpKSYmKGU9SGEoZSxoKSl9UGEoZSwhMSl9dmFyIFJhPU9iamVjdC5mcmVlemUoe2luamVjdGlvbjpOYSxnZXRMaXN0ZW5lcjpPYSxydW5FdmVudHNJbkJhdGNoOlBhLHJ1bkV4dHJhY3RlZEV2ZW50c0luQmF0Y2g6UWF9KSxTYT1NYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKSxGPVwiX19yZWFjdEludGVybmFsSW5zdGFuY2UkXCIrU2EsVGE9XCJfX3JlYWN0RXZlbnRIYW5kbGVycyRcIitTYTtcbmZ1bmN0aW9uIFVhKGEpe2lmKGFbRl0pcmV0dXJuIGFbRl07Zm9yKDshYVtGXTspaWYoYS5wYXJlbnROb2RlKWE9YS5wYXJlbnROb2RlO2Vsc2UgcmV0dXJuIG51bGw7YT1hW0ZdO3JldHVybiA1PT09YS50YWd8fDY9PT1hLnRhZz9hOm51bGx9ZnVuY3Rpb24gVmEoYSl7aWYoNT09PWEudGFnfHw2PT09YS50YWcpcmV0dXJuIGEuc3RhdGVOb2RlO0QoXCIzM1wiKX1mdW5jdGlvbiBYYShhKXtyZXR1cm4gYVtUYV18fG51bGx9dmFyIGJiPU9iamVjdC5mcmVlemUoe3ByZWNhY2hlRmliZXJOb2RlOmZ1bmN0aW9uKGEsYil7YltGXT1hfSxnZXRDbG9zZXN0SW5zdGFuY2VGcm9tTm9kZTpVYSxnZXRJbnN0YW5jZUZyb21Ob2RlOmZ1bmN0aW9uKGEpe2E9YVtGXTtyZXR1cm4hYXx8NSE9PWEudGFnJiY2IT09YS50YWc/bnVsbDphfSxnZXROb2RlRnJvbUluc3RhbmNlOlZhLGdldEZpYmVyQ3VycmVudFByb3BzRnJvbU5vZGU6WGEsdXBkYXRlRmliZXJQcm9wczpmdW5jdGlvbihhLGIpe2FbVGFdPWJ9fSk7XG5mdW5jdGlvbiBMKGEpe2RvIGE9YVtcInJldHVyblwiXTt3aGlsZShhJiY1IT09YS50YWcpO3JldHVybiBhP2E6bnVsbH1mdW5jdGlvbiBjYihhLGIsYyl7Zm9yKHZhciBkPVtdO2E7KWQucHVzaChhKSxhPUwoYSk7Zm9yKGE9ZC5sZW5ndGg7MDxhLS07KWIoZFthXSxcImNhcHR1cmVkXCIsYyk7Zm9yKGE9MDthPGQubGVuZ3RoO2ErKyliKGRbYV0sXCJidWJibGVkXCIsYyl9ZnVuY3Rpb24gZGIoYSxiLGMpe2lmKGI9T2EoYSxjLmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzW2JdKSljLl9kaXNwYXRjaExpc3RlbmVycz1IYShjLl9kaXNwYXRjaExpc3RlbmVycyxiKSxjLl9kaXNwYXRjaEluc3RhbmNlcz1IYShjLl9kaXNwYXRjaEluc3RhbmNlcyxhKX1mdW5jdGlvbiBlYihhKXthJiZhLmRpc3BhdGNoQ29uZmlnLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzJiZjYihhLl90YXJnZXRJbnN0LGRiLGEpfVxuZnVuY3Rpb24gZmIoYSl7aWYoYSYmYS5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcyl7dmFyIGI9YS5fdGFyZ2V0SW5zdDtiPWI/TChiKTpudWxsO2NiKGIsZGIsYSl9fWZ1bmN0aW9uIGdiKGEsYixjKXthJiZjJiZjLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUmJihiPU9hKGEsYy5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lKSkmJihjLl9kaXNwYXRjaExpc3RlbmVycz1IYShjLl9kaXNwYXRjaExpc3RlbmVycyxiKSxjLl9kaXNwYXRjaEluc3RhbmNlcz1IYShjLl9kaXNwYXRjaEluc3RhbmNlcyxhKSl9ZnVuY3Rpb24gaGIoYSl7YSYmYS5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lJiZnYihhLl90YXJnZXRJbnN0LG51bGwsYSl9ZnVuY3Rpb24gaWIoYSl7SWEoYSxlYil9XG5mdW5jdGlvbiBqYihhLGIsYyxkKXtpZihjJiZkKWE6e3ZhciBlPWM7Zm9yKHZhciBmPWQsaD0wLGc9ZTtnO2c9TChnKSloKys7Zz0wO2Zvcih2YXIgaz1mO2s7az1MKGspKWcrKztmb3IoOzA8aC1nOyllPUwoZSksaC0tO2Zvcig7MDxnLWg7KWY9TChmKSxnLS07Zm9yKDtoLS07KXtpZihlPT09Znx8ZT09PWYuYWx0ZXJuYXRlKWJyZWFrIGE7ZT1MKGUpO2Y9TChmKX1lPW51bGx9ZWxzZSBlPW51bGw7Zj1lO2ZvcihlPVtdO2MmJmMhPT1mOyl7aD1jLmFsdGVybmF0ZTtpZihudWxsIT09aCYmaD09PWYpYnJlYWs7ZS5wdXNoKGMpO2M9TChjKX1mb3IoYz1bXTtkJiZkIT09Zjspe2g9ZC5hbHRlcm5hdGU7aWYobnVsbCE9PWgmJmg9PT1mKWJyZWFrO2MucHVzaChkKTtkPUwoZCl9Zm9yKGQ9MDtkPGUubGVuZ3RoO2QrKylnYihlW2RdLFwiYnViYmxlZFwiLGEpO2ZvcihhPWMubGVuZ3RoOzA8YS0tOylnYihjW2FdLFwiY2FwdHVyZWRcIixiKX1cbnZhciBrYj1PYmplY3QuZnJlZXplKHthY2N1bXVsYXRlVHdvUGhhc2VEaXNwYXRjaGVzOmliLGFjY3VtdWxhdGVUd29QaGFzZURpc3BhdGNoZXNTa2lwVGFyZ2V0OmZ1bmN0aW9uKGEpe0lhKGEsZmIpfSxhY2N1bXVsYXRlRW50ZXJMZWF2ZURpc3BhdGNoZXM6amIsYWNjdW11bGF0ZURpcmVjdERpc3BhdGNoZXM6ZnVuY3Rpb24oYSl7SWEoYSxoYil9fSksbGI9bnVsbDtmdW5jdGlvbiBtYigpeyFsYiYmbS5jYW5Vc2VET00mJihsYj1cInRleHRDb250ZW50XCJpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ/XCJ0ZXh0Q29udGVudFwiOlwiaW5uZXJUZXh0XCIpO3JldHVybiBsYn12YXIgTT17X3Jvb3Q6bnVsbCxfc3RhcnRUZXh0Om51bGwsX2ZhbGxiYWNrVGV4dDpudWxsfTtcbmZ1bmN0aW9uIG5iKCl7aWYoTS5fZmFsbGJhY2tUZXh0KXJldHVybiBNLl9mYWxsYmFja1RleHQ7dmFyIGEsYj1NLl9zdGFydFRleHQsYz1iLmxlbmd0aCxkLGU9b2IoKSxmPWUubGVuZ3RoO2ZvcihhPTA7YTxjJiZiW2FdPT09ZVthXTthKyspO3ZhciBoPWMtYTtmb3IoZD0xO2Q8PWgmJmJbYy1kXT09PWVbZi1kXTtkKyspO00uX2ZhbGxiYWNrVGV4dD1lLnNsaWNlKGEsMTxkPzEtZDp2b2lkIDApO3JldHVybiBNLl9mYWxsYmFja1RleHR9ZnVuY3Rpb24gb2IoKXtyZXR1cm5cInZhbHVlXCJpbiBNLl9yb290P00uX3Jvb3QudmFsdWU6TS5fcm9vdFttYigpXX1cbnZhciBwYj1cImRpc3BhdGNoQ29uZmlnIF90YXJnZXRJbnN0IG5hdGl2ZUV2ZW50IGlzRGVmYXVsdFByZXZlbnRlZCBpc1Byb3BhZ2F0aW9uU3RvcHBlZCBfZGlzcGF0Y2hMaXN0ZW5lcnMgX2Rpc3BhdGNoSW5zdGFuY2VzXCIuc3BsaXQoXCIgXCIpLHFiPXt0eXBlOm51bGwsdGFyZ2V0Om51bGwsY3VycmVudFRhcmdldDpDLnRoYXRSZXR1cm5zTnVsbCxldmVudFBoYXNlOm51bGwsYnViYmxlczpudWxsLGNhbmNlbGFibGU6bnVsbCx0aW1lU3RhbXA6ZnVuY3Rpb24oYSl7cmV0dXJuIGEudGltZVN0YW1wfHxEYXRlLm5vdygpfSxkZWZhdWx0UHJldmVudGVkOm51bGwsaXNUcnVzdGVkOm51bGx9O1xuZnVuY3Rpb24gTihhLGIsYyxkKXt0aGlzLmRpc3BhdGNoQ29uZmlnPWE7dGhpcy5fdGFyZ2V0SW5zdD1iO3RoaXMubmF0aXZlRXZlbnQ9YzthPXRoaXMuY29uc3RydWN0b3IuSW50ZXJmYWNlO2Zvcih2YXIgZSBpbiBhKWEuaGFzT3duUHJvcGVydHkoZSkmJigoYj1hW2VdKT90aGlzW2VdPWIoYyk6XCJ0YXJnZXRcIj09PWU/dGhpcy50YXJnZXQ9ZDp0aGlzW2VdPWNbZV0pO3RoaXMuaXNEZWZhdWx0UHJldmVudGVkPShudWxsIT1jLmRlZmF1bHRQcmV2ZW50ZWQ/Yy5kZWZhdWx0UHJldmVudGVkOiExPT09Yy5yZXR1cm5WYWx1ZSk/Qy50aGF0UmV0dXJuc1RydWU6Qy50aGF0UmV0dXJuc0ZhbHNlO3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9Qy50aGF0UmV0dXJuc0ZhbHNlO3JldHVybiB0aGlzfVxuQShOLnByb3RvdHlwZSx7cHJldmVudERlZmF1bHQ6ZnVuY3Rpb24oKXt0aGlzLmRlZmF1bHRQcmV2ZW50ZWQ9ITA7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5wcmV2ZW50RGVmYXVsdD9hLnByZXZlbnREZWZhdWx0KCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5yZXR1cm5WYWx1ZSYmKGEucmV0dXJuVmFsdWU9ITEpLHRoaXMuaXNEZWZhdWx0UHJldmVudGVkPUMudGhhdFJldHVybnNUcnVlKX0sc3RvcFByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5zdG9wUHJvcGFnYXRpb24/YS5zdG9wUHJvcGFnYXRpb24oKTpcInVua25vd25cIiE9PXR5cGVvZiBhLmNhbmNlbEJ1YmJsZSYmKGEuY2FuY2VsQnViYmxlPSEwKSx0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPUMudGhhdFJldHVybnNUcnVlKX0scGVyc2lzdDpmdW5jdGlvbigpe3RoaXMuaXNQZXJzaXN0ZW50PUMudGhhdFJldHVybnNUcnVlfSxpc1BlcnNpc3RlbnQ6Qy50aGF0UmV0dXJuc0ZhbHNlLFxuZGVzdHJ1Y3RvcjpmdW5jdGlvbigpe3ZhciBhPXRoaXMuY29uc3RydWN0b3IuSW50ZXJmYWNlLGI7Zm9yKGIgaW4gYSl0aGlzW2JdPW51bGw7Zm9yKGE9MDthPHBiLmxlbmd0aDthKyspdGhpc1twYlthXV09bnVsbH19KTtOLkludGVyZmFjZT1xYjtOLmV4dGVuZD1mdW5jdGlvbihhKXtmdW5jdGlvbiBiKCl7fWZ1bmN0aW9uIGMoKXtyZXR1cm4gZC5hcHBseSh0aGlzLGFyZ3VtZW50cyl9dmFyIGQ9dGhpcztiLnByb3RvdHlwZT1kLnByb3RvdHlwZTt2YXIgZT1uZXcgYjtBKGUsYy5wcm90b3R5cGUpO2MucHJvdG90eXBlPWU7Yy5wcm90b3R5cGUuY29uc3RydWN0b3I9YztjLkludGVyZmFjZT1BKHt9LGQuSW50ZXJmYWNlLGEpO2MuZXh0ZW5kPWQuZXh0ZW5kO3JiKGMpO3JldHVybiBjfTtyYihOKTtcbmZ1bmN0aW9uIHNiKGEsYixjLGQpe2lmKHRoaXMuZXZlbnRQb29sLmxlbmd0aCl7dmFyIGU9dGhpcy5ldmVudFBvb2wucG9wKCk7dGhpcy5jYWxsKGUsYSxiLGMsZCk7cmV0dXJuIGV9cmV0dXJuIG5ldyB0aGlzKGEsYixjLGQpfWZ1bmN0aW9uIHRiKGEpe2EgaW5zdGFuY2VvZiB0aGlzP3ZvaWQgMDpEKFwiMjIzXCIpO2EuZGVzdHJ1Y3RvcigpOzEwPnRoaXMuZXZlbnRQb29sLmxlbmd0aCYmdGhpcy5ldmVudFBvb2wucHVzaChhKX1mdW5jdGlvbiByYihhKXthLmV2ZW50UG9vbD1bXTthLmdldFBvb2xlZD1zYjthLnJlbGVhc2U9dGJ9dmFyIHViPU4uZXh0ZW5kKHtkYXRhOm51bGx9KSx2Yj1OLmV4dGVuZCh7ZGF0YTpudWxsfSksd2I9WzksMTMsMjcsMzJdLHhiPW0uY2FuVXNlRE9NJiZcIkNvbXBvc2l0aW9uRXZlbnRcImluIHdpbmRvdyx5Yj1udWxsO20uY2FuVXNlRE9NJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJih5Yj1kb2N1bWVudC5kb2N1bWVudE1vZGUpO1xudmFyIHpiPW0uY2FuVXNlRE9NJiZcIlRleHRFdmVudFwiaW4gd2luZG93JiYheWIsQWI9bS5jYW5Vc2VET00mJigheGJ8fHliJiY4PHliJiYxMT49eWIpLEJiPVN0cmluZy5mcm9tQ2hhckNvZGUoMzIpLEtiPXtiZWZvcmVJbnB1dDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkJlZm9yZUlucHV0XCIsY2FwdHVyZWQ6XCJvbkJlZm9yZUlucHV0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6W1widG9wQ29tcG9zaXRpb25FbmRcIixcInRvcEtleVByZXNzXCIsXCJ0b3BUZXh0SW5wdXRcIixcInRvcFBhc3RlXCJdfSxjb21wb3NpdGlvbkVuZDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uRW5kXCIsY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uRW5kQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJ0b3BCbHVyIHRvcENvbXBvc2l0aW9uRW5kIHRvcEtleURvd24gdG9wS2V5UHJlc3MgdG9wS2V5VXAgdG9wTW91c2VEb3duXCIuc3BsaXQoXCIgXCIpfSxjb21wb3NpdGlvblN0YXJ0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25TdGFydFwiLFxuY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uU3RhcnRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcInRvcEJsdXIgdG9wQ29tcG9zaXRpb25TdGFydCB0b3BLZXlEb3duIHRvcEtleVByZXNzIHRvcEtleVVwIHRvcE1vdXNlRG93blwiLnNwbGl0KFwiIFwiKX0sY29tcG9zaXRpb25VcGRhdGU6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvblVwZGF0ZVwiLGNhcHR1cmVkOlwib25Db21wb3NpdGlvblVwZGF0ZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwidG9wQmx1ciB0b3BDb21wb3NpdGlvblVwZGF0ZSB0b3BLZXlEb3duIHRvcEtleVByZXNzIHRvcEtleVVwIHRvcE1vdXNlRG93blwiLnNwbGl0KFwiIFwiKX19LExiPSExO1xuZnVuY3Rpb24gTWIoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcInRvcEtleVVwXCI6cmV0dXJuLTEhPT13Yi5pbmRleE9mKGIua2V5Q29kZSk7Y2FzZSBcInRvcEtleURvd25cIjpyZXR1cm4gMjI5IT09Yi5rZXlDb2RlO2Nhc2UgXCJ0b3BLZXlQcmVzc1wiOmNhc2UgXCJ0b3BNb3VzZURvd25cIjpjYXNlIFwidG9wQmx1clwiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIE5iKGEpe2E9YS5kZXRhaWw7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZcImRhdGFcImluIGE/YS5kYXRhOm51bGx9dmFyIE9iPSExO2Z1bmN0aW9uIFBiKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJ0b3BDb21wb3NpdGlvbkVuZFwiOnJldHVybiBOYihiKTtjYXNlIFwidG9wS2V5UHJlc3NcIjppZigzMiE9PWIud2hpY2gpcmV0dXJuIG51bGw7TGI9ITA7cmV0dXJuIEJiO2Nhc2UgXCJ0b3BUZXh0SW5wdXRcIjpyZXR1cm4gYT1iLmRhdGEsYT09PUJiJiZMYj9udWxsOmE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiBRYihhLGIpe2lmKE9iKXJldHVyblwidG9wQ29tcG9zaXRpb25FbmRcIj09PWF8fCF4YiYmTWIoYSxiKT8oYT1uYigpLE0uX3Jvb3Q9bnVsbCxNLl9zdGFydFRleHQ9bnVsbCxNLl9mYWxsYmFja1RleHQ9bnVsbCxPYj0hMSxhKTpudWxsO3N3aXRjaChhKXtjYXNlIFwidG9wUGFzdGVcIjpyZXR1cm4gbnVsbDtjYXNlIFwidG9wS2V5UHJlc3NcIjppZighKGIuY3RybEtleXx8Yi5hbHRLZXl8fGIubWV0YUtleSl8fGIuY3RybEtleSYmYi5hbHRLZXkpe2lmKGIuY2hhciYmMTxiLmNoYXIubGVuZ3RoKXJldHVybiBiLmNoYXI7aWYoYi53aGljaClyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShiLndoaWNoKX1yZXR1cm4gbnVsbDtjYXNlIFwidG9wQ29tcG9zaXRpb25FbmRcIjpyZXR1cm4gQWI/bnVsbDpiLmRhdGE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG52YXIgUmI9e2V2ZW50VHlwZXM6S2IsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT12b2lkIDA7dmFyIGY9dm9pZCAwO2lmKHhiKWI6e3N3aXRjaChhKXtjYXNlIFwidG9wQ29tcG9zaXRpb25TdGFydFwiOmU9S2IuY29tcG9zaXRpb25TdGFydDticmVhayBiO2Nhc2UgXCJ0b3BDb21wb3NpdGlvbkVuZFwiOmU9S2IuY29tcG9zaXRpb25FbmQ7YnJlYWsgYjtjYXNlIFwidG9wQ29tcG9zaXRpb25VcGRhdGVcIjplPUtiLmNvbXBvc2l0aW9uVXBkYXRlO2JyZWFrIGJ9ZT12b2lkIDB9ZWxzZSBPYj9NYihhLGMpJiYoZT1LYi5jb21wb3NpdGlvbkVuZCk6XCJ0b3BLZXlEb3duXCI9PT1hJiYyMjk9PT1jLmtleUNvZGUmJihlPUtiLmNvbXBvc2l0aW9uU3RhcnQpO2U/KEFiJiYoT2J8fGUhPT1LYi5jb21wb3NpdGlvblN0YXJ0P2U9PT1LYi5jb21wb3NpdGlvbkVuZCYmT2ImJihmPW5iKCkpOihNLl9yb290PWQsTS5fc3RhcnRUZXh0PW9iKCksT2I9ITApKSxlPXViLmdldFBvb2xlZChlLFxuYixjLGQpLGY/ZS5kYXRhPWY6KGY9TmIoYyksbnVsbCE9PWYmJihlLmRhdGE9ZikpLGliKGUpLGY9ZSk6Zj1udWxsOyhhPXpiP1BiKGEsYyk6UWIoYSxjKSk/KGI9dmIuZ2V0UG9vbGVkKEtiLmJlZm9yZUlucHV0LGIsYyxkKSxiLmRhdGE9YSxpYihiKSk6Yj1udWxsO3JldHVybiBudWxsPT09Zj9iOm51bGw9PT1iP2Y6W2YsYl19fSxTYj1udWxsLFRiPXtpbmplY3RGaWJlckNvbnRyb2xsZWRIb3N0Q29tcG9uZW50OmZ1bmN0aW9uKGEpe1NiPWF9fSxVYj1udWxsLFZiPW51bGw7ZnVuY3Rpb24gV2IoYSl7aWYoYT1FYShhKSl7U2ImJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBTYi5yZXN0b3JlQ29udHJvbGxlZFN0YXRlP3ZvaWQgMDpEKFwiMTk0XCIpO3ZhciBiPURhKGEuc3RhdGVOb2RlKTtTYi5yZXN0b3JlQ29udHJvbGxlZFN0YXRlKGEuc3RhdGVOb2RlLGEudHlwZSxiKX19ZnVuY3Rpb24gWGIoYSl7VWI/VmI/VmIucHVzaChhKTpWYj1bYV06VWI9YX1cbmZ1bmN0aW9uIFliKCl7cmV0dXJuIG51bGwhPT1VYnx8bnVsbCE9PVZifWZ1bmN0aW9uIFpiKCl7aWYoVWIpe3ZhciBhPVViLGI9VmI7VmI9VWI9bnVsbDtXYihhKTtpZihiKWZvcihhPTA7YTxiLmxlbmd0aDthKyspV2IoYlthXSl9fXZhciAkYj1PYmplY3QuZnJlZXplKHtpbmplY3Rpb246VGIsZW5xdWV1ZVN0YXRlUmVzdG9yZTpYYixuZWVkc1N0YXRlUmVzdG9yZTpZYixyZXN0b3JlU3RhdGVJZk5lZWRlZDpaYn0pO2Z1bmN0aW9uIGFjKGEsYil7cmV0dXJuIGEoYil9ZnVuY3Rpb24gYmMoYSxiLGMpe3JldHVybiBhKGIsYyl9ZnVuY3Rpb24gY2MoKXt9dmFyIGRjPSExO2Z1bmN0aW9uIGVjKGEsYil7aWYoZGMpcmV0dXJuIGEoYik7ZGM9ITA7dHJ5e3JldHVybiBhYyhhLGIpfWZpbmFsbHl7ZGM9ITEsWWIoKSYmKGNjKCksWmIoKSl9fVxudmFyIGZjPXtjb2xvcjohMCxkYXRlOiEwLGRhdGV0aW1lOiEwLFwiZGF0ZXRpbWUtbG9jYWxcIjohMCxlbWFpbDohMCxtb250aDohMCxudW1iZXI6ITAscGFzc3dvcmQ6ITAscmFuZ2U6ITAsc2VhcmNoOiEwLHRlbDohMCx0ZXh0OiEwLHRpbWU6ITAsdXJsOiEwLHdlZWs6ITB9O2Z1bmN0aW9uIGdjKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm5cImlucHV0XCI9PT1iPyEhZmNbYS50eXBlXTpcInRleHRhcmVhXCI9PT1iPyEwOiExfWZ1bmN0aW9uIGhjKGEpe2E9YS50YXJnZXR8fHdpbmRvdzthLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50JiYoYT1hLmNvcnJlc3BvbmRpbmdVc2VFbGVtZW50KTtyZXR1cm4gMz09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmF9XG5mdW5jdGlvbiBpYyhhLGIpe2lmKCFtLmNhblVzZURPTXx8YiYmIShcImFkZEV2ZW50TGlzdGVuZXJcImluIGRvY3VtZW50KSlyZXR1cm4hMTthPVwib25cIithO2I9YSBpbiBkb2N1bWVudDtifHwoYj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGIuc2V0QXR0cmlidXRlKGEsXCJyZXR1cm47XCIpLGI9XCJmdW5jdGlvblwiPT09dHlwZW9mIGJbYV0pO3JldHVybiBifWZ1bmN0aW9uIGpjKGEpe3ZhciBiPWEudHlwZTtyZXR1cm4oYT1hLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09YS50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09Ynx8XCJyYWRpb1wiPT09Yil9XG5mdW5jdGlvbiBrYyhhKXt2YXIgYj1qYyhhKT9cImNoZWNrZWRcIjpcInZhbHVlXCIsYz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGEuY29uc3RydWN0b3IucHJvdG90eXBlLGIpLGQ9XCJcIithW2JdO2lmKCFhLmhhc093blByb3BlcnR5KGIpJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5nZXQmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnNldClyZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBjLmdldC5jYWxsKHRoaXMpfSxzZXQ6ZnVuY3Rpb24oYSl7ZD1cIlwiK2E7Yy5zZXQuY2FsbCh0aGlzLGEpfX0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2VudW1lcmFibGU6Yy5lbnVtZXJhYmxlfSkse2dldFZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIGR9LHNldFZhbHVlOmZ1bmN0aW9uKGEpe2Q9XCJcIithfSxzdG9wVHJhY2tpbmc6ZnVuY3Rpb24oKXthLl92YWx1ZVRyYWNrZXI9bnVsbDtkZWxldGUgYVtiXX19fVxuZnVuY3Rpb24gbGMoYSl7YS5fdmFsdWVUcmFja2VyfHwoYS5fdmFsdWVUcmFja2VyPWtjKGEpKX1mdW5jdGlvbiBtYyhhKXtpZighYSlyZXR1cm4hMTt2YXIgYj1hLl92YWx1ZVRyYWNrZXI7aWYoIWIpcmV0dXJuITA7dmFyIGM9Yi5nZXRWYWx1ZSgpO3ZhciBkPVwiXCI7YSYmKGQ9amMoYSk/YS5jaGVja2VkP1widHJ1ZVwiOlwiZmFsc2VcIjphLnZhbHVlKTthPWQ7cmV0dXJuIGEhPT1jPyhiLnNldFZhbHVlKGEpLCEwKTohMX1cbnZhciBuYz1lYS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRC5SZWFjdEN1cnJlbnRPd25lcixPPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbFtcImZvclwiXSxvYz1PP1N5bWJvbFtcImZvclwiXShcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMscGM9Tz9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5jYWxsXCIpOjYwMTA0LHFjPU8/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QucmV0dXJuXCIpOjYwMTA1LHJjPU8/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LHNjPU8/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsdGM9Tz9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCx1Yz1PP1N5bWJvbFtcImZvclwiXShcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LHZjPU8/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCx3Yz1PP1N5bWJvbFtcImZvclwiXShcInJlYWN0LmFzeW5jX21vZGVcIik6NjAxMTEsXG54Yz1PP1N5bWJvbFtcImZvclwiXShcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLHljPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiB6YyhhKXtpZihudWxsPT09YXx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhKXJldHVybiBudWxsO2E9eWMmJmFbeWNdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9XG5mdW5jdGlvbiBBYyhhKXthPWEudHlwZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYS5kaXNwbGF5TmFtZXx8YS5uYW1lO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYSlyZXR1cm4gYTtzd2l0Y2goYSl7Y2FzZSBzYzpyZXR1cm5cIlJlYWN0RnJhZ21lbnRcIjtjYXNlIHJjOnJldHVyblwiUmVhY3RQb3J0YWxcIjtjYXNlIHBjOnJldHVyblwiUmVhY3RDYWxsXCI7Y2FzZSBxYzpyZXR1cm5cIlJlYWN0UmV0dXJuXCJ9aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSB4YzpyZXR1cm4gYT1hLnJlbmRlci5kaXNwbGF5TmFtZXx8YS5yZW5kZXIubmFtZXx8XCJcIixcIlwiIT09YT9cIkZvcndhcmRSZWYoXCIrYStcIilcIjpcIkZvcndhcmRSZWZcIn1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIEJjKGEpe3ZhciBiPVwiXCI7ZG97YTpzd2l0Y2goYS50YWcpe2Nhc2UgMDpjYXNlIDE6Y2FzZSAyOmNhc2UgNTp2YXIgYz1hLl9kZWJ1Z093bmVyLGQ9YS5fZGVidWdTb3VyY2U7dmFyIGU9QWMoYSk7dmFyIGY9bnVsbDtjJiYoZj1BYyhjKSk7Yz1kO2U9XCJcXG4gICAgaW4gXCIrKGV8fFwiVW5rbm93blwiKSsoYz9cIiAoYXQgXCIrYy5maWxlTmFtZS5yZXBsYWNlKC9eLipbXFxcXFxcL10vLFwiXCIpK1wiOlwiK2MubGluZU51bWJlcitcIilcIjpmP1wiIChjcmVhdGVkIGJ5IFwiK2YrXCIpXCI6XCJcIik7YnJlYWsgYTtkZWZhdWx0OmU9XCJcIn1iKz1lO2E9YVtcInJldHVyblwiXX13aGlsZShhKTtyZXR1cm4gYn1cbnZhciBDYz0vXls6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRF1bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRcXC0uMC05XFx1MDBCN1xcdTAzMDAtXFx1MDM2RlxcdTIwM0YtXFx1MjA0MF0qJC8sRGM9e30sRWM9e307ZnVuY3Rpb24gRmMoYSl7aWYoRWMuaGFzT3duUHJvcGVydHkoYSkpcmV0dXJuITA7aWYoRGMuaGFzT3duUHJvcGVydHkoYSkpcmV0dXJuITE7aWYoQ2MudGVzdChhKSlyZXR1cm4gRWNbYV09ITA7RGNbYV09ITA7cmV0dXJuITF9XG5mdW5jdGlvbiBHYyhhLGIsYyxkKXtpZihudWxsIT09YyYmMD09PWMudHlwZSlyZXR1cm4hMTtzd2l0Y2godHlwZW9mIGIpe2Nhc2UgXCJmdW5jdGlvblwiOmNhc2UgXCJzeW1ib2xcIjpyZXR1cm4hMDtjYXNlIFwiYm9vbGVhblwiOmlmKGQpcmV0dXJuITE7aWYobnVsbCE9PWMpcmV0dXJuIWMuYWNjZXB0c0Jvb2xlYW5zO2E9YS50b0xvd2VyQ2FzZSgpLnNsaWNlKDAsNSk7cmV0dXJuXCJkYXRhLVwiIT09YSYmXCJhcmlhLVwiIT09YTtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiBIYyhhLGIsYyxkKXtpZihudWxsPT09Ynx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBifHxHYyhhLGIsYyxkKSlyZXR1cm4hMDtpZihudWxsIT09Yylzd2l0Y2goYy50eXBlKXtjYXNlIDM6cmV0dXJuIWI7Y2FzZSA0OnJldHVybiExPT09YjtjYXNlIDU6cmV0dXJuIGlzTmFOKGIpO2Nhc2UgNjpyZXR1cm4gaXNOYU4oYil8fDE+Yn1yZXR1cm4hMX1cbmZ1bmN0aW9uIFUoYSxiLGMsZCxlKXt0aGlzLmFjY2VwdHNCb29sZWFucz0yPT09Ynx8Mz09PWJ8fDQ9PT1iO3RoaXMuYXR0cmlidXRlTmFtZT1kO3RoaXMuYXR0cmlidXRlTmFtZXNwYWNlPWU7dGhpcy5tdXN0VXNlUHJvcGVydHk9Yzt0aGlzLnByb3BlcnR5TmFtZT1hO3RoaXMudHlwZT1ifXZhciBWPXt9O1wiY2hpbGRyZW4gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgZGVmYXVsdFZhbHVlIGRlZmF1bHRDaGVja2VkIGlubmVySFRNTCBzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmcgc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nIHN0eWxlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7VlthXT1uZXcgVShhLDAsITEsYSxudWxsKX0pO1xuW1tcImFjY2VwdENoYXJzZXRcIixcImFjY2VwdC1jaGFyc2V0XCJdLFtcImNsYXNzTmFtZVwiLFwiY2xhc3NcIl0sW1wiaHRtbEZvclwiLFwiZm9yXCJdLFtcImh0dHBFcXVpdlwiLFwiaHR0cC1lcXVpdlwiXV0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hWzBdO1ZbYl09bmV3IFUoYiwxLCExLGFbMV0sbnVsbCl9KTtbXCJjb250ZW50RWRpdGFibGVcIixcImRyYWdnYWJsZVwiLFwic3BlbGxDaGVja1wiLFwidmFsdWVcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtWW2FdPW5ldyBVKGEsMiwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTtbXCJhdXRvUmV2ZXJzZVwiLFwiZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZFwiLFwicHJlc2VydmVBbHBoYVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe1ZbYV09bmV3IFUoYSwyLCExLGEsbnVsbCl9KTtcblwiYWxsb3dGdWxsU2NyZWVuIGFzeW5jIGF1dG9Gb2N1cyBhdXRvUGxheSBjb250cm9scyBkZWZhdWx0IGRlZmVyIGRpc2FibGVkIGZvcm1Ob1ZhbGlkYXRlIGhpZGRlbiBsb29wIG5vTW9kdWxlIG5vVmFsaWRhdGUgb3BlbiBwbGF5c0lubGluZSByZWFkT25seSByZXF1aXJlZCByZXZlcnNlZCBzY29wZWQgc2VhbWxlc3MgaXRlbVNjb3BlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7VlthXT1uZXcgVShhLDMsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7W1wiY2hlY2tlZFwiLFwibXVsdGlwbGVcIixcIm11dGVkXCIsXCJzZWxlY3RlZFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe1ZbYV09bmV3IFUoYSwzLCEwLGEudG9Mb3dlckNhc2UoKSxudWxsKX0pO1tcImNhcHR1cmVcIixcImRvd25sb2FkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7VlthXT1uZXcgVShhLDQsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7XG5bXCJjb2xzXCIsXCJyb3dzXCIsXCJzaXplXCIsXCJzcGFuXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7VlthXT1uZXcgVShhLDYsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwpfSk7W1wicm93U3BhblwiLFwic3RhcnRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtWW2FdPW5ldyBVKGEsNSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCl9KTt2YXIgU2M9L1tcXC06XShbYS16XSkvZztmdW5jdGlvbiBUYyhhKXtyZXR1cm4gYVsxXS50b1VwcGVyQ2FzZSgpfVxuXCJhY2NlbnQtaGVpZ2h0IGFsaWdubWVudC1iYXNlbGluZSBhcmFiaWMtZm9ybSBiYXNlbGluZS1zaGlmdCBjYXAtaGVpZ2h0IGNsaXAtcGF0aCBjbGlwLXJ1bGUgY29sb3ItaW50ZXJwb2xhdGlvbiBjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMgY29sb3ItcHJvZmlsZSBjb2xvci1yZW5kZXJpbmcgZG9taW5hbnQtYmFzZWxpbmUgZW5hYmxlLWJhY2tncm91bmQgZmlsbC1vcGFjaXR5IGZpbGwtcnVsZSBmbG9vZC1jb2xvciBmbG9vZC1vcGFjaXR5IGZvbnQtZmFtaWx5IGZvbnQtc2l6ZSBmb250LXNpemUtYWRqdXN0IGZvbnQtc3RyZXRjaCBmb250LXN0eWxlIGZvbnQtdmFyaWFudCBmb250LXdlaWdodCBnbHlwaC1uYW1lIGdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwgZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwgaG9yaXotYWR2LXggaG9yaXotb3JpZ2luLXggaW1hZ2UtcmVuZGVyaW5nIGxldHRlci1zcGFjaW5nIGxpZ2h0aW5nLWNvbG9yIG1hcmtlci1lbmQgbWFya2VyLW1pZCBtYXJrZXItc3RhcnQgb3ZlcmxpbmUtcG9zaXRpb24gb3ZlcmxpbmUtdGhpY2tuZXNzIHBhaW50LW9yZGVyIHBhbm9zZS0xIHBvaW50ZXItZXZlbnRzIHJlbmRlcmluZy1pbnRlbnQgc2hhcGUtcmVuZGVyaW5nIHN0b3AtY29sb3Igc3RvcC1vcGFjaXR5IHN0cmlrZXRocm91Z2gtcG9zaXRpb24gc3RyaWtldGhyb3VnaC10aGlja25lc3Mgc3Ryb2tlLWRhc2hhcnJheSBzdHJva2UtZGFzaG9mZnNldCBzdHJva2UtbGluZWNhcCBzdHJva2UtbGluZWpvaW4gc3Ryb2tlLW1pdGVybGltaXQgc3Ryb2tlLW9wYWNpdHkgc3Ryb2tlLXdpZHRoIHRleHQtYW5jaG9yIHRleHQtZGVjb3JhdGlvbiB0ZXh0LXJlbmRlcmluZyB1bmRlcmxpbmUtcG9zaXRpb24gdW5kZXJsaW5lLXRoaWNrbmVzcyB1bmljb2RlLWJpZGkgdW5pY29kZS1yYW5nZSB1bml0cy1wZXItZW0gdi1hbHBoYWJldGljIHYtaGFuZ2luZyB2LWlkZW9ncmFwaGljIHYtbWF0aGVtYXRpY2FsIHZlY3Rvci1lZmZlY3QgdmVydC1hZHYteSB2ZXJ0LW9yaWdpbi14IHZlcnQtb3JpZ2luLXkgd29yZC1zcGFjaW5nIHdyaXRpbmctbW9kZSB4bWxuczp4bGluayB4LWhlaWdodFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShTYyxcblRjKTtWW2JdPW5ldyBVKGIsMSwhMSxhLG51bGwpfSk7XCJ4bGluazphY3R1YXRlIHhsaW5rOmFyY3JvbGUgeGxpbms6aHJlZiB4bGluazpyb2xlIHhsaW5rOnNob3cgeGxpbms6dGl0bGUgeGxpbms6dHlwZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShTYyxUYyk7VltiXT1uZXcgVShiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIil9KTtbXCJ4bWw6YmFzZVwiLFwieG1sOmxhbmdcIixcInhtbDpzcGFjZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShTYyxUYyk7VltiXT1uZXcgVShiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiKX0pO1YudGFiSW5kZXg9bmV3IFUoXCJ0YWJJbmRleFwiLDEsITEsXCJ0YWJpbmRleFwiLG51bGwpO1xuZnVuY3Rpb24gVWMoYSxiLGMsZCl7dmFyIGU9Vi5oYXNPd25Qcm9wZXJ0eShiKT9WW2JdOm51bGw7dmFyIGY9bnVsbCE9PWU/MD09PWUudHlwZTpkPyExOiEoMjxiLmxlbmd0aCl8fFwib1wiIT09YlswXSYmXCJPXCIhPT1iWzBdfHxcIm5cIiE9PWJbMV0mJlwiTlwiIT09YlsxXT8hMTohMDtmfHwoSGMoYixjLGUsZCkmJihjPW51bGwpLGR8fG51bGw9PT1lP0ZjKGIpJiYobnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6YS5zZXRBdHRyaWJ1dGUoYixcIlwiK2MpKTplLm11c3RVc2VQcm9wZXJ0eT9hW2UucHJvcGVydHlOYW1lXT1udWxsPT09Yz8zPT09ZS50eXBlPyExOlwiXCI6YzooYj1lLmF0dHJpYnV0ZU5hbWUsZD1lLmF0dHJpYnV0ZU5hbWVzcGFjZSxudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTooZT1lLnR5cGUsYz0zPT09ZXx8ND09PWUmJiEwPT09Yz9cIlwiOlwiXCIrYyxkP2Euc2V0QXR0cmlidXRlTlMoZCxiLGMpOmEuc2V0QXR0cmlidXRlKGIsYykpKSl9XG5mdW5jdGlvbiBWYyhhLGIpe3ZhciBjPWIuY2hlY2tlZDtyZXR1cm4gQSh7fSxiLHtkZWZhdWx0Q2hlY2tlZDp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCx2YWx1ZTp2b2lkIDAsY2hlY2tlZDpudWxsIT1jP2M6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkfSl9ZnVuY3Rpb24gV2MoYSxiKXt2YXIgYz1udWxsPT1iLmRlZmF1bHRWYWx1ZT9cIlwiOmIuZGVmYXVsdFZhbHVlLGQ9bnVsbCE9Yi5jaGVja2VkP2IuY2hlY2tlZDpiLmRlZmF1bHRDaGVja2VkO2M9WGMobnVsbCE9Yi52YWx1ZT9iLnZhbHVlOmMpO2EuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbENoZWNrZWQ6ZCxpbml0aWFsVmFsdWU6Yyxjb250cm9sbGVkOlwiY2hlY2tib3hcIj09PWIudHlwZXx8XCJyYWRpb1wiPT09Yi50eXBlP251bGwhPWIuY2hlY2tlZDpudWxsIT1iLnZhbHVlfX1mdW5jdGlvbiBZYyhhLGIpe2I9Yi5jaGVja2VkO251bGwhPWImJlVjKGEsXCJjaGVja2VkXCIsYiwhMSl9XG5mdW5jdGlvbiBaYyhhLGIpe1ljKGEsYik7dmFyIGM9WGMoYi52YWx1ZSk7aWYobnVsbCE9YylpZihcIm51bWJlclwiPT09Yi50eXBlKXtpZigwPT09YyYmXCJcIj09PWEudmFsdWV8fGEudmFsdWUhPWMpYS52YWx1ZT1cIlwiK2N9ZWxzZSBhLnZhbHVlIT09XCJcIitjJiYoYS52YWx1ZT1cIlwiK2MpO2IuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKT8kYyhhLGIudHlwZSxjKTpiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpJiYkYyhhLGIudHlwZSxYYyhiLmRlZmF1bHRWYWx1ZSkpO251bGw9PWIuY2hlY2tlZCYmbnVsbCE9Yi5kZWZhdWx0Q2hlY2tlZCYmKGEuZGVmYXVsdENoZWNrZWQ9ISFiLmRlZmF1bHRDaGVja2VkKX1cbmZ1bmN0aW9uIGFkKGEsYil7aWYoYi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpfHxiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpKVwiXCI9PT1hLnZhbHVlJiYoYS52YWx1ZT1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUpLGEuZGVmYXVsdFZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTtiPWEubmFtZTtcIlwiIT09YiYmKGEubmFtZT1cIlwiKTthLmRlZmF1bHRDaGVja2VkPSFhLmRlZmF1bHRDaGVja2VkO2EuZGVmYXVsdENoZWNrZWQ9IWEuZGVmYXVsdENoZWNrZWQ7XCJcIiE9PWImJihhLm5hbWU9Yil9ZnVuY3Rpb24gJGMoYSxiLGMpe2lmKFwibnVtYmVyXCIhPT1ifHxhLm93bmVyRG9jdW1lbnQuYWN0aXZlRWxlbWVudCE9PWEpbnVsbD09Yz9hLmRlZmF1bHRWYWx1ZT1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU6YS5kZWZhdWx0VmFsdWUhPT1cIlwiK2MmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2MpfVxuZnVuY3Rpb24gWGMoYSl7c3dpdGNoKHR5cGVvZiBhKXtjYXNlIFwiYm9vbGVhblwiOmNhc2UgXCJudW1iZXJcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJ1bmRlZmluZWRcIjpyZXR1cm4gYTtkZWZhdWx0OnJldHVyblwiXCJ9fXZhciBiZD17Y2hhbmdlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ2hhbmdlXCIsY2FwdHVyZWQ6XCJvbkNoYW5nZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwidG9wQmx1ciB0b3BDaGFuZ2UgdG9wQ2xpY2sgdG9wRm9jdXMgdG9wSW5wdXQgdG9wS2V5RG93biB0b3BLZXlVcCB0b3BTZWxlY3Rpb25DaGFuZ2VcIi5zcGxpdChcIiBcIil9fTtmdW5jdGlvbiBjZChhLGIsYyl7YT1OLmdldFBvb2xlZChiZC5jaGFuZ2UsYSxiLGMpO2EudHlwZT1cImNoYW5nZVwiO1hiKGMpO2liKGEpO3JldHVybiBhfXZhciBkZD1udWxsLGVkPW51bGw7ZnVuY3Rpb24gZmQoYSl7UGEoYSwhMSl9XG5mdW5jdGlvbiBnZChhKXt2YXIgYj1WYShhKTtpZihtYyhiKSlyZXR1cm4gYX1mdW5jdGlvbiBoZChhLGIpe2lmKFwidG9wQ2hhbmdlXCI9PT1hKXJldHVybiBifXZhciBpZD0hMTttLmNhblVzZURPTSYmKGlkPWljKFwiaW5wdXRcIikmJighZG9jdW1lbnQuZG9jdW1lbnRNb2RlfHw5PGRvY3VtZW50LmRvY3VtZW50TW9kZSkpO2Z1bmN0aW9uIGpkKCl7ZGQmJihkZC5kZXRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixrZCksZWQ9ZGQ9bnVsbCl9ZnVuY3Rpb24ga2QoYSl7XCJ2YWx1ZVwiPT09YS5wcm9wZXJ0eU5hbWUmJmdkKGVkKSYmKGE9Y2QoZWQsYSxoYyhhKSksZWMoZmQsYSkpfWZ1bmN0aW9uIGxkKGEsYixjKXtcInRvcEZvY3VzXCI9PT1hPyhqZCgpLGRkPWIsZWQ9YyxkZC5hdHRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixrZCkpOlwidG9wQmx1clwiPT09YSYmamQoKX1cbmZ1bmN0aW9uIG1kKGEpe2lmKFwidG9wU2VsZWN0aW9uQ2hhbmdlXCI9PT1hfHxcInRvcEtleVVwXCI9PT1hfHxcInRvcEtleURvd25cIj09PWEpcmV0dXJuIGdkKGVkKX1mdW5jdGlvbiBuZChhLGIpe2lmKFwidG9wQ2xpY2tcIj09PWEpcmV0dXJuIGdkKGIpfWZ1bmN0aW9uIG9kKGEsYil7aWYoXCJ0b3BJbnB1dFwiPT09YXx8XCJ0b3BDaGFuZ2VcIj09PWEpcmV0dXJuIGdkKGIpfVxudmFyIHBkPXtldmVudFR5cGVzOmJkLF9pc0lucHV0RXZlbnRTdXBwb3J0ZWQ6aWQsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1iP1ZhKGIpOndpbmRvdyxmPXZvaWQgMCxoPXZvaWQgMCxnPWUubm9kZU5hbWUmJmUubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcInNlbGVjdFwiPT09Z3x8XCJpbnB1dFwiPT09ZyYmXCJmaWxlXCI9PT1lLnR5cGU/Zj1oZDpnYyhlKT9pZD9mPW9kOihmPW1kLGg9bGQpOihnPWUubm9kZU5hbWUpJiZcImlucHV0XCI9PT1nLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1lLnR5cGV8fFwicmFkaW9cIj09PWUudHlwZSkmJihmPW5kKTtpZihmJiYoZj1mKGEsYikpKXJldHVybiBjZChmLGMsZCk7aCYmaChhLGUsYik7XCJ0b3BCbHVyXCI9PT1hJiZudWxsIT1iJiYoYT1iLl93cmFwcGVyU3RhdGV8fGUuX3dyYXBwZXJTdGF0ZSkmJmEuY29udHJvbGxlZCYmXCJudW1iZXJcIj09PWUudHlwZSYmJGMoZSxcIm51bWJlclwiLGUudmFsdWUpfX0scWQ9Ti5leHRlbmQoe3ZpZXc6bnVsbCxcbmRldGFpbDpudWxsfSkscmQ9e0FsdDpcImFsdEtleVwiLENvbnRyb2w6XCJjdHJsS2V5XCIsTWV0YTpcIm1ldGFLZXlcIixTaGlmdDpcInNoaWZ0S2V5XCJ9O2Z1bmN0aW9uIHNkKGEpe3ZhciBiPXRoaXMubmF0aXZlRXZlbnQ7cmV0dXJuIGIuZ2V0TW9kaWZpZXJTdGF0ZT9iLmdldE1vZGlmaWVyU3RhdGUoYSk6KGE9cmRbYV0pPyEhYlthXTohMX1mdW5jdGlvbiB0ZCgpe3JldHVybiBzZH1cbnZhciB1ZD1xZC5leHRlbmQoe3NjcmVlblg6bnVsbCxzY3JlZW5ZOm51bGwsY2xpZW50WDpudWxsLGNsaWVudFk6bnVsbCxwYWdlWDpudWxsLHBhZ2VZOm51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLGdldE1vZGlmaWVyU3RhdGU6dGQsYnV0dG9uOm51bGwsYnV0dG9uczpudWxsLHJlbGF0ZWRUYXJnZXQ6ZnVuY3Rpb24oYSl7cmV0dXJuIGEucmVsYXRlZFRhcmdldHx8KGEuZnJvbUVsZW1lbnQ9PT1hLnNyY0VsZW1lbnQ/YS50b0VsZW1lbnQ6YS5mcm9tRWxlbWVudCl9fSksdmQ9e21vdXNlRW50ZXI6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvbk1vdXNlRW50ZXJcIixkZXBlbmRlbmNpZXM6W1widG9wTW91c2VPdXRcIixcInRvcE1vdXNlT3ZlclwiXX0sbW91c2VMZWF2ZTp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uTW91c2VMZWF2ZVwiLGRlcGVuZGVuY2llczpbXCJ0b3BNb3VzZU91dFwiLFwidG9wTW91c2VPdmVyXCJdfX0sd2Q9e2V2ZW50VHlwZXM6dmQsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLFxuYixjLGQpe2lmKFwidG9wTW91c2VPdmVyXCI9PT1hJiYoYy5yZWxhdGVkVGFyZ2V0fHxjLmZyb21FbGVtZW50KXx8XCJ0b3BNb3VzZU91dFwiIT09YSYmXCJ0b3BNb3VzZU92ZXJcIiE9PWEpcmV0dXJuIG51bGw7dmFyIGU9ZC53aW5kb3c9PT1kP2Q6KGU9ZC5vd25lckRvY3VtZW50KT9lLmRlZmF1bHRWaWV3fHxlLnBhcmVudFdpbmRvdzp3aW5kb3c7XCJ0b3BNb3VzZU91dFwiPT09YT8oYT1iLGI9KGI9Yy5yZWxhdGVkVGFyZ2V0fHxjLnRvRWxlbWVudCk/VWEoYik6bnVsbCk6YT1udWxsO2lmKGE9PT1iKXJldHVybiBudWxsO3ZhciBmPW51bGw9PWE/ZTpWYShhKTtlPW51bGw9PWI/ZTpWYShiKTt2YXIgaD11ZC5nZXRQb29sZWQodmQubW91c2VMZWF2ZSxhLGMsZCk7aC50eXBlPVwibW91c2VsZWF2ZVwiO2gudGFyZ2V0PWY7aC5yZWxhdGVkVGFyZ2V0PWU7Yz11ZC5nZXRQb29sZWQodmQubW91c2VFbnRlcixiLGMsZCk7Yy50eXBlPVwibW91c2VlbnRlclwiO2MudGFyZ2V0PWU7Yy5yZWxhdGVkVGFyZ2V0PVxuZjtqYihoLGMsYSxiKTtyZXR1cm5baCxjXX19O2Z1bmN0aW9uIHhkKGEpe3ZhciBiPWE7aWYoYS5hbHRlcm5hdGUpZm9yKDtiW1wicmV0dXJuXCJdOyliPWJbXCJyZXR1cm5cIl07ZWxzZXtpZigwIT09KGIuZWZmZWN0VGFnJjIpKXJldHVybiAxO2Zvcig7YltcInJldHVyblwiXTspaWYoYj1iW1wicmV0dXJuXCJdLDAhPT0oYi5lZmZlY3RUYWcmMikpcmV0dXJuIDF9cmV0dXJuIDM9PT1iLnRhZz8yOjN9ZnVuY3Rpb24geWQoYSl7cmV0dXJuKGE9YS5fcmVhY3RJbnRlcm5hbEZpYmVyKT8yPT09eGQoYSk6ITF9ZnVuY3Rpb24gemQoYSl7MiE9PXhkKGEpP0QoXCIxODhcIik6dm9pZCAwfVxuZnVuY3Rpb24gQWQoYSl7dmFyIGI9YS5hbHRlcm5hdGU7aWYoIWIpcmV0dXJuIGI9eGQoYSksMz09PWI/RChcIjE4OFwiKTp2b2lkIDAsMT09PWI/bnVsbDphO2Zvcih2YXIgYz1hLGQ9Yjs7KXt2YXIgZT1jW1wicmV0dXJuXCJdLGY9ZT9lLmFsdGVybmF0ZTpudWxsO2lmKCFlfHwhZilicmVhaztpZihlLmNoaWxkPT09Zi5jaGlsZCl7Zm9yKHZhciBoPWUuY2hpbGQ7aDspe2lmKGg9PT1jKXJldHVybiB6ZChlKSxhO2lmKGg9PT1kKXJldHVybiB6ZChlKSxiO2g9aC5zaWJsaW5nfUQoXCIxODhcIil9aWYoY1tcInJldHVyblwiXSE9PWRbXCJyZXR1cm5cIl0pYz1lLGQ9ZjtlbHNle2g9ITE7Zm9yKHZhciBnPWUuY2hpbGQ7Zzspe2lmKGc9PT1jKXtoPSEwO2M9ZTtkPWY7YnJlYWt9aWYoZz09PWQpe2g9ITA7ZD1lO2M9ZjticmVha31nPWcuc2libGluZ31pZighaCl7Zm9yKGc9Zi5jaGlsZDtnOyl7aWYoZz09PWMpe2g9ITA7Yz1mO2Q9ZTticmVha31pZihnPT09ZCl7aD0hMDtkPWY7Yz1lO2JyZWFrfWc9Zy5zaWJsaW5nfWg/XG52b2lkIDA6RChcIjE4OVwiKX19Yy5hbHRlcm5hdGUhPT1kP0QoXCIxOTBcIik6dm9pZCAwfTMhPT1jLnRhZz9EKFwiMTg4XCIpOnZvaWQgMDtyZXR1cm4gYy5zdGF0ZU5vZGUuY3VycmVudD09PWM/YTpifWZ1bmN0aW9uIEJkKGEpe2E9QWQoYSk7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKHZhciBiPWE7Oyl7aWYoNT09PWIudGFnfHw2PT09Yi50YWcpcmV0dXJuIGI7aWYoYi5jaGlsZCliLmNoaWxkW1wicmV0dXJuXCJdPWIsYj1iLmNoaWxkO2Vsc2V7aWYoYj09PWEpYnJlYWs7Zm9yKDshYi5zaWJsaW5nOyl7aWYoIWJbXCJyZXR1cm5cIl18fGJbXCJyZXR1cm5cIl09PT1hKXJldHVybiBudWxsO2I9YltcInJldHVyblwiXX1iLnNpYmxpbmdbXCJyZXR1cm5cIl09YltcInJldHVyblwiXTtiPWIuc2libGluZ319cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBDZChhKXthPUFkKGEpO2lmKCFhKXJldHVybiBudWxsO2Zvcih2YXIgYj1hOzspe2lmKDU9PT1iLnRhZ3x8Nj09PWIudGFnKXJldHVybiBiO2lmKGIuY2hpbGQmJjQhPT1iLnRhZyliLmNoaWxkW1wicmV0dXJuXCJdPWIsYj1iLmNoaWxkO2Vsc2V7aWYoYj09PWEpYnJlYWs7Zm9yKDshYi5zaWJsaW5nOyl7aWYoIWJbXCJyZXR1cm5cIl18fGJbXCJyZXR1cm5cIl09PT1hKXJldHVybiBudWxsO2I9YltcInJldHVyblwiXX1iLnNpYmxpbmdbXCJyZXR1cm5cIl09YltcInJldHVyblwiXTtiPWIuc2libGluZ319cmV0dXJuIG51bGx9dmFyIERkPU4uZXh0ZW5kKHthbmltYXRpb25OYW1lOm51bGwsZWxhcHNlZFRpbWU6bnVsbCxwc2V1ZG9FbGVtZW50Om51bGx9KSxFZD1OLmV4dGVuZCh7Y2xpcGJvYXJkRGF0YTpmdW5jdGlvbihhKXtyZXR1cm5cImNsaXBib2FyZERhdGFcImluIGE/YS5jbGlwYm9hcmREYXRhOndpbmRvdy5jbGlwYm9hcmREYXRhfX0pLEZkPXFkLmV4dGVuZCh7cmVsYXRlZFRhcmdldDpudWxsfSk7XG5mdW5jdGlvbiBHZChhKXt2YXIgYj1hLmtleUNvZGU7XCJjaGFyQ29kZVwiaW4gYT8oYT1hLmNoYXJDb2RlLDA9PT1hJiYxMz09PWImJihhPTEzKSk6YT1iOzEwPT09YSYmKGE9MTMpO3JldHVybiAzMjw9YXx8MTM9PT1hP2E6MH1cbnZhciBIZD17RXNjOlwiRXNjYXBlXCIsU3BhY2ViYXI6XCIgXCIsTGVmdDpcIkFycm93TGVmdFwiLFVwOlwiQXJyb3dVcFwiLFJpZ2h0OlwiQXJyb3dSaWdodFwiLERvd246XCJBcnJvd0Rvd25cIixEZWw6XCJEZWxldGVcIixXaW46XCJPU1wiLE1lbnU6XCJDb250ZXh0TWVudVwiLEFwcHM6XCJDb250ZXh0TWVudVwiLFNjcm9sbDpcIlNjcm9sbExvY2tcIixNb3pQcmludGFibGVLZXk6XCJVbmlkZW50aWZpZWRcIn0sSWQ9ezg6XCJCYWNrc3BhY2VcIiw5OlwiVGFiXCIsMTI6XCJDbGVhclwiLDEzOlwiRW50ZXJcIiwxNjpcIlNoaWZ0XCIsMTc6XCJDb250cm9sXCIsMTg6XCJBbHRcIiwxOTpcIlBhdXNlXCIsMjA6XCJDYXBzTG9ja1wiLDI3OlwiRXNjYXBlXCIsMzI6XCIgXCIsMzM6XCJQYWdlVXBcIiwzNDpcIlBhZ2VEb3duXCIsMzU6XCJFbmRcIiwzNjpcIkhvbWVcIiwzNzpcIkFycm93TGVmdFwiLDM4OlwiQXJyb3dVcFwiLDM5OlwiQXJyb3dSaWdodFwiLDQwOlwiQXJyb3dEb3duXCIsNDU6XCJJbnNlcnRcIiw0NjpcIkRlbGV0ZVwiLDExMjpcIkYxXCIsMTEzOlwiRjJcIiwxMTQ6XCJGM1wiLDExNTpcIkY0XCIsXG4xMTY6XCJGNVwiLDExNzpcIkY2XCIsMTE4OlwiRjdcIiwxMTk6XCJGOFwiLDEyMDpcIkY5XCIsMTIxOlwiRjEwXCIsMTIyOlwiRjExXCIsMTIzOlwiRjEyXCIsMTQ0OlwiTnVtTG9ja1wiLDE0NTpcIlNjcm9sbExvY2tcIiwyMjQ6XCJNZXRhXCJ9LEpkPXFkLmV4dGVuZCh7a2V5OmZ1bmN0aW9uKGEpe2lmKGEua2V5KXt2YXIgYj1IZFthLmtleV18fGEua2V5O2lmKFwiVW5pZGVudGlmaWVkXCIhPT1iKXJldHVybiBifXJldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT8oYT1HZChhKSwxMz09PWE/XCJFbnRlclwiOlN0cmluZy5mcm9tQ2hhckNvZGUoYSkpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/SWRbYS5rZXlDb2RlXXx8XCJVbmlkZW50aWZpZWRcIjpcIlwifSxsb2NhdGlvbjpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxyZXBlYXQ6bnVsbCxsb2NhbGU6bnVsbCxnZXRNb2RpZmllclN0YXRlOnRkLGNoYXJDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PVxuYS50eXBlP0dkKGEpOjB9LGtleUNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH0sd2hpY2g6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlP0dkKGEpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9fSksS2Q9dWQuZXh0ZW5kKHtkYXRhVHJhbnNmZXI6bnVsbH0pLExkPXFkLmV4dGVuZCh7dG91Y2hlczpudWxsLHRhcmdldFRvdWNoZXM6bnVsbCxjaGFuZ2VkVG91Y2hlczpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxnZXRNb2RpZmllclN0YXRlOnRkfSksTWQ9Ti5leHRlbmQoe3Byb3BlcnR5TmFtZTpudWxsLGVsYXBzZWRUaW1lOm51bGwscHNldWRvRWxlbWVudDpudWxsfSksTmQ9dWQuZXh0ZW5kKHtkZWx0YVg6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVhcImluIGE/YS5kZWx0YVg6XCJ3aGVlbERlbHRhWFwiaW5cbmE/LWEud2hlZWxEZWx0YVg6MH0sZGVsdGFZOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFZXCJpbiBhP2EuZGVsdGFZOlwid2hlZWxEZWx0YVlcImluIGE/LWEud2hlZWxEZWx0YVk6XCJ3aGVlbERlbHRhXCJpbiBhPy1hLndoZWVsRGVsdGE6MH0sZGVsdGFaOm51bGwsZGVsdGFNb2RlOm51bGx9KSxPZD17fSxQZD17fTtmdW5jdGlvbiBRZChhLGIpe3ZhciBjPWFbMF0udG9VcHBlckNhc2UoKSthLnNsaWNlKDEpLGQ9XCJvblwiK2M7Yz1cInRvcFwiK2M7Yj17cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6ZCxjYXB0dXJlZDpkK1wiQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6W2NdLGlzSW50ZXJhY3RpdmU6Yn07T2RbYV09YjtQZFtjXT1ifVxuXCJibHVyIGNhbmNlbCBjbGljayBjbG9zZSBjb250ZXh0TWVudSBjb3B5IGN1dCBkb3VibGVDbGljayBkcmFnRW5kIGRyYWdTdGFydCBkcm9wIGZvY3VzIGlucHV0IGludmFsaWQga2V5RG93biBrZXlQcmVzcyBrZXlVcCBtb3VzZURvd24gbW91c2VVcCBwYXN0ZSBwYXVzZSBwbGF5IHJhdGVDaGFuZ2UgcmVzZXQgc2Vla2VkIHN1Ym1pdCB0b3VjaENhbmNlbCB0b3VjaEVuZCB0b3VjaFN0YXJ0IHZvbHVtZUNoYW5nZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe1FkKGEsITApfSk7XG5cImFib3J0IGFuaW1hdGlvbkVuZCBhbmltYXRpb25JdGVyYXRpb24gYW5pbWF0aW9uU3RhcnQgY2FuUGxheSBjYW5QbGF5VGhyb3VnaCBkcmFnIGRyYWdFbnRlciBkcmFnRXhpdCBkcmFnTGVhdmUgZHJhZ092ZXIgZHVyYXRpb25DaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgbG9hZCBsb2FkZWREYXRhIGxvYWRlZE1ldGFkYXRhIGxvYWRTdGFydCBtb3VzZU1vdmUgbW91c2VPdXQgbW91c2VPdmVyIHBsYXlpbmcgcHJvZ3Jlc3Mgc2Nyb2xsIHNlZWtpbmcgc3RhbGxlZCBzdXNwZW5kIHRpbWVVcGRhdGUgdG9nZ2xlIHRvdWNoTW92ZSB0cmFuc2l0aW9uRW5kIHdhaXRpbmcgd2hlZWxcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtRZChhLCExKX0pO1xudmFyIFJkPXtldmVudFR5cGVzOk9kLGlzSW50ZXJhY3RpdmVUb3BMZXZlbEV2ZW50VHlwZTpmdW5jdGlvbihhKXthPVBkW2FdO3JldHVybiB2b2lkIDAhPT1hJiYhMD09PWEuaXNJbnRlcmFjdGl2ZX0sZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1QZFthXTtpZighZSlyZXR1cm4gbnVsbDtzd2l0Y2goYSl7Y2FzZSBcInRvcEtleVByZXNzXCI6aWYoMD09PUdkKGMpKXJldHVybiBudWxsO2Nhc2UgXCJ0b3BLZXlEb3duXCI6Y2FzZSBcInRvcEtleVVwXCI6YT1KZDticmVhaztjYXNlIFwidG9wQmx1clwiOmNhc2UgXCJ0b3BGb2N1c1wiOmE9RmQ7YnJlYWs7Y2FzZSBcInRvcENsaWNrXCI6aWYoMj09PWMuYnV0dG9uKXJldHVybiBudWxsO2Nhc2UgXCJ0b3BEb3VibGVDbGlja1wiOmNhc2UgXCJ0b3BNb3VzZURvd25cIjpjYXNlIFwidG9wTW91c2VNb3ZlXCI6Y2FzZSBcInRvcE1vdXNlVXBcIjpjYXNlIFwidG9wTW91c2VPdXRcIjpjYXNlIFwidG9wTW91c2VPdmVyXCI6Y2FzZSBcInRvcENvbnRleHRNZW51XCI6YT1cbnVkO2JyZWFrO2Nhc2UgXCJ0b3BEcmFnXCI6Y2FzZSBcInRvcERyYWdFbmRcIjpjYXNlIFwidG9wRHJhZ0VudGVyXCI6Y2FzZSBcInRvcERyYWdFeGl0XCI6Y2FzZSBcInRvcERyYWdMZWF2ZVwiOmNhc2UgXCJ0b3BEcmFnT3ZlclwiOmNhc2UgXCJ0b3BEcmFnU3RhcnRcIjpjYXNlIFwidG9wRHJvcFwiOmE9S2Q7YnJlYWs7Y2FzZSBcInRvcFRvdWNoQ2FuY2VsXCI6Y2FzZSBcInRvcFRvdWNoRW5kXCI6Y2FzZSBcInRvcFRvdWNoTW92ZVwiOmNhc2UgXCJ0b3BUb3VjaFN0YXJ0XCI6YT1MZDticmVhaztjYXNlIFwidG9wQW5pbWF0aW9uRW5kXCI6Y2FzZSBcInRvcEFuaW1hdGlvbkl0ZXJhdGlvblwiOmNhc2UgXCJ0b3BBbmltYXRpb25TdGFydFwiOmE9RGQ7YnJlYWs7Y2FzZSBcInRvcFRyYW5zaXRpb25FbmRcIjphPU1kO2JyZWFrO2Nhc2UgXCJ0b3BTY3JvbGxcIjphPXFkO2JyZWFrO2Nhc2UgXCJ0b3BXaGVlbFwiOmE9TmQ7YnJlYWs7Y2FzZSBcInRvcENvcHlcIjpjYXNlIFwidG9wQ3V0XCI6Y2FzZSBcInRvcFBhc3RlXCI6YT1FZDticmVhaztkZWZhdWx0OmE9XG5OfWI9YS5nZXRQb29sZWQoZSxiLGMsZCk7aWIoYik7cmV0dXJuIGJ9fSxTZD1SZC5pc0ludGVyYWN0aXZlVG9wTGV2ZWxFdmVudFR5cGUsVGQ9W107ZnVuY3Rpb24gVWQoYSl7dmFyIGI9YS50YXJnZXRJbnN0O2Rve2lmKCFiKXthLmFuY2VzdG9ycy5wdXNoKGIpO2JyZWFrfXZhciBjO2ZvcihjPWI7Y1tcInJldHVyblwiXTspYz1jW1wicmV0dXJuXCJdO2M9MyE9PWMudGFnP251bGw6Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztpZighYylicmVhazthLmFuY2VzdG9ycy5wdXNoKGIpO2I9VWEoYyl9d2hpbGUoYik7Zm9yKGM9MDtjPGEuYW5jZXN0b3JzLmxlbmd0aDtjKyspYj1hLmFuY2VzdG9yc1tjXSxRYShhLnRvcExldmVsVHlwZSxiLGEubmF0aXZlRXZlbnQsaGMoYS5uYXRpdmVFdmVudCkpfXZhciBWZD0hMDtmdW5jdGlvbiBXZChhKXtWZD0hIWF9XG5mdW5jdGlvbiBXKGEsYixjKXtpZighYylyZXR1cm4gbnVsbDthPShTZChhKT9YZDpZZCkuYmluZChudWxsLGEpO2MuYWRkRXZlbnRMaXN0ZW5lcihiLGEsITEpfWZ1bmN0aW9uIFpkKGEsYixjKXtpZighYylyZXR1cm4gbnVsbDthPShTZChhKT9YZDpZZCkuYmluZChudWxsLGEpO2MuYWRkRXZlbnRMaXN0ZW5lcihiLGEsITApfWZ1bmN0aW9uIFhkKGEsYil7YmMoWWQsYSxiKX1cbmZ1bmN0aW9uIFlkKGEsYil7aWYoVmQpe3ZhciBjPWhjKGIpO2M9VWEoYyk7bnVsbCE9PWMmJlwibnVtYmVyXCI9PT10eXBlb2YgYy50YWcmJjIhPT14ZChjKSYmKGM9bnVsbCk7aWYoVGQubGVuZ3RoKXt2YXIgZD1UZC5wb3AoKTtkLnRvcExldmVsVHlwZT1hO2QubmF0aXZlRXZlbnQ9YjtkLnRhcmdldEluc3Q9YzthPWR9ZWxzZSBhPXt0b3BMZXZlbFR5cGU6YSxuYXRpdmVFdmVudDpiLHRhcmdldEluc3Q6YyxhbmNlc3RvcnM6W119O3RyeXtlYyhVZCxhKX1maW5hbGx5e2EudG9wTGV2ZWxUeXBlPW51bGwsYS5uYXRpdmVFdmVudD1udWxsLGEudGFyZ2V0SW5zdD1udWxsLGEuYW5jZXN0b3JzLmxlbmd0aD0wLDEwPlRkLmxlbmd0aCYmVGQucHVzaChhKX19fVxudmFyICRkPU9iamVjdC5mcmVlemUoe2dldCBfZW5hYmxlZCgpe3JldHVybiBWZH0sc2V0RW5hYmxlZDpXZCxpc0VuYWJsZWQ6ZnVuY3Rpb24oKXtyZXR1cm4gVmR9LHRyYXBCdWJibGVkRXZlbnQ6Vyx0cmFwQ2FwdHVyZWRFdmVudDpaZCxkaXNwYXRjaEV2ZW50OllkfSk7ZnVuY3Rpb24gYWUoYSxiKXt2YXIgYz17fTtjW2EudG9Mb3dlckNhc2UoKV09Yi50b0xvd2VyQ2FzZSgpO2NbXCJXZWJraXRcIithXT1cIndlYmtpdFwiK2I7Y1tcIk1velwiK2FdPVwibW96XCIrYjtjW1wibXNcIithXT1cIk1TXCIrYjtjW1wiT1wiK2FdPVwib1wiK2IudG9Mb3dlckNhc2UoKTtyZXR1cm4gY31cbnZhciBiZT17YW5pbWF0aW9uZW5kOmFlKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25FbmRcIiksYW5pbWF0aW9uaXRlcmF0aW9uOmFlKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25JdGVyYXRpb25cIiksYW5pbWF0aW9uc3RhcnQ6YWUoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvblN0YXJ0XCIpLHRyYW5zaXRpb25lbmQ6YWUoXCJUcmFuc2l0aW9uXCIsXCJUcmFuc2l0aW9uRW5kXCIpfSxjZT17fSxkZT17fTttLmNhblVzZURPTSYmKGRlPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGUsXCJBbmltYXRpb25FdmVudFwiaW4gd2luZG93fHwoZGVsZXRlIGJlLmFuaW1hdGlvbmVuZC5hbmltYXRpb24sZGVsZXRlIGJlLmFuaW1hdGlvbml0ZXJhdGlvbi5hbmltYXRpb24sZGVsZXRlIGJlLmFuaW1hdGlvbnN0YXJ0LmFuaW1hdGlvbiksXCJUcmFuc2l0aW9uRXZlbnRcImluIHdpbmRvd3x8ZGVsZXRlIGJlLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbik7XG5mdW5jdGlvbiBlZShhKXtpZihjZVthXSlyZXR1cm4gY2VbYV07aWYoIWJlW2FdKXJldHVybiBhO3ZhciBiPWJlW2FdLGM7Zm9yKGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpJiZjIGluIGRlKXJldHVybiBjZVthXT1iW2NdO3JldHVybiBhfVxudmFyIGZlPXt0b3BBbmltYXRpb25FbmQ6ZWUoXCJhbmltYXRpb25lbmRcIiksdG9wQW5pbWF0aW9uSXRlcmF0aW9uOmVlKFwiYW5pbWF0aW9uaXRlcmF0aW9uXCIpLHRvcEFuaW1hdGlvblN0YXJ0OmVlKFwiYW5pbWF0aW9uc3RhcnRcIiksdG9wQmx1cjpcImJsdXJcIix0b3BDYW5jZWw6XCJjYW5jZWxcIix0b3BDaGFuZ2U6XCJjaGFuZ2VcIix0b3BDbGljazpcImNsaWNrXCIsdG9wQ2xvc2U6XCJjbG9zZVwiLHRvcENvbXBvc2l0aW9uRW5kOlwiY29tcG9zaXRpb25lbmRcIix0b3BDb21wb3NpdGlvblN0YXJ0OlwiY29tcG9zaXRpb25zdGFydFwiLHRvcENvbXBvc2l0aW9uVXBkYXRlOlwiY29tcG9zaXRpb251cGRhdGVcIix0b3BDb250ZXh0TWVudTpcImNvbnRleHRtZW51XCIsdG9wQ29weTpcImNvcHlcIix0b3BDdXQ6XCJjdXRcIix0b3BEb3VibGVDbGljazpcImRibGNsaWNrXCIsdG9wRHJhZzpcImRyYWdcIix0b3BEcmFnRW5kOlwiZHJhZ2VuZFwiLHRvcERyYWdFbnRlcjpcImRyYWdlbnRlclwiLHRvcERyYWdFeGl0OlwiZHJhZ2V4aXRcIix0b3BEcmFnTGVhdmU6XCJkcmFnbGVhdmVcIixcbnRvcERyYWdPdmVyOlwiZHJhZ292ZXJcIix0b3BEcmFnU3RhcnQ6XCJkcmFnc3RhcnRcIix0b3BEcm9wOlwiZHJvcFwiLHRvcEZvY3VzOlwiZm9jdXNcIix0b3BJbnB1dDpcImlucHV0XCIsdG9wS2V5RG93bjpcImtleWRvd25cIix0b3BLZXlQcmVzczpcImtleXByZXNzXCIsdG9wS2V5VXA6XCJrZXl1cFwiLHRvcExvYWQ6XCJsb2FkXCIsdG9wTG9hZFN0YXJ0OlwibG9hZHN0YXJ0XCIsdG9wTW91c2VEb3duOlwibW91c2Vkb3duXCIsdG9wTW91c2VNb3ZlOlwibW91c2Vtb3ZlXCIsdG9wTW91c2VPdXQ6XCJtb3VzZW91dFwiLHRvcE1vdXNlT3ZlcjpcIm1vdXNlb3ZlclwiLHRvcE1vdXNlVXA6XCJtb3VzZXVwXCIsdG9wUGFzdGU6XCJwYXN0ZVwiLHRvcFNjcm9sbDpcInNjcm9sbFwiLHRvcFNlbGVjdGlvbkNoYW5nZTpcInNlbGVjdGlvbmNoYW5nZVwiLHRvcFRleHRJbnB1dDpcInRleHRJbnB1dFwiLHRvcFRvZ2dsZTpcInRvZ2dsZVwiLHRvcFRvdWNoQ2FuY2VsOlwidG91Y2hjYW5jZWxcIix0b3BUb3VjaEVuZDpcInRvdWNoZW5kXCIsdG9wVG91Y2hNb3ZlOlwidG91Y2htb3ZlXCIsXG50b3BUb3VjaFN0YXJ0OlwidG91Y2hzdGFydFwiLHRvcFRyYW5zaXRpb25FbmQ6ZWUoXCJ0cmFuc2l0aW9uZW5kXCIpLHRvcFdoZWVsOlwid2hlZWxcIn0sZ2U9e3RvcEFib3J0OlwiYWJvcnRcIix0b3BDYW5QbGF5OlwiY2FucGxheVwiLHRvcENhblBsYXlUaHJvdWdoOlwiY2FucGxheXRocm91Z2hcIix0b3BEdXJhdGlvbkNoYW5nZTpcImR1cmF0aW9uY2hhbmdlXCIsdG9wRW1wdGllZDpcImVtcHRpZWRcIix0b3BFbmNyeXB0ZWQ6XCJlbmNyeXB0ZWRcIix0b3BFbmRlZDpcImVuZGVkXCIsdG9wRXJyb3I6XCJlcnJvclwiLHRvcExvYWRlZERhdGE6XCJsb2FkZWRkYXRhXCIsdG9wTG9hZGVkTWV0YWRhdGE6XCJsb2FkZWRtZXRhZGF0YVwiLHRvcExvYWRTdGFydDpcImxvYWRzdGFydFwiLHRvcFBhdXNlOlwicGF1c2VcIix0b3BQbGF5OlwicGxheVwiLHRvcFBsYXlpbmc6XCJwbGF5aW5nXCIsdG9wUHJvZ3Jlc3M6XCJwcm9ncmVzc1wiLHRvcFJhdGVDaGFuZ2U6XCJyYXRlY2hhbmdlXCIsdG9wU2Vla2VkOlwic2Vla2VkXCIsdG9wU2Vla2luZzpcInNlZWtpbmdcIixcbnRvcFN0YWxsZWQ6XCJzdGFsbGVkXCIsdG9wU3VzcGVuZDpcInN1c3BlbmRcIix0b3BUaW1lVXBkYXRlOlwidGltZXVwZGF0ZVwiLHRvcFZvbHVtZUNoYW5nZTpcInZvbHVtZWNoYW5nZVwiLHRvcFdhaXRpbmc6XCJ3YWl0aW5nXCJ9LGhlPXt9LGllPTAsamU9XCJfcmVhY3RMaXN0ZW5lcnNJRFwiKyhcIlwiK01hdGgucmFuZG9tKCkpLnNsaWNlKDIpO2Z1bmN0aW9uIGtlKGEpe09iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChhLGplKXx8KGFbamVdPWllKyssaGVbYVtqZV1dPXt9KTtyZXR1cm4gaGVbYVtqZV1dfWZ1bmN0aW9uIGxlKGEpe2Zvcig7YSYmYS5maXJzdENoaWxkOylhPWEuZmlyc3RDaGlsZDtyZXR1cm4gYX1cbmZ1bmN0aW9uIG1lKGEsYil7dmFyIGM9bGUoYSk7YT0wO2Zvcih2YXIgZDtjOyl7aWYoMz09PWMubm9kZVR5cGUpe2Q9YStjLnRleHRDb250ZW50Lmxlbmd0aDtpZihhPD1iJiZkPj1iKXJldHVybntub2RlOmMsb2Zmc2V0OmItYX07YT1kfWE6e2Zvcig7Yzspe2lmKGMubmV4dFNpYmxpbmcpe2M9Yy5uZXh0U2libGluZzticmVhayBhfWM9Yy5wYXJlbnROb2RlfWM9dm9pZCAwfWM9bGUoYyl9fWZ1bmN0aW9uIG5lKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm4gYiYmKFwiaW5wdXRcIj09PWImJlwidGV4dFwiPT09YS50eXBlfHxcInRleHRhcmVhXCI9PT1ifHxcInRydWVcIj09PWEuY29udGVudEVkaXRhYmxlKX1cbnZhciBvZT1tLmNhblVzZURPTSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYxMT49ZG9jdW1lbnQuZG9jdW1lbnRNb2RlLHBlPXtzZWxlY3Q6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25TZWxlY3RcIixjYXB0dXJlZDpcIm9uU2VsZWN0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJ0b3BCbHVyIHRvcENvbnRleHRNZW51IHRvcEZvY3VzIHRvcEtleURvd24gdG9wS2V5VXAgdG9wTW91c2VEb3duIHRvcE1vdXNlVXAgdG9wU2VsZWN0aW9uQ2hhbmdlXCIuc3BsaXQoXCIgXCIpfX0scWU9bnVsbCxyZT1udWxsLHNlPW51bGwsdGU9ITE7XG5mdW5jdGlvbiB1ZShhLGIpe2lmKHRlfHxudWxsPT1xZXx8cWUhPT1mYSgpKXJldHVybiBudWxsO3ZhciBjPXFlO1wic2VsZWN0aW9uU3RhcnRcImluIGMmJm5lKGMpP2M9e3N0YXJ0OmMuc2VsZWN0aW9uU3RhcnQsZW5kOmMuc2VsZWN0aW9uRW5kfTp3aW5kb3cuZ2V0U2VsZWN0aW9uPyhjPXdpbmRvdy5nZXRTZWxlY3Rpb24oKSxjPXthbmNob3JOb2RlOmMuYW5jaG9yTm9kZSxhbmNob3JPZmZzZXQ6Yy5hbmNob3JPZmZzZXQsZm9jdXNOb2RlOmMuZm9jdXNOb2RlLGZvY3VzT2Zmc2V0OmMuZm9jdXNPZmZzZXR9KTpjPXZvaWQgMDtyZXR1cm4gc2UmJmhhKHNlLGMpP251bGw6KHNlPWMsYT1OLmdldFBvb2xlZChwZS5zZWxlY3QscmUsYSxiKSxhLnR5cGU9XCJzZWxlY3RcIixhLnRhcmdldD1xZSxpYihhKSxhKX1cbnZhciB2ZT17ZXZlbnRUeXBlczpwZSxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWQud2luZG93PT09ZD9kLmRvY3VtZW50Ojk9PT1kLm5vZGVUeXBlP2Q6ZC5vd25lckRvY3VtZW50LGY7aWYoIShmPSFlKSl7YTp7ZT1rZShlKTtmPXZhLm9uU2VsZWN0O2Zvcih2YXIgaD0wO2g8Zi5sZW5ndGg7aCsrKXt2YXIgZz1mW2hdO2lmKCFlLmhhc093blByb3BlcnR5KGcpfHwhZVtnXSl7ZT0hMTticmVhayBhfX1lPSEwfWY9IWV9aWYoZilyZXR1cm4gbnVsbDtlPWI/VmEoYik6d2luZG93O3N3aXRjaChhKXtjYXNlIFwidG9wRm9jdXNcIjppZihnYyhlKXx8XCJ0cnVlXCI9PT1lLmNvbnRlbnRFZGl0YWJsZSlxZT1lLHJlPWIsc2U9bnVsbDticmVhaztjYXNlIFwidG9wQmx1clwiOnNlPXJlPXFlPW51bGw7YnJlYWs7Y2FzZSBcInRvcE1vdXNlRG93blwiOnRlPSEwO2JyZWFrO2Nhc2UgXCJ0b3BDb250ZXh0TWVudVwiOmNhc2UgXCJ0b3BNb3VzZVVwXCI6cmV0dXJuIHRlPSExLHVlKGMsZCk7Y2FzZSBcInRvcFNlbGVjdGlvbkNoYW5nZVwiOmlmKG9lKWJyZWFrO1xuY2FzZSBcInRvcEtleURvd25cIjpjYXNlIFwidG9wS2V5VXBcIjpyZXR1cm4gdWUoYyxkKX1yZXR1cm4gbnVsbH19O05hLmluamVjdEV2ZW50UGx1Z2luT3JkZXIoXCJSZXNwb25kZXJFdmVudFBsdWdpbiBTaW1wbGVFdmVudFBsdWdpbiBUYXBFdmVudFBsdWdpbiBFbnRlckxlYXZlRXZlbnRQbHVnaW4gQ2hhbmdlRXZlbnRQbHVnaW4gU2VsZWN0RXZlbnRQbHVnaW4gQmVmb3JlSW5wdXRFdmVudFBsdWdpblwiLnNwbGl0KFwiIFwiKSk7RGE9YmIuZ2V0RmliZXJDdXJyZW50UHJvcHNGcm9tTm9kZTtFYT1iYi5nZXRJbnN0YW5jZUZyb21Ob2RlO0ZhPWJiLmdldE5vZGVGcm9tSW5zdGFuY2U7TmEuaW5qZWN0RXZlbnRQbHVnaW5zQnlOYW1lKHtTaW1wbGVFdmVudFBsdWdpbjpSZCxFbnRlckxlYXZlRXZlbnRQbHVnaW46d2QsQ2hhbmdlRXZlbnRQbHVnaW46cGQsU2VsZWN0RXZlbnRQbHVnaW46dmUsQmVmb3JlSW5wdXRFdmVudFBsdWdpbjpSYn0pO1xuZnVuY3Rpb24geGUoYSxiLGMsZCl7dGhpcy50YWc9YTt0aGlzLmtleT1jO3RoaXMuc3RhdGVOb2RlPXRoaXMudHlwZT1udWxsO3RoaXMuc2libGluZz10aGlzLmNoaWxkPXRoaXNbXCJyZXR1cm5cIl09bnVsbDt0aGlzLmluZGV4PTA7dGhpcy5yZWY9bnVsbDt0aGlzLnBlbmRpbmdQcm9wcz1iO3RoaXMubWVtb2l6ZWRTdGF0ZT10aGlzLnVwZGF0ZVF1ZXVlPXRoaXMubWVtb2l6ZWRQcm9wcz1udWxsO3RoaXMubW9kZT1kO3RoaXMuZWZmZWN0VGFnPTA7dGhpcy5sYXN0RWZmZWN0PXRoaXMuZmlyc3RFZmZlY3Q9dGhpcy5uZXh0RWZmZWN0PW51bGw7dGhpcy5leHBpcmF0aW9uVGltZT0wO3RoaXMuYWx0ZXJuYXRlPW51bGx9XG5mdW5jdGlvbiB6ZShhLGIsYyl7dmFyIGQ9YS5hbHRlcm5hdGU7bnVsbD09PWQ/KGQ9bmV3IHhlKGEudGFnLGIsYS5rZXksYS5tb2RlKSxkLnR5cGU9YS50eXBlLGQuc3RhdGVOb2RlPWEuc3RhdGVOb2RlLGQuYWx0ZXJuYXRlPWEsYS5hbHRlcm5hdGU9ZCk6KGQucGVuZGluZ1Byb3BzPWIsZC5lZmZlY3RUYWc9MCxkLm5leHRFZmZlY3Q9bnVsbCxkLmZpcnN0RWZmZWN0PW51bGwsZC5sYXN0RWZmZWN0PW51bGwpO2QuZXhwaXJhdGlvblRpbWU9YztkLmNoaWxkPWEuY2hpbGQ7ZC5tZW1vaXplZFByb3BzPWEubWVtb2l6ZWRQcm9wcztkLm1lbW9pemVkU3RhdGU9YS5tZW1vaXplZFN0YXRlO2QudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZTtkLnNpYmxpbmc9YS5zaWJsaW5nO2QuaW5kZXg9YS5pbmRleDtkLnJlZj1hLnJlZjtyZXR1cm4gZH1cbmZ1bmN0aW9uIEFlKGEsYixjKXt2YXIgZD1hLnR5cGUsZT1hLmtleTthPWEucHJvcHM7dmFyIGY9dm9pZCAwO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKWY9ZC5wcm90b3R5cGUmJmQucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ/MjowO2Vsc2UgaWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkKWY9NTtlbHNlIHN3aXRjaChkKXtjYXNlIHNjOnJldHVybiBCZShhLmNoaWxkcmVuLGIsYyxlKTtjYXNlIHdjOmY9MTE7Ynw9MzticmVhaztjYXNlIHRjOmY9MTE7Ynw9MjticmVhaztjYXNlIHBjOmY9NzticmVhaztjYXNlIHFjOmY9OTticmVhaztkZWZhdWx0OmlmKFwib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQpc3dpdGNoKGQuJCR0eXBlb2Ype2Nhc2UgdWM6Zj0xMzticmVhaztjYXNlIHZjOmY9MTI7YnJlYWs7Y2FzZSB4YzpmPTE0O2JyZWFrO2RlZmF1bHQ6aWYoXCJudW1iZXJcIj09PXR5cGVvZiBkLnRhZylyZXR1cm4gYj1kLGIucGVuZGluZ1Byb3BzPWEsYi5leHBpcmF0aW9uVGltZT1jLFxuYjtEKFwiMTMwXCIsbnVsbD09ZD9kOnR5cGVvZiBkLFwiXCIpfWVsc2UgRChcIjEzMFwiLG51bGw9PWQ/ZDp0eXBlb2YgZCxcIlwiKX1iPW5ldyB4ZShmLGEsZSxiKTtiLnR5cGU9ZDtiLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGJ9ZnVuY3Rpb24gQmUoYSxiLGMsZCl7YT1uZXcgeGUoMTAsYSxkLGIpO2EuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYX1mdW5jdGlvbiBDZShhLGIsYyl7YT1uZXcgeGUoNixhLG51bGwsYik7YS5leHBpcmF0aW9uVGltZT1jO3JldHVybiBhfWZ1bmN0aW9uIERlKGEsYixjKXtiPW5ldyB4ZSg0LG51bGwhPT1hLmNoaWxkcmVuP2EuY2hpbGRyZW46W10sYS5rZXksYik7Yi5leHBpcmF0aW9uVGltZT1jO2Iuc3RhdGVOb2RlPXtjb250YWluZXJJbmZvOmEuY29udGFpbmVySW5mbyxwZW5kaW5nQ2hpbGRyZW46bnVsbCxpbXBsZW1lbnRhdGlvbjphLmltcGxlbWVudGF0aW9ufTtyZXR1cm4gYn12YXIgRWU9bnVsbCxGZT1udWxsO1xuZnVuY3Rpb24gR2UoYSl7cmV0dXJuIGZ1bmN0aW9uKGIpe3RyeXtyZXR1cm4gYShiKX1jYXRjaChjKXt9fX1mdW5jdGlvbiBIZShhKXtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXylyZXR1cm4hMTt2YXIgYj1fX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX187aWYoYi5pc0Rpc2FibGVkfHwhYi5zdXBwb3J0c0ZpYmVyKXJldHVybiEwO3RyeXt2YXIgYz1iLmluamVjdChhKTtFZT1HZShmdW5jdGlvbihhKXtyZXR1cm4gYi5vbkNvbW1pdEZpYmVyUm9vdChjLGEpfSk7RmU9R2UoZnVuY3Rpb24oYSl7cmV0dXJuIGIub25Db21taXRGaWJlclVubW91bnQoYyxhKX0pfWNhdGNoKGQpe31yZXR1cm4hMH1mdW5jdGlvbiBJZShhKXtcImZ1bmN0aW9uXCI9PT10eXBlb2YgRWUmJkVlKGEpfWZ1bmN0aW9uIEplKGEpe1wiZnVuY3Rpb25cIj09PXR5cGVvZiBGZSYmRmUoYSl9bmV3IFNldDtcbmZ1bmN0aW9uIEtlKGEpe3JldHVybntiYXNlU3RhdGU6YSxleHBpcmF0aW9uVGltZTowLGZpcnN0Om51bGwsbGFzdDpudWxsLGNhbGxiYWNrTGlzdDpudWxsLGhhc0ZvcmNlVXBkYXRlOiExLGlzSW5pdGlhbGl6ZWQ6ITEsY2FwdHVyZWRWYWx1ZXM6bnVsbH19ZnVuY3Rpb24gTGUoYSxiKXtudWxsPT09YS5sYXN0P2EuZmlyc3Q9YS5sYXN0PWI6KGEubGFzdC5uZXh0PWIsYS5sYXN0PWIpO2lmKDA9PT1hLmV4cGlyYXRpb25UaW1lfHxhLmV4cGlyYXRpb25UaW1lPmIuZXhwaXJhdGlvblRpbWUpYS5leHBpcmF0aW9uVGltZT1iLmV4cGlyYXRpb25UaW1lfXZhciBNZT12b2lkIDAsTmU9dm9pZCAwO1xuZnVuY3Rpb24gT2UoYSl7TWU9TmU9bnVsbDt2YXIgYj1hLmFsdGVybmF0ZSxjPWEudXBkYXRlUXVldWU7bnVsbD09PWMmJihjPWEudXBkYXRlUXVldWU9S2UobnVsbCkpO251bGwhPT1iPyhhPWIudXBkYXRlUXVldWUsbnVsbD09PWEmJihhPWIudXBkYXRlUXVldWU9S2UobnVsbCkpKTphPW51bGw7TWU9YztOZT1hIT09Yz9hOm51bGx9ZnVuY3Rpb24gUGUoYSxiKXtPZShhKTthPU1lO3ZhciBjPU5lO251bGw9PT1jP0xlKGEsYik6bnVsbD09PWEubGFzdHx8bnVsbD09PWMubGFzdD8oTGUoYSxiKSxMZShjLGIpKTooTGUoYSxiKSxjLmxhc3Q9Yil9ZnVuY3Rpb24gUWUoYSxiLGMsZCl7YT1hLnBhcnRpYWxTdGF0ZTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hLmNhbGwoYixjLGQpOmF9XG5mdW5jdGlvbiBSZShhLGIsYyxkLGUsZil7bnVsbCE9PWEmJmEudXBkYXRlUXVldWU9PT1jJiYoYz1iLnVwZGF0ZVF1ZXVlPXtiYXNlU3RhdGU6Yy5iYXNlU3RhdGUsZXhwaXJhdGlvblRpbWU6Yy5leHBpcmF0aW9uVGltZSxmaXJzdDpjLmZpcnN0LGxhc3Q6Yy5sYXN0LGlzSW5pdGlhbGl6ZWQ6Yy5pc0luaXRpYWxpemVkLGNhcHR1cmVkVmFsdWVzOmMuY2FwdHVyZWRWYWx1ZXMsY2FsbGJhY2tMaXN0Om51bGwsaGFzRm9yY2VVcGRhdGU6ITF9KTtjLmV4cGlyYXRpb25UaW1lPTA7Yy5pc0luaXRpYWxpemVkP2E9Yy5iYXNlU3RhdGU6KGE9Yy5iYXNlU3RhdGU9Yi5tZW1vaXplZFN0YXRlLGMuaXNJbml0aWFsaXplZD0hMCk7Zm9yKHZhciBoPSEwLGc9Yy5maXJzdCxrPSExO251bGwhPT1nOyl7dmFyIHY9Zy5leHBpcmF0aW9uVGltZTtpZih2PmYpe3ZhciBsPWMuZXhwaXJhdGlvblRpbWU7aWYoMD09PWx8fGw+diljLmV4cGlyYXRpb25UaW1lPXY7a3x8KGs9ITAsYy5iYXNlU3RhdGU9YSl9ZWxzZXtrfHxcbihjLmZpcnN0PWcubmV4dCxudWxsPT09Yy5maXJzdCYmKGMubGFzdD1udWxsKSk7aWYoZy5pc1JlcGxhY2UpYT1RZShnLGQsYSxlKSxoPSEwO2Vsc2UgaWYodj1RZShnLGQsYSxlKSlhPWg/QSh7fSxhLHYpOkEoYSx2KSxoPSExO2cuaXNGb3JjZWQmJihjLmhhc0ZvcmNlVXBkYXRlPSEwKTtudWxsIT09Zy5jYWxsYmFjayYmKHY9Yy5jYWxsYmFja0xpc3QsbnVsbD09PXYmJih2PWMuY2FsbGJhY2tMaXN0PVtdKSx2LnB1c2goZykpO251bGwhPT1nLmNhcHR1cmVkVmFsdWUmJih2PWMuY2FwdHVyZWRWYWx1ZXMsbnVsbD09PXY/Yy5jYXB0dXJlZFZhbHVlcz1bZy5jYXB0dXJlZFZhbHVlXTp2LnB1c2goZy5jYXB0dXJlZFZhbHVlKSl9Zz1nLm5leHR9bnVsbCE9PWMuY2FsbGJhY2tMaXN0P2IuZWZmZWN0VGFnfD0zMjpudWxsIT09Yy5maXJzdHx8Yy5oYXNGb3JjZVVwZGF0ZXx8bnVsbCE9PWMuY2FwdHVyZWRWYWx1ZXN8fChiLnVwZGF0ZVF1ZXVlPW51bGwpO2t8fChjLmJhc2VTdGF0ZT1hKTtcbnJldHVybiBhfWZ1bmN0aW9uIFNlKGEsYil7dmFyIGM9YS5jYWxsYmFja0xpc3Q7aWYobnVsbCE9PWMpZm9yKGEuY2FsbGJhY2tMaXN0PW51bGwsYT0wO2E8Yy5sZW5ndGg7YSsrKXt2YXIgZD1jW2FdLGU9ZC5jYWxsYmFjaztkLmNhbGxiYWNrPW51bGw7XCJmdW5jdGlvblwiIT09dHlwZW9mIGU/RChcIjE5MVwiLGUpOnZvaWQgMDtlLmNhbGwoYil9fVxuZnVuY3Rpb24gVGUoYSxiLGMsZCxlKXtmdW5jdGlvbiBmKGEsYixjLGQsZSxmKXtpZihudWxsPT09Ynx8bnVsbCE9PWEudXBkYXRlUXVldWUmJmEudXBkYXRlUXVldWUuaGFzRm9yY2VVcGRhdGUpcmV0dXJuITA7dmFyIG49YS5zdGF0ZU5vZGU7YT1hLnR5cGU7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIG4uc2hvdWxkQ29tcG9uZW50VXBkYXRlP24uc2hvdWxkQ29tcG9uZW50VXBkYXRlKGMsZSxmKTphLnByb3RvdHlwZSYmYS5wcm90b3R5cGUuaXNQdXJlUmVhY3RDb21wb25lbnQ/IWhhKGIsYyl8fCFoYShkLGUpOiEwfWZ1bmN0aW9uIGgoYSxiKXtiLnVwZGF0ZXI9cjthLnN0YXRlTm9kZT1iO2IuX3JlYWN0SW50ZXJuYWxGaWJlcj1hfWZ1bmN0aW9uIGcoYSxiLGMsZCl7YT1iLnN0YXRlO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcbmIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtiLnN0YXRlIT09YSYmci5lbnF1ZXVlUmVwbGFjZVN0YXRlKGIsYi5zdGF0ZSxudWxsKX1mdW5jdGlvbiBrKGEsYixjLGQpe2E9YS50eXBlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcylyZXR1cm4gYS5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMuY2FsbChudWxsLGMsZCl9dmFyIHY9YS5jYWNoZUNvbnRleHQsbD1hLmdldE1hc2tlZENvbnRleHQscD1hLmdldFVubWFza2VkQ29udGV4dCx6PWEuaXNDb250ZXh0Q29uc3VtZXIsQj1hLmhhc0NvbnRleHRDaGFuZ2VkLHI9e2lzTW91bnRlZDp5ZCxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oYSxkLGUpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO2U9dm9pZCAwPT09ZT9udWxsOmU7dmFyIGY9YyhhKTtQZShhLHtleHBpcmF0aW9uVGltZTpmLHBhcnRpYWxTdGF0ZTpkLGNhbGxiYWNrOmUsaXNSZXBsYWNlOiExLGlzRm9yY2VkOiExLFxuY2FwdHVyZWRWYWx1ZTpudWxsLG5leHQ6bnVsbH0pO2IoYSxmKX0sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbihhLGQsZSl7YT1hLl9yZWFjdEludGVybmFsRmliZXI7ZT12b2lkIDA9PT1lP251bGw6ZTt2YXIgZj1jKGEpO1BlKGEse2V4cGlyYXRpb25UaW1lOmYscGFydGlhbFN0YXRlOmQsY2FsbGJhY2s6ZSxpc1JlcGxhY2U6ITAsaXNGb3JjZWQ6ITEsY2FwdHVyZWRWYWx1ZTpudWxsLG5leHQ6bnVsbH0pO2IoYSxmKX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKGEsZCl7YT1hLl9yZWFjdEludGVybmFsRmliZXI7ZD12b2lkIDA9PT1kP251bGw6ZDt2YXIgZT1jKGEpO1BlKGEse2V4cGlyYXRpb25UaW1lOmUscGFydGlhbFN0YXRlOm51bGwsY2FsbGJhY2s6ZCxpc1JlcGxhY2U6ITEsaXNGb3JjZWQ6ITAsY2FwdHVyZWRWYWx1ZTpudWxsLG5leHQ6bnVsbH0pO2IoYSxlKX19O3JldHVybnthZG9wdENsYXNzSW5zdGFuY2U6aCxjYWxsR2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOmssXG5jb25zdHJ1Y3RDbGFzc0luc3RhbmNlOmZ1bmN0aW9uKGEsYil7dmFyIGM9YS50eXBlLGQ9cChhKSxlPXooYSksZj1lP2woYSxkKTprYTtjPW5ldyBjKGIsZik7dmFyIG49bnVsbCE9PWMuc3RhdGUmJnZvaWQgMCE9PWMuc3RhdGU/Yy5zdGF0ZTpudWxsO2goYSxjKTthLm1lbW9pemVkU3RhdGU9bjtiPWsoYSxjLGIsbik7bnVsbCE9PWImJnZvaWQgMCE9PWImJihhLm1lbW9pemVkU3RhdGU9QSh7fSxhLm1lbW9pemVkU3RhdGUsYikpO2UmJnYoYSxkLGYpO3JldHVybiBjfSxtb3VudENsYXNzSW5zdGFuY2U6ZnVuY3Rpb24oYSxiKXt2YXIgYz1hLnR5cGUsZD1hLmFsdGVybmF0ZSxlPWEuc3RhdGVOb2RlLGY9YS5wZW5kaW5nUHJvcHMsbj1wKGEpO2UucHJvcHM9ZjtlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtlLnJlZnM9a2E7ZS5jb250ZXh0PWwoYSxuKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHN8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxcblwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudHx8KGM9ZS5zdGF0ZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnQmJmUuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCksYyE9PWUuc3RhdGUmJnIuZW5xdWV1ZVJlcGxhY2VTdGF0ZShlLGUuc3RhdGUsbnVsbCksYz1hLnVwZGF0ZVF1ZXVlLG51bGwhPT1jJiYoZS5zdGF0ZT1SZShkLGEsYyxlLGYsYikpKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnREaWRNb3VudCYmKGEuZWZmZWN0VGFnfD00KX0scmVzdW1lTW91bnRDbGFzc0luc3RhbmNlOmZ1bmN0aW9uKGEsYil7dmFyIGM9YS50eXBlLG49YS5zdGF0ZU5vZGU7bi5wcm9wcz1hLm1lbW9pemVkUHJvcHM7bi5zdGF0ZT1cbmEubWVtb2l6ZWRTdGF0ZTt2YXIgaD1hLm1lbW9pemVkUHJvcHMscj1hLnBlbmRpbmdQcm9wcyx6PW4uY29udGV4dCxxPXAoYSk7cT1sKGEscSk7KGM9XCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzfHxcImZ1bmN0aW9uXCI9PT10eXBlb2Ygbi5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSl8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBuLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcImZ1bmN0aW9uXCIhPT10eXBlb2Ygbi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PXJ8fHohPT1xKSYmZyhhLG4scixxKTt6PWEubWVtb2l6ZWRTdGF0ZTtiPW51bGwhPT1hLnVwZGF0ZVF1ZXVlP1JlKG51bGwsYSxhLnVwZGF0ZVF1ZXVlLG4scixiKTp6O3ZhciB1PXZvaWQgMDtoIT09ciYmKHU9ayhhLG4scixiKSk7aWYobnVsbCE9PXUmJnZvaWQgMCE9PXUpe2I9bnVsbD09PWJ8fHZvaWQgMD09PWI/dTpBKHt9LGIsdSk7dmFyIHQ9YS51cGRhdGVRdWV1ZTtcbm51bGwhPT10JiYodC5iYXNlU3RhdGU9QSh7fSx0LmJhc2VTdGF0ZSx1KSl9aWYoIShoIT09cnx8eiE9PWJ8fEIoKXx8bnVsbCE9PWEudXBkYXRlUXVldWUmJmEudXBkYXRlUXVldWUuaGFzRm9yY2VVcGRhdGUpKXJldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBuLmNvbXBvbmVudERpZE1vdW50JiYoYS5lZmZlY3RUYWd8PTQpLCExOyhoPWYoYSxoLHIseixiLHEpKT8oY3x8XCJmdW5jdGlvblwiIT09dHlwZW9mIG4uVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIG4uY29tcG9uZW50V2lsbE1vdW50fHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIG4uY29tcG9uZW50V2lsbE1vdW50JiZuLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBuLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJm4uVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpKSxcImZ1bmN0aW9uXCI9PT10eXBlb2Ygbi5jb21wb25lbnREaWRNb3VudCYmKGEuZWZmZWN0VGFnfD1cbjQpKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIG4uY29tcG9uZW50RGlkTW91bnQmJihhLmVmZmVjdFRhZ3w9NCksZChhLHIpLGUoYSxiKSk7bi5wcm9wcz1yO24uc3RhdGU9YjtuLmNvbnRleHQ9cTtyZXR1cm4gaH0sdXBkYXRlQ2xhc3NJbnN0YW5jZTpmdW5jdGlvbihhLGIsYyl7dmFyIG49Yi50eXBlLHg9Yi5zdGF0ZU5vZGU7eC5wcm9wcz1iLm1lbW9pemVkUHJvcHM7eC5zdGF0ZT1iLm1lbW9pemVkU3RhdGU7dmFyIGg9Yi5tZW1vaXplZFByb3BzLHI9Yi5wZW5kaW5nUHJvcHMscT14LmNvbnRleHQsdT1wKGIpO3U9bChiLHUpOyhuPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBuLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc3x8XCJmdW5jdGlvblwiPT09dHlwZW9mIHguZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUpfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgeC5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIHguY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8XG4oaCE9PXJ8fHEhPT11KSYmZyhiLHgscix1KTtxPWIubWVtb2l6ZWRTdGF0ZTtjPW51bGwhPT1iLnVwZGF0ZVF1ZXVlP1JlKGEsYixiLnVwZGF0ZVF1ZXVlLHgscixjKTpxO3ZhciB0PXZvaWQgMDtoIT09ciYmKHQ9ayhiLHgscixjKSk7aWYobnVsbCE9PXQmJnZvaWQgMCE9PXQpe2M9bnVsbD09PWN8fHZvaWQgMD09PWM/dDpBKHt9LGMsdCk7dmFyIHk9Yi51cGRhdGVRdWV1ZTtudWxsIT09eSYmKHkuYmFzZVN0YXRlPUEoe30seS5iYXNlU3RhdGUsdCkpfWlmKCEoaCE9PXJ8fHEhPT1jfHxCKCl8fG51bGwhPT1iLnVwZGF0ZVF1ZXVlJiZiLnVwZGF0ZVF1ZXVlLmhhc0ZvcmNlVXBkYXRlKSlyZXR1cm5cImZ1bmN0aW9uXCIhPT10eXBlb2YgeC5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJnE9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIHguZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJlxucT09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD0yMDQ4KSwhMTsodD1mKGIsaCxyLHEsYyx1KSk/KG58fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiB4LlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgeC5jb21wb25lbnRXaWxsVXBkYXRlfHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIHguY29tcG9uZW50V2lsbFVwZGF0ZSYmeC5jb21wb25lbnRXaWxsVXBkYXRlKHIsYyx1KSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgeC5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmeC5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZShyLGMsdSkpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiB4LmNvbXBvbmVudERpZFVwZGF0ZSYmKGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgeC5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSYmKGIuZWZmZWN0VGFnfD0yMDQ4KSk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiB4LmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmXG5xPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiB4LmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZxPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTIwNDgpLGQoYixyKSxlKGIsYykpO3gucHJvcHM9cjt4LnN0YXRlPWM7eC5jb250ZXh0PXU7cmV0dXJuIHR9fX12YXIgVWU9QXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIFZlKGEsYixjKXthPWMucmVmO2lmKG51bGwhPT1hJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmXCJvYmplY3RcIiE9PXR5cGVvZiBhKXtpZihjLl9vd25lcil7Yz1jLl9vd25lcjt2YXIgZD12b2lkIDA7YyYmKDIhPT1jLnRhZz9EKFwiMTEwXCIpOnZvaWQgMCxkPWMuc3RhdGVOb2RlKTtkP3ZvaWQgMDpEKFwiMTQ3XCIsYSk7dmFyIGU9XCJcIithO2lmKG51bGwhPT1iJiZudWxsIT09Yi5yZWYmJmIucmVmLl9zdHJpbmdSZWY9PT1lKXJldHVybiBiLnJlZjtiPWZ1bmN0aW9uKGEpe3ZhciBiPWQucmVmcz09PWthP2QucmVmcz17fTpkLnJlZnM7bnVsbD09PWE/ZGVsZXRlIGJbZV06YltlXT1hfTtiLl9zdHJpbmdSZWY9ZTtyZXR1cm4gYn1cInN0cmluZ1wiIT09dHlwZW9mIGE/RChcIjE0OFwiKTp2b2lkIDA7Yy5fb3duZXI/dm9pZCAwOkQoXCIyNTRcIixhKX1yZXR1cm4gYX1cbmZ1bmN0aW9uIFdlKGEsYil7XCJ0ZXh0YXJlYVwiIT09YS50eXBlJiZEKFwiMzFcIixcIltvYmplY3QgT2JqZWN0XVwiPT09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGIpP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYikuam9pbihcIiwgXCIpK1wifVwiOmIsXCJcIil9XG5mdW5jdGlvbiBYZShhKXtmdW5jdGlvbiBiKGIsYyl7aWYoYSl7dmFyIGQ9Yi5sYXN0RWZmZWN0O251bGwhPT1kPyhkLm5leHRFZmZlY3Q9YyxiLmxhc3RFZmZlY3Q9Yyk6Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9YztjLm5leHRFZmZlY3Q9bnVsbDtjLmVmZmVjdFRhZz04fX1mdW5jdGlvbiBjKGMsZCl7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKDtudWxsIT09ZDspYihjLGQpLGQ9ZC5zaWJsaW5nO3JldHVybiBudWxsfWZ1bmN0aW9uIGQoYSxiKXtmb3IoYT1uZXcgTWFwO251bGwhPT1iOyludWxsIT09Yi5rZXk/YS5zZXQoYi5rZXksYik6YS5zZXQoYi5pbmRleCxiKSxiPWIuc2libGluZztyZXR1cm4gYX1mdW5jdGlvbiBlKGEsYixjKXthPXplKGEsYixjKTthLmluZGV4PTA7YS5zaWJsaW5nPW51bGw7cmV0dXJuIGF9ZnVuY3Rpb24gZihiLGMsZCl7Yi5pbmRleD1kO2lmKCFhKXJldHVybiBjO2Q9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWQpcmV0dXJuIGQ9ZC5pbmRleCxkPGM/KGIuZWZmZWN0VGFnPVxuMixjKTpkO2IuZWZmZWN0VGFnPTI7cmV0dXJuIGN9ZnVuY3Rpb24gaChiKXthJiZudWxsPT09Yi5hbHRlcm5hdGUmJihiLmVmZmVjdFRhZz0yKTtyZXR1cm4gYn1mdW5jdGlvbiBnKGEsYixjLGQpe2lmKG51bGw9PT1ifHw2IT09Yi50YWcpcmV0dXJuIGI9Q2UoYyxhLm1vZGUsZCksYltcInJldHVyblwiXT1hLGI7Yj1lKGIsYyxkKTtiW1wicmV0dXJuXCJdPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gayhhLGIsYyxkKXtpZihudWxsIT09YiYmYi50eXBlPT09Yy50eXBlKXJldHVybiBkPWUoYixjLnByb3BzLGQpLGQucmVmPVZlKGEsYixjKSxkW1wicmV0dXJuXCJdPWEsZDtkPUFlKGMsYS5tb2RlLGQpO2QucmVmPVZlKGEsYixjKTtkW1wicmV0dXJuXCJdPWE7cmV0dXJuIGR9ZnVuY3Rpb24gdihhLGIsYyxkKXtpZihudWxsPT09Ynx8NCE9PWIudGFnfHxiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvIT09Yy5jb250YWluZXJJbmZvfHxiLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbiE9PWMuaW1wbGVtZW50YXRpb24pcmV0dXJuIGI9XG5EZShjLGEubW9kZSxkKSxiW1wicmV0dXJuXCJdPWEsYjtiPWUoYixjLmNoaWxkcmVufHxbXSxkKTtiW1wicmV0dXJuXCJdPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gbChhLGIsYyxkLGYpe2lmKG51bGw9PT1ifHwxMCE9PWIudGFnKXJldHVybiBiPUJlKGMsYS5tb2RlLGQsZiksYltcInJldHVyblwiXT1hLGI7Yj1lKGIsYyxkKTtiW1wicmV0dXJuXCJdPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gcChhLGIsYyl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBifHxcIm51bWJlclwiPT09dHlwZW9mIGIpcmV0dXJuIGI9Q2UoXCJcIitiLGEubW9kZSxjKSxiW1wicmV0dXJuXCJdPWEsYjtpZihcIm9iamVjdFwiPT09dHlwZW9mIGImJm51bGwhPT1iKXtzd2l0Y2goYi4kJHR5cGVvZil7Y2FzZSBvYzpyZXR1cm4gYz1BZShiLGEubW9kZSxjKSxjLnJlZj1WZShhLG51bGwsYiksY1tcInJldHVyblwiXT1hLGM7Y2FzZSByYzpyZXR1cm4gYj1EZShiLGEubW9kZSxjKSxiW1wicmV0dXJuXCJdPWEsYn1pZihVZShiKXx8emMoYikpcmV0dXJuIGI9QmUoYixcbmEubW9kZSxjLG51bGwpLGJbXCJyZXR1cm5cIl09YSxiO1dlKGEsYil9cmV0dXJuIG51bGx9ZnVuY3Rpb24geihhLGIsYyxkKXt2YXIgZT1udWxsIT09Yj9iLmtleTpudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgY3x8XCJudW1iZXJcIj09PXR5cGVvZiBjKXJldHVybiBudWxsIT09ZT9udWxsOmcoYSxiLFwiXCIrYyxkKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jKXtzd2l0Y2goYy4kJHR5cGVvZil7Y2FzZSBvYzpyZXR1cm4gYy5rZXk9PT1lP2MudHlwZT09PXNjP2woYSxiLGMucHJvcHMuY2hpbGRyZW4sZCxlKTprKGEsYixjLGQpOm51bGw7Y2FzZSByYzpyZXR1cm4gYy5rZXk9PT1lP3YoYSxiLGMsZCk6bnVsbH1pZihVZShjKXx8emMoYykpcmV0dXJuIG51bGwhPT1lP251bGw6bChhLGIsYyxkLG51bGwpO1dlKGEsYyl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gQihhLGIsYyxkLGUpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgZHx8XCJudW1iZXJcIj09PXR5cGVvZiBkKXJldHVybiBhPWEuZ2V0KGMpfHxcbm51bGwsZyhiLGEsXCJcIitkLGUpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQpe3N3aXRjaChkLiQkdHlwZW9mKXtjYXNlIG9jOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxkLnR5cGU9PT1zYz9sKGIsYSxkLnByb3BzLmNoaWxkcmVuLGUsZC5rZXkpOmsoYixhLGQsZSk7Y2FzZSByYzpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsdihiLGEsZCxlKX1pZihVZShkKXx8emMoZCkpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwsbChiLGEsZCxlLG51bGwpO1dlKGIsZCl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gcihlLGwsZyxoKXtmb3IodmFyIHI9bnVsbCxrPW51bGwscT1sLHU9bD0wLHQ9bnVsbDtudWxsIT09cSYmdTxnLmxlbmd0aDt1Kyspe3EuaW5kZXg+dT8odD1xLHE9bnVsbCk6dD1xLnNpYmxpbmc7dmFyIG49eihlLHEsZ1t1XSxoKTtpZihudWxsPT09bil7bnVsbD09PXEmJihxPXQpO2JyZWFrfWEmJnEmJm51bGw9PT1cbm4uYWx0ZXJuYXRlJiZiKGUscSk7bD1mKG4sbCx1KTtudWxsPT09az9yPW46ay5zaWJsaW5nPW47az1uO3E9dH1pZih1PT09Zy5sZW5ndGgpcmV0dXJuIGMoZSxxKSxyO2lmKG51bGw9PT1xKXtmb3IoO3U8Zy5sZW5ndGg7dSsrKWlmKHE9cChlLGdbdV0saCkpbD1mKHEsbCx1KSxudWxsPT09az9yPXE6ay5zaWJsaW5nPXEsaz1xO3JldHVybiByfWZvcihxPWQoZSxxKTt1PGcubGVuZ3RoO3UrKylpZih0PUIocSxlLHUsZ1t1XSxoKSl7aWYoYSYmbnVsbCE9PXQuYWx0ZXJuYXRlKXFbXCJkZWxldGVcIl0obnVsbD09PXQua2V5P3U6dC5rZXkpO2w9Zih0LGwsdSk7bnVsbD09PWs/cj10Omsuc2libGluZz10O2s9dH1hJiZxLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiByfWZ1bmN0aW9uIFEoZSxsLGcsaCl7dmFyIHI9emMoZyk7XCJmdW5jdGlvblwiIT09dHlwZW9mIHI/RChcIjE1MFwiKTp2b2lkIDA7Zz1yLmNhbGwoZyk7bnVsbD09Zz9EKFwiMTUxXCIpOnZvaWQgMDtmb3IodmFyIGs9XG5yPW51bGwscT1sLHU9bD0wLHQ9bnVsbCxuPWcubmV4dCgpO251bGwhPT1xJiYhbi5kb25lO3UrKyxuPWcubmV4dCgpKXtxLmluZGV4PnU/KHQ9cSxxPW51bGwpOnQ9cS5zaWJsaW5nO3ZhciBIPXooZSxxLG4udmFsdWUsaCk7aWYobnVsbD09PUgpe3F8fChxPXQpO2JyZWFrfWEmJnEmJm51bGw9PT1ILmFsdGVybmF0ZSYmYihlLHEpO2w9ZihILGwsdSk7bnVsbD09PWs/cj1IOmsuc2libGluZz1IO2s9SDtxPXR9aWYobi5kb25lKXJldHVybiBjKGUscSkscjtpZihudWxsPT09cSl7Zm9yKDshbi5kb25lO3UrKyxuPWcubmV4dCgpKW49cChlLG4udmFsdWUsaCksbnVsbCE9PW4mJihsPWYobixsLHUpLG51bGw9PT1rP3I9bjprLnNpYmxpbmc9bixrPW4pO3JldHVybiByfWZvcihxPWQoZSxxKTshbi5kb25lO3UrKyxuPWcubmV4dCgpKWlmKG49QihxLGUsdSxuLnZhbHVlLGgpLG51bGwhPT1uKXtpZihhJiZudWxsIT09bi5hbHRlcm5hdGUpcVtcImRlbGV0ZVwiXShudWxsPT09bi5rZXk/dTpuLmtleSk7XG5sPWYobixsLHUpO251bGw9PT1rP3I9bjprLnNpYmxpbmc9bjtrPW59YSYmcS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4gcn1yZXR1cm4gZnVuY3Rpb24oYSxkLGYsbCl7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZiYmZi50eXBlPT09c2MmJm51bGw9PT1mLmtleSYmKGY9Zi5wcm9wcy5jaGlsZHJlbik7dmFyIGc9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZjtpZihnKXN3aXRjaChmLiQkdHlwZW9mKXtjYXNlIG9jOmE6e3ZhciBrPWYua2V5O2ZvcihnPWQ7bnVsbCE9PWc7KXtpZihnLmtleT09PWspaWYoMTA9PT1nLnRhZz9mLnR5cGU9PT1zYzpnLnR5cGU9PT1mLnR5cGUpe2MoYSxnLnNpYmxpbmcpO2Q9ZShnLGYudHlwZT09PXNjP2YucHJvcHMuY2hpbGRyZW46Zi5wcm9wcyxsKTtkLnJlZj1WZShhLGcsZik7ZFtcInJldHVyblwiXT1hO2E9ZDticmVhayBhfWVsc2V7YyhhLGcpO2JyZWFrfWVsc2UgYihhLGcpO2c9Zy5zaWJsaW5nfWYudHlwZT09PVxuc2M/KGQ9QmUoZi5wcm9wcy5jaGlsZHJlbixhLm1vZGUsbCxmLmtleSksZFtcInJldHVyblwiXT1hLGE9ZCk6KGw9QWUoZixhLm1vZGUsbCksbC5yZWY9VmUoYSxkLGYpLGxbXCJyZXR1cm5cIl09YSxhPWwpfXJldHVybiBoKGEpO2Nhc2UgcmM6YTp7Zm9yKGc9Zi5rZXk7bnVsbCE9PWQ7KXtpZihkLmtleT09PWcpaWYoND09PWQudGFnJiZkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvPT09Zi5jb250YWluZXJJbmZvJiZkLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbj09PWYuaW1wbGVtZW50YXRpb24pe2MoYSxkLnNpYmxpbmcpO2Q9ZShkLGYuY2hpbGRyZW58fFtdLGwpO2RbXCJyZXR1cm5cIl09YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxkKTticmVha31lbHNlIGIoYSxkKTtkPWQuc2libGluZ31kPURlKGYsYS5tb2RlLGwpO2RbXCJyZXR1cm5cIl09YTthPWR9cmV0dXJuIGgoYSl9aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBmfHxcIm51bWJlclwiPT09dHlwZW9mIGYpcmV0dXJuIGY9XCJcIitmLG51bGwhPT1kJiZcbjY9PT1kLnRhZz8oYyhhLGQuc2libGluZyksZD1lKGQsZixsKSxkW1wicmV0dXJuXCJdPWEsYT1kKTooYyhhLGQpLGQ9Q2UoZixhLm1vZGUsbCksZFtcInJldHVyblwiXT1hLGE9ZCksaChhKTtpZihVZShmKSlyZXR1cm4gcihhLGQsZixsKTtpZih6YyhmKSlyZXR1cm4gUShhLGQsZixsKTtnJiZXZShhLGYpO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgZilzd2l0Y2goYS50YWcpe2Nhc2UgMjpjYXNlIDE6bD1hLnR5cGUsRChcIjE1MlwiLGwuZGlzcGxheU5hbWV8fGwubmFtZXx8XCJDb21wb25lbnRcIil9cmV0dXJuIGMoYSxkKX19dmFyIFllPVhlKCEwKSxaZT1YZSghMSk7XG5mdW5jdGlvbiAkZShhLGIsYyxkLGUsZixoKXtmdW5jdGlvbiBnKGEsYixjKXtrKGEsYixjLGIuZXhwaXJhdGlvblRpbWUpfWZ1bmN0aW9uIGsoYSxiLGMsZCl7Yi5jaGlsZD1udWxsPT09YT9aZShiLG51bGwsYyxkKTpZZShiLGEuY2hpbGQsYyxkKX1mdW5jdGlvbiB2KGEsYil7dmFyIGM9Yi5yZWY7aWYobnVsbD09PWEmJm51bGwhPT1jfHxudWxsIT09YSYmYS5yZWYhPT1jKWIuZWZmZWN0VGFnfD0xMjh9ZnVuY3Rpb24gbChhLGIsYyxkLGUsZil7dihhLGIpO2lmKCFjJiYhZSlyZXR1cm4gZCYmeShiLCExKSxyKGEsYik7Yz1iLnN0YXRlTm9kZTtuYy5jdXJyZW50PWI7dmFyIGw9ZT9udWxsOmMucmVuZGVyKCk7Yi5lZmZlY3RUYWd8PTE7ZSYmKGsoYSxiLG51bGwsZiksYi5jaGlsZD1udWxsKTtrKGEsYixsLGYpO2IubWVtb2l6ZWRTdGF0ZT1jLnN0YXRlO2IubWVtb2l6ZWRQcm9wcz1jLnByb3BzO2QmJnkoYiwhMCk7cmV0dXJuIGIuY2hpbGR9ZnVuY3Rpb24gcChhKXt2YXIgYj1hLnN0YXRlTm9kZTtcbmIucGVuZGluZ0NvbnRleHQ/dChhLGIucGVuZGluZ0NvbnRleHQsYi5wZW5kaW5nQ29udGV4dCE9PWIuY29udGV4dCk6Yi5jb250ZXh0JiZ0KGEsYi5jb250ZXh0LCExKTtZKGEsYi5jb250YWluZXJJbmZvKX1mdW5jdGlvbiB6KGEsYixjLGQpe3ZhciBlPWEuY2hpbGQ7Zm9yKG51bGwhPT1lJiYoZVtcInJldHVyblwiXT1hKTtudWxsIT09ZTspe3N3aXRjaChlLnRhZyl7Y2FzZSAxMjp2YXIgZj1lLnN0YXRlTm9kZXwwO2lmKGUudHlwZT09PWImJjAhPT0oZiZjKSl7Zm9yKGY9ZTtudWxsIT09Zjspe3ZhciBsPWYuYWx0ZXJuYXRlO2lmKDA9PT1mLmV4cGlyYXRpb25UaW1lfHxmLmV4cGlyYXRpb25UaW1lPmQpZi5leHBpcmF0aW9uVGltZT1kLG51bGwhPT1sJiYoMD09PWwuZXhwaXJhdGlvblRpbWV8fGwuZXhwaXJhdGlvblRpbWU+ZCkmJihsLmV4cGlyYXRpb25UaW1lPWQpO2Vsc2UgaWYobnVsbCE9PWwmJigwPT09bC5leHBpcmF0aW9uVGltZXx8bC5leHBpcmF0aW9uVGltZT5kKSlsLmV4cGlyYXRpb25UaW1lPVxuZDtlbHNlIGJyZWFrO2Y9ZltcInJldHVyblwiXX1mPW51bGx9ZWxzZSBmPWUuY2hpbGQ7YnJlYWs7Y2FzZSAxMzpmPWUudHlwZT09PWEudHlwZT9udWxsOmUuY2hpbGQ7YnJlYWs7ZGVmYXVsdDpmPWUuY2hpbGR9aWYobnVsbCE9PWYpZltcInJldHVyblwiXT1lO2Vsc2UgZm9yKGY9ZTtudWxsIT09Zjspe2lmKGY9PT1hKXtmPW51bGw7YnJlYWt9ZT1mLnNpYmxpbmc7aWYobnVsbCE9PWUpe2Y9ZTticmVha31mPWZbXCJyZXR1cm5cIl19ZT1mfX1mdW5jdGlvbiBCKGEsYixjKXt2YXIgZD1iLnR5cGUuX2NvbnRleHQsZT1iLnBlbmRpbmdQcm9wcyxmPWIubWVtb2l6ZWRQcm9wcztpZighcSgpJiZmPT09ZSlyZXR1cm4gYi5zdGF0ZU5vZGU9MCxHKGIpLHIoYSxiKTt2YXIgbD1lLnZhbHVlO2IubWVtb2l6ZWRQcm9wcz1lO2lmKG51bGw9PT1mKWw9MTA3Mzc0MTgyMztlbHNlIGlmKGYudmFsdWU9PT1lLnZhbHVlKXtpZihmLmNoaWxkcmVuPT09ZS5jaGlsZHJlbilyZXR1cm4gYi5zdGF0ZU5vZGU9MCxHKGIpLFxucihhLGIpO2w9MH1lbHNle3ZhciBoPWYudmFsdWU7aWYoaD09PWwmJigwIT09aHx8MS9oPT09MS9sKXx8aCE9PWgmJmwhPT1sKXtpZihmLmNoaWxkcmVuPT09ZS5jaGlsZHJlbilyZXR1cm4gYi5zdGF0ZU5vZGU9MCxHKGIpLHIoYSxiKTtsPTB9ZWxzZSBpZihsPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLl9jYWxjdWxhdGVDaGFuZ2VkQml0cz9kLl9jYWxjdWxhdGVDaGFuZ2VkQml0cyhoLGwpOjEwNzM3NDE4MjMsbHw9MCwwPT09bCl7aWYoZi5jaGlsZHJlbj09PWUuY2hpbGRyZW4pcmV0dXJuIGIuc3RhdGVOb2RlPTAsRyhiKSxyKGEsYil9ZWxzZSB6KGIsZCxsLGMpfWIuc3RhdGVOb2RlPWw7RyhiKTtnKGEsYixlLmNoaWxkcmVuKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiByKGEsYil7bnVsbCE9PWEmJmIuY2hpbGQhPT1hLmNoaWxkP0QoXCIxNTNcIik6dm9pZCAwO2lmKG51bGwhPT1iLmNoaWxkKXthPWIuY2hpbGQ7dmFyIGM9emUoYSxhLnBlbmRpbmdQcm9wcyxhLmV4cGlyYXRpb25UaW1lKTtcbmIuY2hpbGQ9Yztmb3IoY1tcInJldHVyblwiXT1iO251bGwhPT1hLnNpYmxpbmc7KWE9YS5zaWJsaW5nLGM9Yy5zaWJsaW5nPXplKGEsYS5wZW5kaW5nUHJvcHMsYS5leHBpcmF0aW9uVGltZSksY1tcInJldHVyblwiXT1iO2Muc2libGluZz1udWxsfXJldHVybiBiLmNoaWxkfXZhciBRPWEuc2hvdWxkU2V0VGV4dENvbnRlbnQsbj1hLnNob3VsZERlcHJpb3JpdGl6ZVN1YnRyZWUseD1iLnB1c2hIb3N0Q29udGV4dCxZPWIucHVzaEhvc3RDb250YWluZXIsRz1kLnB1c2hQcm92aWRlcixSPWMuZ2V0TWFza2VkQ29udGV4dCxTPWMuZ2V0VW5tYXNrZWRDb250ZXh0LHE9Yy5oYXNDb250ZXh0Q2hhbmdlZCx1PWMucHVzaENvbnRleHRQcm92aWRlcix0PWMucHVzaFRvcExldmVsQ29udGV4dE9iamVjdCx5PWMuaW52YWxpZGF0ZUNvbnRleHRQcm92aWRlcixIPWUuZW50ZXJIeWRyYXRpb25TdGF0ZSxXYT1lLnJlc2V0SHlkcmF0aW9uU3RhdGUsQ2I9ZS50cnlUb0NsYWltTmV4dEh5ZHJhdGFibGVJbnN0YW5jZTtcbmE9VGUoYyxmLGgsZnVuY3Rpb24oYSxiKXthLm1lbW9pemVkUHJvcHM9Yn0sZnVuY3Rpb24oYSxiKXthLm1lbW9pemVkU3RhdGU9Yn0pO3ZhciBKYz1hLmFkb3B0Q2xhc3NJbnN0YW5jZSxLYz1hLmNhbGxHZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMsTGM9YS5jb25zdHJ1Y3RDbGFzc0luc3RhbmNlLERiPWEubW91bnRDbGFzc0luc3RhbmNlLE1jPWEucmVzdW1lTW91bnRDbGFzc0luc3RhbmNlLEViPWEudXBkYXRlQ2xhc3NJbnN0YW5jZTtyZXR1cm57YmVnaW5Xb3JrOmZ1bmN0aW9uKGEsYixjKXtpZigwPT09Yi5leHBpcmF0aW9uVGltZXx8Yi5leHBpcmF0aW9uVGltZT5jKXtzd2l0Y2goYi50YWcpe2Nhc2UgMzpwKGIpO2JyZWFrO2Nhc2UgMjp1KGIpO2JyZWFrO2Nhc2UgNDpZKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7YnJlYWs7Y2FzZSAxMzpHKGIpfXJldHVybiBudWxsfXN3aXRjaChiLnRhZyl7Y2FzZSAwOm51bGwhPT1hP0QoXCIxNTVcIik6dm9pZCAwO3ZhciBkPWIudHlwZSxcbmU9Yi5wZW5kaW5nUHJvcHMsZj1TKGIpO2Y9UihiLGYpO2Q9ZChlLGYpO2IuZWZmZWN0VGFnfD0xO1wib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLnJlbmRlciYmdm9pZCAwPT09ZC4kJHR5cGVvZj8oZj1iLnR5cGUsYi50YWc9MixiLm1lbW9pemVkU3RhdGU9bnVsbCE9PWQuc3RhdGUmJnZvaWQgMCE9PWQuc3RhdGU/ZC5zdGF0ZTpudWxsLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyYmKGU9S2MoYixkLGUsYi5tZW1vaXplZFN0YXRlKSxudWxsIT09ZSYmdm9pZCAwIT09ZSYmKGIubWVtb2l6ZWRTdGF0ZT1BKHt9LGIubWVtb2l6ZWRTdGF0ZSxlKSkpLGU9dShiKSxKYyhiLGQpLERiKGIsYyksYT1sKGEsYiwhMCxlLCExLGMpKTooYi50YWc9MSxnKGEsYixkKSxiLm1lbW9pemVkUHJvcHM9ZSxhPWIuY2hpbGQpO3JldHVybiBhO2Nhc2UgMTpyZXR1cm4gZT1iLnR5cGUsYz1iLnBlbmRpbmdQcm9wcyxxKCl8fFxuYi5tZW1vaXplZFByb3BzIT09Yz8oZD1TKGIpLGQ9UihiLGQpLGU9ZShjLGQpLGIuZWZmZWN0VGFnfD0xLGcoYSxiLGUpLGIubWVtb2l6ZWRQcm9wcz1jLGE9Yi5jaGlsZCk6YT1yKGEsYiksYTtjYXNlIDI6ZT11KGIpO251bGw9PT1hP251bGw9PT1iLnN0YXRlTm9kZT8oTGMoYixiLnBlbmRpbmdQcm9wcyksRGIoYixjKSxkPSEwKTpkPU1jKGIsYyk6ZD1FYihhLGIsYyk7Zj0hMTt2YXIgaD1iLnVwZGF0ZVF1ZXVlO251bGwhPT1oJiZudWxsIT09aC5jYXB0dXJlZFZhbHVlcyYmKGY9ZD0hMCk7cmV0dXJuIGwoYSxiLGQsZSxmLGMpO2Nhc2UgMzphOmlmKHAoYiksZD1iLnVwZGF0ZVF1ZXVlLG51bGwhPT1kKXtmPWIubWVtb2l6ZWRTdGF0ZTtlPVJlKGEsYixkLG51bGwsbnVsbCxjKTtiLm1lbW9pemVkU3RhdGU9ZTtkPWIudXBkYXRlUXVldWU7aWYobnVsbCE9PWQmJm51bGwhPT1kLmNhcHR1cmVkVmFsdWVzKWQ9bnVsbDtlbHNlIGlmKGY9PT1lKXtXYSgpO2E9cihhLGIpO2JyZWFrIGF9ZWxzZSBkPVxuZS5lbGVtZW50O2Y9Yi5zdGF0ZU5vZGU7KG51bGw9PT1hfHxudWxsPT09YS5jaGlsZCkmJmYuaHlkcmF0ZSYmSChiKT8oYi5lZmZlY3RUYWd8PTIsYi5jaGlsZD1aZShiLG51bGwsZCxjKSk6KFdhKCksZyhhLGIsZCkpO2IubWVtb2l6ZWRTdGF0ZT1lO2E9Yi5jaGlsZH1lbHNlIFdhKCksYT1yKGEsYik7cmV0dXJuIGE7Y2FzZSA1OmE6e3goYik7bnVsbD09PWEmJkNiKGIpO2U9Yi50eXBlO2g9Yi5tZW1vaXplZFByb3BzO2Q9Yi5wZW5kaW5nUHJvcHM7Zj1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6bnVsbDtpZighcSgpJiZoPT09ZCl7aWYoaD1iLm1vZGUmMSYmbihlLGQpKWIuZXhwaXJhdGlvblRpbWU9MTA3Mzc0MTgyMztpZighaHx8MTA3Mzc0MTgyMyE9PWMpe2E9cihhLGIpO2JyZWFrIGF9fWg9ZC5jaGlsZHJlbjtRKGUsZCk/aD1udWxsOmYmJlEoZSxmKSYmKGIuZWZmZWN0VGFnfD0xNik7dihhLGIpOzEwNzM3NDE4MjMhPT1jJiZiLm1vZGUmMSYmbihlLGQpPyhiLmV4cGlyYXRpb25UaW1lPVxuMTA3Mzc0MTgyMyxiLm1lbW9pemVkUHJvcHM9ZCxhPW51bGwpOihnKGEsYixoKSxiLm1lbW9pemVkUHJvcHM9ZCxhPWIuY2hpbGQpfXJldHVybiBhO2Nhc2UgNjpyZXR1cm4gbnVsbD09PWEmJkNiKGIpLGIubWVtb2l6ZWRQcm9wcz1iLnBlbmRpbmdQcm9wcyxudWxsO2Nhc2UgODpiLnRhZz03O2Nhc2UgNzpyZXR1cm4gZT1iLnBlbmRpbmdQcm9wcyxxKCl8fGIubWVtb2l6ZWRQcm9wcyE9PWV8fChlPWIubWVtb2l6ZWRQcm9wcyksZD1lLmNoaWxkcmVuLGIuc3RhdGVOb2RlPW51bGw9PT1hP1plKGIsYi5zdGF0ZU5vZGUsZCxjKTpZZShiLGEuc3RhdGVOb2RlLGQsYyksYi5tZW1vaXplZFByb3BzPWUsYi5zdGF0ZU5vZGU7Y2FzZSA5OnJldHVybiBudWxsO2Nhc2UgNDpyZXR1cm4gWShiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLGU9Yi5wZW5kaW5nUHJvcHMscSgpfHxiLm1lbW9pemVkUHJvcHMhPT1lPyhudWxsPT09YT9iLmNoaWxkPVllKGIsbnVsbCxlLGMpOmcoYSxiLGUpLGIubWVtb2l6ZWRQcm9wcz1cbmUsYT1iLmNoaWxkKTphPXIoYSxiKSxhO2Nhc2UgMTQ6cmV0dXJuIGM9Yi50eXBlLnJlbmRlcixjPWMoYi5wZW5kaW5nUHJvcHMsYi5yZWYpLGcoYSxiLGMpLGIubWVtb2l6ZWRQcm9wcz1jLGIuY2hpbGQ7Y2FzZSAxMDpyZXR1cm4gYz1iLnBlbmRpbmdQcm9wcyxxKCl8fGIubWVtb2l6ZWRQcm9wcyE9PWM/KGcoYSxiLGMpLGIubWVtb2l6ZWRQcm9wcz1jLGE9Yi5jaGlsZCk6YT1yKGEsYiksYTtjYXNlIDExOnJldHVybiBjPWIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLHEoKXx8bnVsbCE9PWMmJmIubWVtb2l6ZWRQcm9wcyE9PWM/KGcoYSxiLGMpLGIubWVtb2l6ZWRQcm9wcz1jLGE9Yi5jaGlsZCk6YT1yKGEsYiksYTtjYXNlIDEzOnJldHVybiBCKGEsYixjKTtjYXNlIDEyOmE6e2Q9Yi50eXBlO2Y9Yi5wZW5kaW5nUHJvcHM7aD1iLm1lbW9pemVkUHJvcHM7ZT1kLl9jdXJyZW50VmFsdWU7dmFyIHQ9ZC5fY2hhbmdlZEJpdHM7aWYocSgpfHwwIT09dHx8aCE9PWYpe2IubWVtb2l6ZWRQcm9wcz1cbmY7dmFyIGs9Zi51bnN0YWJsZV9vYnNlcnZlZEJpdHM7aWYodm9pZCAwPT09a3x8bnVsbD09PWspaz0xMDczNzQxODIzO2Iuc3RhdGVOb2RlPWs7aWYoMCE9PSh0JmspKXooYixkLHQsYyk7ZWxzZSBpZihoPT09Zil7YT1yKGEsYik7YnJlYWsgYX1jPWYuY2hpbGRyZW47Yz1jKGUpO2coYSxiLGMpO2E9Yi5jaGlsZH1lbHNlIGE9cihhLGIpfXJldHVybiBhO2RlZmF1bHQ6RChcIjE1NlwiKX19fX1cbmZ1bmN0aW9uIGFmKGEsYixjLGQsZSl7ZnVuY3Rpb24gZihhKXthLmVmZmVjdFRhZ3w9NH12YXIgaD1hLmNyZWF0ZUluc3RhbmNlLGc9YS5jcmVhdGVUZXh0SW5zdGFuY2Usaz1hLmFwcGVuZEluaXRpYWxDaGlsZCx2PWEuZmluYWxpemVJbml0aWFsQ2hpbGRyZW4sbD1hLnByZXBhcmVVcGRhdGUscD1hLnBlcnNpc3RlbmNlLHo9Yi5nZXRSb290SG9zdENvbnRhaW5lcixCPWIucG9wSG9zdENvbnRleHQscj1iLmdldEhvc3RDb250ZXh0LFE9Yi5wb3BIb3N0Q29udGFpbmVyLG49Yy5wb3BDb250ZXh0UHJvdmlkZXIseD1jLnBvcFRvcExldmVsQ29udGV4dE9iamVjdCxZPWQucG9wUHJvdmlkZXIsRz1lLnByZXBhcmVUb0h5ZHJhdGVIb3N0SW5zdGFuY2UsUj1lLnByZXBhcmVUb0h5ZHJhdGVIb3N0VGV4dEluc3RhbmNlLFM9ZS5wb3BIeWRyYXRpb25TdGF0ZSxxPXZvaWQgMCx1PXZvaWQgMCx0PXZvaWQgMDthLm11dGF0aW9uPyhxPWZ1bmN0aW9uKCl7fSx1PWZ1bmN0aW9uKGEsYixjKXsoYi51cGRhdGVRdWV1ZT1cbmMpJiZmKGIpfSx0PWZ1bmN0aW9uKGEsYixjLGQpe2MhPT1kJiZmKGIpfSk6cD9EKFwiMjM1XCIpOkQoXCIyMzZcIik7cmV0dXJue2NvbXBsZXRlV29yazpmdW5jdGlvbihhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHM7c3dpdGNoKGIudGFnKXtjYXNlIDE6cmV0dXJuIG51bGw7Y2FzZSAyOnJldHVybiBuKGIpLGE9Yi5zdGF0ZU5vZGUsZD1iLnVwZGF0ZVF1ZXVlLG51bGwhPT1kJiZudWxsIT09ZC5jYXB0dXJlZFZhbHVlcyYmKGIuZWZmZWN0VGFnJj0tNjUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuY29tcG9uZW50RGlkQ2F0Y2g/Yi5lZmZlY3RUYWd8PTI1NjpkLmNhcHR1cmVkVmFsdWVzPW51bGwpLG51bGw7Y2FzZSAzOlEoYik7eChiKTtkPWIuc3RhdGVOb2RlO2QucGVuZGluZ0NvbnRleHQmJihkLmNvbnRleHQ9ZC5wZW5kaW5nQ29udGV4dCxkLnBlbmRpbmdDb250ZXh0PW51bGwpO2lmKG51bGw9PT1hfHxudWxsPT09YS5jaGlsZClTKGIpLGIuZWZmZWN0VGFnJj0tMztxKGIpO2E9Yi51cGRhdGVRdWV1ZTtcbm51bGwhPT1hJiZudWxsIT09YS5jYXB0dXJlZFZhbHVlcyYmKGIuZWZmZWN0VGFnfD0yNTYpO3JldHVybiBudWxsO2Nhc2UgNTpCKGIpO2M9eigpO3ZhciBlPWIudHlwZTtpZihudWxsIT09YSYmbnVsbCE9Yi5zdGF0ZU5vZGUpe3ZhciBwPWEubWVtb2l6ZWRQcm9wcyxIPWIuc3RhdGVOb2RlLHk9cigpO0g9bChILGUscCxkLGMseSk7dShhLGIsSCxlLHAsZCxjLHkpO2EucmVmIT09Yi5yZWYmJihiLmVmZmVjdFRhZ3w9MTI4KX1lbHNle2lmKCFkKXJldHVybiBudWxsPT09Yi5zdGF0ZU5vZGU/RChcIjE2NlwiKTp2b2lkIDAsbnVsbDthPXIoKTtpZihTKGIpKUcoYixjLGEpJiZmKGIpO2Vsc2V7cD1oKGUsZCxjLGEsYik7YTpmb3IoeT1iLmNoaWxkO251bGwhPT15Oyl7aWYoNT09PXkudGFnfHw2PT09eS50YWcpayhwLHkuc3RhdGVOb2RlKTtlbHNlIGlmKDQhPT15LnRhZyYmbnVsbCE9PXkuY2hpbGQpe3kuY2hpbGRbXCJyZXR1cm5cIl09eTt5PXkuY2hpbGQ7Y29udGludWV9aWYoeT09PWIpYnJlYWs7XG5mb3IoO251bGw9PT15LnNpYmxpbmc7KXtpZihudWxsPT09eVtcInJldHVyblwiXXx8eVtcInJldHVyblwiXT09PWIpYnJlYWsgYTt5PXlbXCJyZXR1cm5cIl19eS5zaWJsaW5nW1wicmV0dXJuXCJdPXlbXCJyZXR1cm5cIl07eT15LnNpYmxpbmd9dihwLGUsZCxjLGEpJiZmKGIpO2Iuc3RhdGVOb2RlPXB9bnVsbCE9PWIucmVmJiYoYi5lZmZlY3RUYWd8PTEyOCl9cmV0dXJuIG51bGw7Y2FzZSA2OmlmKGEmJm51bGwhPWIuc3RhdGVOb2RlKXQoYSxiLGEubWVtb2l6ZWRQcm9wcyxkKTtlbHNle2lmKFwic3RyaW5nXCIhPT10eXBlb2YgZClyZXR1cm4gbnVsbD09PWIuc3RhdGVOb2RlP0QoXCIxNjZcIik6dm9pZCAwLG51bGw7YT16KCk7Yz1yKCk7UyhiKT9SKGIpJiZmKGIpOmIuc3RhdGVOb2RlPWcoZCxhLGMsYil9cmV0dXJuIG51bGw7Y2FzZSA3OihkPWIubWVtb2l6ZWRQcm9wcyk/dm9pZCAwOkQoXCIxNjVcIik7Yi50YWc9ODtlPVtdO2E6Zm9yKChwPWIuc3RhdGVOb2RlKSYmKHBbXCJyZXR1cm5cIl09Yik7bnVsbCE9PVxucDspe2lmKDU9PT1wLnRhZ3x8Nj09PXAudGFnfHw0PT09cC50YWcpRChcIjI0N1wiKTtlbHNlIGlmKDk9PT1wLnRhZyllLnB1c2gocC5wZW5kaW5nUHJvcHMudmFsdWUpO2Vsc2UgaWYobnVsbCE9PXAuY2hpbGQpe3AuY2hpbGRbXCJyZXR1cm5cIl09cDtwPXAuY2hpbGQ7Y29udGludWV9Zm9yKDtudWxsPT09cC5zaWJsaW5nOyl7aWYobnVsbD09PXBbXCJyZXR1cm5cIl18fHBbXCJyZXR1cm5cIl09PT1iKWJyZWFrIGE7cD1wW1wicmV0dXJuXCJdfXAuc2libGluZ1tcInJldHVyblwiXT1wW1wicmV0dXJuXCJdO3A9cC5zaWJsaW5nfXA9ZC5oYW5kbGVyO2Q9cChkLnByb3BzLGUpO2IuY2hpbGQ9WWUoYixudWxsIT09YT9hLmNoaWxkOm51bGwsZCxjKTtyZXR1cm4gYi5jaGlsZDtjYXNlIDg6cmV0dXJuIGIudGFnPTcsbnVsbDtjYXNlIDk6cmV0dXJuIG51bGw7Y2FzZSAxNDpyZXR1cm4gbnVsbDtjYXNlIDEwOnJldHVybiBudWxsO2Nhc2UgMTE6cmV0dXJuIG51bGw7Y2FzZSA0OnJldHVybiBRKGIpLHEoYiksbnVsbDtcbmNhc2UgMTM6cmV0dXJuIFkoYiksbnVsbDtjYXNlIDEyOnJldHVybiBudWxsO2Nhc2UgMDpEKFwiMTY3XCIpO2RlZmF1bHQ6RChcIjE1NlwiKX19fX1cbmZ1bmN0aW9uIGJmKGEsYixjLGQsZSl7dmFyIGY9YS5wb3BIb3N0Q29udGFpbmVyLGg9YS5wb3BIb3N0Q29udGV4dCxnPWIucG9wQ29udGV4dFByb3ZpZGVyLGs9Yi5wb3BUb3BMZXZlbENvbnRleHRPYmplY3Qsdj1jLnBvcFByb3ZpZGVyO3JldHVybnt0aHJvd0V4Y2VwdGlvbjpmdW5jdGlvbihhLGIsYyl7Yi5lZmZlY3RUYWd8PTUxMjtiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1udWxsO2I9e3ZhbHVlOmMsc291cmNlOmIsc3RhY2s6QmMoYil9O2Rve3N3aXRjaChhLnRhZyl7Y2FzZSAzOk9lKGEpO2EudXBkYXRlUXVldWUuY2FwdHVyZWRWYWx1ZXM9W2JdO2EuZWZmZWN0VGFnfD0xMDI0O3JldHVybjtjYXNlIDI6aWYoYz1hLnN0YXRlTm9kZSwwPT09KGEuZWZmZWN0VGFnJjY0KSYmbnVsbCE9PWMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmNvbXBvbmVudERpZENhdGNoJiYhZShjKSl7T2UoYSk7Yz1hLnVwZGF0ZVF1ZXVlO3ZhciBkPWMuY2FwdHVyZWRWYWx1ZXM7bnVsbD09PWQ/XG5jLmNhcHR1cmVkVmFsdWVzPVtiXTpkLnB1c2goYik7YS5lZmZlY3RUYWd8PTEwMjQ7cmV0dXJufX1hPWFbXCJyZXR1cm5cIl19d2hpbGUobnVsbCE9PWEpfSx1bndpbmRXb3JrOmZ1bmN0aW9uKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSAyOmcoYSk7dmFyIGI9YS5lZmZlY3RUYWc7cmV0dXJuIGImMTAyND8oYS5lZmZlY3RUYWc9YiYtMTAyNXw2NCxhKTpudWxsO2Nhc2UgMzpyZXR1cm4gZihhKSxrKGEpLGI9YS5lZmZlY3RUYWcsYiYxMDI0PyhhLmVmZmVjdFRhZz1iJi0xMDI1fDY0LGEpOm51bGw7Y2FzZSA1OnJldHVybiBoKGEpLG51bGw7Y2FzZSA0OnJldHVybiBmKGEpLG51bGw7Y2FzZSAxMzpyZXR1cm4gdihhKSxudWxsO2RlZmF1bHQ6cmV0dXJuIG51bGx9fSx1bndpbmRJbnRlcnJ1cHRlZFdvcms6ZnVuY3Rpb24oYSl7c3dpdGNoKGEudGFnKXtjYXNlIDI6ZyhhKTticmVhaztjYXNlIDM6ZihhKTtrKGEpO2JyZWFrO2Nhc2UgNTpoKGEpO2JyZWFrO2Nhc2UgNDpmKGEpO2JyZWFrO2Nhc2UgMTM6dihhKX19fX1cbmZ1bmN0aW9uIGNmKGEsYil7dmFyIGM9Yi5zb3VyY2U7bnVsbD09PWIuc3RhY2smJkJjKGMpO251bGwhPT1jJiZBYyhjKTtiPWIudmFsdWU7bnVsbCE9PWEmJjI9PT1hLnRhZyYmQWMoYSk7dHJ5e2ImJmIuc3VwcHJlc3NSZWFjdEVycm9yTG9nZ2luZ3x8Y29uc29sZS5lcnJvcihiKX1jYXRjaChkKXtkJiZkLnN1cHByZXNzUmVhY3RFcnJvckxvZ2dpbmd8fGNvbnNvbGUuZXJyb3IoZCl9fVxuZnVuY3Rpb24gZGYoYSxiLGMsZCxlKXtmdW5jdGlvbiBmKGEpe3ZhciBjPWEucmVmO2lmKG51bGwhPT1jKWlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBjKXRyeXtjKG51bGwpfWNhdGNoKHQpe2IoYSx0KX1lbHNlIGMuY3VycmVudD1udWxsfWZ1bmN0aW9uIGgoYSl7XCJmdW5jdGlvblwiPT09dHlwZW9mIEplJiZKZShhKTtzd2l0Y2goYS50YWcpe2Nhc2UgMjpmKGEpO3ZhciBjPWEuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmNvbXBvbmVudFdpbGxVbm1vdW50KXRyeXtjLnByb3BzPWEubWVtb2l6ZWRQcm9wcyxjLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSxjLmNvbXBvbmVudFdpbGxVbm1vdW50KCl9Y2F0Y2godCl7YihhLHQpfWJyZWFrO2Nhc2UgNTpmKGEpO2JyZWFrO2Nhc2UgNzpnKGEuc3RhdGVOb2RlKTticmVhaztjYXNlIDQ6cCYmdihhKX19ZnVuY3Rpb24gZyhhKXtmb3IodmFyIGI9YTs7KWlmKGgoYiksbnVsbD09PWIuY2hpbGR8fHAmJjQ9PT1iLnRhZyl7aWYoYj09PVxuYSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09YltcInJldHVyblwiXXx8YltcInJldHVyblwiXT09PWEpcmV0dXJuO2I9YltcInJldHVyblwiXX1iLnNpYmxpbmdbXCJyZXR1cm5cIl09YltcInJldHVyblwiXTtiPWIuc2libGluZ31lbHNlIGIuY2hpbGRbXCJyZXR1cm5cIl09YixiPWIuY2hpbGR9ZnVuY3Rpb24gayhhKXtyZXR1cm4gNT09PWEudGFnfHwzPT09YS50YWd8fDQ9PT1hLnRhZ31mdW5jdGlvbiB2KGEpe2Zvcih2YXIgYj1hLGM9ITEsZD12b2lkIDAsZT12b2lkIDA7Oyl7aWYoIWMpe2M9YltcInJldHVyblwiXTthOmZvcig7Oyl7bnVsbD09PWM/RChcIjE2MFwiKTp2b2lkIDA7c3dpdGNoKGMudGFnKXtjYXNlIDU6ZD1jLnN0YXRlTm9kZTtlPSExO2JyZWFrIGE7Y2FzZSAzOmQ9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztlPSEwO2JyZWFrIGE7Y2FzZSA0OmQ9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztlPSEwO2JyZWFrIGF9Yz1jW1wicmV0dXJuXCJdfWM9ITB9aWYoNT09PVxuYi50YWd8fDY9PT1iLnRhZylnKGIpLGU/UyhkLGIuc3RhdGVOb2RlKTpSKGQsYi5zdGF0ZU5vZGUpO2Vsc2UgaWYoND09PWIudGFnP2Q9Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpoKGIpLG51bGwhPT1iLmNoaWxkKXtiLmNoaWxkW1wicmV0dXJuXCJdPWI7Yj1iLmNoaWxkO2NvbnRpbnVlfWlmKGI9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWIuc2libGluZzspe2lmKG51bGw9PT1iW1wicmV0dXJuXCJdfHxiW1wicmV0dXJuXCJdPT09YSlyZXR1cm47Yj1iW1wicmV0dXJuXCJdOzQ9PT1iLnRhZyYmKGM9ITEpfWIuc2libGluZ1tcInJldHVyblwiXT1iW1wicmV0dXJuXCJdO2I9Yi5zaWJsaW5nfX12YXIgbD1hLmdldFB1YmxpY0luc3RhbmNlLHA9YS5tdXRhdGlvbjthPWEucGVyc2lzdGVuY2U7cHx8KGE/RChcIjIzNVwiKTpEKFwiMjM2XCIpKTt2YXIgej1wLmNvbW1pdE1vdW50LEI9cC5jb21taXRVcGRhdGUscj1wLnJlc2V0VGV4dENvbnRlbnQsUT1wLmNvbW1pdFRleHRVcGRhdGUsbj1wLmFwcGVuZENoaWxkLFxueD1wLmFwcGVuZENoaWxkVG9Db250YWluZXIsWT1wLmluc2VydEJlZm9yZSxHPXAuaW5zZXJ0SW5Db250YWluZXJCZWZvcmUsUj1wLnJlbW92ZUNoaWxkLFM9cC5yZW1vdmVDaGlsZEZyb21Db250YWluZXI7cmV0dXJue2NvbW1pdEJlZm9yZU11dGF0aW9uTGlmZUN5Y2xlczpmdW5jdGlvbihhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAyOmlmKGIuZWZmZWN0VGFnJjIwNDgmJm51bGwhPT1hKXt2YXIgYz1hLm1lbW9pemVkUHJvcHMsZD1hLm1lbW9pemVkU3RhdGU7YT1iLnN0YXRlTm9kZTthLnByb3BzPWIubWVtb2l6ZWRQcm9wczthLnN0YXRlPWIubWVtb2l6ZWRTdGF0ZTtiPWEuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoYyxkKTthLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlPWJ9YnJlYWs7Y2FzZSAzOmNhc2UgNTpjYXNlIDY6Y2FzZSA0OmJyZWFrO2RlZmF1bHQ6RChcIjE2M1wiKX19LGNvbW1pdFJlc2V0VGV4dENvbnRlbnQ6ZnVuY3Rpb24oYSl7cihhLnN0YXRlTm9kZSl9LFxuY29tbWl0UGxhY2VtZW50OmZ1bmN0aW9uKGEpe2E6e2Zvcih2YXIgYj1hW1wicmV0dXJuXCJdO251bGwhPT1iOyl7aWYoayhiKSl7dmFyIGM9YjticmVhayBhfWI9YltcInJldHVyblwiXX1EKFwiMTYwXCIpO2M9dm9pZCAwfXZhciBkPWI9dm9pZCAwO3N3aXRjaChjLnRhZyl7Y2FzZSA1OmI9Yy5zdGF0ZU5vZGU7ZD0hMTticmVhaztjYXNlIDM6Yj1jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2Q9ITA7YnJlYWs7Y2FzZSA0OmI9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2RlZmF1bHQ6RChcIjE2MVwiKX1jLmVmZmVjdFRhZyYxNiYmKHIoYiksYy5lZmZlY3RUYWcmPS0xNyk7YTpiOmZvcihjPWE7Oyl7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWNbXCJyZXR1cm5cIl18fGsoY1tcInJldHVyblwiXSkpe2M9bnVsbDticmVhayBhfWM9Y1tcInJldHVyblwiXX1jLnNpYmxpbmdbXCJyZXR1cm5cIl09Y1tcInJldHVyblwiXTtmb3IoYz1jLnNpYmxpbmc7NSE9PWMudGFnJiY2IT09XG5jLnRhZzspe2lmKGMuZWZmZWN0VGFnJjIpY29udGludWUgYjtpZihudWxsPT09Yy5jaGlsZHx8ND09PWMudGFnKWNvbnRpbnVlIGI7ZWxzZSBjLmNoaWxkW1wicmV0dXJuXCJdPWMsYz1jLmNoaWxkfWlmKCEoYy5lZmZlY3RUYWcmMikpe2M9Yy5zdGF0ZU5vZGU7YnJlYWsgYX19Zm9yKHZhciBlPWE7Oyl7aWYoNT09PWUudGFnfHw2PT09ZS50YWcpYz9kP0coYixlLnN0YXRlTm9kZSxjKTpZKGIsZS5zdGF0ZU5vZGUsYyk6ZD94KGIsZS5zdGF0ZU5vZGUpOm4oYixlLnN0YXRlTm9kZSk7ZWxzZSBpZig0IT09ZS50YWcmJm51bGwhPT1lLmNoaWxkKXtlLmNoaWxkW1wicmV0dXJuXCJdPWU7ZT1lLmNoaWxkO2NvbnRpbnVlfWlmKGU9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWUuc2libGluZzspe2lmKG51bGw9PT1lW1wicmV0dXJuXCJdfHxlW1wicmV0dXJuXCJdPT09YSlyZXR1cm47ZT1lW1wicmV0dXJuXCJdfWUuc2libGluZ1tcInJldHVyblwiXT1lW1wicmV0dXJuXCJdO2U9ZS5zaWJsaW5nfX0sY29tbWl0RGVsZXRpb246ZnVuY3Rpb24oYSl7dihhKTtcbmFbXCJyZXR1cm5cIl09bnVsbDthLmNoaWxkPW51bGw7YS5hbHRlcm5hdGUmJihhLmFsdGVybmF0ZS5jaGlsZD1udWxsLGEuYWx0ZXJuYXRlW1wicmV0dXJuXCJdPW51bGwpfSxjb21taXRXb3JrOmZ1bmN0aW9uKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDI6YnJlYWs7Y2FzZSA1OnZhciBjPWIuc3RhdGVOb2RlO2lmKG51bGwhPWMpe3ZhciBkPWIubWVtb2l6ZWRQcm9wczthPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpkO3ZhciBlPWIudHlwZSxmPWIudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT1udWxsO251bGwhPT1mJiZCKGMsZixlLGEsZCxiKX1icmVhaztjYXNlIDY6bnVsbD09PWIuc3RhdGVOb2RlP0QoXCIxNjJcIik6dm9pZCAwO2M9Yi5tZW1vaXplZFByb3BzO1EoYi5zdGF0ZU5vZGUsbnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOmMsYyk7YnJlYWs7Y2FzZSAzOmJyZWFrO2RlZmF1bHQ6RChcIjE2M1wiKX19LGNvbW1pdExpZmVDeWNsZXM6ZnVuY3Rpb24oYSxiLGMpe3N3aXRjaChjLnRhZyl7Y2FzZSAyOmE9XG5jLnN0YXRlTm9kZTtpZihjLmVmZmVjdFRhZyY0KWlmKG51bGw9PT1iKWEucHJvcHM9Yy5tZW1vaXplZFByb3BzLGEuc3RhdGU9Yy5tZW1vaXplZFN0YXRlLGEuY29tcG9uZW50RGlkTW91bnQoKTtlbHNle3ZhciBkPWIubWVtb2l6ZWRQcm9wcztiPWIubWVtb2l6ZWRTdGF0ZTthLnByb3BzPWMubWVtb2l6ZWRQcm9wczthLnN0YXRlPWMubWVtb2l6ZWRTdGF0ZTthLmNvbXBvbmVudERpZFVwZGF0ZShkLGIsYS5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSl9Yz1jLnVwZGF0ZVF1ZXVlO251bGwhPT1jJiZTZShjLGEpO2JyZWFrO2Nhc2UgMzpiPWMudXBkYXRlUXVldWU7aWYobnVsbCE9PWIpe2E9bnVsbDtpZihudWxsIT09Yy5jaGlsZClzd2l0Y2goYy5jaGlsZC50YWcpe2Nhc2UgNTphPWwoYy5jaGlsZC5zdGF0ZU5vZGUpO2JyZWFrO2Nhc2UgMjphPWMuY2hpbGQuc3RhdGVOb2RlfVNlKGIsYSl9YnJlYWs7Y2FzZSA1OmE9Yy5zdGF0ZU5vZGU7bnVsbD09PWImJmMuZWZmZWN0VGFnJlxuNCYmeihhLGMudHlwZSxjLm1lbW9pemVkUHJvcHMsYyk7YnJlYWs7Y2FzZSA2OmJyZWFrO2Nhc2UgNDpicmVhaztkZWZhdWx0OkQoXCIxNjNcIil9fSxjb21taXRFcnJvckxvZ2dpbmc6ZnVuY3Rpb24oYSxiKXtzd2l0Y2goYS50YWcpe2Nhc2UgMjp2YXIgYz1hLnR5cGU7Yj1hLnN0YXRlTm9kZTt2YXIgZD1hLnVwZGF0ZVF1ZXVlO251bGw9PT1kfHxudWxsPT09ZC5jYXB0dXJlZFZhbHVlcz9EKFwiMjY0XCIpOnZvaWQgMDt2YXIgZj1kLmNhcHR1cmVkVmFsdWVzO2QuY2FwdHVyZWRWYWx1ZXM9bnVsbDtcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5nZXREZXJpdmVkU3RhdGVGcm9tQ2F0Y2gmJmUoYik7Yi5wcm9wcz1hLm1lbW9pemVkUHJvcHM7Yi5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7Zm9yKGM9MDtjPGYubGVuZ3RoO2MrKyl7ZD1mW2NdO3ZhciBsPWQudmFsdWUsZz1kLnN0YWNrO2NmKGEsZCk7Yi5jb21wb25lbnREaWRDYXRjaChsLHtjb21wb25lbnRTdGFjazpudWxsIT09Zz9nOlwiXCJ9KX1icmVhaztcbmNhc2UgMzpjPWEudXBkYXRlUXVldWU7bnVsbD09PWN8fG51bGw9PT1jLmNhcHR1cmVkVmFsdWVzP0QoXCIyNjRcIik6dm9pZCAwO2Y9Yy5jYXB0dXJlZFZhbHVlcztjLmNhcHR1cmVkVmFsdWVzPW51bGw7Zm9yKGM9MDtjPGYubGVuZ3RoO2MrKylkPWZbY10sY2YoYSxkKSxiKGQudmFsdWUpO2JyZWFrO2RlZmF1bHQ6RChcIjI2NVwiKX19LGNvbW1pdEF0dGFjaFJlZjpmdW5jdGlvbihhKXt2YXIgYj1hLnJlZjtpZihudWxsIT09Yil7dmFyIGM9YS5zdGF0ZU5vZGU7c3dpdGNoKGEudGFnKXtjYXNlIDU6YT1sKGMpO2JyZWFrO2RlZmF1bHQ6YT1jfVwiZnVuY3Rpb25cIj09PXR5cGVvZiBiP2IoYSk6Yi5jdXJyZW50PWF9fSxjb21taXREZXRhY2hSZWY6ZnVuY3Rpb24oYSl7YT1hLnJlZjtudWxsIT09YSYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2EobnVsbCk6YS5jdXJyZW50PW51bGwpfX19dmFyIGVmPXt9O1xuZnVuY3Rpb24gZmYoYSxiKXtmdW5jdGlvbiBjKGEpe2E9PT1lZj9EKFwiMTc0XCIpOnZvaWQgMDtyZXR1cm4gYX12YXIgZD1hLmdldENoaWxkSG9zdENvbnRleHQsZT1hLmdldFJvb3RIb3N0Q29udGV4dDthPWIuY3JlYXRlQ3Vyc29yO3ZhciBmPWIucHVzaCxoPWIucG9wLGc9YShlZiksaz1hKGVmKSx2PWEoZWYpO3JldHVybntnZXRIb3N0Q29udGV4dDpmdW5jdGlvbigpe3JldHVybiBjKGcuY3VycmVudCl9LGdldFJvb3RIb3N0Q29udGFpbmVyOmZ1bmN0aW9uKCl7cmV0dXJuIGModi5jdXJyZW50KX0scG9wSG9zdENvbnRhaW5lcjpmdW5jdGlvbihhKXtoKGcsYSk7aChrLGEpO2godixhKX0scG9wSG9zdENvbnRleHQ6ZnVuY3Rpb24oYSl7ay5jdXJyZW50PT09YSYmKGgoZyxhKSxoKGssYSkpfSxwdXNoSG9zdENvbnRhaW5lcjpmdW5jdGlvbihhLGIpe2YodixiLGEpO2YoayxhLGEpO2YoZyxlZixhKTtiPWUoYik7aChnLGEpO2YoZyxiLGEpfSxwdXNoSG9zdENvbnRleHQ6ZnVuY3Rpb24oYSl7dmFyIGI9XG5jKHYuY3VycmVudCksZT1jKGcuY3VycmVudCk7Yj1kKGUsYS50eXBlLGIpO2UhPT1iJiYoZihrLGEsYSksZihnLGIsYSkpfX19XG5mdW5jdGlvbiBnZihhKXtmdW5jdGlvbiBiKGEsYil7dmFyIGM9bmV3IHhlKDUsbnVsbCxudWxsLDApO2MudHlwZT1cIkRFTEVURURcIjtjLnN0YXRlTm9kZT1iO2NbXCJyZXR1cm5cIl09YTtjLmVmZmVjdFRhZz04O251bGwhPT1hLmxhc3RFZmZlY3Q/KGEubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsYS5sYXN0RWZmZWN0PWMpOmEuZmlyc3RFZmZlY3Q9YS5sYXN0RWZmZWN0PWN9ZnVuY3Rpb24gYyhhLGIpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnJldHVybiBiPWYoYixhLnR5cGUsYS5wZW5kaW5nUHJvcHMpLG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDY6cmV0dXJuIGI9aChiLGEucGVuZGluZ1Byb3BzKSxudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gZChhKXtmb3IoYT1hW1wicmV0dXJuXCJdO251bGwhPT1hJiY1IT09YS50YWcmJjMhPT1hLnRhZzspYT1hW1wicmV0dXJuXCJdO3A9YX12YXIgZT1hLnNob3VsZFNldFRleHRDb250ZW50O1xuYT1hLmh5ZHJhdGlvbjtpZighYSlyZXR1cm57ZW50ZXJIeWRyYXRpb25TdGF0ZTpmdW5jdGlvbigpe3JldHVybiExfSxyZXNldEh5ZHJhdGlvblN0YXRlOmZ1bmN0aW9uKCl7fSx0cnlUb0NsYWltTmV4dEh5ZHJhdGFibGVJbnN0YW5jZTpmdW5jdGlvbigpe30scHJlcGFyZVRvSHlkcmF0ZUhvc3RJbnN0YW5jZTpmdW5jdGlvbigpe0QoXCIxNzVcIil9LHByZXBhcmVUb0h5ZHJhdGVIb3N0VGV4dEluc3RhbmNlOmZ1bmN0aW9uKCl7RChcIjE3NlwiKX0scG9wSHlkcmF0aW9uU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4hMX19O3ZhciBmPWEuY2FuSHlkcmF0ZUluc3RhbmNlLGg9YS5jYW5IeWRyYXRlVGV4dEluc3RhbmNlLGc9YS5nZXROZXh0SHlkcmF0YWJsZVNpYmxpbmcsaz1hLmdldEZpcnN0SHlkcmF0YWJsZUNoaWxkLHY9YS5oeWRyYXRlSW5zdGFuY2UsbD1hLmh5ZHJhdGVUZXh0SW5zdGFuY2UscD1udWxsLHo9bnVsbCxCPSExO3JldHVybntlbnRlckh5ZHJhdGlvblN0YXRlOmZ1bmN0aW9uKGEpe3o9XG5rKGEuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO3A9YTtyZXR1cm4gQj0hMH0scmVzZXRIeWRyYXRpb25TdGF0ZTpmdW5jdGlvbigpe3o9cD1udWxsO0I9ITF9LHRyeVRvQ2xhaW1OZXh0SHlkcmF0YWJsZUluc3RhbmNlOmZ1bmN0aW9uKGEpe2lmKEIpe3ZhciBkPXo7aWYoZCl7aWYoIWMoYSxkKSl7ZD1nKGQpO2lmKCFkfHwhYyhhLGQpKXthLmVmZmVjdFRhZ3w9MjtCPSExO3A9YTtyZXR1cm59YihwLHopfXA9YTt6PWsoZCl9ZWxzZSBhLmVmZmVjdFRhZ3w9MixCPSExLHA9YX19LHByZXBhcmVUb0h5ZHJhdGVIb3N0SW5zdGFuY2U6ZnVuY3Rpb24oYSxiLGMpe2I9dihhLnN0YXRlTm9kZSxhLnR5cGUsYS5tZW1vaXplZFByb3BzLGIsYyxhKTthLnVwZGF0ZVF1ZXVlPWI7cmV0dXJuIG51bGwhPT1iPyEwOiExfSxwcmVwYXJlVG9IeWRyYXRlSG9zdFRleHRJbnN0YW5jZTpmdW5jdGlvbihhKXtyZXR1cm4gbChhLnN0YXRlTm9kZSxhLm1lbW9pemVkUHJvcHMsYSl9LHBvcEh5ZHJhdGlvblN0YXRlOmZ1bmN0aW9uKGEpe2lmKGEhPT1cbnApcmV0dXJuITE7aWYoIUIpcmV0dXJuIGQoYSksQj0hMCwhMTt2YXIgYz1hLnR5cGU7aWYoNSE9PWEudGFnfHxcImhlYWRcIiE9PWMmJlwiYm9keVwiIT09YyYmIWUoYyxhLm1lbW9pemVkUHJvcHMpKWZvcihjPXo7YzspYihhLGMpLGM9ZyhjKTtkKGEpO3o9cD9nKGEuc3RhdGVOb2RlKTpudWxsO3JldHVybiEwfX19XG5mdW5jdGlvbiBoZihhKXtmdW5jdGlvbiBiKGEsYixjKXthPWEuc3RhdGVOb2RlO2EuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1iO2EuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9Y31mdW5jdGlvbiBjKGEpe3JldHVybiAyPT09YS50YWcmJm51bGwhPWEudHlwZS5jaGlsZENvbnRleHRUeXBlc31mdW5jdGlvbiBkKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGUsZD1hLnR5cGUuY2hpbGRDb250ZXh0VHlwZXM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGMuZ2V0Q2hpbGRDb250ZXh0KXJldHVybiBiO2M9Yy5nZXRDaGlsZENvbnRleHQoKTtmb3IodmFyIGUgaW4gYyllIGluIGQ/dm9pZCAwOkQoXCIxMDhcIixBYyhhKXx8XCJVbmtub3duXCIsZSk7cmV0dXJuIEEoe30sYixjKX12YXIgZT1hLmNyZWF0ZUN1cnNvcixmPWEucHVzaCxoPWEucG9wLGc9ZShrYSksaz1lKCExKSx2PWthO3JldHVybntnZXRVbm1hc2tlZENvbnRleHQ6ZnVuY3Rpb24oYSl7cmV0dXJuIGMoYSk/XG52OmcuY3VycmVudH0sY2FjaGVDb250ZXh0OmIsZ2V0TWFza2VkQ29udGV4dDpmdW5jdGlvbihhLGMpe3ZhciBkPWEudHlwZS5jb250ZXh0VHlwZXM7aWYoIWQpcmV0dXJuIGthO3ZhciBlPWEuc3RhdGVOb2RlO2lmKGUmJmUuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD09PWMpcmV0dXJuIGUuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ7dmFyIGY9e30sZztmb3IoZyBpbiBkKWZbZ109Y1tnXTtlJiZiKGEsYyxmKTtyZXR1cm4gZn0saGFzQ29udGV4dENoYW5nZWQ6ZnVuY3Rpb24oKXtyZXR1cm4gay5jdXJyZW50fSxpc0NvbnRleHRDb25zdW1lcjpmdW5jdGlvbihhKXtyZXR1cm4gMj09PWEudGFnJiZudWxsIT1hLnR5cGUuY29udGV4dFR5cGVzfSxpc0NvbnRleHRQcm92aWRlcjpjLHBvcENvbnRleHRQcm92aWRlcjpmdW5jdGlvbihhKXtjKGEpJiYoaChrLGEpLGgoZyxhKSl9LHBvcFRvcExldmVsQ29udGV4dE9iamVjdDpmdW5jdGlvbihhKXtoKGssXG5hKTtoKGcsYSl9LHB1c2hUb3BMZXZlbENvbnRleHRPYmplY3Q6ZnVuY3Rpb24oYSxiLGMpe251bGwhPWcuY3Vyc29yP0QoXCIxNjhcIik6dm9pZCAwO2YoZyxiLGEpO2YoayxjLGEpfSxwcm9jZXNzQ2hpbGRDb250ZXh0OmQscHVzaENvbnRleHRQcm92aWRlcjpmdW5jdGlvbihhKXtpZighYyhhKSlyZXR1cm4hMTt2YXIgYj1hLnN0YXRlTm9kZTtiPWImJmIuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHR8fGthO3Y9Zy5jdXJyZW50O2YoZyxiLGEpO2YoayxrLmN1cnJlbnQsYSk7cmV0dXJuITB9LGludmFsaWRhdGVDb250ZXh0UHJvdmlkZXI6ZnVuY3Rpb24oYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtjP3ZvaWQgMDpEKFwiMTY5XCIpO2lmKGIpe3ZhciBlPWQoYSx2KTtjLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0PWU7aChrLGEpO2goZyxhKTtmKGcsZSxhKX1lbHNlIGgoayxhKTtmKGssYixhKX0sZmluZEN1cnJlbnRVbm1hc2tlZENvbnRleHQ6ZnVuY3Rpb24oYSl7Zm9yKDIhPT1cbnhkKGEpfHwyIT09YS50YWc/RChcIjE3MFwiKTp2b2lkIDA7MyE9PWEudGFnOyl7aWYoYyhhKSlyZXR1cm4gYS5zdGF0ZU5vZGUuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ7KGE9YVtcInJldHVyblwiXSk/dm9pZCAwOkQoXCIxNzFcIil9cmV0dXJuIGEuc3RhdGVOb2RlLmNvbnRleHR9fX1cbmZ1bmN0aW9uIGpmKGEpe3ZhciBiPWEuY3JlYXRlQ3Vyc29yLGM9YS5wdXNoLGQ9YS5wb3AsZT1iKG51bGwpLGY9YihudWxsKSxoPWIoMCk7cmV0dXJue3B1c2hQcm92aWRlcjpmdW5jdGlvbihhKXt2YXIgYj1hLnR5cGUuX2NvbnRleHQ7YyhoLGIuX2NoYW5nZWRCaXRzLGEpO2MoZixiLl9jdXJyZW50VmFsdWUsYSk7YyhlLGEsYSk7Yi5fY3VycmVudFZhbHVlPWEucGVuZGluZ1Byb3BzLnZhbHVlO2IuX2NoYW5nZWRCaXRzPWEuc3RhdGVOb2RlfSxwb3BQcm92aWRlcjpmdW5jdGlvbihhKXt2YXIgYj1oLmN1cnJlbnQsYz1mLmN1cnJlbnQ7ZChlLGEpO2QoZixhKTtkKGgsYSk7YT1hLnR5cGUuX2NvbnRleHQ7YS5fY3VycmVudFZhbHVlPWM7YS5fY2hhbmdlZEJpdHM9Yn19fVxuZnVuY3Rpb24ga2YoKXt2YXIgYT1bXSxiPS0xO3JldHVybntjcmVhdGVDdXJzb3I6ZnVuY3Rpb24oYSl7cmV0dXJue2N1cnJlbnQ6YX19LGlzRW1wdHk6ZnVuY3Rpb24oKXtyZXR1cm4tMT09PWJ9LHBvcDpmdW5jdGlvbihjKXswPmJ8fChjLmN1cnJlbnQ9YVtiXSxhW2JdPW51bGwsYi0tKX0scHVzaDpmdW5jdGlvbihjLGQpe2IrKzthW2JdPWMuY3VycmVudDtjLmN1cnJlbnQ9ZH0sY2hlY2tUaGF0U3RhY2tJc0VtcHR5OmZ1bmN0aW9uKCl7fSxyZXNldFN0YWNrQWZ0ZXJGYXRhbEVycm9ySW5EZXY6ZnVuY3Rpb24oKXt9fX1cbmZ1bmN0aW9uIGxmKGEpe2Z1bmN0aW9uIGIoKXtpZihudWxsIT09SSlmb3IodmFyIGE9SVtcInJldHVyblwiXTtudWxsIT09YTspTGMoYSksYT1hW1wicmV0dXJuXCJdO1lhPW51bGw7Wj0wO0k9bnVsbDtOYz0hMX1mdW5jdGlvbiBjKGEpe3JldHVybiBudWxsIT09eWEmJnlhLmhhcyhhKX1mdW5jdGlvbiBkKGEpe2Zvcig7Oyl7dmFyIGI9YS5hbHRlcm5hdGUsYz1hW1wicmV0dXJuXCJdLGQ9YS5zaWJsaW5nO2lmKDA9PT0oYS5lZmZlY3RUYWcmNTEyKSl7Yj1DYihiLGEsWik7dmFyIGU9YTtpZigxMDczNzQxODIzPT09Wnx8MTA3Mzc0MTgyMyE9PWUuZXhwaXJhdGlvblRpbWUpe2I6c3dpdGNoKGUudGFnKXtjYXNlIDM6Y2FzZSAyOnZhciBmPWUudXBkYXRlUXVldWU7Zj1udWxsPT09Zj8wOmYuZXhwaXJhdGlvblRpbWU7YnJlYWsgYjtkZWZhdWx0OmY9MH1mb3IodmFyIGc9ZS5jaGlsZDtudWxsIT09ZzspMCE9PWcuZXhwaXJhdGlvblRpbWUmJigwPT09Znx8Zj5nLmV4cGlyYXRpb25UaW1lKSYmKGY9XG5nLmV4cGlyYXRpb25UaW1lKSxnPWcuc2libGluZztlLmV4cGlyYXRpb25UaW1lPWZ9aWYobnVsbCE9PWIpcmV0dXJuIGI7bnVsbCE9PWMmJjA9PT0oYy5lZmZlY3RUYWcmNTEyKSYmKG51bGw9PT1jLmZpcnN0RWZmZWN0JiYoYy5maXJzdEVmZmVjdD1hLmZpcnN0RWZmZWN0KSxudWxsIT09YS5sYXN0RWZmZWN0JiYobnVsbCE9PWMubGFzdEVmZmVjdCYmKGMubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWEuZmlyc3RFZmZlY3QpLGMubGFzdEVmZmVjdD1hLmxhc3RFZmZlY3QpLDE8YS5lZmZlY3RUYWcmJihudWxsIT09Yy5sYXN0RWZmZWN0P2MubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWE6Yy5maXJzdEVmZmVjdD1hLGMubGFzdEVmZmVjdD1hKSk7aWYobnVsbCE9PWQpcmV0dXJuIGQ7aWYobnVsbCE9PWMpYT1jO2Vsc2V7TmM9ITA7YnJlYWt9fWVsc2V7YT1LYyhhKTtpZihudWxsIT09YSlyZXR1cm4gYS5lZmZlY3RUYWcmPTI1NTksYTtudWxsIT09YyYmKGMuZmlyc3RFZmZlY3Q9Yy5sYXN0RWZmZWN0PVxubnVsbCxjLmVmZmVjdFRhZ3w9NTEyKTtpZihudWxsIT09ZClyZXR1cm4gZDtpZihudWxsIT09YylhPWM7ZWxzZSBicmVha319cmV0dXJuIG51bGx9ZnVuY3Rpb24gZShhKXt2YXIgYj1XYShhLmFsdGVybmF0ZSxhLFopO251bGw9PT1iJiYoYj1kKGEpKTtuYy5jdXJyZW50PW51bGw7cmV0dXJuIGJ9ZnVuY3Rpb24gZihhLGMsZil7Y2E/RChcIjI0M1wiKTp2b2lkIDA7Y2E9ITA7aWYoYyE9PVp8fGEhPT1ZYXx8bnVsbD09PUkpYigpLFlhPWEsWj1jLEk9emUoWWEuY3VycmVudCxudWxsLFopLGEucGVuZGluZ0NvbW1pdEV4cGlyYXRpb25UaW1lPTA7dmFyIGc9ITE7ZG97dHJ5e2lmKGYpZm9yKDtudWxsIT09SSYmIVMoKTspST1lKEkpO2Vsc2UgZm9yKDtudWxsIT09STspST1lKEkpfWNhdGNoKE9jKXtpZihudWxsPT09SSl7Zz0hMDtxKE9jKTticmVha31mPUk7dmFyIGg9ZltcInJldHVyblwiXTtpZihudWxsPT09aCl7Zz0hMDtxKE9jKTticmVha31KYyhoLGYsT2MpO0k9ZChmKX1icmVha313aGlsZSgxKTtcbmNhPSExO2lmKGd8fG51bGwhPT1JKXJldHVybiBudWxsO2lmKE5jKXJldHVybiBhLnBlbmRpbmdDb21taXRFeHBpcmF0aW9uVGltZT1jLGEuY3VycmVudC5hbHRlcm5hdGU7RChcIjI2MlwiKX1mdW5jdGlvbiBoKGEsYixjLGQpe2E9e3ZhbHVlOmMsc291cmNlOmEsc3RhY2s6QmMoYSl9O1BlKGIse2V4cGlyYXRpb25UaW1lOmQscGFydGlhbFN0YXRlOm51bGwsY2FsbGJhY2s6bnVsbCxpc1JlcGxhY2U6ITEsaXNGb3JjZWQ6ITEsY2FwdHVyZWRWYWx1ZTphLG5leHQ6bnVsbH0pO3YoYixkKX1mdW5jdGlvbiBnKGEsYil7YTp7Y2EmJiFaYT9EKFwiMjYzXCIpOnZvaWQgMDtmb3IodmFyIGQ9YVtcInJldHVyblwiXTtudWxsIT09ZDspe3N3aXRjaChkLnRhZyl7Y2FzZSAyOnZhciBlPWQuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUNhdGNofHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnREaWRDYXRjaCYmIWMoZSkpe2goYSxkLGIsXG4xKTthPXZvaWQgMDticmVhayBhfWJyZWFrO2Nhc2UgMzpoKGEsZCxiLDEpO2E9dm9pZCAwO2JyZWFrIGF9ZD1kW1wicmV0dXJuXCJdfTM9PT1hLnRhZyYmaChhLGEsYiwxKTthPXZvaWQgMH1yZXR1cm4gYX1mdW5jdGlvbiBrKGEpe2E9MCE9PWlhP2lhOmNhP1phPzE6WjphLm1vZGUmMT96YT8xMCooKChsKCkrMTUpLzEwfDApKzEpOjI1KigoKGwoKSs1MDApLzI1fDApKzEpOjE7emEmJigwPT09ZGF8fGE+ZGEpJiYoZGE9YSk7cmV0dXJuIGF9ZnVuY3Rpb24gdihhLGMpe2E6e2Zvcig7bnVsbCE9PWE7KXtpZigwPT09YS5leHBpcmF0aW9uVGltZXx8YS5leHBpcmF0aW9uVGltZT5jKWEuZXhwaXJhdGlvblRpbWU9YztudWxsIT09YS5hbHRlcm5hdGUmJigwPT09YS5hbHRlcm5hdGUuZXhwaXJhdGlvblRpbWV8fGEuYWx0ZXJuYXRlLmV4cGlyYXRpb25UaW1lPmMpJiYoYS5hbHRlcm5hdGUuZXhwaXJhdGlvblRpbWU9Yyk7aWYobnVsbD09PWFbXCJyZXR1cm5cIl0paWYoMz09PWEudGFnKXt2YXIgZD1cbmEuc3RhdGVOb2RlOyFjYSYmMCE9PVomJmM8WiYmYigpO2NhJiYhWmEmJllhPT09ZHx8QihkLGMpO0ZiPnhnJiZEKFwiMTg1XCIpfWVsc2V7Yz12b2lkIDA7YnJlYWsgYX1hPWFbXCJyZXR1cm5cIl19Yz12b2lkIDB9cmV0dXJuIGN9ZnVuY3Rpb24gbCgpe3llPUljKCktUGM7cmV0dXJuIHlnPSh5ZS8xMHwwKSsyfWZ1bmN0aW9uIHAoYSxiLGMsZCxlKXt2YXIgZj1pYTtpYT0xO3RyeXtyZXR1cm4gYShiLGMsZCxlKX1maW5hbGx5e2lhPWZ9fWZ1bmN0aW9uIHooYSl7aWYoMCE9PUdiKXtpZihhPkdiKXJldHVybjttZyhRYyl9dmFyIGI9SWMoKS1QYztHYj1hO1FjPWxnKFEse3RpbWVvdXQ6MTAqKGEtMiktYn0pfWZ1bmN0aW9uIEIoYSxiKXtpZihudWxsPT09YS5uZXh0U2NoZWR1bGVkUm9vdClhLnJlbWFpbmluZ0V4cGlyYXRpb25UaW1lPWIsbnVsbD09PUs/KGxhPUs9YSxhLm5leHRTY2hlZHVsZWRSb290PWEpOihLPUsubmV4dFNjaGVkdWxlZFJvb3Q9YSxLLm5leHRTY2hlZHVsZWRSb290PWxhKTtcbmVsc2V7dmFyIGM9YS5yZW1haW5pbmdFeHBpcmF0aW9uVGltZTtpZigwPT09Y3x8YjxjKWEucmVtYWluaW5nRXhwaXJhdGlvblRpbWU9Yn1UfHwoSj9IYiYmKGFhPWEsUD0xLEcoYSwxLCExKSk6MT09PWI/bigpOnooYikpfWZ1bmN0aW9uIHIoKXt2YXIgYT0wLGI9bnVsbDtpZihudWxsIT09Sylmb3IodmFyIGM9SyxkPWxhO251bGwhPT1kOyl7dmFyIGU9ZC5yZW1haW5pbmdFeHBpcmF0aW9uVGltZTtpZigwPT09ZSl7bnVsbD09PWN8fG51bGw9PT1LP0QoXCIyNDRcIik6dm9pZCAwO2lmKGQ9PT1kLm5leHRTY2hlZHVsZWRSb290KXtsYT1LPWQubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDticmVha31lbHNlIGlmKGQ9PT1sYSlsYT1lPWQubmV4dFNjaGVkdWxlZFJvb3QsSy5uZXh0U2NoZWR1bGVkUm9vdD1lLGQubmV4dFNjaGVkdWxlZFJvb3Q9bnVsbDtlbHNlIGlmKGQ9PT1LKXtLPWM7Sy5uZXh0U2NoZWR1bGVkUm9vdD1sYTtkLm5leHRTY2hlZHVsZWRSb290PW51bGw7YnJlYWt9ZWxzZSBjLm5leHRTY2hlZHVsZWRSb290PVxuZC5uZXh0U2NoZWR1bGVkUm9vdCxkLm5leHRTY2hlZHVsZWRSb290PW51bGw7ZD1jLm5leHRTY2hlZHVsZWRSb290fWVsc2V7aWYoMD09PWF8fGU8YSlhPWUsYj1kO2lmKGQ9PT1LKWJyZWFrO2M9ZDtkPWQubmV4dFNjaGVkdWxlZFJvb3R9fWM9YWE7bnVsbCE9PWMmJmM9PT1iJiYxPT09YT9GYisrOkZiPTA7YWE9YjtQPWF9ZnVuY3Rpb24gUShhKXt4KDAsITAsYSl9ZnVuY3Rpb24gbigpe3goMSwhMSxudWxsKX1mdW5jdGlvbiB4KGEsYixjKXskYT1jO3IoKTtpZihiKWZvcig7bnVsbCE9PWFhJiYwIT09UCYmKDA9PT1hfHxhPj1QKSYmKCFJYnx8bCgpPj1QKTspRyhhYSxQLCFJYikscigpO2Vsc2UgZm9yKDtudWxsIT09YWEmJjAhPT1QJiYoMD09PWF8fGE+PVApOylHKGFhLFAsITEpLHIoKTtudWxsIT09JGEmJihHYj0wLFFjPS0xKTswIT09UCYmeihQKTskYT1udWxsO0liPSExO1koKX1mdW5jdGlvbiBZKCl7RmI9MDtpZihudWxsIT09QWEpe3ZhciBhPUFhO0FhPW51bGw7Zm9yKHZhciBiPVxuMDtiPGEubGVuZ3RoO2IrKyl7dmFyIGM9YVtiXTt0cnl7Yy5fb25Db21wbGV0ZSgpfWNhdGNoKHdnKXtCYXx8KEJhPSEwLEpiPXdnKX19fWlmKEJhKXRocm93IGE9SmIsSmI9bnVsbCxCYT0hMSxhO31mdW5jdGlvbiBHKGEsYixjKXtUP0QoXCIyNDVcIik6dm9pZCAwO1Q9ITA7Yz8oYz1hLmZpbmlzaGVkV29yayxudWxsIT09Yz9SKGEsYyxiKTooYS5maW5pc2hlZFdvcms9bnVsbCxjPWYoYSxiLCEwKSxudWxsIT09YyYmKFMoKT9hLmZpbmlzaGVkV29yaz1jOlIoYSxjLGIpKSkpOihjPWEuZmluaXNoZWRXb3JrLG51bGwhPT1jP1IoYSxjLGIpOihhLmZpbmlzaGVkV29yaz1udWxsLGM9ZihhLGIsITEpLG51bGwhPT1jJiZSKGEsYyxiKSkpO1Q9ITF9ZnVuY3Rpb24gUihhLGIsYyl7dmFyIGQ9YS5maXJzdEJhdGNoO2lmKG51bGwhPT1kJiZkLl9leHBpcmF0aW9uVGltZTw9YyYmKG51bGw9PT1BYT9BYT1bZF06QWEucHVzaChkKSxkLl9kZWZlcikpe2EuZmluaXNoZWRXb3JrPWI7YS5yZW1haW5pbmdFeHBpcmF0aW9uVGltZT1cbjA7cmV0dXJufWEuZmluaXNoZWRXb3JrPW51bGw7WmE9Y2E9ITA7Yz1iLnN0YXRlTm9kZTtjLmN1cnJlbnQ9PT1iP0QoXCIxNzdcIik6dm9pZCAwO2Q9Yy5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU7MD09PWQ/RChcIjI2MVwiKTp2b2lkIDA7Yy5wZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU9MDt2YXIgZT1sKCk7bmMuY3VycmVudD1udWxsO2lmKDE8Yi5lZmZlY3RUYWcpaWYobnVsbCE9PWIubGFzdEVmZmVjdCl7Yi5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9Yjt2YXIgZj1iLmZpcnN0RWZmZWN0fWVsc2UgZj1iO2Vsc2UgZj1iLmZpcnN0RWZmZWN0O3pnKGMuY29udGFpbmVySW5mbyk7Zm9yKHc9ZjtudWxsIT09dzspe3ZhciBoPSExLGs9dm9pZCAwO3RyeXtmb3IoO251bGwhPT13Oyl3LmVmZmVjdFRhZyYyMDQ4JiZEYih3LmFsdGVybmF0ZSx3KSx3PXcubmV4dEVmZmVjdH1jYXRjaChhYil7aD0hMCxrPWFifWgmJihudWxsPT09dz9EKFwiMTc4XCIpOnZvaWQgMCxnKHcsayksbnVsbCE9PVxudyYmKHc9dy5uZXh0RWZmZWN0KSl9Zm9yKHc9ZjtudWxsIT09dzspe2g9ITE7az12b2lkIDA7dHJ5e2Zvcig7bnVsbCE9PXc7KXt2YXIgcD13LmVmZmVjdFRhZztwJjE2JiZNYyh3KTtpZihwJjEyOCl7dmFyIG49dy5hbHRlcm5hdGU7bnVsbCE9PW4mJmtnKG4pfXN3aXRjaChwJjE0KXtjYXNlIDI6RWIodyk7dy5lZmZlY3RUYWcmPS0zO2JyZWFrO2Nhc2UgNjpFYih3KTt3LmVmZmVjdFRhZyY9LTM7d2Uody5hbHRlcm5hdGUsdyk7YnJlYWs7Y2FzZSA0OndlKHcuYWx0ZXJuYXRlLHcpO2JyZWFrO2Nhc2UgODpnZyh3KX13PXcubmV4dEVmZmVjdH19Y2F0Y2goYWIpe2g9ITAsaz1hYn1oJiYobnVsbD09PXc/RChcIjE3OFwiKTp2b2lkIDAsZyh3LGspLG51bGwhPT13JiYodz13Lm5leHRFZmZlY3QpKX1BZyhjLmNvbnRhaW5lckluZm8pO2MuY3VycmVudD1iO2Zvcih3PWY7bnVsbCE9PXc7KXtwPSExO249dm9pZCAwO3RyeXtmb3IoZj1jLGg9ZSxrPWQ7bnVsbCE9PXc7KXt2YXIgcj13LmVmZmVjdFRhZztcbnImMzYmJmhnKGYsdy5hbHRlcm5hdGUsdyxoLGspO3ImMjU2JiZpZyh3LHEpO3ImMTI4JiZqZyh3KTt2YXIgdD13Lm5leHRFZmZlY3Q7dy5uZXh0RWZmZWN0PW51bGw7dz10fX1jYXRjaChhYil7cD0hMCxuPWFifXAmJihudWxsPT09dz9EKFwiMTc4XCIpOnZvaWQgMCxnKHcsbiksbnVsbCE9PXcmJih3PXcubmV4dEVmZmVjdCkpfWNhPVphPSExO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBJZSYmSWUoYi5zdGF0ZU5vZGUpO2I9Yy5jdXJyZW50LmV4cGlyYXRpb25UaW1lOzA9PT1iJiYoeWE9bnVsbCk7YS5yZW1haW5pbmdFeHBpcmF0aW9uVGltZT1ifWZ1bmN0aW9uIFMoKXtyZXR1cm4gbnVsbD09PSRhfHwkYS50aW1lUmVtYWluaW5nKCk+Qmc/ITE6SWI9ITB9ZnVuY3Rpb24gcShhKXtudWxsPT09YWE/RChcIjI0NlwiKTp2b2lkIDA7YWEucmVtYWluaW5nRXhwaXJhdGlvblRpbWU9MDtCYXx8KEJhPSEwLEpiPWEpfXZhciB1PWtmKCksdD1mZihhLHUpLHk9aGYodSk7dT1qZih1KTt2YXIgSD1nZihhKSxcbldhPSRlKGEsdCx5LHUsSCx2LGspLmJlZ2luV29yayxDYj1hZihhLHQseSx1LEgpLmNvbXBsZXRlV29yazt0PWJmKHQseSx1LHYsYyk7dmFyIEpjPXQudGhyb3dFeGNlcHRpb24sS2M9dC51bndpbmRXb3JrLExjPXQudW53aW5kSW50ZXJydXB0ZWRXb3JrO3Q9ZGYoYSxnLHYsayxmdW5jdGlvbihhKXtudWxsPT09eWE/eWE9bmV3IFNldChbYV0pOnlhLmFkZChhKX0sbCk7dmFyIERiPXQuY29tbWl0QmVmb3JlTXV0YXRpb25MaWZlQ3ljbGVzLE1jPXQuY29tbWl0UmVzZXRUZXh0Q29udGVudCxFYj10LmNvbW1pdFBsYWNlbWVudCxnZz10LmNvbW1pdERlbGV0aW9uLHdlPXQuY29tbWl0V29yayxoZz10LmNvbW1pdExpZmVDeWNsZXMsaWc9dC5jb21taXRFcnJvckxvZ2dpbmcsamc9dC5jb21taXRBdHRhY2hSZWYsa2c9dC5jb21taXREZXRhY2hSZWYsSWM9YS5ub3csbGc9YS5zY2hlZHVsZURlZmVycmVkQ2FsbGJhY2ssbWc9YS5jYW5jZWxEZWZlcnJlZENhbGxiYWNrLHpnPWEucHJlcGFyZUZvckNvbW1pdCxcbkFnPWEucmVzZXRBZnRlckNvbW1pdCxQYz1JYygpLHlnPTIseWU9UGMsUmM9MCxpYT0wLGNhPSExLEk9bnVsbCxZYT1udWxsLFo9MCx3PW51bGwsWmE9ITEsTmM9ITEseWE9bnVsbCxsYT1udWxsLEs9bnVsbCxHYj0wLFFjPS0xLFQ9ITEsYWE9bnVsbCxQPTAsZGE9MCxJYj0hMSxCYT0hMSxKYj1udWxsLCRhPW51bGwsSj0hMSxIYj0hMSx6YT0hMSxBYT1udWxsLHhnPTFFMyxGYj0wLEJnPTE7cmV0dXJue3JlY2FsY3VsYXRlQ3VycmVudFRpbWU6bCxjb21wdXRlRXhwaXJhdGlvbkZvckZpYmVyOmssc2NoZWR1bGVXb3JrOnYscmVxdWVzdFdvcms6QixmbHVzaFJvb3Q6ZnVuY3Rpb24oYSxiKXtUP0QoXCIyNTNcIik6dm9pZCAwO2FhPWE7UD1iO0coYSxiLCExKTtuKCk7WSgpfSxiYXRjaGVkVXBkYXRlczpmdW5jdGlvbihhLGIpe3ZhciBjPUo7Sj0hMDt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXsoSj1jKXx8VHx8bigpfX0sdW5iYXRjaGVkVXBkYXRlczpmdW5jdGlvbihhLGIpe2lmKEomJiFIYil7SGI9XG4hMDt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtIYj0hMX19cmV0dXJuIGEoYil9LGZsdXNoU3luYzpmdW5jdGlvbihhLGIpe1Q/RChcIjE4N1wiKTp2b2lkIDA7dmFyIGM9SjtKPSEwO3RyeXtyZXR1cm4gcChhLGIpfWZpbmFsbHl7Sj1jLG4oKX19LGZsdXNoQ29udHJvbGxlZDpmdW5jdGlvbihhKXt2YXIgYj1KO0o9ITA7dHJ5e3AoYSl9ZmluYWxseXsoSj1iKXx8VHx8eCgxLCExLG51bGwpfX0sZGVmZXJyZWRVcGRhdGVzOmZ1bmN0aW9uKGEpe3ZhciBiPWlhO2lhPTI1KigoKGwoKSs1MDApLzI1fDApKzEpO3RyeXtyZXR1cm4gYSgpfWZpbmFsbHl7aWE9Yn19LHN5bmNVcGRhdGVzOnAsaW50ZXJhY3RpdmVVcGRhdGVzOmZ1bmN0aW9uKGEsYixjKXtpZih6YSlyZXR1cm4gYShiLGMpO0p8fFR8fDA9PT1kYXx8KHgoZGEsITEsbnVsbCksZGE9MCk7dmFyIGQ9emEsZT1KO0o9emE9ITA7dHJ5e3JldHVybiBhKGIsYyl9ZmluYWxseXt6YT1kLChKPWUpfHxUfHxuKCl9fSxmbHVzaEludGVyYWN0aXZlVXBkYXRlczpmdW5jdGlvbigpe1R8fFxuMD09PWRhfHwoeChkYSwhMSxudWxsKSxkYT0wKX0sY29tcHV0ZVVuaXF1ZUFzeW5jRXhwaXJhdGlvbjpmdW5jdGlvbigpe3ZhciBhPTI1KigoKGwoKSs1MDApLzI1fDApKzEpO2E8PVJjJiYoYT1SYysxKTtyZXR1cm4gUmM9YX0sbGVnYWN5Q29udGV4dDp5fX1cbmZ1bmN0aW9uIG1mKGEpe2Z1bmN0aW9uIGIoYSxiLGMsZCxlLGgpe2Q9Yi5jdXJyZW50O2lmKGMpe2M9Yy5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBsPWcoYyk7Yz1rKGMpP3YoYyxsKTpsfWVsc2UgYz1rYTtudWxsPT09Yi5jb250ZXh0P2IuY29udGV4dD1jOmIucGVuZGluZ0NvbnRleHQ9YztiPWg7UGUoZCx7ZXhwaXJhdGlvblRpbWU6ZSxwYXJ0aWFsU3RhdGU6e2VsZW1lbnQ6YX0sY2FsbGJhY2s6dm9pZCAwPT09Yj9udWxsOmIsaXNSZXBsYWNlOiExLGlzRm9yY2VkOiExLGNhcHR1cmVkVmFsdWU6bnVsbCxuZXh0Om51bGx9KTtmKGQsZSk7cmV0dXJuIGV9dmFyIGM9YS5nZXRQdWJsaWNJbnN0YW5jZTthPWxmKGEpO3ZhciBkPWEucmVjYWxjdWxhdGVDdXJyZW50VGltZSxlPWEuY29tcHV0ZUV4cGlyYXRpb25Gb3JGaWJlcixmPWEuc2NoZWR1bGVXb3JrLGg9YS5sZWdhY3lDb250ZXh0LGc9aC5maW5kQ3VycmVudFVubWFza2VkQ29udGV4dCxrPWguaXNDb250ZXh0UHJvdmlkZXIsdj1cbmgucHJvY2Vzc0NoaWxkQ29udGV4dDtyZXR1cm57Y3JlYXRlQ29udGFpbmVyOmZ1bmN0aW9uKGEsYixjKXtiPW5ldyB4ZSgzLG51bGwsbnVsbCxiPzM6MCk7YT17Y3VycmVudDpiLGNvbnRhaW5lckluZm86YSxwZW5kaW5nQ2hpbGRyZW46bnVsbCxwZW5kaW5nQ29tbWl0RXhwaXJhdGlvblRpbWU6MCxmaW5pc2hlZFdvcms6bnVsbCxjb250ZXh0Om51bGwscGVuZGluZ0NvbnRleHQ6bnVsbCxoeWRyYXRlOmMscmVtYWluaW5nRXhwaXJhdGlvblRpbWU6MCxmaXJzdEJhdGNoOm51bGwsbmV4dFNjaGVkdWxlZFJvb3Q6bnVsbH07cmV0dXJuIGIuc3RhdGVOb2RlPWF9LHVwZGF0ZUNvbnRhaW5lcjpmdW5jdGlvbihhLGMsZixoKXt2YXIgZz1jLmN1cnJlbnQsaz1kKCk7Zz1lKGcpO3JldHVybiBiKGEsYyxmLGssZyxoKX0sdXBkYXRlQ29udGFpbmVyQXRFeHBpcmF0aW9uVGltZTpmdW5jdGlvbihhLGMsZSxmLGcpe3ZhciBoPWQoKTtyZXR1cm4gYihhLGMsZSxoLGYsZyl9LGZsdXNoUm9vdDphLmZsdXNoUm9vdCxcbnJlcXVlc3RXb3JrOmEucmVxdWVzdFdvcmssY29tcHV0ZVVuaXF1ZUFzeW5jRXhwaXJhdGlvbjphLmNvbXB1dGVVbmlxdWVBc3luY0V4cGlyYXRpb24sYmF0Y2hlZFVwZGF0ZXM6YS5iYXRjaGVkVXBkYXRlcyx1bmJhdGNoZWRVcGRhdGVzOmEudW5iYXRjaGVkVXBkYXRlcyxkZWZlcnJlZFVwZGF0ZXM6YS5kZWZlcnJlZFVwZGF0ZXMsc3luY1VwZGF0ZXM6YS5zeW5jVXBkYXRlcyxpbnRlcmFjdGl2ZVVwZGF0ZXM6YS5pbnRlcmFjdGl2ZVVwZGF0ZXMsZmx1c2hJbnRlcmFjdGl2ZVVwZGF0ZXM6YS5mbHVzaEludGVyYWN0aXZlVXBkYXRlcyxmbHVzaENvbnRyb2xsZWQ6YS5mbHVzaENvbnRyb2xsZWQsZmx1c2hTeW5jOmEuZmx1c2hTeW5jLGdldFB1YmxpY1Jvb3RJbnN0YW5jZTpmdW5jdGlvbihhKXthPWEuY3VycmVudDtpZighYS5jaGlsZClyZXR1cm4gbnVsbDtzd2l0Y2goYS5jaGlsZC50YWcpe2Nhc2UgNTpyZXR1cm4gYyhhLmNoaWxkLnN0YXRlTm9kZSk7ZGVmYXVsdDpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGV9fSxcbmZpbmRIb3N0SW5zdGFuY2U6ZnVuY3Rpb24oYSl7dmFyIGI9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZvaWQgMD09PWImJihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5yZW5kZXI/RChcIjE4OFwiKTpEKFwiMjY4XCIsT2JqZWN0LmtleXMoYSkpKTthPUJkKGIpO3JldHVybiBudWxsPT09YT9udWxsOmEuc3RhdGVOb2RlfSxmaW5kSG9zdEluc3RhbmNlV2l0aE5vUG9ydGFsczpmdW5jdGlvbihhKXthPUNkKGEpO3JldHVybiBudWxsPT09YT9udWxsOmEuc3RhdGVOb2RlfSxpbmplY3RJbnRvRGV2VG9vbHM6ZnVuY3Rpb24oYSl7dmFyIGI9YS5maW5kRmliZXJCeUhvc3RJbnN0YW5jZTtyZXR1cm4gSGUoQSh7fSxhLHtmaW5kSG9zdEluc3RhbmNlQnlGaWJlcjpmdW5jdGlvbihhKXthPUJkKGEpO3JldHVybiBudWxsPT09YT9udWxsOmEuc3RhdGVOb2RlfSxmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTpmdW5jdGlvbihhKXtyZXR1cm4gYj9iKGEpOm51bGx9fSkpfX19XG52YXIgbmY9T2JqZWN0LmZyZWV6ZSh7ZGVmYXVsdDptZn0pLG9mPW5mJiZtZnx8bmYscGY9b2ZbXCJkZWZhdWx0XCJdP29mW1wiZGVmYXVsdFwiXTpvZjtmdW5jdGlvbiBxZihhLGIsYyl7dmFyIGQ9Mzxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOm51bGw7cmV0dXJueyQkdHlwZW9mOnJjLGtleTpudWxsPT1kP251bGw6XCJcIitkLGNoaWxkcmVuOmEsY29udGFpbmVySW5mbzpiLGltcGxlbWVudGF0aW9uOmN9fXZhciByZj1cIm9iamVjdFwiPT09dHlwZW9mIHBlcmZvcm1hbmNlJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgcGVyZm9ybWFuY2Uubm93LHNmPXZvaWQgMDtzZj1yZj9mdW5jdGlvbigpe3JldHVybiBwZXJmb3JtYW5jZS5ub3coKX06ZnVuY3Rpb24oKXtyZXR1cm4gRGF0ZS5ub3coKX07dmFyIHRmPXZvaWQgMCx1Zj12b2lkIDA7XG5pZihtLmNhblVzZURPTSlpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgcmVxdWVzdElkbGVDYWxsYmFja3x8XCJmdW5jdGlvblwiIT09dHlwZW9mIGNhbmNlbElkbGVDYWxsYmFjayl7dmFyIHZmPW51bGwsd2Y9ITEseGY9LTEseWY9ITEsemY9MCxBZj0zMyxCZj0zMyxDZj12b2lkIDA7Q2Y9cmY/e2RpZFRpbWVvdXQ6ITEsdGltZVJlbWFpbmluZzpmdW5jdGlvbigpe3ZhciBhPXpmLXBlcmZvcm1hbmNlLm5vdygpO3JldHVybiAwPGE/YTowfX06e2RpZFRpbWVvdXQ6ITEsdGltZVJlbWFpbmluZzpmdW5jdGlvbigpe3ZhciBhPXpmLURhdGUubm93KCk7cmV0dXJuIDA8YT9hOjB9fTt2YXIgRGY9XCJfX3JlYWN0SWRsZUNhbGxiYWNrJFwiK01hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpO3dpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibWVzc2FnZVwiLGZ1bmN0aW9uKGEpe2lmKGEuc291cmNlPT09d2luZG93JiZhLmRhdGE9PT1EZil7d2Y9ITE7YT1zZigpO2lmKDA+PXpmLWEpaWYoLTEhPT1cbnhmJiZ4Zjw9YSlDZi5kaWRUaW1lb3V0PSEwO2Vsc2V7eWZ8fCh5Zj0hMCxyZXF1ZXN0QW5pbWF0aW9uRnJhbWUoRWYpKTtyZXR1cm59ZWxzZSBDZi5kaWRUaW1lb3V0PSExO3hmPS0xO2E9dmY7dmY9bnVsbDtudWxsIT09YSYmYShDZil9fSwhMSk7dmFyIEVmPWZ1bmN0aW9uKGEpe3lmPSExO3ZhciBiPWEtemYrQmY7YjxCZiYmQWY8QmY/KDg+YiYmKGI9OCksQmY9YjxBZj9BZjpiKTpBZj1iO3pmPWErQmY7d2Z8fCh3Zj0hMCx3aW5kb3cucG9zdE1lc3NhZ2UoRGYsXCIqXCIpKX07dGY9ZnVuY3Rpb24oYSxiKXt2Zj1hO251bGwhPWImJlwibnVtYmVyXCI9PT10eXBlb2YgYi50aW1lb3V0JiYoeGY9c2YoKStiLnRpbWVvdXQpO3lmfHwoeWY9ITAscmVxdWVzdEFuaW1hdGlvbkZyYW1lKEVmKSk7cmV0dXJuIDB9O3VmPWZ1bmN0aW9uKCl7dmY9bnVsbDt3Zj0hMTt4Zj0tMX19ZWxzZSB0Zj13aW5kb3cucmVxdWVzdElkbGVDYWxsYmFjayx1Zj13aW5kb3cuY2FuY2VsSWRsZUNhbGxiYWNrO2Vsc2UgdGY9XG5mdW5jdGlvbihhKXtyZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbigpe2Eoe3RpbWVSZW1haW5pbmc6ZnVuY3Rpb24oKXtyZXR1cm4gSW5maW5pdHl9LGRpZFRpbWVvdXQ6ITF9KX0pfSx1Zj1mdW5jdGlvbihhKXtjbGVhclRpbWVvdXQoYSl9O2Z1bmN0aW9uIEZmKGEpe3ZhciBiPVwiXCI7ZWEuQ2hpbGRyZW4uZm9yRWFjaChhLGZ1bmN0aW9uKGEpe251bGw9PWF8fFwic3RyaW5nXCIhPT10eXBlb2YgYSYmXCJudW1iZXJcIiE9PXR5cGVvZiBhfHwoYis9YSl9KTtyZXR1cm4gYn1mdW5jdGlvbiBHZihhLGIpe2E9QSh7Y2hpbGRyZW46dm9pZCAwfSxiKTtpZihiPUZmKGIuY2hpbGRyZW4pKWEuY2hpbGRyZW49YjtyZXR1cm4gYX1cbmZ1bmN0aW9uIEhmKGEsYixjLGQpe2E9YS5vcHRpb25zO2lmKGIpe2I9e307Zm9yKHZhciBlPTA7ZTxjLmxlbmd0aDtlKyspYltcIiRcIitjW2VdXT0hMDtmb3IoYz0wO2M8YS5sZW5ndGg7YysrKWU9Yi5oYXNPd25Qcm9wZXJ0eShcIiRcIithW2NdLnZhbHVlKSxhW2NdLnNlbGVjdGVkIT09ZSYmKGFbY10uc2VsZWN0ZWQ9ZSksZSYmZCYmKGFbY10uZGVmYXVsdFNlbGVjdGVkPSEwKX1lbHNle2M9XCJcIitjO2I9bnVsbDtmb3IoZT0wO2U8YS5sZW5ndGg7ZSsrKXtpZihhW2VdLnZhbHVlPT09Yyl7YVtlXS5zZWxlY3RlZD0hMDtkJiYoYVtlXS5kZWZhdWx0U2VsZWN0ZWQ9ITApO3JldHVybn1udWxsIT09Ynx8YVtlXS5kaXNhYmxlZHx8KGI9YVtlXSl9bnVsbCE9PWImJihiLnNlbGVjdGVkPSEwKX19XG5mdW5jdGlvbiBJZihhLGIpe3ZhciBjPWIudmFsdWU7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsVmFsdWU6bnVsbCE9Yz9jOmIuZGVmYXVsdFZhbHVlLHdhc011bHRpcGxlOiEhYi5tdWx0aXBsZX19ZnVuY3Rpb24gSmYoYSxiKXtudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MP0QoXCI5MVwiKTp2b2lkIDA7cmV0dXJuIEEoe30sYix7dmFsdWU6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsY2hpbGRyZW46XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlfSl9ZnVuY3Rpb24gS2YoYSxiKXt2YXIgYz1iLnZhbHVlO251bGw9PWMmJihjPWIuZGVmYXVsdFZhbHVlLGI9Yi5jaGlsZHJlbixudWxsIT1iJiYobnVsbCE9Yz9EKFwiOTJcIik6dm9pZCAwLEFycmF5LmlzQXJyYXkoYikmJigxPj1iLmxlbmd0aD92b2lkIDA6RChcIjkzXCIpLGI9YlswXSksYz1cIlwiK2IpLG51bGw9PWMmJihjPVwiXCIpKTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTpcIlwiK2N9fVxuZnVuY3Rpb24gTGYoYSxiKXt2YXIgYz1iLnZhbHVlO251bGwhPWMmJihjPVwiXCIrYyxjIT09YS52YWx1ZSYmKGEudmFsdWU9YyksbnVsbD09Yi5kZWZhdWx0VmFsdWUmJihhLmRlZmF1bHRWYWx1ZT1jKSk7bnVsbCE9Yi5kZWZhdWx0VmFsdWUmJihhLmRlZmF1bHRWYWx1ZT1iLmRlZmF1bHRWYWx1ZSl9ZnVuY3Rpb24gTWYoYSl7dmFyIGI9YS50ZXh0Q29udGVudDtiPT09YS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZSYmKGEudmFsdWU9Yil9dmFyIE5mPXtodG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiLG1hdGhtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIixzdmc6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wifTtcbmZ1bmN0aW9uIE9mKGEpe3N3aXRjaChhKXtjYXNlIFwic3ZnXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO2Nhc2UgXCJtYXRoXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCI7ZGVmYXVsdDpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIn19ZnVuY3Rpb24gUGYoYSxiKXtyZXR1cm4gbnVsbD09YXx8XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hP09mKGIpOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj09PWEmJlwiZm9yZWlnbk9iamVjdFwiPT09Yj9cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIjphfVxudmFyIFFmPXZvaWQgMCxSZj1mdW5jdGlvbihhKXtyZXR1cm5cInVuZGVmaW5lZFwiIT09dHlwZW9mIE1TQXBwJiZNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbj9mdW5jdGlvbihiLGMsZCxlKXtNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbihmdW5jdGlvbigpe3JldHVybiBhKGIsYyxkLGUpfSl9OmF9KGZ1bmN0aW9uKGEsYil7aWYoYS5uYW1lc3BhY2VVUkkhPT1OZi5zdmd8fFwiaW5uZXJIVE1MXCJpbiBhKWEuaW5uZXJIVE1MPWI7ZWxzZXtRZj1RZnx8ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtRZi5pbm5lckhUTUw9XCJcXHgzY3N2Z1xceDNlXCIrYitcIlxceDNjL3N2Z1xceDNlXCI7Zm9yKGI9UWYuZmlyc3RDaGlsZDthLmZpcnN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYS5maXJzdENoaWxkKTtmb3IoO2IuZmlyc3RDaGlsZDspYS5hcHBlbmRDaGlsZChiLmZpcnN0Q2hpbGQpfX0pO1xuZnVuY3Rpb24gU2YoYSxiKXtpZihiKXt2YXIgYz1hLmZpcnN0Q2hpbGQ7aWYoYyYmYz09PWEubGFzdENoaWxkJiYzPT09Yy5ub2RlVHlwZSl7Yy5ub2RlVmFsdWU9YjtyZXR1cm59fWEudGV4dENvbnRlbnQ9Yn1cbnZhciBUZj17YW5pbWF0aW9uSXRlcmF0aW9uQ291bnQ6ITAsYm9yZGVySW1hZ2VPdXRzZXQ6ITAsYm9yZGVySW1hZ2VTbGljZTohMCxib3JkZXJJbWFnZVdpZHRoOiEwLGJveEZsZXg6ITAsYm94RmxleEdyb3VwOiEwLGJveE9yZGluYWxHcm91cDohMCxjb2x1bW5Db3VudDohMCxjb2x1bW5zOiEwLGZsZXg6ITAsZmxleEdyb3c6ITAsZmxleFBvc2l0aXZlOiEwLGZsZXhTaHJpbms6ITAsZmxleE5lZ2F0aXZlOiEwLGZsZXhPcmRlcjohMCxncmlkUm93OiEwLGdyaWRSb3dFbmQ6ITAsZ3JpZFJvd1NwYW46ITAsZ3JpZFJvd1N0YXJ0OiEwLGdyaWRDb2x1bW46ITAsZ3JpZENvbHVtbkVuZDohMCxncmlkQ29sdW1uU3BhbjohMCxncmlkQ29sdW1uU3RhcnQ6ITAsZm9udFdlaWdodDohMCxsaW5lQ2xhbXA6ITAsbGluZUhlaWdodDohMCxvcGFjaXR5OiEwLG9yZGVyOiEwLG9ycGhhbnM6ITAsdGFiU2l6ZTohMCx3aWRvd3M6ITAsekluZGV4OiEwLHpvb206ITAsZmlsbE9wYWNpdHk6ITAsZmxvb2RPcGFjaXR5OiEwLFxuc3RvcE9wYWNpdHk6ITAsc3Ryb2tlRGFzaGFycmF5OiEwLHN0cm9rZURhc2hvZmZzZXQ6ITAsc3Ryb2tlTWl0ZXJsaW1pdDohMCxzdHJva2VPcGFjaXR5OiEwLHN0cm9rZVdpZHRoOiEwfSxVZj1bXCJXZWJraXRcIixcIm1zXCIsXCJNb3pcIixcIk9cIl07T2JqZWN0LmtleXMoVGYpLmZvckVhY2goZnVuY3Rpb24oYSl7VWYuZm9yRWFjaChmdW5jdGlvbihiKXtiPWIrYS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSthLnN1YnN0cmluZygxKTtUZltiXT1UZlthXX0pfSk7XG5mdW5jdGlvbiBWZihhLGIpe2E9YS5zdHlsZTtmb3IodmFyIGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpKXt2YXIgZD0wPT09Yy5pbmRleE9mKFwiLS1cIik7dmFyIGU9Yzt2YXIgZj1iW2NdO2U9bnVsbD09Znx8XCJib29sZWFuXCI9PT10eXBlb2YgZnx8XCJcIj09PWY/XCJcIjpkfHxcIm51bWJlclwiIT09dHlwZW9mIGZ8fDA9PT1mfHxUZi5oYXNPd25Qcm9wZXJ0eShlKSYmVGZbZV0/KFwiXCIrZikudHJpbSgpOmYrXCJweFwiO1wiZmxvYXRcIj09PWMmJihjPVwiY3NzRmxvYXRcIik7ZD9hLnNldFByb3BlcnR5KGMsZSk6YVtjXT1lfX12YXIgV2Y9QSh7bWVudWl0ZW06ITB9LHthcmVhOiEwLGJhc2U6ITAsYnI6ITAsY29sOiEwLGVtYmVkOiEwLGhyOiEwLGltZzohMCxpbnB1dDohMCxrZXlnZW46ITAsbGluazohMCxtZXRhOiEwLHBhcmFtOiEwLHNvdXJjZTohMCx0cmFjazohMCx3YnI6ITB9KTtcbmZ1bmN0aW9uIFhmKGEsYixjKXtiJiYoV2ZbYV0mJihudWxsIT1iLmNoaWxkcmVufHxudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MP0QoXCIxMzdcIixhLGMoKSk6dm9pZCAwKSxudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiYobnVsbCE9Yi5jaGlsZHJlbj9EKFwiNjBcIik6dm9pZCAwLFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmXCJfX2h0bWxcImluIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw/dm9pZCAwOkQoXCI2MVwiKSksbnVsbCE9Yi5zdHlsZSYmXCJvYmplY3RcIiE9PXR5cGVvZiBiLnN0eWxlP0QoXCI2MlwiLGMoKSk6dm9pZCAwKX1cbmZ1bmN0aW9uIFlmKGEsYil7aWYoLTE9PT1hLmluZGV4T2YoXCItXCIpKXJldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYi5pcztzd2l0Y2goYSl7Y2FzZSBcImFubm90YXRpb24teG1sXCI6Y2FzZSBcImNvbG9yLXByb2ZpbGVcIjpjYXNlIFwiZm9udC1mYWNlXCI6Y2FzZSBcImZvbnQtZmFjZS1zcmNcIjpjYXNlIFwiZm9udC1mYWNlLXVyaVwiOmNhc2UgXCJmb250LWZhY2UtZm9ybWF0XCI6Y2FzZSBcImZvbnQtZmFjZS1uYW1lXCI6Y2FzZSBcIm1pc3NpbmctZ2x5cGhcIjpyZXR1cm4hMTtkZWZhdWx0OnJldHVybiEwfX12YXIgWmY9Qy50aGF0UmV0dXJucyhcIlwiKTtcbmZ1bmN0aW9uICRmKGEsYil7YT05PT09YS5ub2RlVHlwZXx8MTE9PT1hLm5vZGVUeXBlP2E6YS5vd25lckRvY3VtZW50O3ZhciBjPWtlKGEpO2I9dmFbYl07Zm9yKHZhciBkPTA7ZDxiLmxlbmd0aDtkKyspe3ZhciBlPWJbZF07Yy5oYXNPd25Qcm9wZXJ0eShlKSYmY1tlXXx8KFwidG9wU2Nyb2xsXCI9PT1lP1pkKFwidG9wU2Nyb2xsXCIsXCJzY3JvbGxcIixhKTpcInRvcEZvY3VzXCI9PT1lfHxcInRvcEJsdXJcIj09PWU/KFpkKFwidG9wRm9jdXNcIixcImZvY3VzXCIsYSksWmQoXCJ0b3BCbHVyXCIsXCJibHVyXCIsYSksYy50b3BCbHVyPSEwLGMudG9wRm9jdXM9ITApOlwidG9wQ2FuY2VsXCI9PT1lPyhpYyhcImNhbmNlbFwiLCEwKSYmWmQoXCJ0b3BDYW5jZWxcIixcImNhbmNlbFwiLGEpLGMudG9wQ2FuY2VsPSEwKTpcInRvcENsb3NlXCI9PT1lPyhpYyhcImNsb3NlXCIsITApJiZaZChcInRvcENsb3NlXCIsXCJjbG9zZVwiLGEpLGMudG9wQ2xvc2U9ITApOmZlLmhhc093blByb3BlcnR5KGUpJiZXKGUsZmVbZV0sYSksY1tlXT0hMCl9fVxuZnVuY3Rpb24gYWcoYSxiLGMsZCl7Yz05PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudDtkPT09TmYuaHRtbCYmKGQ9T2YoYSkpO2Q9PT1OZi5odG1sP1wic2NyaXB0XCI9PT1hPyhhPWMuY3JlYXRlRWxlbWVudChcImRpdlwiKSxhLmlubmVySFRNTD1cIlxceDNjc2NyaXB0XFx4M2VcXHgzYy9zY3JpcHRcXHgzZVwiLGE9YS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpKTphPVwic3RyaW5nXCI9PT10eXBlb2YgYi5pcz9jLmNyZWF0ZUVsZW1lbnQoYSx7aXM6Yi5pc30pOmMuY3JlYXRlRWxlbWVudChhKTphPWMuY3JlYXRlRWxlbWVudE5TKGQsYSk7cmV0dXJuIGF9ZnVuY3Rpb24gYmcoYSxiKXtyZXR1cm4oOT09PWIubm9kZVR5cGU/YjpiLm93bmVyRG9jdW1lbnQpLmNyZWF0ZVRleHROb2RlKGEpfVxuZnVuY3Rpb24gY2coYSxiLGMsZCl7dmFyIGU9WWYoYixjKTtzd2l0Y2goYil7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpXKFwidG9wTG9hZFwiLFwibG9hZFwiLGEpO3ZhciBmPWM7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGYgaW4gZ2UpZ2UuaGFzT3duUHJvcGVydHkoZikmJlcoZixnZVtmXSxhKTtmPWM7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOlcoXCJ0b3BFcnJvclwiLFwiZXJyb3JcIixhKTtmPWM7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6VyhcInRvcEVycm9yXCIsXCJlcnJvclwiLGEpO1coXCJ0b3BMb2FkXCIsXCJsb2FkXCIsYSk7Zj1jO2JyZWFrO2Nhc2UgXCJmb3JtXCI6VyhcInRvcFJlc2V0XCIsXCJyZXNldFwiLGEpO1coXCJ0b3BTdWJtaXRcIixcInN1Ym1pdFwiLGEpO2Y9YzticmVhaztjYXNlIFwiZGV0YWlsc1wiOlcoXCJ0b3BUb2dnbGVcIixcInRvZ2dsZVwiLGEpO2Y9YzticmVhaztjYXNlIFwiaW5wdXRcIjpXYyhhLGMpO2Y9VmMoYSxjKTtXKFwidG9wSW52YWxpZFwiLFxuXCJpbnZhbGlkXCIsYSk7JGYoZCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpmPUdmKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOklmKGEsYyk7Zj1BKHt9LGMse3ZhbHVlOnZvaWQgMH0pO1coXCJ0b3BJbnZhbGlkXCIsXCJpbnZhbGlkXCIsYSk7JGYoZCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOktmKGEsYyk7Zj1KZihhLGMpO1coXCJ0b3BJbnZhbGlkXCIsXCJpbnZhbGlkXCIsYSk7JGYoZCxcIm9uQ2hhbmdlXCIpO2JyZWFrO2RlZmF1bHQ6Zj1jfVhmKGIsZixaZik7dmFyIGg9ZixnO2ZvcihnIGluIGgpaWYoaC5oYXNPd25Qcm9wZXJ0eShnKSl7dmFyIGs9aFtnXTtcInN0eWxlXCI9PT1nP1ZmKGEsayxaZik6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Zz8oaz1rP2suX19odG1sOnZvaWQgMCxudWxsIT1rJiZSZihhLGspKTpcImNoaWxkcmVuXCI9PT1nP1wic3RyaW5nXCI9PT10eXBlb2Ygaz8oXCJ0ZXh0YXJlYVwiIT09Ynx8XCJcIiE9PWspJiZTZihhLGspOlwibnVtYmVyXCI9PT10eXBlb2YgayYmXG5TZihhLFwiXCIrayk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWcmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1nJiZcImF1dG9Gb2N1c1wiIT09ZyYmKHVhLmhhc093blByb3BlcnR5KGcpP251bGwhPWsmJiRmKGQsZyk6bnVsbCE9ayYmVWMoYSxnLGssZSkpfXN3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpsYyhhKTthZChhLGMpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmxjKGEpO01mKGEsYyk7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOm51bGwhPWMudmFsdWUmJmEuc2V0QXR0cmlidXRlKFwidmFsdWVcIixjLnZhbHVlKTticmVhaztjYXNlIFwic2VsZWN0XCI6YS5tdWx0aXBsZT0hIWMubXVsdGlwbGU7Yj1jLnZhbHVlO251bGwhPWI/SGYoYSwhIWMubXVsdGlwbGUsYiwhMSk6bnVsbCE9Yy5kZWZhdWx0VmFsdWUmJkhmKGEsISFjLm11bHRpcGxlLGMuZGVmYXVsdFZhbHVlLCEwKTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLm9uQ2xpY2smJihhLm9uY2xpY2s9Qyl9fVxuZnVuY3Rpb24gZGcoYSxiLGMsZCxlKXt2YXIgZj1udWxsO3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpjPVZjKGEsYyk7ZD1WYyhhLGQpO2Y9W107YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmM9R2YoYSxjKTtkPUdmKGEsZCk7Zj1bXTticmVhaztjYXNlIFwic2VsZWN0XCI6Yz1BKHt9LGMse3ZhbHVlOnZvaWQgMH0pO2Q9QSh7fSxkLHt2YWx1ZTp2b2lkIDB9KTtmPVtdO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmM9SmYoYSxjKTtkPUpmKGEsZCk7Zj1bXTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjLm9uQ2xpY2smJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLm9uQ2xpY2smJihhLm9uY2xpY2s9Qyl9WGYoYixkLFpmKTtiPWE9dm9pZCAwO3ZhciBoPW51bGw7Zm9yKGEgaW4gYylpZighZC5oYXNPd25Qcm9wZXJ0eShhKSYmYy5oYXNPd25Qcm9wZXJ0eShhKSYmbnVsbCE9Y1thXSlpZihcInN0eWxlXCI9PT1hKXt2YXIgZz1jW2FdO2ZvcihiIGluIGcpZy5oYXNPd25Qcm9wZXJ0eShiKSYmKGh8fFxuKGg9e30pLGhbYl09XCJcIil9ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIiE9PWEmJlwiY2hpbGRyZW5cIiE9PWEmJlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1hJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09YSYmXCJhdXRvRm9jdXNcIiE9PWEmJih1YS5oYXNPd25Qcm9wZXJ0eShhKT9mfHwoZj1bXSk6KGY9Znx8W10pLnB1c2goYSxudWxsKSk7Zm9yKGEgaW4gZCl7dmFyIGs9ZFthXTtnPW51bGwhPWM/Y1thXTp2b2lkIDA7aWYoZC5oYXNPd25Qcm9wZXJ0eShhKSYmayE9PWcmJihudWxsIT1rfHxudWxsIT1nKSlpZihcInN0eWxlXCI9PT1hKWlmKGcpe2ZvcihiIGluIGcpIWcuaGFzT3duUHJvcGVydHkoYil8fGsmJmsuaGFzT3duUHJvcGVydHkoYil8fChofHwoaD17fSksaFtiXT1cIlwiKTtmb3IoYiBpbiBrKWsuaGFzT3duUHJvcGVydHkoYikmJmdbYl0hPT1rW2JdJiYoaHx8KGg9e30pLGhbYl09a1tiXSl9ZWxzZSBofHwoZnx8KGY9W10pLGYucHVzaChhLGgpKSxcbmg9aztlbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09YT8oaz1rP2suX19odG1sOnZvaWQgMCxnPWc/Zy5fX2h0bWw6dm9pZCAwLG51bGwhPWsmJmchPT1rJiYoZj1mfHxbXSkucHVzaChhLFwiXCIraykpOlwiY2hpbGRyZW5cIj09PWE/Zz09PWt8fFwic3RyaW5nXCIhPT10eXBlb2YgayYmXCJudW1iZXJcIiE9PXR5cGVvZiBrfHwoZj1mfHxbXSkucHVzaChhLFwiXCIrayk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWEmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1hJiYodWEuaGFzT3duUHJvcGVydHkoYSk/KG51bGwhPWsmJiRmKGUsYSksZnx8Zz09PWt8fChmPVtdKSk6KGY9Znx8W10pLnB1c2goYSxrKSl9aCYmKGY9Znx8W10pLnB1c2goXCJzdHlsZVwiLGgpO3JldHVybiBmfVxuZnVuY3Rpb24gZWcoYSxiLGMsZCxlKXtcImlucHV0XCI9PT1jJiZcInJhZGlvXCI9PT1lLnR5cGUmJm51bGwhPWUubmFtZSYmWWMoYSxlKTtZZihjLGQpO2Q9WWYoYyxlKTtmb3IodmFyIGY9MDtmPGIubGVuZ3RoO2YrPTIpe3ZhciBoPWJbZl0sZz1iW2YrMV07XCJzdHlsZVwiPT09aD9WZihhLGcsWmYpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWg/UmYoYSxnKTpcImNoaWxkcmVuXCI9PT1oP1NmKGEsZyk6VWMoYSxoLGcsZCl9c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOlpjKGEsZSk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6TGYoYSxlKTticmVhaztjYXNlIFwic2VsZWN0XCI6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZT12b2lkIDAsYj1hLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGUsYS5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlPSEhZS5tdWx0aXBsZSxjPWUudmFsdWUsbnVsbCE9Yz9IZihhLCEhZS5tdWx0aXBsZSxjLCExKTpiIT09ISFlLm11bHRpcGxlJiYobnVsbCE9ZS5kZWZhdWx0VmFsdWU/XG5IZihhLCEhZS5tdWx0aXBsZSxlLmRlZmF1bHRWYWx1ZSwhMCk6SGYoYSwhIWUubXVsdGlwbGUsZS5tdWx0aXBsZT9bXTpcIlwiLCExKSl9fVxuZnVuY3Rpb24gZmcoYSxiLGMsZCxlKXtzd2l0Y2goYil7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpXKFwidG9wTG9hZFwiLFwibG9hZFwiLGEpO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcih2YXIgZiBpbiBnZSlnZS5oYXNPd25Qcm9wZXJ0eShmKSYmVyhmLGdlW2ZdLGEpO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpXKFwidG9wRXJyb3JcIixcImVycm9yXCIsYSk7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6VyhcInRvcEVycm9yXCIsXCJlcnJvclwiLGEpO1coXCJ0b3BMb2FkXCIsXCJsb2FkXCIsYSk7YnJlYWs7Y2FzZSBcImZvcm1cIjpXKFwidG9wUmVzZXRcIixcInJlc2V0XCIsYSk7VyhcInRvcFN1Ym1pdFwiLFwic3VibWl0XCIsYSk7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpXKFwidG9wVG9nZ2xlXCIsXCJ0b2dnbGVcIixhKTticmVhaztjYXNlIFwiaW5wdXRcIjpXYyhhLGMpO1coXCJ0b3BJbnZhbGlkXCIsXCJpbnZhbGlkXCIsYSk7JGYoZSxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpJZihhLFxuYyk7VyhcInRvcEludmFsaWRcIixcImludmFsaWRcIixhKTskZihlLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6S2YoYSxjKSxXKFwidG9wSW52YWxpZFwiLFwiaW52YWxpZFwiLGEpLCRmKGUsXCJvbkNoYW5nZVwiKX1YZihiLGMsWmYpO2Q9bnVsbDtmb3IodmFyIGggaW4gYyljLmhhc093blByb3BlcnR5KGgpJiYoZj1jW2hdLFwiY2hpbGRyZW5cIj09PWg/XCJzdHJpbmdcIj09PXR5cGVvZiBmP2EudGV4dENvbnRlbnQhPT1mJiYoZD1bXCJjaGlsZHJlblwiLGZdKTpcIm51bWJlclwiPT09dHlwZW9mIGYmJmEudGV4dENvbnRlbnQhPT1cIlwiK2YmJihkPVtcImNoaWxkcmVuXCIsXCJcIitmXSk6dWEuaGFzT3duUHJvcGVydHkoaCkmJm51bGwhPWYmJiRmKGUsaCkpO3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpsYyhhKTthZChhLGMpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmxjKGEpO01mKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJvcHRpb25cIjpicmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLm9uQ2xpY2smJlxuKGEub25jbGljaz1DKX1yZXR1cm4gZH1mdW5jdGlvbiBuZyhhLGIpe3JldHVybiBhLm5vZGVWYWx1ZSE9PWJ9XG52YXIgb2c9T2JqZWN0LmZyZWV6ZSh7Y3JlYXRlRWxlbWVudDphZyxjcmVhdGVUZXh0Tm9kZTpiZyxzZXRJbml0aWFsUHJvcGVydGllczpjZyxkaWZmUHJvcGVydGllczpkZyx1cGRhdGVQcm9wZXJ0aWVzOmVnLGRpZmZIeWRyYXRlZFByb3BlcnRpZXM6ZmcsZGlmZkh5ZHJhdGVkVGV4dDpuZyx3YXJuRm9yVW5tYXRjaGVkVGV4dDpmdW5jdGlvbigpe30sd2FybkZvckRlbGV0ZWRIeWRyYXRhYmxlRWxlbWVudDpmdW5jdGlvbigpe30sd2FybkZvckRlbGV0ZWRIeWRyYXRhYmxlVGV4dDpmdW5jdGlvbigpe30sd2FybkZvckluc2VydGVkSHlkcmF0ZWRFbGVtZW50OmZ1bmN0aW9uKCl7fSx3YXJuRm9ySW5zZXJ0ZWRIeWRyYXRlZFRleHQ6ZnVuY3Rpb24oKXt9LHJlc3RvcmVDb250cm9sbGVkU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpaYyhhLGMpO2I9Yy5uYW1lO2lmKFwicmFkaW9cIj09PWMudHlwZSYmbnVsbCE9Yil7Zm9yKGM9YTtjLnBhcmVudE5vZGU7KWM9XG5jLnBhcmVudE5vZGU7Yz1jLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFtuYW1lXFx4M2RcIitKU09OLnN0cmluZ2lmeShcIlwiK2IpKyddW3R5cGVcXHgzZFwicmFkaW9cIl0nKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKXt2YXIgZD1jW2JdO2lmKGQhPT1hJiZkLmZvcm09PT1hLmZvcm0pe3ZhciBlPVhhKGQpO2U/dm9pZCAwOkQoXCI5MFwiKTttYyhkKTtaYyhkLGUpfX19YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6TGYoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLnZhbHVlLG51bGwhPWImJkhmKGEsISFjLm11bHRpcGxlLGIsITEpfX19KTtUYi5pbmplY3RGaWJlckNvbnRyb2xsZWRIb3N0Q29tcG9uZW50KG9nKTt2YXIgcGc9bnVsbCxxZz1udWxsO1xuZnVuY3Rpb24gcmcoYSl7dGhpcy5fZXhwaXJhdGlvblRpbWU9WC5jb21wdXRlVW5pcXVlQXN5bmNFeHBpcmF0aW9uKCk7dGhpcy5fcm9vdD1hO3RoaXMuX2NhbGxiYWNrcz10aGlzLl9uZXh0PW51bGw7dGhpcy5faGFzQ2hpbGRyZW49dGhpcy5fZGlkQ29tcGxldGU9ITE7dGhpcy5fY2hpbGRyZW49bnVsbDt0aGlzLl9kZWZlcj0hMH1yZy5wcm90b3R5cGUucmVuZGVyPWZ1bmN0aW9uKGEpe3RoaXMuX2RlZmVyP3ZvaWQgMDpEKFwiMjUwXCIpO3RoaXMuX2hhc0NoaWxkcmVuPSEwO3RoaXMuX2NoaWxkcmVuPWE7dmFyIGI9dGhpcy5fcm9vdC5faW50ZXJuYWxSb290LGM9dGhpcy5fZXhwaXJhdGlvblRpbWUsZD1uZXcgc2c7WC51cGRhdGVDb250YWluZXJBdEV4cGlyYXRpb25UaW1lKGEsYixudWxsLGMsZC5fb25Db21taXQpO3JldHVybiBkfTtcbnJnLnByb3RvdHlwZS50aGVuPWZ1bmN0aW9uKGEpe2lmKHRoaXMuX2RpZENvbXBsZXRlKWEoKTtlbHNle3ZhciBiPXRoaXMuX2NhbGxiYWNrcztudWxsPT09YiYmKGI9dGhpcy5fY2FsbGJhY2tzPVtdKTtiLnB1c2goYSl9fTtcbnJnLnByb3RvdHlwZS5jb21taXQ9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLl9yb290Ll9pbnRlcm5hbFJvb3QsYj1hLmZpcnN0QmF0Y2g7dGhpcy5fZGVmZXImJm51bGwhPT1iP3ZvaWQgMDpEKFwiMjUxXCIpO2lmKHRoaXMuX2hhc0NoaWxkcmVuKXt2YXIgYz10aGlzLl9leHBpcmF0aW9uVGltZTtpZihiIT09dGhpcyl7dGhpcy5faGFzQ2hpbGRyZW4mJihjPXRoaXMuX2V4cGlyYXRpb25UaW1lPWIuX2V4cGlyYXRpb25UaW1lLHRoaXMucmVuZGVyKHRoaXMuX2NoaWxkcmVuKSk7Zm9yKHZhciBkPW51bGwsZT1iO2UhPT10aGlzOylkPWUsZT1lLl9uZXh0O251bGw9PT1kP0QoXCIyNTFcIik6dm9pZCAwO2QuX25leHQ9ZS5fbmV4dDt0aGlzLl9uZXh0PWI7YS5maXJzdEJhdGNoPXRoaXN9dGhpcy5fZGVmZXI9ITE7WC5mbHVzaFJvb3QoYSxjKTtiPXRoaXMuX25leHQ7dGhpcy5fbmV4dD1udWxsO2I9YS5maXJzdEJhdGNoPWI7bnVsbCE9PWImJmIuX2hhc0NoaWxkcmVuJiZiLnJlbmRlcihiLl9jaGlsZHJlbil9ZWxzZSB0aGlzLl9uZXh0PVxubnVsbCx0aGlzLl9kZWZlcj0hMX07cmcucHJvdG90eXBlLl9vbkNvbXBsZXRlPWZ1bmN0aW9uKCl7aWYoIXRoaXMuX2RpZENvbXBsZXRlKXt0aGlzLl9kaWRDb21wbGV0ZT0hMDt2YXIgYT10aGlzLl9jYWxsYmFja3M7aWYobnVsbCE9PWEpZm9yKHZhciBiPTA7YjxhLmxlbmd0aDtiKyspKDAsYVtiXSkoKX19O2Z1bmN0aW9uIHNnKCl7dGhpcy5fY2FsbGJhY2tzPW51bGw7dGhpcy5fZGlkQ29tbWl0PSExO3RoaXMuX29uQ29tbWl0PXRoaXMuX29uQ29tbWl0LmJpbmQodGhpcyl9c2cucHJvdG90eXBlLnRoZW49ZnVuY3Rpb24oYSl7aWYodGhpcy5fZGlkQ29tbWl0KWEoKTtlbHNle3ZhciBiPXRoaXMuX2NhbGxiYWNrcztudWxsPT09YiYmKGI9dGhpcy5fY2FsbGJhY2tzPVtdKTtiLnB1c2goYSl9fTtcbnNnLnByb3RvdHlwZS5fb25Db21taXQ9ZnVuY3Rpb24oKXtpZighdGhpcy5fZGlkQ29tbWl0KXt0aGlzLl9kaWRDb21taXQ9ITA7dmFyIGE9dGhpcy5fY2FsbGJhY2tzO2lmKG51bGwhPT1hKWZvcih2YXIgYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgYz1hW2JdO1wiZnVuY3Rpb25cIiE9PXR5cGVvZiBjP0QoXCIxOTFcIixjKTp2b2lkIDA7YygpfX19O2Z1bmN0aW9uIHRnKGEsYixjKXt0aGlzLl9pbnRlcm5hbFJvb3Q9WC5jcmVhdGVDb250YWluZXIoYSxiLGMpfXRnLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzLl9pbnRlcm5hbFJvb3QsZD1uZXcgc2c7Yj12b2lkIDA9PT1iP251bGw6YjtudWxsIT09YiYmZC50aGVuKGIpO1gudXBkYXRlQ29udGFpbmVyKGEsYyxudWxsLGQuX29uQ29tbWl0KTtyZXR1cm4gZH07XG50Zy5wcm90b3R5cGUudW5tb3VudD1mdW5jdGlvbihhKXt2YXIgYj10aGlzLl9pbnRlcm5hbFJvb3QsYz1uZXcgc2c7YT12b2lkIDA9PT1hP251bGw6YTtudWxsIT09YSYmYy50aGVuKGEpO1gudXBkYXRlQ29udGFpbmVyKG51bGwsYixudWxsLGMuX29uQ29tbWl0KTtyZXR1cm4gY307dGcucHJvdG90eXBlLmxlZ2FjeV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcj1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9dGhpcy5faW50ZXJuYWxSb290LGU9bmV3IHNnO2M9dm9pZCAwPT09Yz9udWxsOmM7bnVsbCE9PWMmJmUudGhlbihjKTtYLnVwZGF0ZUNvbnRhaW5lcihiLGQsYSxlLl9vbkNvbW1pdCk7cmV0dXJuIGV9O1xudGcucHJvdG90eXBlLmNyZWF0ZUJhdGNoPWZ1bmN0aW9uKCl7dmFyIGE9bmV3IHJnKHRoaXMpLGI9YS5fZXhwaXJhdGlvblRpbWUsYz10aGlzLl9pbnRlcm5hbFJvb3QsZD1jLmZpcnN0QmF0Y2g7aWYobnVsbD09PWQpYy5maXJzdEJhdGNoPWEsYS5fbmV4dD1udWxsO2Vsc2V7Zm9yKGM9bnVsbDtudWxsIT09ZCYmZC5fZXhwaXJhdGlvblRpbWU8PWI7KWM9ZCxkPWQuX25leHQ7YS5fbmV4dD1kO251bGwhPT1jJiYoYy5fbmV4dD1hKX1yZXR1cm4gYX07ZnVuY3Rpb24gdWcoYSl7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGUmJjkhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGUmJig4IT09YS5ub2RlVHlwZXx8XCIgcmVhY3QtbW91bnQtcG9pbnQtdW5zdGFibGUgXCIhPT1hLm5vZGVWYWx1ZSkpfVxuZnVuY3Rpb24gdmcoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjpyZXR1cm4hIWIuYXV0b0ZvY3VzfXJldHVybiExfVxudmFyIFg9cGYoe2dldFJvb3RIb3N0Q29udGV4dDpmdW5jdGlvbihhKXt2YXIgYj1hLm5vZGVUeXBlO3N3aXRjaChiKXtjYXNlIDk6Y2FzZSAxMTphPShhPWEuZG9jdW1lbnRFbGVtZW50KT9hLm5hbWVzcGFjZVVSSTpQZihudWxsLFwiXCIpO2JyZWFrO2RlZmF1bHQ6Yj04PT09Yj9hLnBhcmVudE5vZGU6YSxhPWIubmFtZXNwYWNlVVJJfHxudWxsLGI9Yi50YWdOYW1lLGE9UGYoYSxiKX1yZXR1cm4gYX0sZ2V0Q2hpbGRIb3N0Q29udGV4dDpmdW5jdGlvbihhLGIpe3JldHVybiBQZihhLGIpfSxnZXRQdWJsaWNJbnN0YW5jZTpmdW5jdGlvbihhKXtyZXR1cm4gYX0scHJlcGFyZUZvckNvbW1pdDpmdW5jdGlvbigpe3BnPVZkO3ZhciBhPWZhKCk7aWYobmUoYSkpe2lmKFwic2VsZWN0aW9uU3RhcnRcImluIGEpdmFyIGI9e3N0YXJ0OmEuc2VsZWN0aW9uU3RhcnQsZW5kOmEuc2VsZWN0aW9uRW5kfTtlbHNlIGE6e3ZhciBjPXdpbmRvdy5nZXRTZWxlY3Rpb24mJndpbmRvdy5nZXRTZWxlY3Rpb24oKTtcbmlmKGMmJjAhPT1jLnJhbmdlQ291bnQpe2I9Yy5hbmNob3JOb2RlO3ZhciBkPWMuYW5jaG9yT2Zmc2V0LGU9Yy5mb2N1c05vZGU7Yz1jLmZvY3VzT2Zmc2V0O3RyeXtiLm5vZGVUeXBlLGUubm9kZVR5cGV9Y2F0Y2goQil7Yj1udWxsO2JyZWFrIGF9dmFyIGY9MCxoPS0xLGc9LTEsaz0wLHY9MCxsPWEscD1udWxsO2I6Zm9yKDs7KXtmb3IodmFyIHo7Oyl7bCE9PWJ8fDAhPT1kJiYzIT09bC5ub2RlVHlwZXx8KGg9ZitkKTtsIT09ZXx8MCE9PWMmJjMhPT1sLm5vZGVUeXBlfHwoZz1mK2MpOzM9PT1sLm5vZGVUeXBlJiYoZis9bC5ub2RlVmFsdWUubGVuZ3RoKTtpZihudWxsPT09KHo9bC5maXJzdENoaWxkKSlicmVhaztwPWw7bD16fWZvcig7Oyl7aWYobD09PWEpYnJlYWsgYjtwPT09YiYmKytrPT09ZCYmKGg9Zik7cD09PWUmJisrdj09PWMmJihnPWYpO2lmKG51bGwhPT0oej1sLm5leHRTaWJsaW5nKSlicmVhaztsPXA7cD1sLnBhcmVudE5vZGV9bD16fWI9LTE9PT1ofHwtMT09PWc/bnVsbDpcbntzdGFydDpoLGVuZDpnfX1lbHNlIGI9bnVsbH1iPWJ8fHtzdGFydDowLGVuZDowfX1lbHNlIGI9bnVsbDtxZz17Zm9jdXNlZEVsZW06YSxzZWxlY3Rpb25SYW5nZTpifTtXZCghMSl9LHJlc2V0QWZ0ZXJDb21taXQ6ZnVuY3Rpb24oKXt2YXIgYT1xZyxiPWZhKCksYz1hLmZvY3VzZWRFbGVtLGQ9YS5zZWxlY3Rpb25SYW5nZTtpZihiIT09YyYmamEoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LGMpKXtpZihuZShjKSlpZihiPWQuc3RhcnQsYT1kLmVuZCx2b2lkIDA9PT1hJiYoYT1iKSxcInNlbGVjdGlvblN0YXJ0XCJpbiBjKWMuc2VsZWN0aW9uU3RhcnQ9YixjLnNlbGVjdGlvbkVuZD1NYXRoLm1pbihhLGMudmFsdWUubGVuZ3RoKTtlbHNlIGlmKHdpbmRvdy5nZXRTZWxlY3Rpb24pe2I9d2luZG93LmdldFNlbGVjdGlvbigpO3ZhciBlPWNbbWIoKV0ubGVuZ3RoO2E9TWF0aC5taW4oZC5zdGFydCxlKTtkPXZvaWQgMD09PWQuZW5kP2E6TWF0aC5taW4oZC5lbmQsZSk7IWIuZXh0ZW5kJiZhPlxuZCYmKGU9ZCxkPWEsYT1lKTtlPW1lKGMsYSk7dmFyIGY9bWUoYyxkKTtpZihlJiZmJiYoMSE9PWIucmFuZ2VDb3VudHx8Yi5hbmNob3JOb2RlIT09ZS5ub2RlfHxiLmFuY2hvck9mZnNldCE9PWUub2Zmc2V0fHxiLmZvY3VzTm9kZSE9PWYubm9kZXx8Yi5mb2N1c09mZnNldCE9PWYub2Zmc2V0KSl7dmFyIGg9ZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTtoLnNldFN0YXJ0KGUubm9kZSxlLm9mZnNldCk7Yi5yZW1vdmVBbGxSYW5nZXMoKTthPmQ/KGIuYWRkUmFuZ2UoaCksYi5leHRlbmQoZi5ub2RlLGYub2Zmc2V0KSk6KGguc2V0RW5kKGYubm9kZSxmLm9mZnNldCksYi5hZGRSYW5nZShoKSl9fWI9W107Zm9yKGE9YzthPWEucGFyZW50Tm9kZTspMT09PWEubm9kZVR5cGUmJmIucHVzaCh7ZWxlbWVudDphLGxlZnQ6YS5zY3JvbGxMZWZ0LHRvcDphLnNjcm9sbFRvcH0pO2MuZm9jdXMoKTtmb3IoYz0wO2M8Yi5sZW5ndGg7YysrKWE9YltjXSxhLmVsZW1lbnQuc2Nyb2xsTGVmdD1hLmxlZnQsXG5hLmVsZW1lbnQuc2Nyb2xsVG9wPWEudG9wfXFnPW51bGw7V2QocGcpO3BnPW51bGx9LGNyZWF0ZUluc3RhbmNlOmZ1bmN0aW9uKGEsYixjLGQsZSl7YT1hZyhhLGIsYyxkKTthW0ZdPWU7YVtUYV09YjtyZXR1cm4gYX0sYXBwZW5kSW5pdGlhbENoaWxkOmZ1bmN0aW9uKGEsYil7YS5hcHBlbmRDaGlsZChiKX0sZmluYWxpemVJbml0aWFsQ2hpbGRyZW46ZnVuY3Rpb24oYSxiLGMsZCl7Y2coYSxiLGMsZCk7cmV0dXJuIHZnKGIsYyl9LHByZXBhcmVVcGRhdGU6ZnVuY3Rpb24oYSxiLGMsZCxlKXtyZXR1cm4gZGcoYSxiLGMsZCxlKX0sc2hvdWxkU2V0VGV4dENvbnRlbnQ6ZnVuY3Rpb24oYSxiKXtyZXR1cm5cInRleHRhcmVhXCI9PT1hfHxcInN0cmluZ1wiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwibnVtYmVyXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJvYmplY3RcIj09PXR5cGVvZiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT09Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmXCJzdHJpbmdcIj09PVxudHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwuX19odG1sfSxzaG91bGREZXByaW9yaXRpemVTdWJ0cmVlOmZ1bmN0aW9uKGEsYil7cmV0dXJuISFiLmhpZGRlbn0sY3JlYXRlVGV4dEluc3RhbmNlOmZ1bmN0aW9uKGEsYixjLGQpe2E9YmcoYSxiKTthW0ZdPWQ7cmV0dXJuIGF9LG5vdzpzZixtdXRhdGlvbjp7Y29tbWl0TW91bnQ6ZnVuY3Rpb24oYSxiLGMpe3ZnKGIsYykmJmEuZm9jdXMoKX0sY29tbWl0VXBkYXRlOmZ1bmN0aW9uKGEsYixjLGQsZSl7YVtUYV09ZTtlZyhhLGIsYyxkLGUpfSxyZXNldFRleHRDb250ZW50OmZ1bmN0aW9uKGEpe1NmKGEsXCJcIil9LGNvbW1pdFRleHRVcGRhdGU6ZnVuY3Rpb24oYSxiLGMpe2Eubm9kZVZhbHVlPWN9LGFwcGVuZENoaWxkOmZ1bmN0aW9uKGEsYil7YS5hcHBlbmRDaGlsZChiKX0sYXBwZW5kQ2hpbGRUb0NvbnRhaW5lcjpmdW5jdGlvbihhLGIpezg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYixhKTphLmFwcGVuZENoaWxkKGIpfSxcbmluc2VydEJlZm9yZTpmdW5jdGlvbihhLGIsYyl7YS5pbnNlcnRCZWZvcmUoYixjKX0saW5zZXJ0SW5Db250YWluZXJCZWZvcmU6ZnVuY3Rpb24oYSxiLGMpezg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYixjKTphLmluc2VydEJlZm9yZShiLGMpfSxyZW1vdmVDaGlsZDpmdW5jdGlvbihhLGIpe2EucmVtb3ZlQ2hpbGQoYil9LHJlbW92ZUNoaWxkRnJvbUNvbnRhaW5lcjpmdW5jdGlvbihhLGIpezg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChiKTphLnJlbW92ZUNoaWxkKGIpfX0saHlkcmF0aW9uOntjYW5IeWRyYXRlSW5zdGFuY2U6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gMSE9PWEubm9kZVR5cGV8fGIudG9Mb3dlckNhc2UoKSE9PWEubm9kZU5hbWUudG9Mb3dlckNhc2UoKT9udWxsOmF9LGNhbkh5ZHJhdGVUZXh0SW5zdGFuY2U6ZnVuY3Rpb24oYSxiKXtyZXR1cm5cIlwiPT09Ynx8MyE9PWEubm9kZVR5cGU/bnVsbDphfSxnZXROZXh0SHlkcmF0YWJsZVNpYmxpbmc6ZnVuY3Rpb24oYSl7Zm9yKGE9XG5hLm5leHRTaWJsaW5nO2EmJjEhPT1hLm5vZGVUeXBlJiYzIT09YS5ub2RlVHlwZTspYT1hLm5leHRTaWJsaW5nO3JldHVybiBhfSxnZXRGaXJzdEh5ZHJhdGFibGVDaGlsZDpmdW5jdGlvbihhKXtmb3IoYT1hLmZpcnN0Q2hpbGQ7YSYmMSE9PWEubm9kZVR5cGUmJjMhPT1hLm5vZGVUeXBlOylhPWEubmV4dFNpYmxpbmc7cmV0dXJuIGF9LGh5ZHJhdGVJbnN0YW5jZTpmdW5jdGlvbihhLGIsYyxkLGUsZil7YVtGXT1mO2FbVGFdPWM7cmV0dXJuIGZnKGEsYixjLGUsZCl9LGh5ZHJhdGVUZXh0SW5zdGFuY2U6ZnVuY3Rpb24oYSxiLGMpe2FbRl09YztyZXR1cm4gbmcoYSxiKX0sZGlkTm90TWF0Y2hIeWRyYXRlZENvbnRhaW5lclRleHRJbnN0YW5jZTpmdW5jdGlvbigpe30sZGlkTm90TWF0Y2hIeWRyYXRlZFRleHRJbnN0YW5jZTpmdW5jdGlvbigpe30sZGlkTm90SHlkcmF0ZUNvbnRhaW5lckluc3RhbmNlOmZ1bmN0aW9uKCl7fSxkaWROb3RIeWRyYXRlSW5zdGFuY2U6ZnVuY3Rpb24oKXt9LFxuZGlkTm90RmluZEh5ZHJhdGFibGVDb250YWluZXJJbnN0YW5jZTpmdW5jdGlvbigpe30sZGlkTm90RmluZEh5ZHJhdGFibGVDb250YWluZXJUZXh0SW5zdGFuY2U6ZnVuY3Rpb24oKXt9LGRpZE5vdEZpbmRIeWRyYXRhYmxlSW5zdGFuY2U6ZnVuY3Rpb24oKXt9LGRpZE5vdEZpbmRIeWRyYXRhYmxlVGV4dEluc3RhbmNlOmZ1bmN0aW9uKCl7fX0sc2NoZWR1bGVEZWZlcnJlZENhbGxiYWNrOnRmLGNhbmNlbERlZmVycmVkQ2FsbGJhY2s6dWZ9KSxDZz1YO2FjPUNnLmJhdGNoZWRVcGRhdGVzO2JjPUNnLmludGVyYWN0aXZlVXBkYXRlcztjYz1DZy5mbHVzaEludGVyYWN0aXZlVXBkYXRlcztcbmZ1bmN0aW9uIERnKGEsYil7Ynx8KGI9YT85PT09YS5ub2RlVHlwZT9hLmRvY3VtZW50RWxlbWVudDphLmZpcnN0Q2hpbGQ6bnVsbCxiPSEoIWJ8fDEhPT1iLm5vZGVUeXBlfHwhYi5oYXNBdHRyaWJ1dGUoXCJkYXRhLXJlYWN0cm9vdFwiKSkpO2lmKCFiKWZvcih2YXIgYztjPWEubGFzdENoaWxkOylhLnJlbW92ZUNoaWxkKGMpO3JldHVybiBuZXcgdGcoYSwhMSxiKX1cbmZ1bmN0aW9uIEVnKGEsYixjLGQsZSl7dWcoYyk/dm9pZCAwOkQoXCIyMDBcIik7dmFyIGY9Yy5fcmVhY3RSb290Q29udGFpbmVyO2lmKGYpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaD1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1YLmdldFB1YmxpY1Jvb3RJbnN0YW5jZShmLl9pbnRlcm5hbFJvb3QpO2guY2FsbChhKX19bnVsbCE9YT9mLmxlZ2FjeV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lcihhLGIsZSk6Zi5yZW5kZXIoYixlKX1lbHNle2Y9Yy5fcmVhY3RSb290Q29udGFpbmVyPURnKGMsZCk7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBnPWU7ZT1mdW5jdGlvbigpe3ZhciBhPVguZ2V0UHVibGljUm9vdEluc3RhbmNlKGYuX2ludGVybmFsUm9vdCk7Zy5jYWxsKGEpfX1YLnVuYmF0Y2hlZFVwZGF0ZXMoZnVuY3Rpb24oKXtudWxsIT1hP2YubGVnYWN5X3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyKGEsYixlKTpmLnJlbmRlcihiLGUpfSl9cmV0dXJuIFguZ2V0UHVibGljUm9vdEluc3RhbmNlKGYuX2ludGVybmFsUm9vdCl9XG5mdW5jdGlvbiBGZyhhLGIpe3ZhciBjPTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsO3VnKGIpP3ZvaWQgMDpEKFwiMjAwXCIpO3JldHVybiBxZihhLGIsbnVsbCxjKX1cbnZhciBHZz17Y3JlYXRlUG9ydGFsOkZnLGZpbmRET01Ob2RlOmZ1bmN0aW9uKGEpe3JldHVybiBudWxsPT1hP251bGw6MT09PWEubm9kZVR5cGU/YTpYLmZpbmRIb3N0SW5zdGFuY2UoYSl9LGh5ZHJhdGU6ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBFZyhudWxsLGEsYiwhMCxjKX0scmVuZGVyOmZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gRWcobnVsbCxhLGIsITEsYyl9LHVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyOmZ1bmN0aW9uKGEsYixjLGQpe251bGw9PWF8fHZvaWQgMD09PWEuX3JlYWN0SW50ZXJuYWxGaWJlcj9EKFwiMzhcIik6dm9pZCAwO3JldHVybiBFZyhhLGIsYywhMSxkKX0sdW5tb3VudENvbXBvbmVudEF0Tm9kZTpmdW5jdGlvbihhKXt1ZyhhKT92b2lkIDA6RChcIjQwXCIpO3JldHVybiBhLl9yZWFjdFJvb3RDb250YWluZXI/KFgudW5iYXRjaGVkVXBkYXRlcyhmdW5jdGlvbigpe0VnKG51bGwsbnVsbCxhLCExLGZ1bmN0aW9uKCl7YS5fcmVhY3RSb290Q29udGFpbmVyPVxubnVsbH0pfSksITApOiExfSx1bnN0YWJsZV9jcmVhdGVQb3J0YWw6ZnVuY3Rpb24oKXtyZXR1cm4gRmcuYXBwbHkodm9pZCAwLGFyZ3VtZW50cyl9LHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzOlguYmF0Y2hlZFVwZGF0ZXMsdW5zdGFibGVfZGVmZXJyZWRVcGRhdGVzOlguZGVmZXJyZWRVcGRhdGVzLGZsdXNoU3luYzpYLmZsdXNoU3luYyx1bnN0YWJsZV9mbHVzaENvbnRyb2xsZWQ6WC5mbHVzaENvbnRyb2xsZWQsX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ6e0V2ZW50UGx1Z2luSHViOlJhLEV2ZW50UGx1Z2luUmVnaXN0cnk6Q2EsRXZlbnRQcm9wYWdhdG9yczprYixSZWFjdENvbnRyb2xsZWRDb21wb25lbnQ6JGIsUmVhY3RET01Db21wb25lbnRUcmVlOmJiLFJlYWN0RE9NRXZlbnRMaXN0ZW5lcjokZH0sdW5zdGFibGVfY3JlYXRlUm9vdDpmdW5jdGlvbihhLGIpe3JldHVybiBuZXcgdGcoYSwhMCxudWxsIT1iJiYhMD09PWIuaHlkcmF0ZSl9fTtcblguaW5qZWN0SW50b0RldlRvb2xzKHtmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTpVYSxidW5kbGVUeXBlOjAsdmVyc2lvbjpcIjE2LjMuMlwiLHJlbmRlcmVyUGFja2FnZU5hbWU6XCJyZWFjdC1kb21cIn0pO3ZhciBIZz1PYmplY3QuZnJlZXplKHtkZWZhdWx0OkdnfSksSWc9SGcmJkdnfHxIZzttb2R1bGUuZXhwb3J0cz1JZ1tcImRlZmF1bHRcIl0/SWdbXCJkZWZhdWx0XCJdOklnO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBjaGVja0RDRSgpIHtcbiAgLyogZ2xvYmFsIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyAqL1xuICBpZiAoXG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyA9PT0gJ3VuZGVmaW5lZCcgfHxcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFICE9PSAnZnVuY3Rpb24nXG4gICkge1xuICAgIHJldHVybjtcbiAgfVxuICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIC8vIFRoaXMgYnJhbmNoIGlzIHVucmVhY2hhYmxlIGJlY2F1c2UgdGhpcyBmdW5jdGlvbiBpcyBvbmx5IGNhbGxlZFxuICAgIC8vIGluIHByb2R1Y3Rpb24sIGJ1dCB0aGUgY29uZGl0aW9uIGlzIHRydWUgb25seSBpbiBkZXZlbG9wbWVudC5cbiAgICAvLyBUaGVyZWZvcmUgaWYgdGhlIGJyYW5jaCBpcyBzdGlsbCBoZXJlLCBkZWFkIGNvZGUgZWxpbWluYXRpb24gd2Fzbid0XG4gICAgLy8gcHJvcGVybHkgYXBwbGllZC5cbiAgICAvLyBEb24ndCBjaGFuZ2UgdGhlIG1lc3NhZ2UuIFJlYWN0IERldlRvb2xzIHJlbGllcyBvbiBpdC4gQWxzbyBtYWtlIHN1cmVcbiAgICAvLyB0aGlzIG1lc3NhZ2UgZG9lc24ndCBvY2N1ciBlbHNld2hlcmUgaW4gdGhpcyBmdW5jdGlvbiwgb3IgaXQgd2lsbCBjYXVzZVxuICAgIC8vIGEgZmFsc2UgcG9zaXRpdmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKCdeX14nKTtcbiAgfVxuICB0cnkge1xuICAgIC8vIFZlcmlmeSB0aGF0IHRoZSBjb2RlIGFib3ZlIGhhcyBiZWVuIGRlYWQgY29kZSBlbGltaW5hdGVkIChEQ0UnZCkuXG4gICAgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fLmNoZWNrRENFKGNoZWNrRENFKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgLy8gRGV2VG9vbHMgc2hvdWxkbid0IGNyYXNoIFJlYWN0LCBubyBtYXR0ZXIgd2hhdC5cbiAgICAvLyBXZSBzaG91bGQgc3RpbGwgcmVwb3J0IGluIGNhc2Ugd2UgYnJlYWsgdGhpcyBjb2RlLlxuICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgfVxufVxuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICAvLyBEQ0UgY2hlY2sgc2hvdWxkIGhhcHBlbiBiZWZvcmUgUmVhY3RET00gYnVuZGxlIGV4ZWN1dGVzIHNvIHRoYXRcbiAgLy8gRGV2VG9vbHMgY2FuIHJlcG9ydCBiYWQgbWluaWZpY2F0aW9uIGR1cmluZyBpbmplY3Rpb24uXG4gIGNoZWNrRENFKCk7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi4zLjJcbiAqIHJlYWN0LnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBtPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLG49cmVxdWlyZShcImZianMvbGliL2ludmFyaWFudFwiKSxwPXJlcXVpcmUoXCJmYmpzL2xpYi9lbXB0eU9iamVjdFwiKSxxPXJlcXVpcmUoXCJmYmpzL2xpYi9lbXB0eUZ1bmN0aW9uXCIpLHI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sW1wiZm9yXCJdLHQ9cj9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLHU9cj9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYsdj1yP1N5bWJvbFtcImZvclwiXShcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LHc9cj9TeW1ib2xbXCJmb3JcIl0oXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCx4PXI/U3ltYm9sW1wiZm9yXCJdKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDkseT1yP1N5bWJvbFtcImZvclwiXShcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsej1yP1N5bWJvbFtcImZvclwiXShcInJlYWN0LmFzeW5jX21vZGVcIik6NjAxMTEsQT1yP1N5bWJvbFtcImZvclwiXShcInJlYWN0LmZvcndhcmRfcmVmXCIpOlxuNjAxMTIsQj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gQyhhKXtmb3IodmFyIGI9YXJndW1lbnRzLmxlbmd0aC0xLGU9XCJodHRwOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50XFx4M2RcIithLGM9MDtjPGI7YysrKWUrPVwiXFx4MjZhcmdzW11cXHgzZFwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbYysxXSk7bighMSxcIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCAlcyBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuIFwiLGUpfXZhciBEPXtpc01vdW50ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oKXt9fTtcbmZ1bmN0aW9uIEUoYSxiLGUpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9cDt0aGlzLnVwZGF0ZXI9ZXx8RH1FLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PXt9O0UucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGEsYil7XCJvYmplY3RcIiE9PXR5cGVvZiBhJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmbnVsbCE9YT9DKFwiODVcIik6dm9pZCAwO3RoaXMudXBkYXRlci5lbnF1ZXVlU2V0U3RhdGUodGhpcyxhLGIsXCJzZXRTdGF0ZVwiKX07RS5wcm90b3R5cGUuZm9yY2VVcGRhdGU9ZnVuY3Rpb24oYSl7dGhpcy51cGRhdGVyLmVucXVldWVGb3JjZVVwZGF0ZSh0aGlzLGEsXCJmb3JjZVVwZGF0ZVwiKX07ZnVuY3Rpb24gRigpe31GLnByb3RvdHlwZT1FLnByb3RvdHlwZTtmdW5jdGlvbiBHKGEsYixlKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPXA7dGhpcy51cGRhdGVyPWV8fER9dmFyIEg9Ry5wcm90b3R5cGU9bmV3IEY7XG5ILmNvbnN0cnVjdG9yPUc7bShILEUucHJvdG90eXBlKTtILmlzUHVyZVJlYWN0Q29tcG9uZW50PSEwO3ZhciBJPXtjdXJyZW50Om51bGx9LEo9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxLPXtrZXk6ITAscmVmOiEwLF9fc2VsZjohMCxfX3NvdXJjZTohMH07XG5mdW5jdGlvbiBMKGEsYixlKXt2YXIgYz12b2lkIDAsZD17fSxnPW51bGwsaD1udWxsO2lmKG51bGwhPWIpZm9yKGMgaW4gdm9pZCAwIT09Yi5yZWYmJihoPWIucmVmKSx2b2lkIDAhPT1iLmtleSYmKGc9XCJcIitiLmtleSksYilKLmNhbGwoYixjKSYmIUsuaGFzT3duUHJvcGVydHkoYykmJihkW2NdPWJbY10pO3ZhciBmPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZilkLmNoaWxkcmVuPWU7ZWxzZSBpZigxPGYpe2Zvcih2YXIgaz1BcnJheShmKSxsPTA7bDxmO2wrKylrW2xdPWFyZ3VtZW50c1tsKzJdO2QuY2hpbGRyZW49a31pZihhJiZhLmRlZmF1bHRQcm9wcylmb3IoYyBpbiBmPWEuZGVmYXVsdFByb3BzLGYpdm9pZCAwPT09ZFtjXSYmKGRbY109ZltjXSk7cmV0dXJueyQkdHlwZW9mOnQsdHlwZTphLGtleTpnLHJlZjpoLHByb3BzOmQsX293bmVyOkkuY3VycmVudH19XG5mdW5jdGlvbiBNKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT10fWZ1bmN0aW9uIGVzY2FwZShhKXt2YXIgYj17XCJcXHgzZFwiOlwiXFx4M2QwXCIsXCI6XCI6XCJcXHgzZDJcIn07cmV0dXJuXCIkXCIrKFwiXCIrYSkucmVwbGFjZSgvWz06XS9nLGZ1bmN0aW9uKGEpe3JldHVybiBiW2FdfSl9dmFyIE49L1xcLysvZyxPPVtdO2Z1bmN0aW9uIFAoYSxiLGUsYyl7aWYoTy5sZW5ndGgpe3ZhciBkPU8ucG9wKCk7ZC5yZXN1bHQ9YTtkLmtleVByZWZpeD1iO2QuZnVuYz1lO2QuY29udGV4dD1jO2QuY291bnQ9MDtyZXR1cm4gZH1yZXR1cm57cmVzdWx0OmEsa2V5UHJlZml4OmIsZnVuYzplLGNvbnRleHQ6Yyxjb3VudDowfX1mdW5jdGlvbiBRKGEpe2EucmVzdWx0PW51bGw7YS5rZXlQcmVmaXg9bnVsbDthLmZ1bmM9bnVsbDthLmNvbnRleHQ9bnVsbDthLmNvdW50PTA7MTA+Ty5sZW5ndGgmJk8ucHVzaChhKX1cbmZ1bmN0aW9uIFIoYSxiLGUsYyl7dmFyIGQ9dHlwZW9mIGE7aWYoXCJ1bmRlZmluZWRcIj09PWR8fFwiYm9vbGVhblwiPT09ZClhPW51bGw7dmFyIGc9ITE7aWYobnVsbD09PWEpZz0hMDtlbHNlIHN3aXRjaChkKXtjYXNlIFwic3RyaW5nXCI6Y2FzZSBcIm51bWJlclwiOmc9ITA7YnJlYWs7Y2FzZSBcIm9iamVjdFwiOnN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIHQ6Y2FzZSB1Omc9ITB9fWlmKGcpcmV0dXJuIGUoYyxhLFwiXCI9PT1iP1wiLlwiK1MoYSwwKTpiKSwxO2c9MDtiPVwiXCI9PT1iP1wiLlwiOmIrXCI6XCI7aWYoQXJyYXkuaXNBcnJheShhKSlmb3IodmFyIGg9MDtoPGEubGVuZ3RoO2grKyl7ZD1hW2hdO3ZhciBmPWIrUyhkLGgpO2crPVIoZCxmLGUsYyl9ZWxzZSBpZihudWxsPT09YXx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhP2Y9bnVsbDooZj1CJiZhW0JdfHxhW1wiQEBpdGVyYXRvclwiXSxmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBmP2Y6bnVsbCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGYpZm9yKGE9Zi5jYWxsKGEpLFxuaD0wOyEoZD1hLm5leHQoKSkuZG9uZTspZD1kLnZhbHVlLGY9YitTKGQsaCsrKSxnKz1SKGQsZixlLGMpO2Vsc2VcIm9iamVjdFwiPT09ZCYmKGU9XCJcIithLEMoXCIzMVwiLFwiW29iamVjdCBPYmplY3RdXCI9PT1lP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYSkuam9pbihcIiwgXCIpK1wifVwiOmUsXCJcIikpO3JldHVybiBnfWZ1bmN0aW9uIFMoYSxiKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZudWxsIT1hLmtleT9lc2NhcGUoYS5rZXkpOmIudG9TdHJpbmcoMzYpfWZ1bmN0aW9uIFQoYSxiKXthLmZ1bmMuY2FsbChhLmNvbnRleHQsYixhLmNvdW50KyspfVxuZnVuY3Rpb24gVShhLGIsZSl7dmFyIGM9YS5yZXN1bHQsZD1hLmtleVByZWZpeDthPWEuZnVuYy5jYWxsKGEuY29udGV4dCxiLGEuY291bnQrKyk7QXJyYXkuaXNBcnJheShhKT9WKGEsYyxlLHEudGhhdFJldHVybnNBcmd1bWVudCk6bnVsbCE9YSYmKE0oYSkmJihiPWQrKCFhLmtleXx8YiYmYi5rZXk9PT1hLmtleT9cIlwiOihcIlwiK2Eua2V5KS5yZXBsYWNlKE4sXCIkXFx4MjYvXCIpK1wiL1wiKStlLGE9eyQkdHlwZW9mOnQsdHlwZTphLnR5cGUsa2V5OmIscmVmOmEucmVmLHByb3BzOmEucHJvcHMsX293bmVyOmEuX293bmVyfSksYy5wdXNoKGEpKX1mdW5jdGlvbiBWKGEsYixlLGMsZCl7dmFyIGc9XCJcIjtudWxsIT1lJiYoZz0oXCJcIitlKS5yZXBsYWNlKE4sXCIkXFx4MjYvXCIpK1wiL1wiKTtiPVAoYixnLGMsZCk7bnVsbD09YXx8UihhLFwiXCIsVSxiKTtRKGIpfVxudmFyIFc9e0NoaWxkcmVuOnttYXA6ZnVuY3Rpb24oYSxiLGUpe2lmKG51bGw9PWEpcmV0dXJuIGE7dmFyIGM9W107VihhLGMsbnVsbCxiLGUpO3JldHVybiBjfSxmb3JFYWNoOmZ1bmN0aW9uKGEsYixlKXtpZihudWxsPT1hKXJldHVybiBhO2I9UChudWxsLG51bGwsYixlKTtudWxsPT1hfHxSKGEsXCJcIixULGIpO1EoYil9LGNvdW50OmZ1bmN0aW9uKGEpe3JldHVybiBudWxsPT1hPzA6UihhLFwiXCIscS50aGF0UmV0dXJuc051bGwsbnVsbCl9LHRvQXJyYXk6ZnVuY3Rpb24oYSl7dmFyIGI9W107VihhLGIsbnVsbCxxLnRoYXRSZXR1cm5zQXJndW1lbnQpO3JldHVybiBifSxvbmx5OmZ1bmN0aW9uKGEpe00oYSk/dm9pZCAwOkMoXCIxNDNcIik7cmV0dXJuIGF9fSxjcmVhdGVSZWY6ZnVuY3Rpb24oKXtyZXR1cm57Y3VycmVudDpudWxsfX0sQ29tcG9uZW50OkUsUHVyZUNvbXBvbmVudDpHLGNyZWF0ZUNvbnRleHQ6ZnVuY3Rpb24oYSxiKXt2b2lkIDA9PT1iJiYoYj1udWxsKTthPXskJHR5cGVvZjp5LFxuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzOmIsX2RlZmF1bHRWYWx1ZTphLF9jdXJyZW50VmFsdWU6YSxfY2hhbmdlZEJpdHM6MCxQcm92aWRlcjpudWxsLENvbnN1bWVyOm51bGx9O2EuUHJvdmlkZXI9eyQkdHlwZW9mOngsX2NvbnRleHQ6YX07cmV0dXJuIGEuQ29uc3VtZXI9YX0sZm9yd2FyZFJlZjpmdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6QSxyZW5kZXI6YX19LEZyYWdtZW50OnYsU3RyaWN0TW9kZTp3LHVuc3RhYmxlX0FzeW5jTW9kZTp6LGNyZWF0ZUVsZW1lbnQ6TCxjbG9uZUVsZW1lbnQ6ZnVuY3Rpb24oYSxiLGUpe251bGw9PT1hfHx2b2lkIDA9PT1hP0MoXCIyNjdcIixhKTp2b2lkIDA7dmFyIGM9dm9pZCAwLGQ9bSh7fSxhLnByb3BzKSxnPWEua2V5LGg9YS5yZWYsZj1hLl9vd25lcjtpZihudWxsIT1iKXt2b2lkIDAhPT1iLnJlZiYmKGg9Yi5yZWYsZj1JLmN1cnJlbnQpO3ZvaWQgMCE9PWIua2V5JiYoZz1cIlwiK2Iua2V5KTt2YXIgaz12b2lkIDA7YS50eXBlJiZhLnR5cGUuZGVmYXVsdFByb3BzJiZcbihrPWEudHlwZS5kZWZhdWx0UHJvcHMpO2ZvcihjIGluIGIpSi5jYWxsKGIsYykmJiFLLmhhc093blByb3BlcnR5KGMpJiYoZFtjXT12b2lkIDA9PT1iW2NdJiZ2b2lkIDAhPT1rP2tbY106YltjXSl9Yz1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWMpZC5jaGlsZHJlbj1lO2Vsc2UgaWYoMTxjKXtrPUFycmF5KGMpO2Zvcih2YXIgbD0wO2w8YztsKyspa1tsXT1hcmd1bWVudHNbbCsyXTtkLmNoaWxkcmVuPWt9cmV0dXJueyQkdHlwZW9mOnQsdHlwZTphLnR5cGUsa2V5OmcscmVmOmgscHJvcHM6ZCxfb3duZXI6Zn19LGNyZWF0ZUZhY3Rvcnk6ZnVuY3Rpb24oYSl7dmFyIGI9TC5iaW5kKG51bGwsYSk7Yi50eXBlPWE7cmV0dXJuIGJ9LGlzVmFsaWRFbGVtZW50Ok0sdmVyc2lvbjpcIjE2LjMuMlwiLF9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEOntSZWFjdEN1cnJlbnRPd25lcjpJLGFzc2lnbjptfX0sWD1PYmplY3QuZnJlZXplKHtkZWZhdWx0Old9KSxcblk9WCYmV3x8WDttb2R1bGUuZXhwb3J0cz1ZW1wiZGVmYXVsdFwiXT9ZW1wiZGVmYXVsdFwiXTpZO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gXCJyZWFjdC1kb21cIjtcblxuaW1wb3J0IExheW91dCBmcm9tIFwiLi9jb21wb25lbnRzL2xheW91dC9sYXlvdXQuY29tcG9uZW50XCI7XG5cbmNvbnN0IGFwcCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdhcHAnKTtcblJlYWN0RE9NLnJlbmRlcig8TGF5b3V0Lz4sIGFwcCk7IiwiLy8gcmVtb3ZlZCBieSBleHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW5cbm1vZHVsZS5leHBvcnRzID0ge1wic2Nyb2xsYWJsZV9tZW51XCI6XCJzb3VyY2VMaXN0X19zY3JvbGxhYmxlX21lbnVfX19jUzRvbFwifTsiLCIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxubW9kdWxlLmV4cG9ydHMgPSB7XCJzaWRlYmFyX2NvbXBvbmVudFwiOlwic2lkZWJhcl9fc2lkZWJhcl9jb21wb25lbnRfX18zeTg0NVwiLFwiYWN0aXZlXCI6XCJzaWRlYmFyX19hY3RpdmVfX19XcVMtQlwifTsiLCIvLyByZW1vdmVkIGJ5IGV4dHJhY3QtdGV4dC13ZWJwYWNrLXBsdWdpblxubW9kdWxlLmV4cG9ydHMgPSB7XCJzcGlubmVyXCI6XCJsb2FkZXJfX3NwaW5uZXJfX18xQlQ4UFwiLFwic2stc3RyZXRjaGRlbGF5XCI6XCJsb2FkZXJfX3NrLXN0cmV0Y2hkZWxheV9fXzNQd3NiXCIsXCJyZWN0MlwiOlwibG9hZGVyX19yZWN0Ml9fXzFORU5CXCIsXCJyZWN0M1wiOlwibG9hZGVyX19yZWN0M19fXzIwaWQ0XCIsXCJyZWN0NFwiOlwibG9hZGVyX19yZWN0NF9fXzFkOEhGXCIsXCJyZWN0NVwiOlwibG9hZGVyX19yZWN0NV9fXzNVT2FkXCJ9OyIsIi8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcIm5ld3NfY2FyZFwiOlwibmV3c0NhcmRfX25ld3NfY2FyZF9fXzNaS1k2XCIsXCJjYXJkLXRpdGxlXCI6XCJuZXdzQ2FyZF9fY2FyZC10aXRsZV9fXzFkaDdxXCJ9OyJdLCJzb3VyY2VSb290IjoiIn0=